// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skf.proto

#include "skf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_skf_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SKF_ECCSIGNATUREBLOB_skf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_skf_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WST_PROTO_BOOL_skf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_skf_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_WST_PROTO_UINT32_skf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_skf_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SKF_BLOCKCIPHERPARAM_skf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_skf_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SKF_ECCCIPHERBLOB_skf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_skf_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SKF_ECCPRIVATEKEYBLOB_skf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_skf_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SKF_ECCPUBLICKEYBLOB_skf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_skf_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SKF_FILEATTRIBUTES_skf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_skf_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SKF_RSAPRIVATEKEYBLOB_skf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_skf_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SKF_RSAPUBLICKEYBLOB_skf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_skf_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SKF_Version_skf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_skf_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SKF_DevInfo_skf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_skf_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_SKF_ENVELOPEDKEYBLOB_skf_2eproto;
namespace com {
namespace westone {
namespace skf {
class WST_PROTO_UINT32DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WST_PROTO_UINT32> _instance;
} _WST_PROTO_UINT32_default_instance_;
class WST_PROTO_BOOLDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WST_PROTO_BOOL> _instance;
} _WST_PROTO_BOOL_default_instance_;
class SKF_VersionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SKF_Version> _instance;
} _SKF_Version_default_instance_;
class SKF_DevInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SKF_DevInfo> _instance;
} _SKF_DevInfo_default_instance_;
class SKF_RSAPUBLICKEYBLOBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SKF_RSAPUBLICKEYBLOB> _instance;
} _SKF_RSAPUBLICKEYBLOB_default_instance_;
class SKF_RSAPRIVATEKEYBLOBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SKF_RSAPRIVATEKEYBLOB> _instance;
} _SKF_RSAPRIVATEKEYBLOB_default_instance_;
class SKF_ECCPUBLICKEYBLOBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SKF_ECCPUBLICKEYBLOB> _instance;
} _SKF_ECCPUBLICKEYBLOB_default_instance_;
class SKF_ECCPRIVATEKEYBLOBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SKF_ECCPRIVATEKEYBLOB> _instance;
} _SKF_ECCPRIVATEKEYBLOB_default_instance_;
class SKF_ECCCIPHERBLOBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SKF_ECCCIPHERBLOB> _instance;
} _SKF_ECCCIPHERBLOB_default_instance_;
class SKF_ECCSIGNATUREBLOBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SKF_ECCSIGNATUREBLOB> _instance;
} _SKF_ECCSIGNATUREBLOB_default_instance_;
class SKF_BLOCKCIPHERPARAMDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SKF_BLOCKCIPHERPARAM> _instance;
} _SKF_BLOCKCIPHERPARAM_default_instance_;
class SKF_ENVELOPEDKEYBLOBDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SKF_ENVELOPEDKEYBLOB> _instance;
} _SKF_ENVELOPEDKEYBLOB_default_instance_;
class SKF_FILEATTRIBUTESDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SKF_FILEATTRIBUTES> _instance;
} _SKF_FILEATTRIBUTES_default_instance_;
class Req_SKF_WaitForDevEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_WaitForDevEvent> _instance;
} _Req_SKF_WaitForDevEvent_default_instance_;
class Rsp_SKF_WaitForDevEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_WaitForDevEvent> _instance;
} _Rsp_SKF_WaitForDevEvent_default_instance_;
class Req_SKF_CancelWaitForDevEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_CancelWaitForDevEvent> _instance;
} _Req_SKF_CancelWaitForDevEvent_default_instance_;
class Rsp_SKF_CancelWaitForDevEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_CancelWaitForDevEvent> _instance;
} _Rsp_SKF_CancelWaitForDevEvent_default_instance_;
class Req_SKF_EnumDevDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_EnumDev> _instance;
} _Req_SKF_EnumDev_default_instance_;
class Rsp_SKF_EnumDevDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_EnumDev> _instance;
} _Rsp_SKF_EnumDev_default_instance_;
class Req_SKF_ConnectDevDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_ConnectDev> _instance;
} _Req_SKF_ConnectDev_default_instance_;
class Rsp_SKF_ConnectDevDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_ConnectDev> _instance;
} _Rsp_SKF_ConnectDev_default_instance_;
class Req_SKF_DisConnectDevDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_DisConnectDev> _instance;
} _Req_SKF_DisConnectDev_default_instance_;
class Rsp_SKF_DisConnectDevDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_DisConnectDev> _instance;
} _Rsp_SKF_DisConnectDev_default_instance_;
class Req_SKF_GetDevStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_GetDevState> _instance;
} _Req_SKF_GetDevState_default_instance_;
class Rsp_SKF_GetDevStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_GetDevState> _instance;
} _Rsp_SKF_GetDevState_default_instance_;
class Req_SKF_SetLabelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_SetLabel> _instance;
} _Req_SKF_SetLabel_default_instance_;
class Rsp_SKF_SetLabelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_SetLabel> _instance;
} _Rsp_SKF_SetLabel_default_instance_;
class Req_SKF_GetDevInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_GetDevInfo> _instance;
} _Req_SKF_GetDevInfo_default_instance_;
class Rsp_SKF_GetDevInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_GetDevInfo> _instance;
} _Rsp_SKF_GetDevInfo_default_instance_;
class Req_SKF_LockDevDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_LockDev> _instance;
} _Req_SKF_LockDev_default_instance_;
class Rsp_SKF_LockDevDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_LockDev> _instance;
} _Rsp_SKF_LockDev_default_instance_;
class Req_SKF_UnlockDevDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_UnlockDev> _instance;
} _Req_SKF_UnlockDev_default_instance_;
class Rsp_SKF_UnlockDevDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_UnlockDev> _instance;
} _Rsp_SKF_UnlockDev_default_instance_;
class Req_SKF_ChangeDevAuthKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_ChangeDevAuthKey> _instance;
} _Req_SKF_ChangeDevAuthKey_default_instance_;
class Rsp_SKF_ChangeDevAuthKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_ChangeDevAuthKey> _instance;
} _Rsp_SKF_ChangeDevAuthKey_default_instance_;
class Req_SKF_DevAuthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_DevAuth> _instance;
} _Req_SKF_DevAuth_default_instance_;
class Rsp_SKF_DevAuthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_DevAuth> _instance;
} _Rsp_SKF_DevAuth_default_instance_;
class Req_SKF_ChangePINDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_ChangePIN> _instance;
} _Req_SKF_ChangePIN_default_instance_;
class Rsp_SKF_ChangePINDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_ChangePIN> _instance;
} _Rsp_SKF_ChangePIN_default_instance_;
class Req_SKF_GetPINInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_GetPINInfo> _instance;
} _Req_SKF_GetPINInfo_default_instance_;
class Rsp_SKF_GetPINInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_GetPINInfo> _instance;
} _Rsp_SKF_GetPINInfo_default_instance_;
class Req_SKF_VerifyPINDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_VerifyPIN> _instance;
} _Req_SKF_VerifyPIN_default_instance_;
class Rsp_SKF_VerifyPINDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_VerifyPIN> _instance;
} _Rsp_SKF_VerifyPIN_default_instance_;
class Req_SKF_UnblockPINDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_UnblockPIN> _instance;
} _Req_SKF_UnblockPIN_default_instance_;
class Rsp_SKF_UnblockPINDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_UnblockPIN> _instance;
} _Rsp_SKF_UnblockPIN_default_instance_;
class Req_SKF_ClearSecureStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_ClearSecureState> _instance;
} _Req_SKF_ClearSecureState_default_instance_;
class Rsp_SKF_ClearSecureStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_ClearSecureState> _instance;
} _Rsp_SKF_ClearSecureState_default_instance_;
class Req_SKF_CreateApplicationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_CreateApplication> _instance;
} _Req_SKF_CreateApplication_default_instance_;
class Rsp_SKF_CreateApplicationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_CreateApplication> _instance;
} _Rsp_SKF_CreateApplication_default_instance_;
class Req_SKF_EnumApplicationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_EnumApplication> _instance;
} _Req_SKF_EnumApplication_default_instance_;
class Rsp_SKF_EnumApplicationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_EnumApplication> _instance;
} _Rsp_SKF_EnumApplication_default_instance_;
class Req_SKF_DeleteApplicationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_DeleteApplication> _instance;
} _Req_SKF_DeleteApplication_default_instance_;
class Rsp_SKF_DeleteApplicationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_DeleteApplication> _instance;
} _Rsp_SKF_DeleteApplication_default_instance_;
class Req_SKF_OpenApplicationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_OpenApplication> _instance;
} _Req_SKF_OpenApplication_default_instance_;
class Rsp_SKF_OpenApplicationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_OpenApplication> _instance;
} _Rsp_SKF_OpenApplication_default_instance_;
class Req_SKF_CloseApplicationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_CloseApplication> _instance;
} _Req_SKF_CloseApplication_default_instance_;
class Rsp_SKF_CloseApplicationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_CloseApplication> _instance;
} _Rsp_SKF_CloseApplication_default_instance_;
class Req_SKF_CreateFileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_CreateFile> _instance;
} _Req_SKF_CreateFile_default_instance_;
class Rsp_SKF_CreateFileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_CreateFile> _instance;
} _Rsp_SKF_CreateFile_default_instance_;
class Req_SKF_DeleteFileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_DeleteFile> _instance;
} _Req_SKF_DeleteFile_default_instance_;
class Rsp_SKF_DeleteFileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_DeleteFile> _instance;
} _Rsp_SKF_DeleteFile_default_instance_;
class Req_SKF_EnumFilesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_EnumFiles> _instance;
} _Req_SKF_EnumFiles_default_instance_;
class Rsp_SKF_EnumFilesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_EnumFiles> _instance;
} _Rsp_SKF_EnumFiles_default_instance_;
class Req_SKF_GetFileInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_GetFileInfo> _instance;
} _Req_SKF_GetFileInfo_default_instance_;
class Rsp_SKF_GetFileInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_GetFileInfo> _instance;
} _Rsp_SKF_GetFileInfo_default_instance_;
class Req_SKF_ReadFileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_ReadFile> _instance;
} _Req_SKF_ReadFile_default_instance_;
class Rsp_SKF_ReadFileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_ReadFile> _instance;
} _Rsp_SKF_ReadFile_default_instance_;
class Req_SKF_WriteFileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_WriteFile> _instance;
} _Req_SKF_WriteFile_default_instance_;
class Rsp_SKF_WriteFileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_WriteFile> _instance;
} _Rsp_SKF_WriteFile_default_instance_;
class Req_SKF_CreateContainerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_CreateContainer> _instance;
} _Req_SKF_CreateContainer_default_instance_;
class Rsp_SKF_CreateContainerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_CreateContainer> _instance;
} _Rsp_SKF_CreateContainer_default_instance_;
class Req_SKF_DeleteContainerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_DeleteContainer> _instance;
} _Req_SKF_DeleteContainer_default_instance_;
class Rsp_SKF_DeleteContainerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_DeleteContainer> _instance;
} _Rsp_SKF_DeleteContainer_default_instance_;
class Req_SKF_OpenContainerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_OpenContainer> _instance;
} _Req_SKF_OpenContainer_default_instance_;
class Rsp_SKF_OpenContainerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_OpenContainer> _instance;
} _Rsp_SKF_OpenContainer_default_instance_;
class Req_SKF_CloseContainerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_CloseContainer> _instance;
} _Req_SKF_CloseContainer_default_instance_;
class Rsp_SKF_CloseContainerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_CloseContainer> _instance;
} _Rsp_SKF_CloseContainer_default_instance_;
class Req_SKF_EnumContainerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_EnumContainer> _instance;
} _Req_SKF_EnumContainer_default_instance_;
class Rsp_SKF_EnumContainerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_EnumContainer> _instance;
} _Rsp_SKF_EnumContainer_default_instance_;
class Req_SKF_GetContainerTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_GetContainerType> _instance;
} _Req_SKF_GetContainerType_default_instance_;
class Rsp_SKF_GetContainerTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_GetContainerType> _instance;
} _Rsp_SKF_GetContainerType_default_instance_;
class Req_SKF_GenRandomDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_GenRandom> _instance;
} _Req_SKF_GenRandom_default_instance_;
class Rsp_SKF_GenRandomDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_GenRandom> _instance;
} _Rsp_SKF_GenRandom_default_instance_;
class Req_SKF_GenExtRSAKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_GenExtRSAKey> _instance;
} _Req_SKF_GenExtRSAKey_default_instance_;
class Rsp_SKF_GenExtRSAKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_GenExtRSAKey> _instance;
} _Rsp_SKF_GenExtRSAKey_default_instance_;
class Req_SKF_GenRSAKeyPairDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_GenRSAKeyPair> _instance;
} _Req_SKF_GenRSAKeyPair_default_instance_;
class Rsp_SKF_GenRSAKeyPairDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_GenRSAKeyPair> _instance;
} _Rsp_SKF_GenRSAKeyPair_default_instance_;
class Req_SKF_ImportRSAKeyPairDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_ImportRSAKeyPair> _instance;
} _Req_SKF_ImportRSAKeyPair_default_instance_;
class Rsp_SKF_ImportRSAKeyPairDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_ImportRSAKeyPair> _instance;
} _Rsp_SKF_ImportRSAKeyPair_default_instance_;
class Req_SKF_RSASignDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_RSASignData> _instance;
} _Req_SKF_RSASignData_default_instance_;
class Rsp_SKF_RSASignDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_RSASignData> _instance;
} _Rsp_SKF_RSASignData_default_instance_;
class Req_SKF_RSAVerifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_RSAVerify> _instance;
} _Req_SKF_RSAVerify_default_instance_;
class Rsp_SKF_RSAVerifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_RSAVerify> _instance;
} _Rsp_SKF_RSAVerify_default_instance_;
class Req_SKF_RSAExportSessionKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_RSAExportSessionKey> _instance;
} _Req_SKF_RSAExportSessionKey_default_instance_;
class Rsp_SKF_RSAExportSessionKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_RSAExportSessionKey> _instance;
} _Rsp_SKF_RSAExportSessionKey_default_instance_;
class Req_SKF_ExtRSAPubKeyOperationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_ExtRSAPubKeyOperation> _instance;
} _Req_SKF_ExtRSAPubKeyOperation_default_instance_;
class Rsp_SKF_ExtRSAPubKeyOperationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_ExtRSAPubKeyOperation> _instance;
} _Rsp_SKF_ExtRSAPubKeyOperation_default_instance_;
class Req_SKF_ExtRSAPriKeyOperationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_ExtRSAPriKeyOperation> _instance;
} _Req_SKF_ExtRSAPriKeyOperation_default_instance_;
class Rsp_SKF_ExtRSAPriKeyOperationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_ExtRSAPriKeyOperation> _instance;
} _Rsp_SKF_ExtRSAPriKeyOperation_default_instance_;
class Req_SKF_GenECCKeyPairDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_GenECCKeyPair> _instance;
} _Req_SKF_GenECCKeyPair_default_instance_;
class Rsp_SKF_GenECCKeyPairDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_GenECCKeyPair> _instance;
} _Rsp_SKF_GenECCKeyPair_default_instance_;
class Req_SKF_ImportECCKeyPairDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_ImportECCKeyPair> _instance;
} _Req_SKF_ImportECCKeyPair_default_instance_;
class Rsp_SKF_ImportECCKeyPairDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_ImportECCKeyPair> _instance;
} _Rsp_SKF_ImportECCKeyPair_default_instance_;
class Req_SKF_ECCSignDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_ECCSignData> _instance;
} _Req_SKF_ECCSignData_default_instance_;
class Rsp_SKF_ECCSignDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_ECCSignData> _instance;
} _Rsp_SKF_ECCSignData_default_instance_;
class Req_SKF_ECCVerifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_ECCVerify> _instance;
} _Req_SKF_ECCVerify_default_instance_;
class Rsp_SKF_ECCVerifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_ECCVerify> _instance;
} _Rsp_SKF_ECCVerify_default_instance_;
class Req_SKF_ECCExportSessionKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_ECCExportSessionKey> _instance;
} _Req_SKF_ECCExportSessionKey_default_instance_;
class Rsp_SKF_ECCExportSessionKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_ECCExportSessionKey> _instance;
} _Rsp_SKF_ECCExportSessionKey_default_instance_;
class Req_SKF_ExtECCEncryptDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_ExtECCEncrypt> _instance;
} _Req_SKF_ExtECCEncrypt_default_instance_;
class Rsp_SKF_ExtECCEncryptDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_ExtECCEncrypt> _instance;
} _Rsp_SKF_ExtECCEncrypt_default_instance_;
class Req_SKF_ExtECCDecryptDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_ExtECCDecrypt> _instance;
} _Req_SKF_ExtECCDecrypt_default_instance_;
class Rsp_SKF_ExtECCDecryptDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_ExtECCDecrypt> _instance;
} _Rsp_SKF_ExtECCDecrypt_default_instance_;
class Req_SKF_ExtECCSignDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_ExtECCSign> _instance;
} _Req_SKF_ExtECCSign_default_instance_;
class Rsp_SKF_ExtECCSignDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_ExtECCSign> _instance;
} _Rsp_SKF_ExtECCSign_default_instance_;
class Req_SKF_ExtECCVerifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_ExtECCVerify> _instance;
} _Req_SKF_ExtECCVerify_default_instance_;
class Rsp_SKF_ExtECCVerifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_ExtECCVerify> _instance;
} _Rsp_SKF_ExtECCVerify_default_instance_;
class Req_SKF_GenerateAgreementDataWithECCDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_GenerateAgreementDataWithECC> _instance;
} _Req_SKF_GenerateAgreementDataWithECC_default_instance_;
class Rsp_SKF_GenerateAgreementDataWithECCDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_GenerateAgreementDataWithECC> _instance;
} _Rsp_SKF_GenerateAgreementDataWithECC_default_instance_;
class Req_SKF_GenerateAgreementDataAndKeyWithECCDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_GenerateAgreementDataAndKeyWithECC> _instance;
} _Req_SKF_GenerateAgreementDataAndKeyWithECC_default_instance_;
class Rsp_SKF_GenerateAgreementDataAndKeyWithECCDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_GenerateAgreementDataAndKeyWithECC> _instance;
} _Rsp_SKF_GenerateAgreementDataAndKeyWithECC_default_instance_;
class Req_SKF_GenerateKeyWithECCDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_GenerateKeyWithECC> _instance;
} _Req_SKF_GenerateKeyWithECC_default_instance_;
class Rsp_SKF_GenerateKeyWithECCDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_GenerateKeyWithECC> _instance;
} _Rsp_SKF_GenerateKeyWithECC_default_instance_;
class Req_SKF_ExportPublicKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_ExportPublicKey> _instance;
} _Req_SKF_ExportPublicKey_default_instance_;
class Rsp_SKF_ExportPublicKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_ExportPublicKey> _instance;
} _Rsp_SKF_ExportPublicKey_default_instance_;
class Req_SKF_ImportSessionKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_ImportSessionKey> _instance;
} _Req_SKF_ImportSessionKey_default_instance_;
class Rsp_SKF_ImportSessionKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_ImportSessionKey> _instance;
} _Rsp_SKF_ImportSessionKey_default_instance_;
class Req_SKF_SetSymmKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_SetSymmKey> _instance;
} _Req_SKF_SetSymmKey_default_instance_;
class Rsp_SKF_SetSymmKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_SetSymmKey> _instance;
} _Rsp_SKF_SetSymmKey_default_instance_;
class Req_SKF_EncryptInitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_EncryptInit> _instance;
} _Req_SKF_EncryptInit_default_instance_;
class Rsp_SKF_EncryptInitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_EncryptInit> _instance;
} _Rsp_SKF_EncryptInit_default_instance_;
class Req_SKF_EncryptDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_Encrypt> _instance;
} _Req_SKF_Encrypt_default_instance_;
class Rsp_SKF_EncryptDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_Encrypt> _instance;
} _Rsp_SKF_Encrypt_default_instance_;
class Req_SKF_EncryptUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_EncryptUpdate> _instance;
} _Req_SKF_EncryptUpdate_default_instance_;
class Rsp_SKF_EncryptUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_EncryptUpdate> _instance;
} _Rsp_SKF_EncryptUpdate_default_instance_;
class Req_SKF_EncryptFinalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_EncryptFinal> _instance;
} _Req_SKF_EncryptFinal_default_instance_;
class Rsp_SKF_EncryptFinalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_EncryptFinal> _instance;
} _Rsp_SKF_EncryptFinal_default_instance_;
class Req_SKF_DecryptInitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_DecryptInit> _instance;
} _Req_SKF_DecryptInit_default_instance_;
class Rsp_SKF_DecryptInitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_DecryptInit> _instance;
} _Rsp_SKF_DecryptInit_default_instance_;
class Req_SKF_DecryptDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_Decrypt> _instance;
} _Req_SKF_Decrypt_default_instance_;
class Rsp_SKF_DecryptDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_Decrypt> _instance;
} _Rsp_SKF_Decrypt_default_instance_;
class Req_SKF_DecryptUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_DecryptUpdate> _instance;
} _Req_SKF_DecryptUpdate_default_instance_;
class Rsp_SKF_DecryptUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_DecryptUpdate> _instance;
} _Rsp_SKF_DecryptUpdate_default_instance_;
class Req_SKF_DecryptFinalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_DecryptFinal> _instance;
} _Req_SKF_DecryptFinal_default_instance_;
class Rsp_SKF_DecryptFinalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_DecryptFinal> _instance;
} _Rsp_SKF_DecryptFinal_default_instance_;
class Req_SKF_DigestInitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_DigestInit> _instance;
} _Req_SKF_DigestInit_default_instance_;
class Rsp_SKF_DigestInitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_DigestInit> _instance;
} _Rsp_SKF_DigestInit_default_instance_;
class Req_SKF_DigestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_Digest> _instance;
} _Req_SKF_Digest_default_instance_;
class Rsp_SKF_DigestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_Digest> _instance;
} _Rsp_SKF_Digest_default_instance_;
class Req_SKF_DigestUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_DigestUpdate> _instance;
} _Req_SKF_DigestUpdate_default_instance_;
class Rsp_SKF_DigestUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_DigestUpdate> _instance;
} _Rsp_SKF_DigestUpdate_default_instance_;
class Req_SKF_DigestFinalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_DigestFinal> _instance;
} _Req_SKF_DigestFinal_default_instance_;
class Rsp_SKF_DigestFinalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_DigestFinal> _instance;
} _Rsp_SKF_DigestFinal_default_instance_;
class Req_SKF_MacInitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_MacInit> _instance;
} _Req_SKF_MacInit_default_instance_;
class Rsp_SKF_MacInitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_MacInit> _instance;
} _Rsp_SKF_MacInit_default_instance_;
class Req_SKF_MacDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_Mac> _instance;
} _Req_SKF_Mac_default_instance_;
class Rsp_SKF_MacDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_Mac> _instance;
} _Rsp_SKF_Mac_default_instance_;
class Req_SKF_MacUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_MacUpdate> _instance;
} _Req_SKF_MacUpdate_default_instance_;
class Rsp_SKF_MacUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_MacUpdate> _instance;
} _Rsp_SKF_MacUpdate_default_instance_;
class Req_SKF_MacFinalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_MacFinal> _instance;
} _Req_SKF_MacFinal_default_instance_;
class Rsp_SKF_MacFinalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_MacFinal> _instance;
} _Rsp_SKF_MacFinal_default_instance_;
class Req_SKF_CloseHandleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_CloseHandle> _instance;
} _Req_SKF_CloseHandle_default_instance_;
class Rsp_SKF_CloseHandleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_CloseHandle> _instance;
} _Rsp_SKF_CloseHandle_default_instance_;
class Req_SKF_TransmitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_Transmit> _instance;
} _Req_SKF_Transmit_default_instance_;
class Rsp_SKF_TransmitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_Transmit> _instance;
} _Rsp_SKF_Transmit_default_instance_;
class Req_SKF_ImportCertificateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_ImportCertificate> _instance;
} _Req_SKF_ImportCertificate_default_instance_;
class Rsp_SKF_ImportCertificateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_ImportCertificate> _instance;
} _Rsp_SKF_ImportCertificate_default_instance_;
class Req_SKF_ExportCertificateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_ExportCertificate> _instance;
} _Req_SKF_ExportCertificate_default_instance_;
class Rsp_SKF_ExportCertificateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_ExportCertificate> _instance;
} _Rsp_SKF_ExportCertificate_default_instance_;
class Req_SKF_GetContainerPropertyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Req_SKF_GetContainerProperty> _instance;
} _Req_SKF_GetContainerProperty_default_instance_;
class Rsp_SKF_GetContainerPropertyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rsp_SKF_GetContainerProperty> _instance;
} _Rsp_SKF_GetContainerProperty_default_instance_;
}  // namespace skf
}  // namespace westone
}  // namespace com
static void InitDefaultsWST_PROTO_UINT32_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_WST_PROTO_UINT32_default_instance_;
    new (ptr) ::com::westone::skf::WST_PROTO_UINT32();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::WST_PROTO_UINT32::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WST_PROTO_UINT32_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWST_PROTO_UINT32_skf_2eproto}, {}};

static void InitDefaultsWST_PROTO_BOOL_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_WST_PROTO_BOOL_default_instance_;
    new (ptr) ::com::westone::skf::WST_PROTO_BOOL();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::WST_PROTO_BOOL::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WST_PROTO_BOOL_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWST_PROTO_BOOL_skf_2eproto}, {}};

static void InitDefaultsSKF_Version_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_SKF_Version_default_instance_;
    new (ptr) ::com::westone::skf::SKF_Version();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::SKF_Version::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SKF_Version_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSKF_Version_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsSKF_DevInfo_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_SKF_DevInfo_default_instance_;
    new (ptr) ::com::westone::skf::SKF_DevInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::SKF_DevInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SKF_DevInfo_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSKF_DevInfo_skf_2eproto}, {
      &scc_info_SKF_Version_skf_2eproto.base,
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsSKF_RSAPUBLICKEYBLOB_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_SKF_RSAPUBLICKEYBLOB_default_instance_;
    new (ptr) ::com::westone::skf::SKF_RSAPUBLICKEYBLOB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::SKF_RSAPUBLICKEYBLOB::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SKF_RSAPUBLICKEYBLOB_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSKF_RSAPUBLICKEYBLOB_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsSKF_RSAPRIVATEKEYBLOB_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_SKF_RSAPRIVATEKEYBLOB_default_instance_;
    new (ptr) ::com::westone::skf::SKF_RSAPRIVATEKEYBLOB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::SKF_RSAPRIVATEKEYBLOB::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SKF_RSAPRIVATEKEYBLOB_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSKF_RSAPRIVATEKEYBLOB_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsSKF_ECCPUBLICKEYBLOB_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_SKF_ECCPUBLICKEYBLOB_default_instance_;
    new (ptr) ::com::westone::skf::SKF_ECCPUBLICKEYBLOB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SKF_ECCPUBLICKEYBLOB_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSKF_ECCPUBLICKEYBLOB_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsSKF_ECCPRIVATEKEYBLOB_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_SKF_ECCPRIVATEKEYBLOB_default_instance_;
    new (ptr) ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SKF_ECCPRIVATEKEYBLOB_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSKF_ECCPRIVATEKEYBLOB_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsSKF_ECCCIPHERBLOB_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_SKF_ECCCIPHERBLOB_default_instance_;
    new (ptr) ::com::westone::skf::SKF_ECCCIPHERBLOB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::SKF_ECCCIPHERBLOB::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SKF_ECCCIPHERBLOB_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSKF_ECCCIPHERBLOB_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsSKF_ECCSIGNATUREBLOB_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_SKF_ECCSIGNATUREBLOB_default_instance_;
    new (ptr) ::com::westone::skf::SKF_ECCSIGNATUREBLOB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::SKF_ECCSIGNATUREBLOB::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SKF_ECCSIGNATUREBLOB_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSKF_ECCSIGNATUREBLOB_skf_2eproto}, {}};

static void InitDefaultsSKF_BLOCKCIPHERPARAM_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_SKF_BLOCKCIPHERPARAM_default_instance_;
    new (ptr) ::com::westone::skf::SKF_BLOCKCIPHERPARAM();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::SKF_BLOCKCIPHERPARAM::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SKF_BLOCKCIPHERPARAM_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSKF_BLOCKCIPHERPARAM_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsSKF_ENVELOPEDKEYBLOB_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_SKF_ENVELOPEDKEYBLOB_default_instance_;
    new (ptr) ::com::westone::skf::SKF_ENVELOPEDKEYBLOB();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::SKF_ENVELOPEDKEYBLOB::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_SKF_ENVELOPEDKEYBLOB_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsSKF_ENVELOPEDKEYBLOB_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,
      &scc_info_SKF_ECCPUBLICKEYBLOB_skf_2eproto.base,
      &scc_info_SKF_ECCCIPHERBLOB_skf_2eproto.base,}};

static void InitDefaultsSKF_FILEATTRIBUTES_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_SKF_FILEATTRIBUTES_default_instance_;
    new (ptr) ::com::westone::skf::SKF_FILEATTRIBUTES();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::SKF_FILEATTRIBUTES::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SKF_FILEATTRIBUTES_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSKF_FILEATTRIBUTES_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_WaitForDevEvent_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_WaitForDevEvent_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_WaitForDevEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_WaitForDevEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_WaitForDevEvent_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_WaitForDevEvent_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_WaitForDevEvent_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_WaitForDevEvent_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_WaitForDevEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_WaitForDevEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_WaitForDevEvent_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_WaitForDevEvent_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_CancelWaitForDevEvent_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_CancelWaitForDevEvent_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_CancelWaitForDevEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_CancelWaitForDevEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Req_SKF_CancelWaitForDevEvent_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReq_SKF_CancelWaitForDevEvent_skf_2eproto}, {}};

static void InitDefaultsRsp_SKF_CancelWaitForDevEvent_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_CancelWaitForDevEvent_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_CancelWaitForDevEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_CancelWaitForDevEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rsp_SKF_CancelWaitForDevEvent_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRsp_SKF_CancelWaitForDevEvent_skf_2eproto}, {}};

static void InitDefaultsReq_SKF_EnumDev_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_EnumDev_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_EnumDev();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_EnumDev::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Req_SKF_EnumDev_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReq_SKF_EnumDev_skf_2eproto}, {
      &scc_info_WST_PROTO_BOOL_skf_2eproto.base,
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_EnumDev_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_EnumDev_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_EnumDev();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_EnumDev::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_EnumDev_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_EnumDev_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_ConnectDev_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_ConnectDev_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_ConnectDev();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_ConnectDev::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_ConnectDev_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_ConnectDev_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_ConnectDev_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_ConnectDev_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_ConnectDev();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_ConnectDev::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_ConnectDev_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_ConnectDev_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_DisConnectDev_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_DisConnectDev_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_DisConnectDev();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_DisConnectDev::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_DisConnectDev_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_DisConnectDev_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_DisConnectDev_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_DisConnectDev_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_DisConnectDev();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_DisConnectDev::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rsp_SKF_DisConnectDev_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRsp_SKF_DisConnectDev_skf_2eproto}, {}};

static void InitDefaultsReq_SKF_GetDevState_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_GetDevState_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_GetDevState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_GetDevState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_GetDevState_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_GetDevState_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_GetDevState_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_GetDevState_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_GetDevState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_GetDevState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_GetDevState_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_GetDevState_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_SetLabel_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_SetLabel_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_SetLabel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_SetLabel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_SetLabel_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_SetLabel_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_SetLabel_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_SetLabel_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_SetLabel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_SetLabel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rsp_SKF_SetLabel_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRsp_SKF_SetLabel_skf_2eproto}, {}};

static void InitDefaultsReq_SKF_GetDevInfo_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_GetDevInfo_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_GetDevInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_GetDevInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Req_SKF_GetDevInfo_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReq_SKF_GetDevInfo_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,
      &scc_info_SKF_DevInfo_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_GetDevInfo_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_GetDevInfo_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_GetDevInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_GetDevInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_GetDevInfo_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_GetDevInfo_skf_2eproto}, {
      &scc_info_SKF_DevInfo_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_LockDev_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_LockDev_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_LockDev();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_LockDev::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_LockDev_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_LockDev_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_LockDev_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_LockDev_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_LockDev();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_LockDev::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rsp_SKF_LockDev_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRsp_SKF_LockDev_skf_2eproto}, {}};

static void InitDefaultsReq_SKF_UnlockDev_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_UnlockDev_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_UnlockDev();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_UnlockDev::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_UnlockDev_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_UnlockDev_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_UnlockDev_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_UnlockDev_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_UnlockDev();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_UnlockDev::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rsp_SKF_UnlockDev_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRsp_SKF_UnlockDev_skf_2eproto}, {}};

static void InitDefaultsReq_SKF_ChangeDevAuthKey_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_ChangeDevAuthKey_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_ChangeDevAuthKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_ChangeDevAuthKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_ChangeDevAuthKey_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_ChangeDevAuthKey_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_ChangeDevAuthKey_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_ChangeDevAuthKey_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_ChangeDevAuthKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_ChangeDevAuthKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rsp_SKF_ChangeDevAuthKey_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRsp_SKF_ChangeDevAuthKey_skf_2eproto}, {}};

static void InitDefaultsReq_SKF_DevAuth_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_DevAuth_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_DevAuth();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_DevAuth::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_DevAuth_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_DevAuth_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_DevAuth_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_DevAuth_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_DevAuth();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_DevAuth::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rsp_SKF_DevAuth_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRsp_SKF_DevAuth_skf_2eproto}, {}};

static void InitDefaultsReq_SKF_ChangePIN_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_ChangePIN_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_ChangePIN();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_ChangePIN::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_ChangePIN_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_ChangePIN_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_ChangePIN_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_ChangePIN_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_ChangePIN();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_ChangePIN::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_ChangePIN_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_ChangePIN_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_GetPINInfo_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_GetPINInfo_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_GetPINInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_GetPINInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Req_SKF_GetPINInfo_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReq_SKF_GetPINInfo_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,
      &scc_info_WST_PROTO_BOOL_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_GetPINInfo_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_GetPINInfo_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_GetPINInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_GetPINInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Rsp_SKF_GetPINInfo_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRsp_SKF_GetPINInfo_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,
      &scc_info_WST_PROTO_BOOL_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_VerifyPIN_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_VerifyPIN_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_VerifyPIN();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_VerifyPIN::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_VerifyPIN_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_VerifyPIN_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_VerifyPIN_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_VerifyPIN_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_VerifyPIN();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_VerifyPIN::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_VerifyPIN_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_VerifyPIN_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_UnblockPIN_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_UnblockPIN_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_UnblockPIN();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_UnblockPIN::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_UnblockPIN_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_UnblockPIN_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_UnblockPIN_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_UnblockPIN_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_UnblockPIN();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_UnblockPIN::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_UnblockPIN_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_UnblockPIN_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_ClearSecureState_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_ClearSecureState_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_ClearSecureState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_ClearSecureState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_ClearSecureState_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_ClearSecureState_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_ClearSecureState_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_ClearSecureState_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_ClearSecureState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_ClearSecureState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rsp_SKF_ClearSecureState_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRsp_SKF_ClearSecureState_skf_2eproto}, {}};

static void InitDefaultsReq_SKF_CreateApplication_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_CreateApplication_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_CreateApplication();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_CreateApplication::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_CreateApplication_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_CreateApplication_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_CreateApplication_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_CreateApplication_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_CreateApplication();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_CreateApplication::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_CreateApplication_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_CreateApplication_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_EnumApplication_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_EnumApplication_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_EnumApplication();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_EnumApplication::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_EnumApplication_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_EnumApplication_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_EnumApplication_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_EnumApplication_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_EnumApplication();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_EnumApplication::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_EnumApplication_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_EnumApplication_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_DeleteApplication_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_DeleteApplication_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_DeleteApplication();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_DeleteApplication::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_DeleteApplication_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_DeleteApplication_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_DeleteApplication_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_DeleteApplication_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_DeleteApplication();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_DeleteApplication::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rsp_SKF_DeleteApplication_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRsp_SKF_DeleteApplication_skf_2eproto}, {}};

static void InitDefaultsReq_SKF_OpenApplication_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_OpenApplication_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_OpenApplication();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_OpenApplication::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_OpenApplication_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_OpenApplication_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_OpenApplication_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_OpenApplication_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_OpenApplication();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_OpenApplication::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_OpenApplication_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_OpenApplication_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_CloseApplication_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_CloseApplication_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_CloseApplication();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_CloseApplication::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_CloseApplication_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_CloseApplication_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_CloseApplication_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_CloseApplication_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_CloseApplication();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_CloseApplication::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rsp_SKF_CloseApplication_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRsp_SKF_CloseApplication_skf_2eproto}, {}};

static void InitDefaultsReq_SKF_CreateFile_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_CreateFile_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_CreateFile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_CreateFile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_CreateFile_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_CreateFile_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_CreateFile_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_CreateFile_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_CreateFile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_CreateFile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rsp_SKF_CreateFile_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRsp_SKF_CreateFile_skf_2eproto}, {}};

static void InitDefaultsReq_SKF_DeleteFile_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_DeleteFile_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_DeleteFile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_DeleteFile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_DeleteFile_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_DeleteFile_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_DeleteFile_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_DeleteFile_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_DeleteFile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_DeleteFile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rsp_SKF_DeleteFile_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRsp_SKF_DeleteFile_skf_2eproto}, {}};

static void InitDefaultsReq_SKF_EnumFiles_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_EnumFiles_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_EnumFiles();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_EnumFiles::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_EnumFiles_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_EnumFiles_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_EnumFiles_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_EnumFiles_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_EnumFiles();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_EnumFiles::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_EnumFiles_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_EnumFiles_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_GetFileInfo_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_GetFileInfo_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_GetFileInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_GetFileInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Req_SKF_GetFileInfo_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReq_SKF_GetFileInfo_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,
      &scc_info_SKF_FILEATTRIBUTES_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_GetFileInfo_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_GetFileInfo_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_GetFileInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_GetFileInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_GetFileInfo_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_GetFileInfo_skf_2eproto}, {
      &scc_info_SKF_FILEATTRIBUTES_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_ReadFile_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_ReadFile_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_ReadFile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_ReadFile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_ReadFile_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_ReadFile_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_ReadFile_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_ReadFile_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_ReadFile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_ReadFile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_ReadFile_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_ReadFile_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_WriteFile_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_WriteFile_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_WriteFile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_WriteFile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_WriteFile_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_WriteFile_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_WriteFile_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_WriteFile_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_WriteFile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_WriteFile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rsp_SKF_WriteFile_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRsp_SKF_WriteFile_skf_2eproto}, {}};

static void InitDefaultsReq_SKF_CreateContainer_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_CreateContainer_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_CreateContainer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_CreateContainer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_CreateContainer_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_CreateContainer_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_CreateContainer_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_CreateContainer_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_CreateContainer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_CreateContainer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_CreateContainer_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_CreateContainer_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_DeleteContainer_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_DeleteContainer_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_DeleteContainer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_DeleteContainer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_DeleteContainer_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_DeleteContainer_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_DeleteContainer_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_DeleteContainer_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_DeleteContainer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_DeleteContainer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rsp_SKF_DeleteContainer_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRsp_SKF_DeleteContainer_skf_2eproto}, {}};

static void InitDefaultsReq_SKF_OpenContainer_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_OpenContainer_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_OpenContainer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_OpenContainer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_OpenContainer_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_OpenContainer_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_OpenContainer_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_OpenContainer_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_OpenContainer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_OpenContainer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_OpenContainer_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_OpenContainer_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_CloseContainer_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_CloseContainer_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_CloseContainer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_CloseContainer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_CloseContainer_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_CloseContainer_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_CloseContainer_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_CloseContainer_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_CloseContainer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_CloseContainer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rsp_SKF_CloseContainer_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRsp_SKF_CloseContainer_skf_2eproto}, {}};

static void InitDefaultsReq_SKF_EnumContainer_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_EnumContainer_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_EnumContainer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_EnumContainer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_EnumContainer_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_EnumContainer_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_EnumContainer_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_EnumContainer_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_EnumContainer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_EnumContainer::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_EnumContainer_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_EnumContainer_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_GetContainerType_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_GetContainerType_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_GetContainerType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_GetContainerType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_GetContainerType_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_GetContainerType_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_GetContainerType_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_GetContainerType_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_GetContainerType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_GetContainerType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_GetContainerType_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_GetContainerType_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_GenRandom_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_GenRandom_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_GenRandom();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_GenRandom::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_GenRandom_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_GenRandom_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_GenRandom_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_GenRandom_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_GenRandom();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_GenRandom::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rsp_SKF_GenRandom_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRsp_SKF_GenRandom_skf_2eproto}, {}};

static void InitDefaultsReq_SKF_GenExtRSAKey_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_GenExtRSAKey_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_GenExtRSAKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_GenExtRSAKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Req_SKF_GenExtRSAKey_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReq_SKF_GenExtRSAKey_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,
      &scc_info_SKF_RSAPUBLICKEYBLOB_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_GenExtRSAKey_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_GenExtRSAKey_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_GenExtRSAKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_GenExtRSAKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_GenExtRSAKey_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_GenExtRSAKey_skf_2eproto}, {
      &scc_info_SKF_RSAPUBLICKEYBLOB_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_GenRSAKeyPair_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_GenRSAKeyPair_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_GenRSAKeyPair();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_GenRSAKeyPair::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Req_SKF_GenRSAKeyPair_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReq_SKF_GenRSAKeyPair_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,
      &scc_info_SKF_RSAPUBLICKEYBLOB_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_GenRSAKeyPair_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_GenRSAKeyPair_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_GenRSAKeyPair();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_GenRSAKeyPair::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_GenRSAKeyPair_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_GenRSAKeyPair_skf_2eproto}, {
      &scc_info_SKF_RSAPUBLICKEYBLOB_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_ImportRSAKeyPair_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_ImportRSAKeyPair_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_ImportRSAKeyPair();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_ImportRSAKeyPair::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_ImportRSAKeyPair_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_ImportRSAKeyPair_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_ImportRSAKeyPair_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_ImportRSAKeyPair_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_ImportRSAKeyPair();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_ImportRSAKeyPair::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rsp_SKF_ImportRSAKeyPair_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRsp_SKF_ImportRSAKeyPair_skf_2eproto}, {}};

static void InitDefaultsReq_SKF_RSASignData_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_RSASignData_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_RSASignData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_RSASignData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_RSASignData_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_RSASignData_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_RSASignData_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_RSASignData_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_RSASignData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_RSASignData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_RSASignData_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_RSASignData_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_RSAVerify_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_RSAVerify_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_RSAVerify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_RSAVerify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Req_SKF_RSAVerify_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReq_SKF_RSAVerify_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,
      &scc_info_SKF_RSAPUBLICKEYBLOB_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_RSAVerify_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_RSAVerify_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_RSAVerify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_RSAVerify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rsp_SKF_RSAVerify_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRsp_SKF_RSAVerify_skf_2eproto}, {}};

static void InitDefaultsReq_SKF_RSAExportSessionKey_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_RSAExportSessionKey_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_RSAExportSessionKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_RSAExportSessionKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Req_SKF_RSAExportSessionKey_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReq_SKF_RSAExportSessionKey_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,
      &scc_info_SKF_RSAPUBLICKEYBLOB_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_RSAExportSessionKey_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_RSAExportSessionKey_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_RSAExportSessionKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_RSAExportSessionKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rsp_SKF_RSAExportSessionKey_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRsp_SKF_RSAExportSessionKey_skf_2eproto}, {}};

static void InitDefaultsReq_SKF_ExtRSAPubKeyOperation_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_ExtRSAPubKeyOperation_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_ExtRSAPubKeyOperation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_ExtRSAPubKeyOperation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Req_SKF_ExtRSAPubKeyOperation_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReq_SKF_ExtRSAPubKeyOperation_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,
      &scc_info_SKF_RSAPUBLICKEYBLOB_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_ExtRSAPubKeyOperation_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_ExtRSAPubKeyOperation_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_ExtRSAPubKeyOperation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_ExtRSAPubKeyOperation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_ExtRSAPubKeyOperation_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_ExtRSAPubKeyOperation_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_ExtRSAPriKeyOperation_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_ExtRSAPriKeyOperation_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_ExtRSAPriKeyOperation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_ExtRSAPriKeyOperation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Req_SKF_ExtRSAPriKeyOperation_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReq_SKF_ExtRSAPriKeyOperation_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,
      &scc_info_SKF_RSAPRIVATEKEYBLOB_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_ExtRSAPriKeyOperation_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_ExtRSAPriKeyOperation_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_ExtRSAPriKeyOperation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_ExtRSAPriKeyOperation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_ExtRSAPriKeyOperation_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_ExtRSAPriKeyOperation_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_GenECCKeyPair_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_GenECCKeyPair_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_GenECCKeyPair();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_GenECCKeyPair::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Req_SKF_GenECCKeyPair_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReq_SKF_GenECCKeyPair_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,
      &scc_info_SKF_ECCPUBLICKEYBLOB_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_GenECCKeyPair_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_GenECCKeyPair_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_GenECCKeyPair();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_GenECCKeyPair::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_GenECCKeyPair_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_GenECCKeyPair_skf_2eproto}, {
      &scc_info_SKF_ECCPUBLICKEYBLOB_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_ImportECCKeyPair_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_ImportECCKeyPair_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_ImportECCKeyPair();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_ImportECCKeyPair::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Req_SKF_ImportECCKeyPair_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReq_SKF_ImportECCKeyPair_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,
      &scc_info_SKF_ENVELOPEDKEYBLOB_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_ImportECCKeyPair_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_ImportECCKeyPair_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_ImportECCKeyPair();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_ImportECCKeyPair::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rsp_SKF_ImportECCKeyPair_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRsp_SKF_ImportECCKeyPair_skf_2eproto}, {}};

static void InitDefaultsReq_SKF_ECCSignData_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_ECCSignData_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_ECCSignData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_ECCSignData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Req_SKF_ECCSignData_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReq_SKF_ECCSignData_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,
      &scc_info_SKF_ECCSIGNATUREBLOB_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_ECCSignData_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_ECCSignData_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_ECCSignData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_ECCSignData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_ECCSignData_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_ECCSignData_skf_2eproto}, {
      &scc_info_SKF_ECCSIGNATUREBLOB_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_ECCVerify_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_ECCVerify_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_ECCVerify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_ECCVerify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Req_SKF_ECCVerify_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsReq_SKF_ECCVerify_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,
      &scc_info_SKF_ECCPUBLICKEYBLOB_skf_2eproto.base,
      &scc_info_SKF_ECCSIGNATUREBLOB_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_ECCVerify_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_ECCVerify_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_ECCVerify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_ECCVerify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rsp_SKF_ECCVerify_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRsp_SKF_ECCVerify_skf_2eproto}, {}};

static void InitDefaultsReq_SKF_ECCExportSessionKey_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_ECCExportSessionKey_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_ECCExportSessionKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_ECCExportSessionKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Req_SKF_ECCExportSessionKey_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsReq_SKF_ECCExportSessionKey_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,
      &scc_info_SKF_ECCPUBLICKEYBLOB_skf_2eproto.base,
      &scc_info_SKF_ECCCIPHERBLOB_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_ECCExportSessionKey_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_ECCExportSessionKey_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_ECCExportSessionKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_ECCExportSessionKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Rsp_SKF_ECCExportSessionKey_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRsp_SKF_ECCExportSessionKey_skf_2eproto}, {
      &scc_info_SKF_ECCCIPHERBLOB_skf_2eproto.base,
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_ExtECCEncrypt_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_ExtECCEncrypt_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_ExtECCEncrypt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_ExtECCEncrypt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Req_SKF_ExtECCEncrypt_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsReq_SKF_ExtECCEncrypt_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,
      &scc_info_SKF_ECCPUBLICKEYBLOB_skf_2eproto.base,
      &scc_info_SKF_ECCCIPHERBLOB_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_ExtECCEncrypt_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_ExtECCEncrypt_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_ExtECCEncrypt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_ExtECCEncrypt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_ExtECCEncrypt_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_ExtECCEncrypt_skf_2eproto}, {
      &scc_info_SKF_ECCCIPHERBLOB_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_ExtECCDecrypt_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_ExtECCDecrypt_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_ExtECCDecrypt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_ExtECCDecrypt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Req_SKF_ExtECCDecrypt_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsReq_SKF_ExtECCDecrypt_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,
      &scc_info_SKF_ECCPRIVATEKEYBLOB_skf_2eproto.base,
      &scc_info_SKF_ECCCIPHERBLOB_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_ExtECCDecrypt_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_ExtECCDecrypt_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_ExtECCDecrypt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_ExtECCDecrypt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_ExtECCDecrypt_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_ExtECCDecrypt_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_ExtECCSign_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_ExtECCSign_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_ExtECCSign();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_ExtECCSign::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Req_SKF_ExtECCSign_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsReq_SKF_ExtECCSign_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,
      &scc_info_SKF_ECCPRIVATEKEYBLOB_skf_2eproto.base,
      &scc_info_SKF_ECCSIGNATUREBLOB_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_ExtECCSign_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_ExtECCSign_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_ExtECCSign();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_ExtECCSign::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_ExtECCSign_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_ExtECCSign_skf_2eproto}, {
      &scc_info_SKF_ECCSIGNATUREBLOB_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_ExtECCVerify_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_ExtECCVerify_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_ExtECCVerify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_ExtECCVerify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Req_SKF_ExtECCVerify_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsReq_SKF_ExtECCVerify_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,
      &scc_info_SKF_ECCPUBLICKEYBLOB_skf_2eproto.base,
      &scc_info_SKF_ECCSIGNATUREBLOB_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_ExtECCVerify_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_ExtECCVerify_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_ExtECCVerify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_ExtECCVerify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rsp_SKF_ExtECCVerify_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRsp_SKF_ExtECCVerify_skf_2eproto}, {}};

static void InitDefaultsReq_SKF_GenerateAgreementDataWithECC_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_GenerateAgreementDataWithECC_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_GenerateAgreementDataWithECC();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_GenerateAgreementDataWithECC::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Req_SKF_GenerateAgreementDataWithECC_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReq_SKF_GenerateAgreementDataWithECC_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,
      &scc_info_SKF_ECCPUBLICKEYBLOB_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_GenerateAgreementDataWithECC_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_GenerateAgreementDataWithECC_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_GenerateAgreementDataWithECC();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_GenerateAgreementDataWithECC::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Rsp_SKF_GenerateAgreementDataWithECC_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRsp_SKF_GenerateAgreementDataWithECC_skf_2eproto}, {
      &scc_info_SKF_ECCPUBLICKEYBLOB_skf_2eproto.base,
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_GenerateAgreementDataAndKeyWithECC_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_GenerateAgreementDataAndKeyWithECC_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_GenerateAgreementDataAndKeyWithECC();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_GenerateAgreementDataAndKeyWithECC::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Req_SKF_GenerateAgreementDataAndKeyWithECC_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReq_SKF_GenerateAgreementDataAndKeyWithECC_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,
      &scc_info_SKF_ECCPUBLICKEYBLOB_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_GenerateAgreementDataAndKeyWithECC_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_GenerateAgreementDataAndKeyWithECC_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_GenerateAgreementDataAndKeyWithECC();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_GenerateAgreementDataAndKeyWithECC::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Rsp_SKF_GenerateAgreementDataAndKeyWithECC_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRsp_SKF_GenerateAgreementDataAndKeyWithECC_skf_2eproto}, {
      &scc_info_SKF_ECCPUBLICKEYBLOB_skf_2eproto.base,
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_GenerateKeyWithECC_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_GenerateKeyWithECC_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_GenerateKeyWithECC();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_GenerateKeyWithECC::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Req_SKF_GenerateKeyWithECC_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReq_SKF_GenerateKeyWithECC_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,
      &scc_info_SKF_ECCPUBLICKEYBLOB_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_GenerateKeyWithECC_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_GenerateKeyWithECC_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_GenerateKeyWithECC();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_GenerateKeyWithECC::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_GenerateKeyWithECC_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_GenerateKeyWithECC_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_ExportPublicKey_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_ExportPublicKey_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_ExportPublicKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_ExportPublicKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Req_SKF_ExportPublicKey_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReq_SKF_ExportPublicKey_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,
      &scc_info_WST_PROTO_BOOL_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_ExportPublicKey_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_ExportPublicKey_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_ExportPublicKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_ExportPublicKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_ExportPublicKey_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_ExportPublicKey_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_ImportSessionKey_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_ImportSessionKey_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_ImportSessionKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_ImportSessionKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_ImportSessionKey_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_ImportSessionKey_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_ImportSessionKey_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_ImportSessionKey_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_ImportSessionKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_ImportSessionKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_ImportSessionKey_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_ImportSessionKey_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_SetSymmKey_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_SetSymmKey_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_SetSymmKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_SetSymmKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_SetSymmKey_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_SetSymmKey_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_SetSymmKey_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_SetSymmKey_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_SetSymmKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_SetSymmKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_SetSymmKey_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_SetSymmKey_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_EncryptInit_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_EncryptInit_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_EncryptInit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_EncryptInit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Req_SKF_EncryptInit_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReq_SKF_EncryptInit_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,
      &scc_info_SKF_BLOCKCIPHERPARAM_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_EncryptInit_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_EncryptInit_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_EncryptInit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_EncryptInit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rsp_SKF_EncryptInit_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRsp_SKF_EncryptInit_skf_2eproto}, {}};

static void InitDefaultsReq_SKF_Encrypt_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_Encrypt_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_Encrypt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_Encrypt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_Encrypt_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_Encrypt_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_Encrypt_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_Encrypt_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_Encrypt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_Encrypt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_Encrypt_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_Encrypt_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_EncryptUpdate_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_EncryptUpdate_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_EncryptUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_EncryptUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_EncryptUpdate_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_EncryptUpdate_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_EncryptUpdate_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_EncryptUpdate_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_EncryptUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_EncryptUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_EncryptUpdate_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_EncryptUpdate_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_EncryptFinal_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_EncryptFinal_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_EncryptFinal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_EncryptFinal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_EncryptFinal_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_EncryptFinal_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_EncryptFinal_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_EncryptFinal_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_EncryptFinal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_EncryptFinal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_EncryptFinal_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_EncryptFinal_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_DecryptInit_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_DecryptInit_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_DecryptInit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_DecryptInit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Req_SKF_DecryptInit_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReq_SKF_DecryptInit_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,
      &scc_info_SKF_BLOCKCIPHERPARAM_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_DecryptInit_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_DecryptInit_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_DecryptInit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_DecryptInit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rsp_SKF_DecryptInit_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRsp_SKF_DecryptInit_skf_2eproto}, {}};

static void InitDefaultsReq_SKF_Decrypt_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_Decrypt_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_Decrypt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_Decrypt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_Decrypt_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_Decrypt_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_Decrypt_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_Decrypt_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_Decrypt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_Decrypt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_Decrypt_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_Decrypt_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_DecryptUpdate_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_DecryptUpdate_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_DecryptUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_DecryptUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_DecryptUpdate_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_DecryptUpdate_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_DecryptUpdate_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_DecryptUpdate_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_DecryptUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_DecryptUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_DecryptUpdate_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_DecryptUpdate_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_DecryptFinal_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_DecryptFinal_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_DecryptFinal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_DecryptFinal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_DecryptFinal_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_DecryptFinal_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_DecryptFinal_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_DecryptFinal_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_DecryptFinal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_DecryptFinal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_DecryptFinal_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_DecryptFinal_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_DigestInit_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_DigestInit_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_DigestInit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_DigestInit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Req_SKF_DigestInit_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReq_SKF_DigestInit_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,
      &scc_info_SKF_ECCPUBLICKEYBLOB_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_DigestInit_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_DigestInit_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_DigestInit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_DigestInit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_DigestInit_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_DigestInit_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_Digest_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_Digest_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_Digest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_Digest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_Digest_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_Digest_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_Digest_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_Digest_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_Digest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_Digest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_Digest_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_Digest_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_DigestUpdate_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_DigestUpdate_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_DigestUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_DigestUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_DigestUpdate_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_DigestUpdate_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_DigestUpdate_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_DigestUpdate_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_DigestUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_DigestUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rsp_SKF_DigestUpdate_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRsp_SKF_DigestUpdate_skf_2eproto}, {}};

static void InitDefaultsReq_SKF_DigestFinal_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_DigestFinal_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_DigestFinal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_DigestFinal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_DigestFinal_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_DigestFinal_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_DigestFinal_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_DigestFinal_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_DigestFinal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_DigestFinal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_DigestFinal_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_DigestFinal_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_MacInit_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_MacInit_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_MacInit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_MacInit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Req_SKF_MacInit_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReq_SKF_MacInit_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,
      &scc_info_SKF_BLOCKCIPHERPARAM_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_MacInit_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_MacInit_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_MacInit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_MacInit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_MacInit_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_MacInit_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_Mac_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_Mac_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_Mac();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_Mac::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_Mac_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_Mac_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_Mac_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_Mac_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_Mac();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_Mac::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_Mac_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_Mac_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_MacUpdate_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_MacUpdate_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_MacUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_MacUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_MacUpdate_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_MacUpdate_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_MacUpdate_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_MacUpdate_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_MacUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_MacUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rsp_SKF_MacUpdate_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRsp_SKF_MacUpdate_skf_2eproto}, {}};

static void InitDefaultsReq_SKF_MacFinal_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_MacFinal_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_MacFinal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_MacFinal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_MacFinal_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_MacFinal_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_MacFinal_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_MacFinal_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_MacFinal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_MacFinal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_MacFinal_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_MacFinal_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_CloseHandle_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_CloseHandle_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_CloseHandle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_CloseHandle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_CloseHandle_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_CloseHandle_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_CloseHandle_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_CloseHandle_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_CloseHandle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_CloseHandle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rsp_SKF_CloseHandle_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRsp_SKF_CloseHandle_skf_2eproto}, {}};

static void InitDefaultsReq_SKF_Transmit_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_Transmit_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_Transmit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_Transmit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_Transmit_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_Transmit_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_Transmit_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_Transmit_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_Transmit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_Transmit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_Transmit_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_Transmit_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_ImportCertificate_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_ImportCertificate_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_ImportCertificate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_ImportCertificate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Req_SKF_ImportCertificate_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReq_SKF_ImportCertificate_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,
      &scc_info_WST_PROTO_BOOL_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_ImportCertificate_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_ImportCertificate_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_ImportCertificate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_ImportCertificate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rsp_SKF_ImportCertificate_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRsp_SKF_ImportCertificate_skf_2eproto}, {}};

static void InitDefaultsReq_SKF_ExportCertificate_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_ExportCertificate_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_ExportCertificate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_ExportCertificate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Req_SKF_ExportCertificate_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsReq_SKF_ExportCertificate_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,
      &scc_info_WST_PROTO_BOOL_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_ExportCertificate_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_ExportCertificate_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_ExportCertificate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_ExportCertificate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_ExportCertificate_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_ExportCertificate_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsReq_SKF_GetContainerProperty_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Req_SKF_GetContainerProperty_default_instance_;
    new (ptr) ::com::westone::skf::Req_SKF_GetContainerProperty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Req_SKF_GetContainerProperty::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Req_SKF_GetContainerProperty_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsReq_SKF_GetContainerProperty_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

static void InitDefaultsRsp_SKF_GetContainerProperty_skf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::westone::skf::_Rsp_SKF_GetContainerProperty_default_instance_;
    new (ptr) ::com::westone::skf::Rsp_SKF_GetContainerProperty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::westone::skf::Rsp_SKF_GetContainerProperty::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rsp_SKF_GetContainerProperty_skf_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRsp_SKF_GetContainerProperty_skf_2eproto}, {
      &scc_info_WST_PROTO_UINT32_skf_2eproto.base,}};

void InitDefaults_skf_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_WST_PROTO_UINT32_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WST_PROTO_BOOL_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SKF_Version_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SKF_DevInfo_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SKF_RSAPUBLICKEYBLOB_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SKF_RSAPRIVATEKEYBLOB_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SKF_ECCPUBLICKEYBLOB_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SKF_ECCPRIVATEKEYBLOB_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SKF_ECCCIPHERBLOB_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SKF_ECCSIGNATUREBLOB_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SKF_BLOCKCIPHERPARAM_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SKF_ENVELOPEDKEYBLOB_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SKF_FILEATTRIBUTES_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_WaitForDevEvent_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_WaitForDevEvent_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_CancelWaitForDevEvent_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_CancelWaitForDevEvent_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_EnumDev_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_EnumDev_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_ConnectDev_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_ConnectDev_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_DisConnectDev_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_DisConnectDev_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_GetDevState_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_GetDevState_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_SetLabel_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_SetLabel_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_GetDevInfo_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_GetDevInfo_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_LockDev_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_LockDev_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_UnlockDev_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_UnlockDev_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_ChangeDevAuthKey_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_ChangeDevAuthKey_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_DevAuth_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_DevAuth_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_ChangePIN_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_ChangePIN_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_GetPINInfo_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_GetPINInfo_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_VerifyPIN_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_VerifyPIN_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_UnblockPIN_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_UnblockPIN_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_ClearSecureState_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_ClearSecureState_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_CreateApplication_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_CreateApplication_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_EnumApplication_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_EnumApplication_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_DeleteApplication_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_DeleteApplication_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_OpenApplication_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_OpenApplication_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_CloseApplication_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_CloseApplication_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_CreateFile_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_CreateFile_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_DeleteFile_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_DeleteFile_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_EnumFiles_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_EnumFiles_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_GetFileInfo_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_GetFileInfo_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_ReadFile_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_ReadFile_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_WriteFile_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_WriteFile_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_CreateContainer_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_CreateContainer_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_DeleteContainer_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_DeleteContainer_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_OpenContainer_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_OpenContainer_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_CloseContainer_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_CloseContainer_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_EnumContainer_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_EnumContainer_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_GetContainerType_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_GetContainerType_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_GenRandom_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_GenRandom_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_GenExtRSAKey_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_GenExtRSAKey_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_GenRSAKeyPair_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_GenRSAKeyPair_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_ImportRSAKeyPair_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_ImportRSAKeyPair_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_RSASignData_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_RSASignData_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_RSAVerify_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_RSAVerify_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_RSAExportSessionKey_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_RSAExportSessionKey_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_ExtRSAPubKeyOperation_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_ExtRSAPubKeyOperation_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_ExtRSAPriKeyOperation_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_ExtRSAPriKeyOperation_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_GenECCKeyPair_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_GenECCKeyPair_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_ImportECCKeyPair_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_ImportECCKeyPair_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_ECCSignData_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_ECCSignData_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_ECCVerify_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_ECCVerify_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_ECCExportSessionKey_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_ECCExportSessionKey_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_ExtECCEncrypt_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_ExtECCEncrypt_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_ExtECCDecrypt_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_ExtECCDecrypt_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_ExtECCSign_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_ExtECCSign_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_ExtECCVerify_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_ExtECCVerify_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_GenerateAgreementDataWithECC_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_GenerateAgreementDataWithECC_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_GenerateAgreementDataAndKeyWithECC_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_GenerateAgreementDataAndKeyWithECC_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_GenerateKeyWithECC_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_GenerateKeyWithECC_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_ExportPublicKey_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_ExportPublicKey_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_ImportSessionKey_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_ImportSessionKey_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_SetSymmKey_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_SetSymmKey_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_EncryptInit_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_EncryptInit_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_Encrypt_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_Encrypt_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_EncryptUpdate_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_EncryptUpdate_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_EncryptFinal_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_EncryptFinal_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_DecryptInit_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_DecryptInit_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_Decrypt_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_Decrypt_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_DecryptUpdate_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_DecryptUpdate_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_DecryptFinal_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_DecryptFinal_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_DigestInit_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_DigestInit_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_Digest_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_Digest_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_DigestUpdate_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_DigestUpdate_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_DigestFinal_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_DigestFinal_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_MacInit_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_MacInit_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_Mac_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_Mac_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_MacUpdate_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_MacUpdate_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_MacFinal_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_MacFinal_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_CloseHandle_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_CloseHandle_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_Transmit_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_Transmit_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_ImportCertificate_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_ImportCertificate_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_ExportCertificate_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_ExportCertificate_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Req_SKF_GetContainerProperty_skf_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rsp_SKF_GetContainerProperty_skf_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_skf_2eproto[171];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_skf_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_skf_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_skf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::WST_PROTO_UINT32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::WST_PROTO_UINT32, u32value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::WST_PROTO_BOOL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::WST_PROTO_BOOL, boolvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_Version, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_Version, major_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_Version, minor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_DevInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_DevInfo, version_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_DevInfo, manufacturer_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_DevInfo, issuer_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_DevInfo, label_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_DevInfo, serialnumber_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_DevInfo, hwversion_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_DevInfo, firmwareversion_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_DevInfo, algsymcap_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_DevInfo, algasymcap_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_DevInfo, alghashcap_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_DevInfo, devauthalgid_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_DevInfo, totalspace_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_DevInfo, freespace_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_DevInfo, maxeccbuffersize_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_DevInfo, maxbuffersize_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_DevInfo, reserved_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_RSAPUBLICKEYBLOB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_RSAPUBLICKEYBLOB, algid_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_RSAPUBLICKEYBLOB, bitlen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_RSAPUBLICKEYBLOB, modulus_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_RSAPUBLICKEYBLOB, publicexponent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_RSAPRIVATEKEYBLOB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_RSAPRIVATEKEYBLOB, algid_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_RSAPRIVATEKEYBLOB, bitlen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_RSAPRIVATEKEYBLOB, modulus_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_RSAPRIVATEKEYBLOB, publicexponent_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_RSAPRIVATEKEYBLOB, privateexponent_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_RSAPRIVATEKEYBLOB, prime1_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_RSAPRIVATEKEYBLOB, prime2_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_RSAPRIVATEKEYBLOB, prime1exponent_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_RSAPRIVATEKEYBLOB, prime2exponent_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_RSAPRIVATEKEYBLOB, coefficient_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_ECCPUBLICKEYBLOB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_ECCPUBLICKEYBLOB, bitlen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_ECCPUBLICKEYBLOB, xcoordinate_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_ECCPUBLICKEYBLOB, ycoordinate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_ECCPRIVATEKEYBLOB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_ECCPRIVATEKEYBLOB, bitlen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_ECCPRIVATEKEYBLOB, privatekey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_ECCCIPHERBLOB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_ECCCIPHERBLOB, xcoordinate_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_ECCCIPHERBLOB, ycoordinate_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_ECCCIPHERBLOB, hash_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_ECCCIPHERBLOB, cipherlen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_ECCCIPHERBLOB, cipher_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_ECCSIGNATUREBLOB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_ECCSIGNATUREBLOB, r_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_ECCSIGNATUREBLOB, s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_BLOCKCIPHERPARAM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_BLOCKCIPHERPARAM, iv_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_BLOCKCIPHERPARAM, ivlen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_BLOCKCIPHERPARAM, paddingtype_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_BLOCKCIPHERPARAM, feedbitlen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_ENVELOPEDKEYBLOB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_ENVELOPEDKEYBLOB, version_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_ENVELOPEDKEYBLOB, ulsymmalgid_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_ENVELOPEDKEYBLOB, ulbits_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_ENVELOPEDKEYBLOB, cbencryptedprikey_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_ENVELOPEDKEYBLOB, pubkey_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_ENVELOPEDKEYBLOB, ecccipherblob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_FILEATTRIBUTES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_FILEATTRIBUTES, filename_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_FILEATTRIBUTES, filesize_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_FILEATTRIBUTES, readrights_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::SKF_FILEATTRIBUTES, writerights_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_WaitForDevEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_WaitForDevEvent, szdevname_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_WaitForDevEvent, puldevnamelen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_WaitForDevEvent, pulevent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_WaitForDevEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_WaitForDevEvent, szdevname_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_WaitForDevEvent, puldevnamelen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_WaitForDevEvent, pulevent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_CancelWaitForDevEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_CancelWaitForDevEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_EnumDev, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_EnumDev, bpresent_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_EnumDev, sznamelist_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_EnumDev, pulsize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_EnumDev, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_EnumDev, sznamelist_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_EnumDev, pulsize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ConnectDev, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ConnectDev, szname_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ConnectDev, phdev_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ConnectDev, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ConnectDev, phdev_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DisConnectDev, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DisConnectDev, hdev_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_DisConnectDev, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GetDevState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GetDevState, szdevname_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GetDevState, puldevstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_GetDevState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_GetDevState, puldevstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_SetLabel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_SetLabel, hdev_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_SetLabel, szlabel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_SetLabel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GetDevInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GetDevInfo, hdev_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GetDevInfo, pdevinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_GetDevInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_GetDevInfo, pdevinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_LockDev, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_LockDev, hdev_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_LockDev, ultimeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_LockDev, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_UnlockDev, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_UnlockDev, hdev_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_UnlockDev, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ChangeDevAuthKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ChangeDevAuthKey, hdev_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ChangeDevAuthKey, pbkeyvalue_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ChangeDevAuthKey, ulkeylen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ChangeDevAuthKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DevAuth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DevAuth, hdev_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DevAuth, pbauthdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DevAuth, ullen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_DevAuth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ChangePIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ChangePIN, happlication_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ChangePIN, ulpintype_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ChangePIN, szoldpin_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ChangePIN, sznewpin_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ChangePIN, pulretrycount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ChangePIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ChangePIN, pulretrycount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GetPINInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GetPINInfo, happlication_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GetPINInfo, ulpintype_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GetPINInfo, pulmaxretrycount_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GetPINInfo, pulremainretrycount_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GetPINInfo, pbdefaultpin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_GetPINInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_GetPINInfo, pulmaxretrycount_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_GetPINInfo, pulremainretrycount_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_GetPINInfo, pbdefaultpin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_VerifyPIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_VerifyPIN, happlication_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_VerifyPIN, ulpintype_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_VerifyPIN, szpin_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_VerifyPIN, pulretrycount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_VerifyPIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_VerifyPIN, pulretrycount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_UnblockPIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_UnblockPIN, happlication_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_UnblockPIN, szadminpin_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_UnblockPIN, sznewuserpin_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_UnblockPIN, pulretrycount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_UnblockPIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_UnblockPIN, pulretrycount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ClearSecureState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ClearSecureState, happlication_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ClearSecureState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_CreateApplication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_CreateApplication, hdev_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_CreateApplication, szappname_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_CreateApplication, szadminpin_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_CreateApplication, dwadminpinretrycount_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_CreateApplication, szuserpin_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_CreateApplication, dwuserpinretrycount_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_CreateApplication, dwcreatefilerights_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_CreateApplication, phapplication_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_CreateApplication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_CreateApplication, phapplication_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_EnumApplication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_EnumApplication, hdev_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_EnumApplication, szappname_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_EnumApplication, pulsize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_EnumApplication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_EnumApplication, szappname_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_EnumApplication, pulsize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DeleteApplication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DeleteApplication, hdev_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DeleteApplication, szappname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_DeleteApplication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_OpenApplication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_OpenApplication, hdev_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_OpenApplication, szappname_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_OpenApplication, phapplication_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_OpenApplication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_OpenApplication, phapplication_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_CloseApplication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_CloseApplication, happlication_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_CloseApplication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_CreateFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_CreateFile, happlication_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_CreateFile, szfilename_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_CreateFile, ulfilesize_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_CreateFile, ulreadrights_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_CreateFile, ulwriterights_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_CreateFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DeleteFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DeleteFile, happlication_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DeleteFile, szfilename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_DeleteFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_EnumFiles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_EnumFiles, happlication_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_EnumFiles, szfilename_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_EnumFiles, pulsize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_EnumFiles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_EnumFiles, szfilename_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_EnumFiles, pulsize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GetFileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GetFileInfo, happlication_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GetFileInfo, szfilename_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GetFileInfo, pfileinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_GetFileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_GetFileInfo, pfileinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ReadFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ReadFile, happlication_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ReadFile, szfilename_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ReadFile, uloffset_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ReadFile, ulsize_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ReadFile, pboutdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ReadFile, puloutlen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ReadFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ReadFile, pboutdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ReadFile, puloutlen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_WriteFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_WriteFile, happlication_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_WriteFile, szfilename_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_WriteFile, uloffset_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_WriteFile, pbdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_WriteFile, ulsize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_WriteFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_CreateContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_CreateContainer, happlication_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_CreateContainer, szcontainername_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_CreateContainer, phcontainer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_CreateContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_CreateContainer, phcontainer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DeleteContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DeleteContainer, happlication_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DeleteContainer, szcontainername_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_DeleteContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_OpenContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_OpenContainer, happlication_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_OpenContainer, szcontainername_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_OpenContainer, phcontainer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_OpenContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_OpenContainer, phcontainer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_CloseContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_CloseContainer, hcontainer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_CloseContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_EnumContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_EnumContainer, happlication_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_EnumContainer, szcontainername_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_EnumContainer, pulsize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_EnumContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_EnumContainer, szcontainername_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_EnumContainer, pulsize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GetContainerType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GetContainerType, hcontainer_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GetContainerType, pulcontainertype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_GetContainerType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_GetContainerType, pulcontainertype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenRandom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenRandom, hdev_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenRandom, pbrandom_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenRandom, ulrandomlen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_GenRandom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_GenRandom, pbrandom_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenExtRSAKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenExtRSAKey, hdev_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenExtRSAKey, ulbitslen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenExtRSAKey, pblob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_GenExtRSAKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_GenExtRSAKey, pblob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenRSAKeyPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenRSAKeyPair, hcontainer_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenRSAKeyPair, ulbitslen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenRSAKeyPair, pblob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_GenRSAKeyPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_GenRSAKeyPair, pblob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ImportRSAKeyPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ImportRSAKeyPair, hcontainer_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ImportRSAKeyPair, ulsymmalgid_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ImportRSAKeyPair, pbwrappedkey_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ImportRSAKeyPair, ulwrappedkeylen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ImportRSAKeyPair, pbencrypteddata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ImportRSAKeyPair, ulencrypteddatalen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ImportRSAKeyPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_RSASignData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_RSASignData, hcontainer_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_RSASignData, pbdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_RSASignData, uldatalen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_RSASignData, pbsignature_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_RSASignData, pulsiglen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_RSASignData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_RSASignData, pbsignature_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_RSASignData, pulsiglen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_RSAVerify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_RSAVerify, hdev_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_RSAVerify, prsapubkeyblob_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_RSAVerify, pbdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_RSAVerify, uldatalen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_RSAVerify, pbsignature_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_RSAVerify, ulsiglen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_RSAVerify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_RSAExportSessionKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_RSAExportSessionKey, hcontainer_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_RSAExportSessionKey, ulalgid_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_RSAExportSessionKey, ppubkey_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_RSAExportSessionKey, pbdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_RSAExportSessionKey, puldatalen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_RSAExportSessionKey, phsessionkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_RSAExportSessionKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtRSAPubKeyOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtRSAPubKeyOperation, hdev_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtRSAPubKeyOperation, prsapubkeyblob_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtRSAPubKeyOperation, pbinput_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtRSAPubKeyOperation, ulinputlen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtRSAPubKeyOperation, pboutdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtRSAPubKeyOperation, puloutputlen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ExtRSAPubKeyOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ExtRSAPubKeyOperation, pboutdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ExtRSAPubKeyOperation, puloutputlen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtRSAPriKeyOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtRSAPriKeyOperation, hdev_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtRSAPriKeyOperation, prsaprikeyblob_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtRSAPriKeyOperation, pbinput_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtRSAPriKeyOperation, ulinputlen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtRSAPriKeyOperation, pboutdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtRSAPriKeyOperation, puloutputlen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ExtRSAPriKeyOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ExtRSAPriKeyOperation, pboutdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ExtRSAPriKeyOperation, puloutputlen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenECCKeyPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenECCKeyPair, hcontainer_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenECCKeyPair, ulalgid_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenECCKeyPair, pblob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_GenECCKeyPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_GenECCKeyPair, pblob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ImportECCKeyPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ImportECCKeyPair, hcontainer_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ImportECCKeyPair, penvelopedkeyblob_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ImportECCKeyPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ECCSignData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ECCSignData, hcontainer_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ECCSignData, pbdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ECCSignData, uldatalen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ECCSignData, psignature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ECCSignData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ECCSignData, psignature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ECCVerify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ECCVerify, hdev_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ECCVerify, peccpubkeyblob_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ECCVerify, pbdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ECCVerify, uldatalen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ECCVerify, psignature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ECCVerify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ECCExportSessionKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ECCExportSessionKey, hcontainer_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ECCExportSessionKey, ulalgid_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ECCExportSessionKey, ppubkey_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ECCExportSessionKey, pdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ECCExportSessionKey, phsessionkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ECCExportSessionKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ECCExportSessionKey, pdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ECCExportSessionKey, phsessionkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtECCEncrypt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtECCEncrypt, hdev_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtECCEncrypt, peccpubkeyblob_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtECCEncrypt, pbplaintext_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtECCEncrypt, ulplaintextlen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtECCEncrypt, pbciphertext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ExtECCEncrypt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ExtECCEncrypt, pbciphertext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtECCDecrypt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtECCDecrypt, hdev_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtECCDecrypt, peccprikeyblob_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtECCDecrypt, pbciphertext_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtECCDecrypt, pbplaintext_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtECCDecrypt, pulplaintextlen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ExtECCDecrypt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ExtECCDecrypt, pbplaintext_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ExtECCDecrypt, pulplaintextlen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtECCSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtECCSign, hdev_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtECCSign, peccprikeyblob_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtECCSign, pbdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtECCSign, uldatalen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtECCSign, psignature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ExtECCSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ExtECCSign, psignature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtECCVerify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtECCVerify, hdev_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtECCVerify, peccpubkeyblob_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtECCVerify, pbdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtECCVerify, uldatalen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExtECCVerify, psignature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ExtECCVerify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenerateAgreementDataWithECC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenerateAgreementDataWithECC, hcontainer_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenerateAgreementDataWithECC, ulalgid_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenerateAgreementDataWithECC, ptempeccpubkeyblob_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenerateAgreementDataWithECC, pbid_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenerateAgreementDataWithECC, ulidlen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenerateAgreementDataWithECC, phagreementhandle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_GenerateAgreementDataWithECC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_GenerateAgreementDataWithECC, ptempeccpubkeyblob_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_GenerateAgreementDataWithECC, phagreementhandle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenerateAgreementDataAndKeyWithECC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenerateAgreementDataAndKeyWithECC, hcontainer_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenerateAgreementDataAndKeyWithECC, ulalgid_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenerateAgreementDataAndKeyWithECC, psponsoreccpubkeyblob_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenerateAgreementDataAndKeyWithECC, psponsortempeccpubkeyblob_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenerateAgreementDataAndKeyWithECC, ptempeccpubkeyblob_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenerateAgreementDataAndKeyWithECC, pbid_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenerateAgreementDataAndKeyWithECC, ulidlen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenerateAgreementDataAndKeyWithECC, pbsponsorid_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenerateAgreementDataAndKeyWithECC, ulsponsoridlen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenerateAgreementDataAndKeyWithECC, phkeyhandle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_GenerateAgreementDataAndKeyWithECC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_GenerateAgreementDataAndKeyWithECC, ptempeccpubkeyblob_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_GenerateAgreementDataAndKeyWithECC, phagreementhandle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenerateKeyWithECC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenerateKeyWithECC, hagreementhandle_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenerateKeyWithECC, peccpubkeyblob_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenerateKeyWithECC, ptempeccpubkeyblob_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenerateKeyWithECC, pbid_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenerateKeyWithECC, ulidlen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GenerateKeyWithECC, phkeyhandle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_GenerateKeyWithECC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_GenerateKeyWithECC, phkeyhandle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExportPublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExportPublicKey, hcontainer_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExportPublicKey, bsignflag_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExportPublicKey, pbblob_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExportPublicKey, pulbloblen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ExportPublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ExportPublicKey, pbblob_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ExportPublicKey, pulbloblen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ImportSessionKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ImportSessionKey, hcontainer_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ImportSessionKey, ulalgid_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ImportSessionKey, pbwrappeddata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ImportSessionKey, ulwrappedlen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ImportSessionKey, phkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ImportSessionKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ImportSessionKey, phkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_SetSymmKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_SetSymmKey, hdev_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_SetSymmKey, pbkey_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_SetSymmKey, ulalgid_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_SetSymmKey, phkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_SetSymmKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_SetSymmKey, phkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_EncryptInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_EncryptInit, hkey_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_EncryptInit, encryptparam_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_EncryptInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_Encrypt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_Encrypt, hkey_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_Encrypt, pbdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_Encrypt, uldatalen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_Encrypt, pbencrypteddata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_Encrypt, pulencryptedlen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_Encrypt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_Encrypt, pbencrypteddata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_Encrypt, pulencryptedlen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_EncryptUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_EncryptUpdate, hkey_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_EncryptUpdate, pbdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_EncryptUpdate, uldatalen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_EncryptUpdate, pbencrypteddata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_EncryptUpdate, pulencryptedlen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_EncryptUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_EncryptUpdate, pbencrypteddata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_EncryptUpdate, pulencryptedlen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_EncryptFinal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_EncryptFinal, hkey_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_EncryptFinal, pbencrypteddata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_EncryptFinal, pulencrypteddatalen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_EncryptFinal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_EncryptFinal, pbencrypteddata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_EncryptFinal, pulencrypteddatalen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DecryptInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DecryptInit, hkey_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DecryptInit, decryptparam_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_DecryptInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_Decrypt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_Decrypt, hkey_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_Decrypt, pbencrypteddata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_Decrypt, ulencryptedlen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_Decrypt, pbdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_Decrypt, puldatalen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_Decrypt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_Decrypt, pbdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_Decrypt, puldatalen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DecryptUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DecryptUpdate, hkey_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DecryptUpdate, pbencrypteddata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DecryptUpdate, ulencryptedlen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DecryptUpdate, pbdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DecryptUpdate, puldatalen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_DecryptUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_DecryptUpdate, pbdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_DecryptUpdate, puldatalen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DecryptFinal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DecryptFinal, hkey_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DecryptFinal, pbplaintext_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DecryptFinal, pulplaintextlen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_DecryptFinal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_DecryptFinal, pbplaintext_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_DecryptFinal, pulplaintextlen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DigestInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DigestInit, hdev_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DigestInit, ulalgid_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DigestInit, ppubkey_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DigestInit, pucid_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DigestInit, ulidlen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DigestInit, phhash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_DigestInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_DigestInit, phhash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_Digest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_Digest, hhash_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_Digest, pbdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_Digest, uldatalen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_Digest, pbhashdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_Digest, pulhashlen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_Digest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_Digest, pbhashdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_Digest, pulhashlen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DigestUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DigestUpdate, hhash_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DigestUpdate, pbdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DigestUpdate, uldatalen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_DigestUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DigestFinal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DigestFinal, hhash_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DigestFinal, phashdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_DigestFinal, pulhashlen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_DigestFinal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_DigestFinal, phashdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_DigestFinal, pulhashlen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_MacInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_MacInit, hkey_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_MacInit, macparam_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_MacInit, phmac_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_MacInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_MacInit, phmac_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_Mac, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_Mac, hmac_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_Mac, pbdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_Mac, uldatalen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_Mac, pbmacdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_Mac, pulmaclen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_Mac, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_Mac, pbmacdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_Mac, pulmaclen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_MacUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_MacUpdate, hmac_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_MacUpdate, pbdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_MacUpdate, uldatalen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_MacUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_MacFinal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_MacFinal, hmac_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_MacFinal, pbmacdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_MacFinal, pulmacdatalen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_MacFinal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_MacFinal, pbmacdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_MacFinal, pulmacdatalen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_CloseHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_CloseHandle, hhandle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_CloseHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_Transmit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_Transmit, hdev_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_Transmit, pbcommand_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_Transmit, ulcommandlen_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_Transmit, pbdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_Transmit, puldatalen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_Transmit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_Transmit, pbdata_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_Transmit, puldatalen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ImportCertificate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ImportCertificate, hcontainer_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ImportCertificate, bsignflag_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ImportCertificate, pbcert_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ImportCertificate, ulcertlen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ImportCertificate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExportCertificate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExportCertificate, hcontainer_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExportCertificate, bsignflag_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExportCertificate, pbcert_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_ExportCertificate, pulcertlen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ExportCertificate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ExportCertificate, pbcert_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_ExportCertificate, pulcertlen_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GetContainerProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GetContainerProperty, hcontainer_),
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Req_SKF_GetContainerProperty, pulconproperty_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_GetContainerProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::westone::skf::Rsp_SKF_GetContainerProperty, pulconproperty_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::westone::skf::WST_PROTO_UINT32)},
  { 6, -1, sizeof(::com::westone::skf::WST_PROTO_BOOL)},
  { 12, -1, sizeof(::com::westone::skf::SKF_Version)},
  { 19, -1, sizeof(::com::westone::skf::SKF_DevInfo)},
  { 40, -1, sizeof(::com::westone::skf::SKF_RSAPUBLICKEYBLOB)},
  { 49, -1, sizeof(::com::westone::skf::SKF_RSAPRIVATEKEYBLOB)},
  { 64, -1, sizeof(::com::westone::skf::SKF_ECCPUBLICKEYBLOB)},
  { 72, -1, sizeof(::com::westone::skf::SKF_ECCPRIVATEKEYBLOB)},
  { 79, -1, sizeof(::com::westone::skf::SKF_ECCCIPHERBLOB)},
  { 89, -1, sizeof(::com::westone::skf::SKF_ECCSIGNATUREBLOB)},
  { 96, -1, sizeof(::com::westone::skf::SKF_BLOCKCIPHERPARAM)},
  { 105, -1, sizeof(::com::westone::skf::SKF_ENVELOPEDKEYBLOB)},
  { 116, -1, sizeof(::com::westone::skf::SKF_FILEATTRIBUTES)},
  { 125, -1, sizeof(::com::westone::skf::Req_SKF_WaitForDevEvent)},
  { 133, -1, sizeof(::com::westone::skf::Rsp_SKF_WaitForDevEvent)},
  { 141, -1, sizeof(::com::westone::skf::Req_SKF_CancelWaitForDevEvent)},
  { 146, -1, sizeof(::com::westone::skf::Rsp_SKF_CancelWaitForDevEvent)},
  { 151, -1, sizeof(::com::westone::skf::Req_SKF_EnumDev)},
  { 159, -1, sizeof(::com::westone::skf::Rsp_SKF_EnumDev)},
  { 166, -1, sizeof(::com::westone::skf::Req_SKF_ConnectDev)},
  { 173, -1, sizeof(::com::westone::skf::Rsp_SKF_ConnectDev)},
  { 179, -1, sizeof(::com::westone::skf::Req_SKF_DisConnectDev)},
  { 185, -1, sizeof(::com::westone::skf::Rsp_SKF_DisConnectDev)},
  { 190, -1, sizeof(::com::westone::skf::Req_SKF_GetDevState)},
  { 197, -1, sizeof(::com::westone::skf::Rsp_SKF_GetDevState)},
  { 203, -1, sizeof(::com::westone::skf::Req_SKF_SetLabel)},
  { 210, -1, sizeof(::com::westone::skf::Rsp_SKF_SetLabel)},
  { 215, -1, sizeof(::com::westone::skf::Req_SKF_GetDevInfo)},
  { 222, -1, sizeof(::com::westone::skf::Rsp_SKF_GetDevInfo)},
  { 228, -1, sizeof(::com::westone::skf::Req_SKF_LockDev)},
  { 235, -1, sizeof(::com::westone::skf::Rsp_SKF_LockDev)},
  { 240, -1, sizeof(::com::westone::skf::Req_SKF_UnlockDev)},
  { 246, -1, sizeof(::com::westone::skf::Rsp_SKF_UnlockDev)},
  { 251, -1, sizeof(::com::westone::skf::Req_SKF_ChangeDevAuthKey)},
  { 259, -1, sizeof(::com::westone::skf::Rsp_SKF_ChangeDevAuthKey)},
  { 264, -1, sizeof(::com::westone::skf::Req_SKF_DevAuth)},
  { 272, -1, sizeof(::com::westone::skf::Rsp_SKF_DevAuth)},
  { 277, -1, sizeof(::com::westone::skf::Req_SKF_ChangePIN)},
  { 287, -1, sizeof(::com::westone::skf::Rsp_SKF_ChangePIN)},
  { 293, -1, sizeof(::com::westone::skf::Req_SKF_GetPINInfo)},
  { 303, -1, sizeof(::com::westone::skf::Rsp_SKF_GetPINInfo)},
  { 311, -1, sizeof(::com::westone::skf::Req_SKF_VerifyPIN)},
  { 320, -1, sizeof(::com::westone::skf::Rsp_SKF_VerifyPIN)},
  { 326, -1, sizeof(::com::westone::skf::Req_SKF_UnblockPIN)},
  { 335, -1, sizeof(::com::westone::skf::Rsp_SKF_UnblockPIN)},
  { 341, -1, sizeof(::com::westone::skf::Req_SKF_ClearSecureState)},
  { 347, -1, sizeof(::com::westone::skf::Rsp_SKF_ClearSecureState)},
  { 352, -1, sizeof(::com::westone::skf::Req_SKF_CreateApplication)},
  { 365, -1, sizeof(::com::westone::skf::Rsp_SKF_CreateApplication)},
  { 371, -1, sizeof(::com::westone::skf::Req_SKF_EnumApplication)},
  { 379, -1, sizeof(::com::westone::skf::Rsp_SKF_EnumApplication)},
  { 386, -1, sizeof(::com::westone::skf::Req_SKF_DeleteApplication)},
  { 393, -1, sizeof(::com::westone::skf::Rsp_SKF_DeleteApplication)},
  { 398, -1, sizeof(::com::westone::skf::Req_SKF_OpenApplication)},
  { 406, -1, sizeof(::com::westone::skf::Rsp_SKF_OpenApplication)},
  { 412, -1, sizeof(::com::westone::skf::Req_SKF_CloseApplication)},
  { 418, -1, sizeof(::com::westone::skf::Rsp_SKF_CloseApplication)},
  { 423, -1, sizeof(::com::westone::skf::Req_SKF_CreateFile)},
  { 433, -1, sizeof(::com::westone::skf::Rsp_SKF_CreateFile)},
  { 438, -1, sizeof(::com::westone::skf::Req_SKF_DeleteFile)},
  { 445, -1, sizeof(::com::westone::skf::Rsp_SKF_DeleteFile)},
  { 450, -1, sizeof(::com::westone::skf::Req_SKF_EnumFiles)},
  { 458, -1, sizeof(::com::westone::skf::Rsp_SKF_EnumFiles)},
  { 465, -1, sizeof(::com::westone::skf::Req_SKF_GetFileInfo)},
  { 473, -1, sizeof(::com::westone::skf::Rsp_SKF_GetFileInfo)},
  { 479, -1, sizeof(::com::westone::skf::Req_SKF_ReadFile)},
  { 490, -1, sizeof(::com::westone::skf::Rsp_SKF_ReadFile)},
  { 497, -1, sizeof(::com::westone::skf::Req_SKF_WriteFile)},
  { 507, -1, sizeof(::com::westone::skf::Rsp_SKF_WriteFile)},
  { 512, -1, sizeof(::com::westone::skf::Req_SKF_CreateContainer)},
  { 520, -1, sizeof(::com::westone::skf::Rsp_SKF_CreateContainer)},
  { 526, -1, sizeof(::com::westone::skf::Req_SKF_DeleteContainer)},
  { 533, -1, sizeof(::com::westone::skf::Rsp_SKF_DeleteContainer)},
  { 538, -1, sizeof(::com::westone::skf::Req_SKF_OpenContainer)},
  { 546, -1, sizeof(::com::westone::skf::Rsp_SKF_OpenContainer)},
  { 552, -1, sizeof(::com::westone::skf::Req_SKF_CloseContainer)},
  { 558, -1, sizeof(::com::westone::skf::Rsp_SKF_CloseContainer)},
  { 563, -1, sizeof(::com::westone::skf::Req_SKF_EnumContainer)},
  { 571, -1, sizeof(::com::westone::skf::Rsp_SKF_EnumContainer)},
  { 578, -1, sizeof(::com::westone::skf::Req_SKF_GetContainerType)},
  { 585, -1, sizeof(::com::westone::skf::Rsp_SKF_GetContainerType)},
  { 591, -1, sizeof(::com::westone::skf::Req_SKF_GenRandom)},
  { 599, -1, sizeof(::com::westone::skf::Rsp_SKF_GenRandom)},
  { 605, -1, sizeof(::com::westone::skf::Req_SKF_GenExtRSAKey)},
  { 613, -1, sizeof(::com::westone::skf::Rsp_SKF_GenExtRSAKey)},
  { 619, -1, sizeof(::com::westone::skf::Req_SKF_GenRSAKeyPair)},
  { 627, -1, sizeof(::com::westone::skf::Rsp_SKF_GenRSAKeyPair)},
  { 633, -1, sizeof(::com::westone::skf::Req_SKF_ImportRSAKeyPair)},
  { 644, -1, sizeof(::com::westone::skf::Rsp_SKF_ImportRSAKeyPair)},
  { 649, -1, sizeof(::com::westone::skf::Req_SKF_RSASignData)},
  { 659, -1, sizeof(::com::westone::skf::Rsp_SKF_RSASignData)},
  { 666, -1, sizeof(::com::westone::skf::Req_SKF_RSAVerify)},
  { 677, -1, sizeof(::com::westone::skf::Rsp_SKF_RSAVerify)},
  { 682, -1, sizeof(::com::westone::skf::Req_SKF_RSAExportSessionKey)},
  { 693, -1, sizeof(::com::westone::skf::Rsp_SKF_RSAExportSessionKey)},
  { 698, -1, sizeof(::com::westone::skf::Req_SKF_ExtRSAPubKeyOperation)},
  { 709, -1, sizeof(::com::westone::skf::Rsp_SKF_ExtRSAPubKeyOperation)},
  { 716, -1, sizeof(::com::westone::skf::Req_SKF_ExtRSAPriKeyOperation)},
  { 727, -1, sizeof(::com::westone::skf::Rsp_SKF_ExtRSAPriKeyOperation)},
  { 734, -1, sizeof(::com::westone::skf::Req_SKF_GenECCKeyPair)},
  { 742, -1, sizeof(::com::westone::skf::Rsp_SKF_GenECCKeyPair)},
  { 748, -1, sizeof(::com::westone::skf::Req_SKF_ImportECCKeyPair)},
  { 755, -1, sizeof(::com::westone::skf::Rsp_SKF_ImportECCKeyPair)},
  { 760, -1, sizeof(::com::westone::skf::Req_SKF_ECCSignData)},
  { 769, -1, sizeof(::com::westone::skf::Rsp_SKF_ECCSignData)},
  { 775, -1, sizeof(::com::westone::skf::Req_SKF_ECCVerify)},
  { 785, -1, sizeof(::com::westone::skf::Rsp_SKF_ECCVerify)},
  { 790, -1, sizeof(::com::westone::skf::Req_SKF_ECCExportSessionKey)},
  { 800, -1, sizeof(::com::westone::skf::Rsp_SKF_ECCExportSessionKey)},
  { 807, -1, sizeof(::com::westone::skf::Req_SKF_ExtECCEncrypt)},
  { 817, -1, sizeof(::com::westone::skf::Rsp_SKF_ExtECCEncrypt)},
  { 823, -1, sizeof(::com::westone::skf::Req_SKF_ExtECCDecrypt)},
  { 833, -1, sizeof(::com::westone::skf::Rsp_SKF_ExtECCDecrypt)},
  { 840, -1, sizeof(::com::westone::skf::Req_SKF_ExtECCSign)},
  { 850, -1, sizeof(::com::westone::skf::Rsp_SKF_ExtECCSign)},
  { 856, -1, sizeof(::com::westone::skf::Req_SKF_ExtECCVerify)},
  { 866, -1, sizeof(::com::westone::skf::Rsp_SKF_ExtECCVerify)},
  { 871, -1, sizeof(::com::westone::skf::Req_SKF_GenerateAgreementDataWithECC)},
  { 882, -1, sizeof(::com::westone::skf::Rsp_SKF_GenerateAgreementDataWithECC)},
  { 889, -1, sizeof(::com::westone::skf::Req_SKF_GenerateAgreementDataAndKeyWithECC)},
  { 904, -1, sizeof(::com::westone::skf::Rsp_SKF_GenerateAgreementDataAndKeyWithECC)},
  { 911, -1, sizeof(::com::westone::skf::Req_SKF_GenerateKeyWithECC)},
  { 922, -1, sizeof(::com::westone::skf::Rsp_SKF_GenerateKeyWithECC)},
  { 928, -1, sizeof(::com::westone::skf::Req_SKF_ExportPublicKey)},
  { 937, -1, sizeof(::com::westone::skf::Rsp_SKF_ExportPublicKey)},
  { 944, -1, sizeof(::com::westone::skf::Req_SKF_ImportSessionKey)},
  { 954, -1, sizeof(::com::westone::skf::Rsp_SKF_ImportSessionKey)},
  { 960, -1, sizeof(::com::westone::skf::Req_SKF_SetSymmKey)},
  { 969, -1, sizeof(::com::westone::skf::Rsp_SKF_SetSymmKey)},
  { 975, -1, sizeof(::com::westone::skf::Req_SKF_EncryptInit)},
  { 982, -1, sizeof(::com::westone::skf::Rsp_SKF_EncryptInit)},
  { 987, -1, sizeof(::com::westone::skf::Req_SKF_Encrypt)},
  { 997, -1, sizeof(::com::westone::skf::Rsp_SKF_Encrypt)},
  { 1004, -1, sizeof(::com::westone::skf::Req_SKF_EncryptUpdate)},
  { 1014, -1, sizeof(::com::westone::skf::Rsp_SKF_EncryptUpdate)},
  { 1021, -1, sizeof(::com::westone::skf::Req_SKF_EncryptFinal)},
  { 1029, -1, sizeof(::com::westone::skf::Rsp_SKF_EncryptFinal)},
  { 1036, -1, sizeof(::com::westone::skf::Req_SKF_DecryptInit)},
  { 1043, -1, sizeof(::com::westone::skf::Rsp_SKF_DecryptInit)},
  { 1048, -1, sizeof(::com::westone::skf::Req_SKF_Decrypt)},
  { 1058, -1, sizeof(::com::westone::skf::Rsp_SKF_Decrypt)},
  { 1065, -1, sizeof(::com::westone::skf::Req_SKF_DecryptUpdate)},
  { 1075, -1, sizeof(::com::westone::skf::Rsp_SKF_DecryptUpdate)},
  { 1082, -1, sizeof(::com::westone::skf::Req_SKF_DecryptFinal)},
  { 1090, -1, sizeof(::com::westone::skf::Rsp_SKF_DecryptFinal)},
  { 1097, -1, sizeof(::com::westone::skf::Req_SKF_DigestInit)},
  { 1108, -1, sizeof(::com::westone::skf::Rsp_SKF_DigestInit)},
  { 1114, -1, sizeof(::com::westone::skf::Req_SKF_Digest)},
  { 1124, -1, sizeof(::com::westone::skf::Rsp_SKF_Digest)},
  { 1131, -1, sizeof(::com::westone::skf::Req_SKF_DigestUpdate)},
  { 1139, -1, sizeof(::com::westone::skf::Rsp_SKF_DigestUpdate)},
  { 1144, -1, sizeof(::com::westone::skf::Req_SKF_DigestFinal)},
  { 1152, -1, sizeof(::com::westone::skf::Rsp_SKF_DigestFinal)},
  { 1159, -1, sizeof(::com::westone::skf::Req_SKF_MacInit)},
  { 1167, -1, sizeof(::com::westone::skf::Rsp_SKF_MacInit)},
  { 1173, -1, sizeof(::com::westone::skf::Req_SKF_Mac)},
  { 1183, -1, sizeof(::com::westone::skf::Rsp_SKF_Mac)},
  { 1190, -1, sizeof(::com::westone::skf::Req_SKF_MacUpdate)},
  { 1198, -1, sizeof(::com::westone::skf::Rsp_SKF_MacUpdate)},
  { 1203, -1, sizeof(::com::westone::skf::Req_SKF_MacFinal)},
  { 1211, -1, sizeof(::com::westone::skf::Rsp_SKF_MacFinal)},
  { 1218, -1, sizeof(::com::westone::skf::Req_SKF_CloseHandle)},
  { 1224, -1, sizeof(::com::westone::skf::Rsp_SKF_CloseHandle)},
  { 1229, -1, sizeof(::com::westone::skf::Req_SKF_Transmit)},
  { 1239, -1, sizeof(::com::westone::skf::Rsp_SKF_Transmit)},
  { 1246, -1, sizeof(::com::westone::skf::Req_SKF_ImportCertificate)},
  { 1255, -1, sizeof(::com::westone::skf::Rsp_SKF_ImportCertificate)},
  { 1260, -1, sizeof(::com::westone::skf::Req_SKF_ExportCertificate)},
  { 1269, -1, sizeof(::com::westone::skf::Rsp_SKF_ExportCertificate)},
  { 1276, -1, sizeof(::com::westone::skf::Req_SKF_GetContainerProperty)},
  { 1283, -1, sizeof(::com::westone::skf::Rsp_SKF_GetContainerProperty)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_WST_PROTO_UINT32_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_WST_PROTO_BOOL_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_SKF_Version_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_SKF_DevInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_SKF_RSAPUBLICKEYBLOB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_SKF_RSAPRIVATEKEYBLOB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_SKF_ECCPUBLICKEYBLOB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_SKF_ECCPRIVATEKEYBLOB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_SKF_ECCCIPHERBLOB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_SKF_ECCSIGNATUREBLOB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_SKF_BLOCKCIPHERPARAM_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_SKF_ENVELOPEDKEYBLOB_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_SKF_FILEATTRIBUTES_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_WaitForDevEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_WaitForDevEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_CancelWaitForDevEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_CancelWaitForDevEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_EnumDev_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_EnumDev_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_ConnectDev_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_ConnectDev_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_DisConnectDev_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_DisConnectDev_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_GetDevState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_GetDevState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_SetLabel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_SetLabel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_GetDevInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_GetDevInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_LockDev_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_LockDev_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_UnlockDev_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_UnlockDev_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_ChangeDevAuthKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_ChangeDevAuthKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_DevAuth_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_DevAuth_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_ChangePIN_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_ChangePIN_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_GetPINInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_GetPINInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_VerifyPIN_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_VerifyPIN_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_UnblockPIN_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_UnblockPIN_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_ClearSecureState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_ClearSecureState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_CreateApplication_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_CreateApplication_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_EnumApplication_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_EnumApplication_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_DeleteApplication_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_DeleteApplication_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_OpenApplication_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_OpenApplication_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_CloseApplication_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_CloseApplication_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_CreateFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_CreateFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_DeleteFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_DeleteFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_EnumFiles_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_EnumFiles_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_GetFileInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_GetFileInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_ReadFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_ReadFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_WriteFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_WriteFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_CreateContainer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_CreateContainer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_DeleteContainer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_DeleteContainer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_OpenContainer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_OpenContainer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_CloseContainer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_CloseContainer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_EnumContainer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_EnumContainer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_GetContainerType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_GetContainerType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_GenRandom_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_GenRandom_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_GenExtRSAKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_GenExtRSAKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_GenRSAKeyPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_GenRSAKeyPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_ImportRSAKeyPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_ImportRSAKeyPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_RSASignData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_RSASignData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_RSAVerify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_RSAVerify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_RSAExportSessionKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_RSAExportSessionKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_ExtRSAPubKeyOperation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_ExtRSAPubKeyOperation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_ExtRSAPriKeyOperation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_ExtRSAPriKeyOperation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_GenECCKeyPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_GenECCKeyPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_ImportECCKeyPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_ImportECCKeyPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_ECCSignData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_ECCSignData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_ECCVerify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_ECCVerify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_ECCExportSessionKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_ECCExportSessionKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_ExtECCEncrypt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_ExtECCEncrypt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_ExtECCDecrypt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_ExtECCDecrypt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_ExtECCSign_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_ExtECCSign_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_ExtECCVerify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_ExtECCVerify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_GenerateAgreementDataWithECC_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_GenerateAgreementDataWithECC_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_GenerateAgreementDataAndKeyWithECC_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_GenerateAgreementDataAndKeyWithECC_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_GenerateKeyWithECC_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_GenerateKeyWithECC_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_ExportPublicKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_ExportPublicKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_ImportSessionKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_ImportSessionKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_SetSymmKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_SetSymmKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_EncryptInit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_EncryptInit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_Encrypt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_Encrypt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_EncryptUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_EncryptUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_EncryptFinal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_EncryptFinal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_DecryptInit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_DecryptInit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_Decrypt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_Decrypt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_DecryptUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_DecryptUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_DecryptFinal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_DecryptFinal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_DigestInit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_DigestInit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_Digest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_Digest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_DigestUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_DigestUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_DigestFinal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_DigestFinal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_MacInit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_MacInit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_Mac_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_Mac_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_MacUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_MacUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_MacFinal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_MacFinal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_CloseHandle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_CloseHandle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_Transmit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_Transmit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_ImportCertificate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_ImportCertificate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_ExportCertificate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_ExportCertificate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Req_SKF_GetContainerProperty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::westone::skf::_Rsp_SKF_GetContainerProperty_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_skf_2eproto = {
  {}, AddDescriptors_skf_2eproto, "skf.proto", schemas,
  file_default_instances, TableStruct_skf_2eproto::offsets,
  file_level_metadata_skf_2eproto, 171, file_level_enum_descriptors_skf_2eproto, file_level_service_descriptors_skf_2eproto,
};

const char descriptor_table_protodef_skf_2eproto[] =
  "\n\tskf.proto\022\017com.westone.skf\"$\n\020WST_PROT"
  "O_UINT32\022\020\n\010u32value\030\001 \001(\r\"#\n\016WST_PROTO_"
  "BOOL\022\021\n\tboolvalue\030\001 \001(\010\"q\n\013SKF_Version\0220"
  "\n\005major\030\001 \001(\0132!.com.westone.skf.WST_PROT"
  "O_UINT32\0220\n\005minor\030\002 \001(\0132!.com.westone.sk"
  "f.WST_PROTO_UINT32\"\302\005\n\013SKF_DevInfo\022-\n\007ve"
  "rsion\030\001 \001(\0132\034.com.westone.skf.SKF_Versio"
  "n\022\024\n\014Manufacturer\030\002 \001(\014\022\016\n\006Issuer\030\003 \001(\014\022"
  "\r\n\005Label\030\004 \001(\014\022\024\n\014SerialNumber\030\005 \001(\014\022/\n\t"
  "HWVersion\030\006 \001(\0132\034.com.westone.skf.SKF_Ve"
  "rsion\0225\n\017FirmwareVersion\030\007 \001(\0132\034.com.wes"
  "tone.skf.SKF_Version\0224\n\tAlgSymCap\030\010 \001(\0132"
  "!.com.westone.skf.WST_PROTO_UINT32\0225\n\nAl"
  "gAsymCap\030\t \001(\0132!.com.westone.skf.WST_PRO"
  "TO_UINT32\0225\n\nAlgHashCap\030\n \001(\0132!.com.west"
  "one.skf.WST_PROTO_UINT32\0227\n\014DevAuthAlgId"
  "\030\013 \001(\0132!.com.westone.skf.WST_PROTO_UINT3"
  "2\0225\n\nTotalSpace\030\014 \001(\0132!.com.westone.skf."
  "WST_PROTO_UINT32\0224\n\tFreeSpace\030\r \001(\0132!.co"
  "m.westone.skf.WST_PROTO_UINT32\022;\n\020MaxEcc"
  "BufferSize\030\016 \001(\0132!.com.westone.skf.WST_P"
  "ROTO_UINT32\0228\n\rMaxBufferSize\030\017 \001(\0132!.com"
  ".westone.skf.WST_PROTO_UINT32\022\020\n\010Reserve"
  "d\030\020 \001(\014\"\244\001\n\024SKF_RSAPUBLICKEYBLOB\0220\n\005AlgI"
  "D\030\001 \001(\0132!.com.westone.skf.WST_PROTO_UINT"
  "32\0221\n\006BitLen\030\002 \001(\0132!.com.westone.skf.WST"
  "_PROTO_UINT32\022\017\n\007Modulus\030\003 \001(\014\022\026\n\016Public"
  "Exponent\030\004 \001(\014\"\243\002\n\025SKF_RSAPRIVATEKEYBLOB"
  "\0220\n\005AlgID\030\001 \001(\0132!.com.westone.skf.WST_PR"
  "OTO_UINT32\0221\n\006BitLen\030\002 \001(\0132!.com.westone"
  ".skf.WST_PROTO_UINT32\022\017\n\007Modulus\030\003 \001(\014\022\026"
  "\n\016PublicExponent\030\004 \001(\014\022\027\n\017PrivateExponen"
  "t\030\005 \001(\014\022\016\n\006Prime1\030\006 \001(\014\022\016\n\006Prime2\030\007 \001(\014\022"
  "\026\n\016Prime1Exponent\030\010 \001(\014\022\026\n\016Prime2Exponen"
  "t\030\t \001(\014\022\023\n\013Coefficient\030\n \001(\014\"s\n\024SKF_ECCP"
  "UBLICKEYBLOB\0221\n\006BitLen\030\001 \001(\0132!.com.westo"
  "ne.skf.WST_PROTO_UINT32\022\023\n\013XCoordinate\030\002"
  " \001(\014\022\023\n\013YCoordinate\030\003 \001(\014\"^\n\025SKF_ECCPRIV"
  "ATEKEYBLOB\0221\n\006BitLen\030\001 \001(\0132!.com.westone"
  ".skf.WST_PROTO_UINT32\022\022\n\nPrivateKey\030\002 \001("
  "\014\"\221\001\n\021SKF_ECCCIPHERBLOB\022\023\n\013XCoordinate\030\001"
  " \001(\014\022\023\n\013YCoordinate\030\002 \001(\014\022\014\n\004HASH\030\003 \001(\014\022"
  "4\n\tCipherLen\030\004 \001(\0132!.com.westone.skf.WST"
  "_PROTO_UINT32\022\016\n\006Cipher\030\005 \001(\014\",\n\024SKF_ECC"
  "SIGNATUREBLOB\022\t\n\001r\030\001 \001(\014\022\t\n\001s\030\002 \001(\014\"\303\001\n\024"
  "SKF_BLOCKCIPHERPARAM\022\n\n\002IV\030\001 \001(\014\0220\n\005IVLe"
  "n\030\002 \001(\0132!.com.westone.skf.WST_PROTO_UINT"
  "32\0226\n\013PaddingType\030\003 \001(\0132!.com.westone.sk"
  "f.WST_PROTO_UINT32\0225\n\nFeedBitLen\030\004 \001(\0132!"
  ".com.westone.skf.WST_PROTO_UINT32\"\302\002\n\024SK"
  "F_ENVELOPEDKEYBLOB\0222\n\007Version\030\001 \001(\0132!.co"
  "m.westone.skf.WST_PROTO_UINT32\0226\n\013ulSymm"
  "AlgID\030\002 \001(\0132!.com.westone.skf.WST_PROTO_"
  "UINT32\0221\n\006ulBits\030\003 \001(\0132!.com.westone.skf"
  ".WST_PROTO_UINT32\022\031\n\021cbEncryptedPriKey\030\004"
  " \001(\014\0225\n\006PubKey\030\005 \001(\0132%.com.westone.skf.S"
  "KF_ECCPUBLICKEYBLOB\0229\n\rECCCipherBlob\030\006 \001"
  "(\0132\".com.westone.skf.SKF_ECCCIPHERBLOB\"\312"
  "\001\n\022SKF_FILEATTRIBUTES\022\020\n\010FileName\030\001 \001(\014\022"
  "3\n\010FileSize\030\002 \001(\0132!.com.westone.skf.WST_"
  "PROTO_UINT32\0225\n\nReadRights\030\003 \001(\0132!.com.w"
  "estone.skf.WST_PROTO_UINT32\0226\n\013WriteRigh"
  "ts\030\004 \001(\0132!.com.westone.skf.WST_PROTO_UIN"
  "T32\"\233\001\n\027Req_SKF_WaitForDevEvent\022\021\n\tszDev"
  "Name\030\001 \001(\014\0228\n\rpulDevNameLen\030\002 \001(\0132!.com."
  "westone.skf.WST_PROTO_UINT32\0223\n\010pulEvent"
  "\030\003 \001(\0132!.com.westone.skf.WST_PROTO_UINT3"
  "2\"\233\001\n\027Rsp_SKF_WaitForDevEvent\022\021\n\tszDevNa"
  "me\030\001 \001(\014\0228\n\rpulDevNameLen\030\002 \001(\0132!.com.we"
  "stone.skf.WST_PROTO_UINT32\0223\n\010pulEvent\030\003"
  " \001(\0132!.com.westone.skf.WST_PROTO_UINT32\""
  "\037\n\035Req_SKF_CancelWaitForDevEvent\"\037\n\035Rsp_"
  "SKF_CancelWaitForDevEvent\"\214\001\n\017Req_SKF_En"
  "umDev\0221\n\010bPresent\030\001 \001(\0132\037.com.westone.sk"
  "f.WST_PROTO_BOOL\022\022\n\nszNameList\030\002 \001(\014\0222\n\007"
  "pulSize\030\003 \001(\0132!.com.westone.skf.WST_PROT"
  "O_UINT32\"Y\n\017Rsp_SKF_EnumDev\022\022\n\nszNameLis"
  "t\030\001 \001(\014\0222\n\007pulSize\030\002 \001(\0132!.com.westone.s"
  "kf.WST_PROTO_UINT32\"V\n\022Req_SKF_ConnectDe"
  "v\022\016\n\006szName\030\001 \001(\t\0220\n\005phDev\030\002 \001(\0132!.com.w"
  "estone.skf.WST_PROTO_UINT32\"F\n\022Rsp_SKF_C"
  "onnectDev\0220\n\005phDev\030\001 \001(\0132!.com.westone.s"
  "kf.WST_PROTO_UINT32\"H\n\025Req_SKF_DisConnec"
  "tDev\022/\n\004hDev\030\001 \001(\0132!.com.westone.skf.WST"
  "_PROTO_UINT32\"\027\n\025Rsp_SKF_DisConnectDev\"`"
  "\n\023Req_SKF_GetDevState\022\021\n\tszDevName\030\001 \001(\t"
  "\0226\n\013pulDevState\030\002 \001(\0132!.com.westone.skf."
  "WST_PROTO_UINT32\"M\n\023Rsp_SKF_GetDevState\022"
  "6\n\013pulDevState\030\001 \001(\0132!.com.westone.skf.W"
  "ST_PROTO_UINT32\"T\n\020Req_SKF_SetLabel\022/\n\004h"
  "Dev\030\001 \001(\0132!.com.westone.skf.WST_PROTO_UI"
  "NT32\022\017\n\007szLabel\030\002 \001(\t\"\022\n\020Rsp_SKF_SetLabe"
  "l\"u\n\022Req_SKF_GetDevInfo\022/\n\004hDev\030\001 \001(\0132!."
  "com.westone.skf.WST_PROTO_UINT32\022.\n\010pDev"
  "Info\030\002 \001(\0132\034.com.westone.skf.SKF_DevInfo"
  "\"D\n\022Rsp_SKF_GetDevInfo\022.\n\010pDevInfo\030\001 \001(\013"
  "2\034.com.westone.skf.SKF_DevInfo\"x\n\017Req_SK"
  "F_LockDev\022/\n\004hDev\030\001 \001(\0132!.com.westone.sk"
  "f.WST_PROTO_UINT32\0224\n\tulTimeOut\030\002 \001(\0132!."
  "com.westone.skf.WST_PROTO_UINT32\"\021\n\017Rsp_"
  "SKF_LockDev\"D\n\021Req_SKF_UnlockDev\022/\n\004hDev"
  "\030\001 \001(\0132!.com.westone.skf.WST_PROTO_UINT3"
  "2\"\023\n\021Rsp_SKF_UnlockDev\"\224\001\n\030Req_SKF_Chang"
  "eDevAuthKey\022/\n\004hDev\030\001 \001(\0132!.com.westone."
  "skf.WST_PROTO_UINT32\022\022\n\npbKeyValue\030\002 \001(\014"
  "\0223\n\010ulKeyLen\030\003 \001(\0132!.com.westone.skf.WST"
  "_PROTO_UINT32\"\032\n\030Rsp_SKF_ChangeDevAuthKe"
  "y\"\210\001\n\017Req_SKF_DevAuth\022/\n\004hDev\030\001 \001(\0132!.co"
  "m.westone.skf.WST_PROTO_UINT32\022\022\n\npbAuth"
  "Data\030\002 \001(\014\0220\n\005ulLen\030\003 \001(\0132!.com.westone."
  "skf.WST_PROTO_UINT32\"\021\n\017Rsp_SKF_DevAuth\""
  "\340\001\n\021Req_SKF_ChangePIN\0227\n\014hApplication\030\001 "
  "\001(\0132!.com.westone.skf.WST_PROTO_UINT32\0224"
  "\n\tulPINType\030\002 \001(\0132!.com.westone.skf.WST_"
  "PROTO_UINT32\022\020\n\010szOldPIN\030\003 \001(\t\022\020\n\010szNewP"
  "IN\030\004 \001(\t\0228\n\rpulRetryCount\030\005 \001(\0132!.com.we"
  "stone.skf.WST_PROTO_UINT32\"M\n\021Rsp_SKF_Ch"
  "angePIN\0228\n\rpulRetryCount\030\001 \001(\0132!.com.wes"
  "tone.skf.WST_PROTO_UINT32\"\267\002\n\022Req_SKF_Ge"
  "tPINInfo\0227\n\014hApplication\030\001 \001(\0132!.com.wes"
  "tone.skf.WST_PROTO_UINT32\0224\n\tulPINType\030\002"
  " \001(\0132!.com.westone.skf.WST_PROTO_UINT32\022"
  ";\n\020pulMaxRetryCount\030\003 \001(\0132!.com.westone."
  "skf.WST_PROTO_UINT32\022>\n\023pulRemainRetryCo"
  "unt\030\004 \001(\0132!.com.westone.skf.WST_PROTO_UI"
  "NT32\0225\n\014pbDefaultPin\030\005 \001(\0132\037.com.westone"
  ".skf.WST_PROTO_BOOL\"\310\001\n\022Rsp_SKF_GetPINIn"
  "fo\022;\n\020pulMaxRetryCount\030\001 \001(\0132!.com.westo"
  "ne.skf.WST_PROTO_UINT32\022>\n\023pulRemainRetr"
  "yCount\030\002 \001(\0132!.com.westone.skf.WST_PROTO"
  "_UINT32\0225\n\014pbDefaultPin\030\003 \001(\0132\037.com.west"
  "one.skf.WST_PROTO_BOOL\"\313\001\n\021Req_SKF_Verif"
  "yPIN\0227\n\014hApplication\030\001 \001(\0132!.com.westone"
  ".skf.WST_PROTO_UINT32\0224\n\tulPINType\030\002 \001(\013"
  "2!.com.westone.skf.WST_PROTO_UINT32\022\r\n\005s"
  "zPIN\030\003 \001(\t\0228\n\rpulRetryCount\030\004 \001(\0132!.com."
  "westone.skf.WST_PROTO_UINT32\"M\n\021Rsp_SKF_"
  "VerifyPIN\0228\n\rpulRetryCount\030\001 \001(\0132!.com.w"
  "estone.skf.WST_PROTO_UINT32\"\261\001\n\022Req_SKF_"
  "UnblockPIN\0227\n\014hApplication\030\001 \001(\0132!.com.w"
  "estone.skf.WST_PROTO_UINT32\022\022\n\nszAdminPI"
  "N\030\002 \001(\t\022\024\n\014szNewUserPIN\030\003 \001(\t\0228\n\rpulRetr"
  "yCount\030\004 \001(\0132!.com.westone.skf.WST_PROTO"
  "_UINT32\"N\n\022Rsp_SKF_UnblockPIN\0228\n\rpulRetr"
  "yCount\030\001 \001(\0132!.com.westone.skf.WST_PROTO"
  "_UINT32\"S\n\030Req_SKF_ClearSecureState\0227\n\014h"
  "Application\030\001 \001(\0132!.com.westone.skf.WST_"
  "PROTO_UINT32\"\032\n\030Rsp_SKF_ClearSecureState"
  "\"\200\003\n\031Req_SKF_CreateApplication\022/\n\004hDev\030\001"
  " \001(\0132!.com.westone.skf.WST_PROTO_UINT32\022"
  "\021\n\tszAppName\030\002 \001(\t\022\022\n\nszAdminPIN\030\003 \001(\t\022\?"
  "\n\024dwAdminPinRetryCount\030\004 \001(\0132!.com.westo"
  "ne.skf.WST_PROTO_UINT32\022\021\n\tszUserPIN\030\005 \001"
  "(\t\022>\n\023dwUserPinRetryCount\030\006 \001(\0132!.com.we"
  "stone.skf.WST_PROTO_UINT32\022=\n\022dwCreateFi"
  "leRights\030\007 \001(\0132!.com.westone.skf.WST_PRO"
  "TO_UINT32\0228\n\rphApplication\030\010 \001(\0132!.com.w"
  "estone.skf.WST_PROTO_UINT32\"U\n\031Rsp_SKF_C"
  "reateApplication\0228\n\rphApplication\030\001 \001(\0132"
  "!.com.westone.skf.WST_PROTO_UINT32\"\221\001\n\027R"
  "eq_SKF_EnumApplication\022/\n\004hDev\030\001 \001(\0132!.c"
  "om.westone.skf.WST_PROTO_UINT32\022\021\n\tszApp"
  "Name\030\002 \001(\014\0222\n\007pulSize\030\003 \001(\0132!.com.weston"
  "e.skf.WST_PROTO_UINT32\"`\n\027Rsp_SKF_EnumAp"
  "plication\022\021\n\tszAppName\030\001 \001(\014\0222\n\007pulSize\030"
  "\002 \001(\0132!.com.westone.skf.WST_PROTO_UINT32"
  "\"_\n\031Req_SKF_DeleteApplication\022/\n\004hDev\030\001 "
  "\001(\0132!.com.westone.skf.WST_PROTO_UINT32\022\021"
  "\n\tszAppName\030\002 \001(\t\"\033\n\031Rsp_SKF_DeleteAppli"
  "cation\"\227\001\n\027Req_SKF_OpenApplication\022/\n\004hD"
  "ev\030\001 \001(\0132!.com.westone.skf.WST_PROTO_UIN"
  "T32\022\021\n\tszAppName\030\002 \001(\t\0228\n\rphApplication\030"
  "\003 \001(\0132!.com.westone.skf.WST_PROTO_UINT32"
  "\"S\n\027Rsp_SKF_OpenApplication\0228\n\rphApplica"
  "tion\030\001 \001(\0132!.com.westone.skf.WST_PROTO_U"
  "INT32\"S\n\030Req_SKF_CloseApplication\0227\n\014hAp"
  "plication\030\001 \001(\0132!.com.westone.skf.WST_PR"
  "OTO_UINT32\"\032\n\030Rsp_SKF_CloseApplication\"\213"
  "\002\n\022Req_SKF_CreateFile\0227\n\014hApplication\030\001 "
  "\001(\0132!.com.westone.skf.WST_PROTO_UINT32\022\022"
  "\n\nszFileName\030\002 \001(\t\0225\n\nulFileSize\030\003 \001(\0132!"
  ".com.westone.skf.WST_PROTO_UINT32\0227\n\014ulR"
  "eadRights\030\004 \001(\0132!.com.westone.skf.WST_PR"
  "OTO_UINT32\0228\n\rulWriteRights\030\005 \001(\0132!.com."
  "westone.skf.WST_PROTO_UINT32\"\024\n\022Rsp_SKF_"
  "CreateFile\"a\n\022Req_SKF_DeleteFile\0227\n\014hApp"
  "lication\030\001 \001(\0132!.com.westone.skf.WST_PRO"
  "TO_UINT32\022\022\n\nszFileName\030\002 \001(\t\"\024\n\022Rsp_SKF"
  "_DeleteFile\"\224\001\n\021Req_SKF_EnumFiles\0227\n\014hAp"
  "plication\030\001 \001(\0132!.com.westone.skf.WST_PR"
  "OTO_UINT32\022\022\n\nszFileName\030\002 \001(\t\0222\n\007pulSiz"
  "e\030\003 \001(\0132!.com.westone.skf.WST_PROTO_UINT"
  "32\"[\n\021Rsp_SKF_EnumFiles\022\022\n\nszFileName\030\001 "
  "\001(\t\0222\n\007pulSize\030\002 \001(\0132!.com.westone.skf.W"
  "ST_PROTO_UINT32\"\232\001\n\023Req_SKF_GetFileInfo\022"
  "7\n\014hApplication\030\001 \001(\0132!.com.westone.skf."
  "WST_PROTO_UINT32\022\022\n\nszFileName\030\002 \001(\t\0226\n\t"
  "pFileInfo\030\003 \001(\0132#.com.westone.skf.SKF_FI"
  "LEATTRIBUTES\"M\n\023Rsp_SKF_GetFileInfo\0226\n\tp"
  "FileInfo\030\001 \001(\0132#.com.westone.skf.SKF_FIL"
  "EATTRIBUTES\"\220\002\n\020Req_SKF_ReadFile\0227\n\014hApp"
  "lication\030\001 \001(\0132!.com.westone.skf.WST_PRO"
  "TO_UINT32\022\022\n\nszFileName\030\002 \001(\t\0223\n\010ulOffse"
  "t\030\003 \001(\0132!.com.westone.skf.WST_PROTO_UINT"
  "32\0221\n\006ulSize\030\004 \001(\0132!.com.westone.skf.WST"
  "_PROTO_UINT32\022\021\n\tpbOutData\030\005 \001(\014\0224\n\tpulO"
  "utLen\030\006 \001(\0132!.com.westone.skf.WST_PROTO_"
  "UINT32\"[\n\020Rsp_SKF_ReadFile\022\021\n\tpbOutData\030"
  "\001 \001(\014\0224\n\tpulOutLen\030\002 \001(\0132!.com.westone.s"
  "kf.WST_PROTO_UINT32\"\330\001\n\021Req_SKF_WriteFil"
  "e\0227\n\014hApplication\030\001 \001(\0132!.com.westone.sk"
  "f.WST_PROTO_UINT32\022\022\n\nszFileName\030\002 \001(\t\0223"
  "\n\010ulOffset\030\003 \001(\0132!.com.westone.skf.WST_P"
  "ROTO_UINT32\022\016\n\006pbData\030\004 \001(\014\0221\n\006ulSize\030\005 "
  "\001(\0132!.com.westone.skf.WST_PROTO_UINT32\"\023"
  "\n\021Rsp_SKF_WriteFile\"\243\001\n\027Req_SKF_CreateCo"
  "ntainer\0227\n\014hApplication\030\001 \001(\0132!.com.west"
  "one.skf.WST_PROTO_UINT32\022\027\n\017szContainerN"
  "ame\030\002 \001(\t\0226\n\013phContainer\030\003 \001(\0132!.com.wes"
  "tone.skf.WST_PROTO_UINT32\"Q\n\027Rsp_SKF_Cre"
  "ateContainer\0226\n\013phContainer\030\001 \001(\0132!.com."
  "westone.skf.WST_PROTO_UINT32\"k\n\027Req_SKF_"
  "DeleteContainer\0227\n\014hApplication\030\001 \001(\0132!."
  "com.westone.skf.WST_PROTO_UINT32\022\027\n\017szCo"
  "ntainerName\030\002 \001(\t\"\031\n\027Rsp_SKF_DeleteConta"
  "iner\"\241\001\n\025Req_SKF_OpenContainer\0227\n\014hAppli"
  "cation\030\001 \001(\0132!.com.westone.skf.WST_PROTO"
  "_UINT32\022\027\n\017szContainerName\030\002 \001(\t\0226\n\013phCo"
  "ntainer\030\003 \001(\0132!.com.westone.skf.WST_PROT"
  "O_UINT32\"O\n\025Rsp_SKF_OpenContainer\0226\n\013phC"
  "ontainer\030\001 \001(\0132!.com.westone.skf.WST_PRO"
  "TO_UINT32\"O\n\026Req_SKF_CloseContainer\0225\n\nh"
  "Container\030\001 \001(\0132!.com.westone.skf.WST_PR"
  "OTO_UINT32\"\030\n\026Rsp_SKF_CloseContainer\"\235\001\n"
  "\025Req_SKF_EnumContainer\0227\n\014hApplication\030\001"
  " \001(\0132!.com.westone.skf.WST_PROTO_UINT32\022"
  "\027\n\017szContainerName\030\002 \001(\t\0222\n\007pulSize\030\003 \001("
  "\0132!.com.westone.skf.WST_PROTO_UINT32\"d\n\025"
  "Rsp_SKF_EnumContainer\022\027\n\017szContainerName"
  "\030\001 \001(\t\0222\n\007pulSize\030\002 \001(\0132!.com.westone.sk"
  "f.WST_PROTO_UINT32\"\216\001\n\030Req_SKF_GetContai"
  "nerType\0225\n\nhContainer\030\001 \001(\0132!.com.weston"
  "e.skf.WST_PROTO_UINT32\022;\n\020pulContainerTy"
  "pe\030\002 \001(\0132!.com.westone.skf.WST_PROTO_UIN"
  "T32\"W\n\030Rsp_SKF_GetContainerType\022;\n\020pulCo"
  "ntainerType\030\001 \001(\0132!.com.westone.skf.WST_"
  "PROTO_UINT32\"\216\001\n\021Req_SKF_GenRandom\022/\n\004hD"
  "ev\030\001 \001(\0132!.com.westone.skf.WST_PROTO_UIN"
  "T32\022\020\n\010pbRandom\030\002 \001(\014\0226\n\013ulRandomLen\030\003 \001"
  "(\0132!.com.westone.skf.WST_PROTO_UINT32\"%\n"
  "\021Rsp_SKF_GenRandom\022\020\n\010pbRandom\030\001 \001(\014\"\263\001\n"
  "\024Req_SKF_GenExtRSAKey\022/\n\004hDev\030\001 \001(\0132!.co"
  "m.westone.skf.WST_PROTO_UINT32\0224\n\tulBits"
  "Len\030\002 \001(\0132!.com.westone.skf.WST_PROTO_UI"
  "NT32\0224\n\005pBlob\030\003 \001(\0132%.com.westone.skf.SK"
  "F_RSAPUBLICKEYBLOB\"L\n\024Rsp_SKF_GenExtRSAK"
  "ey\0224\n\005pBlob\030\001 \001(\0132%.com.westone.skf.SKF_"
  "RSAPUBLICKEYBLOB\"\272\001\n\025Req_SKF_GenRSAKeyPa"
  "ir\0225\n\nhContainer\030\001 \001(\0132!.com.westone.skf"
  ".WST_PROTO_UINT32\0224\n\tulBitsLen\030\002 \001(\0132!.c"
  "om.westone.skf.WST_PROTO_UINT32\0224\n\005pBlob"
  "\030\003 \001(\0132%.com.westone.skf.SKF_RSAPUBLICKE"
  "YBLOB\"M\n\025Rsp_SKF_GenRSAKeyPair\0224\n\005pBlob\030"
  "\001 \001(\0132%.com.westone.skf.SKF_RSAPUBLICKEY"
  "BLOB\"\263\002\n\030Req_SKF_ImportRSAKeyPair\0225\n\nhCo"
  "ntainer\030\001 \001(\0132!.com.westone.skf.WST_PROT"
  "O_UINT32\0226\n\013ulSymmAlgID\030\002 \001(\0132!.com.west"
  "one.skf.WST_PROTO_UINT32\022\024\n\014pbWrappedKey"
  "\030\003 \001(\014\022:\n\017ulWrappedKeyLen\030\004 \001(\0132!.com.we"
  "stone.skf.WST_PROTO_UINT32\022\027\n\017pbEncrypte"
  "dData\030\005 \001(\014\022=\n\022ulEncryptedDataLen\030\006 \001(\0132"
  "!.com.westone.skf.WST_PROTO_UINT32\"\032\n\030Rs"
  "p_SKF_ImportRSAKeyPair\"\335\001\n\023Req_SKF_RSASi"
  "gnData\0225\n\nhContainer\030\001 \001(\0132!.com.westone"
  ".skf.WST_PROTO_UINT32\022\016\n\006pbData\030\002 \001(\014\0224\n"
  "\tulDataLen\030\003 \001(\0132!.com.westone.skf.WST_P"
  "ROTO_UINT32\022\023\n\013pbSignature\030\004 \001(\014\0224\n\tpulS"
  "igLen\030\005 \001(\0132!.com.westone.skf.WST_PROTO_"
  "UINT32\"`\n\023Rsp_SKF_RSASignData\022\023\n\013pbSigna"
  "ture\030\001 \001(\014\0224\n\tpulSigLen\030\002 \001(\0132!.com.west"
  "one.skf.WST_PROTO_UINT32\"\223\002\n\021Req_SKF_RSA"
  "Verify\022/\n\004hDev\030\001 \001(\0132!.com.westone.skf.W"
  "ST_PROTO_UINT32\022=\n\016pRSAPubKeyBlob\030\002 \001(\0132"
  "%.com.westone.skf.SKF_RSAPUBLICKEYBLOB\022\016"
  "\n\006pbData\030\003 \001(\014\0224\n\tulDataLen\030\004 \001(\0132!.com."
  "westone.skf.WST_PROTO_UINT32\022\023\n\013pbSignat"
  "ure\030\005 \001(\014\0223\n\010ulSigLen\030\006 \001(\0132!.com.weston"
  "e.skf.WST_PROTO_UINT32\"\023\n\021Rsp_SKF_RSAVer"
  "ify\"\300\002\n\033Req_SKF_RSAExportSessionKey\0225\n\nh"
  "Container\030\001 \001(\0132!.com.westone.skf.WST_PR"
  "OTO_UINT32\0222\n\007ulAlgID\030\002 \001(\0132!.com.weston"
  "e.skf.WST_PROTO_UINT32\0226\n\007pPubKey\030\003 \001(\0132"
  "%.com.westone.skf.SKF_RSAPUBLICKEYBLOB\022\016"
  "\n\006pbData\030\005 \001(\014\0225\n\npulDataLen\030\006 \001(\0132!.com"
  ".westone.skf.WST_PROTO_UINT32\0227\n\014phSessi"
  "onKey\030\007 \001(\0132!.com.westone.skf.WST_PROTO_"
  "UINT32\"\035\n\033Rsp_SKF_RSAExportSessionKey\"\243\002"
  "\n\035Req_SKF_ExtRSAPubKeyOperation\022/\n\004hDev\030"
  "\001 \001(\0132!.com.westone.skf.WST_PROTO_UINT32"
  "\022=\n\016pRSAPubKeyBlob\030\002 \001(\0132%.com.westone.s"
  "kf.SKF_RSAPUBLICKEYBLOB\022\017\n\007pbInput\030\003 \001(\014"
  "\0225\n\nulInputLen\030\004 \001(\0132!.com.westone.skf.W"
  "ST_PROTO_UINT32\022\021\n\tpbOutData\030\005 \001(\014\0227\n\014pu"
  "lOutputLen\030\006 \001(\0132!.com.westone.skf.WST_P"
  "ROTO_UINT32\"k\n\035Rsp_SKF_ExtRSAPubKeyOpera"
  "tion\022\021\n\tpbOutData\030\001 \001(\014\0227\n\014pulOutputLen\030"
  "\002 \001(\0132!.com.westone.skf.WST_PROTO_UINT32"
  "\"\244\002\n\035Req_SKF_ExtRSAPriKeyOperation\022/\n\004hD"
  "ev\030\001 \001(\0132!.com.westone.skf.WST_PROTO_UIN"
  "T32\022>\n\016pRSAPriKeyBlob\030\002 \001(\0132&.com.weston"
  "e.skf.SKF_RSAPRIVATEKEYBLOB\022\017\n\007pbInput\030\003"
  " \001(\014\0225\n\nulInputLen\030\004 \001(\0132!.com.westone.s"
  "kf.WST_PROTO_UINT32\022\021\n\tpbOutData\030\005 \001(\014\0227"
  "\n\014pulOutputLen\030\006 \001(\0132!.com.westone.skf.W"
  "ST_PROTO_UINT32\"k\n\035Rsp_SKF_ExtRSAPriKeyO"
  "peration\022\021\n\tpbOutData\030\001 \001(\014\0227\n\014pulOutput"
  "Len\030\002 \001(\0132!.com.westone.skf.WST_PROTO_UI"
  "NT32\"\270\001\n\025Req_SKF_GenECCKeyPair\0225\n\nhConta"
  "iner\030\001 \001(\0132!.com.westone.skf.WST_PROTO_U"
  "INT32\0222\n\007ulAlgID\030\002 \001(\0132!.com.westone.skf"
  ".WST_PROTO_UINT32\0224\n\005pBlob\030\003 \001(\0132%.com.w"
  "estone.skf.SKF_ECCPUBLICKEYBLOB\"M\n\025Rsp_S"
  "KF_GenECCKeyPair\0224\n\005pBlob\030\001 \001(\0132%.com.we"
  "stone.skf.SKF_ECCPUBLICKEYBLOB\"\223\001\n\030Req_S"
  "KF_ImportECCKeyPair\0225\n\nhContainer\030\001 \001(\0132"
  "!.com.westone.skf.WST_PROTO_UINT32\022@\n\021pE"
  "nvelopedKeyBlob\030\002 \001(\0132%.com.westone.skf."
  "SKF_ENVELOPEDKEYBLOB\"\032\n\030Rsp_SKF_ImportEC"
  "CKeyPair\"\315\001\n\023Req_SKF_ECCSignData\0225\n\nhCon"
  "tainer\030\001 \001(\0132!.com.westone.skf.WST_PROTO"
  "_UINT32\022\016\n\006pbData\030\002 \001(\014\0224\n\tulDataLen\030\003 \001"
  "(\0132!.com.westone.skf.WST_PROTO_UINT32\0229\n"
  "\npSignature\030\004 \001(\0132%.com.westone.skf.SKF_"
  "ECCSIGNATUREBLOB\"P\n\023Rsp_SKF_ECCSignData\022"
  "9\n\npSignature\030\001 \001(\0132%.com.westone.skf.SK"
  "F_ECCSIGNATUREBLOB\"\204\002\n\021Req_SKF_ECCVerify"
  "\022/\n\004hDev\030\001 \001(\0132!.com.westone.skf.WST_PRO"
  "TO_UINT32\022=\n\016pECCPubKeyBlob\030\002 \001(\0132%.com."
  "westone.skf.SKF_ECCPUBLICKEYBLOB\022\016\n\006pbDa"
  "ta\030\003 \001(\014\0224\n\tulDataLen\030\004 \001(\0132!.com.weston"
  "e.skf.WST_PROTO_UINT32\0229\n\npSignature\030\005 \001"
  "(\0132%.com.westone.skf.SKF_ECCSIGNATUREBLO"
  "B\"\023\n\021Rsp_SKF_ECCVerify\"\254\002\n\033Req_SKF_ECCEx"
  "portSessionKey\0225\n\nhContainer\030\001 \001(\0132!.com"
  ".westone.skf.WST_PROTO_UINT32\0222\n\007ulAlgID"
  "\030\002 \001(\0132!.com.westone.skf.WST_PROTO_UINT3"
  "2\0226\n\007pPubKey\030\003 \001(\0132%.com.westone.skf.SKF"
  "_ECCPUBLICKEYBLOB\0221\n\005pData\030\004 \001(\0132\".com.w"
  "estone.skf.SKF_ECCCIPHERBLOB\0227\n\014phSessio"
  "nKey\030\005 \001(\0132!.com.westone.skf.WST_PROTO_U"
  "INT32\"\211\001\n\033Rsp_SKF_ECCExportSessionKey\0221\n"
  "\005pData\030\001 \001(\0132\".com.westone.skf.SKF_ECCCI"
  "PHERBLOB\0227\n\014phSessionKey\030\002 \001(\0132!.com.wes"
  "tone.skf.WST_PROTO_UINT32\"\221\002\n\025Req_SKF_Ex"
  "tECCEncrypt\022/\n\004hDev\030\001 \001(\0132!.com.westone."
  "skf.WST_PROTO_UINT32\022=\n\016pECCPubKeyBlob\030\002"
  " \001(\0132%.com.westone.skf.SKF_ECCPUBLICKEYB"
  "LOB\022\023\n\013pbPlainText\030\003 \001(\014\0229\n\016ulPlainTextL"
  "en\030\004 \001(\0132!.com.westone.skf.WST_PROTO_UIN"
  "T32\0228\n\014pbCipherText\030\005 \001(\0132\".com.westone."
  "skf.SKF_ECCCIPHERBLOB\"Q\n\025Rsp_SKF_ExtECCE"
  "ncrypt\0228\n\014pbCipherText\030\001 \001(\0132\".com.westo"
  "ne.skf.SKF_ECCCIPHERBLOB\"\223\002\n\025Req_SKF_Ext"
  "ECCDecrypt\022/\n\004hDev\030\001 \001(\0132!.com.westone.s"
  "kf.WST_PROTO_UINT32\022>\n\016pECCPriKeyBlob\030\002 "
  "\001(\0132&.com.westone.skf.SKF_ECCPRIVATEKEYB"
  "LOB\0228\n\014pbCipherText\030\003 \001(\0132\".com.westone."
  "skf.SKF_ECCCIPHERBLOB\022\023\n\013pbPlainText\030\004 \001"
  "(\014\022:\n\017pulPlainTextLen\030\005 \001(\0132!.com.weston"
  "e.skf.WST_PROTO_UINT32\"h\n\025Rsp_SKF_ExtECC"
  "Decrypt\022\023\n\013pbPlainText\030\001 \001(\014\022:\n\017pulPlain"
  "TextLen\030\002 \001(\0132!.com.westone.skf.WST_PROT"
  "O_UINT32\"\206\002\n\022Req_SKF_ExtECCSign\022/\n\004hDev\030"
  "\001 \001(\0132!.com.westone.skf.WST_PROTO_UINT32"
  "\022>\n\016pECCPriKeyBlob\030\002 \001(\0132&.com.westone.s"
  "kf.SKF_ECCPRIVATEKEYBLOB\022\016\n\006pbData\030\003 \001(\014"
  "\0224\n\tulDataLen\030\004 \001(\0132!.com.westone.skf.WS"
  "T_PROTO_UINT32\0229\n\npSignature\030\005 \001(\0132%.com"
  ".westone.skf.SKF_ECCSIGNATUREBLOB\"O\n\022Rsp"
  "_SKF_ExtECCSign\0229\n\npSignature\030\001 \001(\0132%.co"
  "m.westone.skf.SKF_ECCSIGNATUREBLOB\"\207\002\n\024R"
  "eq_SKF_ExtECCVerify\022/\n\004hDev\030\001 \001(\0132!.com."
  "westone.skf.WST_PROTO_UINT32\022=\n\016pECCPubK"
  "eyBlob\030\002 \001(\0132%.com.westone.skf.SKF_ECCPU"
  "BLICKEYBLOB\022\016\n\006pbData\030\003 \001(\014\0224\n\tulDataLen"
  "\030\004 \001(\0132!.com.westone.skf.WST_PROTO_UINT3"
  "2\0229\n\npSignature\030\005 \001(\0132%.com.westone.skf."
  "SKF_ECCSIGNATUREBLOB\"\026\n\024Rsp_SKF_ExtECCVe"
  "rify\"\324\002\n$Req_SKF_GenerateAgreementDataWi"
  "thECC\0225\n\nhContainer\030\001 \001(\0132!.com.westone."
  "skf.WST_PROTO_UINT32\0222\n\007ulAlgID\030\002 \001(\0132!."
  "com.westone.skf.WST_PROTO_UINT32\022A\n\022pTem"
  "pECCPubKeyBlob\030\003 \001(\0132%.com.westone.skf.S"
  "KF_ECCPUBLICKEYBLOB\022\014\n\004pbID\030\004 \001(\014\0222\n\007ulI"
  "DLen\030\005 \001(\0132!.com.westone.skf.WST_PROTO_U"
  "INT32\022<\n\021phAgreementHandle\030\006 \001(\0132!.com.w"
  "estone.skf.WST_PROTO_UINT32\"\247\001\n$Rsp_SKF_"
  "GenerateAgreementDataWithECC\022A\n\022pTempECC"
  "PubKeyBlob\030\001 \001(\0132%.com.westone.skf.SKF_E"
  "CCPUBLICKEYBLOB\022<\n\021phAgreementHandle\030\002 \001"
  "(\0132!.com.westone.skf.WST_PROTO_UINT32\"\264\004"
  "\n*Req_SKF_GenerateAgreementDataAndKeyWit"
  "hECC\0225\n\nhContainer\030\001 \001(\0132!.com.westone.s"
  "kf.WST_PROTO_UINT32\0222\n\007ulAlgID\030\002 \001(\0132!.c"
  "om.westone.skf.WST_PROTO_UINT32\022D\n\025pSpon"
  "sorECCPubKeyBlob\030\003 \001(\0132%.com.westone.skf"
  ".SKF_ECCPUBLICKEYBLOB\022H\n\031pSponsorTempECC"
  "PubKeyBlob\030\004 \001(\0132%.com.westone.skf.SKF_E"
  "CCPUBLICKEYBLOB\022A\n\022pTempECCPubKeyBlob\030\005 "
  "\001(\0132%.com.westone.skf.SKF_ECCPUBLICKEYBL"
  "OB\022\014\n\004pbID\030\006 \001(\014\0222\n\007ulIDLen\030\007 \001(\0132!.com."
  "westone.skf.WST_PROTO_UINT32\022\023\n\013pbSponso"
  "rID\030\010 \001(\014\0229\n\016ulSponsorIDLen\030\t \001(\0132!.com."
  "westone.skf.WST_PROTO_UINT32\0226\n\013phKeyHan"
  "dle\030\n \001(\0132!.com.westone.skf.WST_PROTO_UI"
  "NT32\"\255\001\n*Rsp_SKF_GenerateAgreementDataAn"
  "dKeyWithECC\022A\n\022pTempECCPubKeyBlob\030\001 \001(\0132"
  "%.com.westone.skf.SKF_ECCPUBLICKEYBLOB\022<"
  "\n\021phAgreementHandle\030\002 \001(\0132!.com.westone."
  "skf.WST_PROTO_UINT32\"\325\002\n\032Req_SKF_Generat"
  "eKeyWithECC\022;\n\020hAgreementHandle\030\001 \001(\0132!."
  "com.westone.skf.WST_PROTO_UINT32\022=\n\016pECC"
  "PubKeyBlob\030\002 \001(\0132%.com.westone.skf.SKF_E"
  "CCPUBLICKEYBLOB\022A\n\022pTempECCPubKeyBlob\030\003 "
  "\001(\0132%.com.westone.skf.SKF_ECCPUBLICKEYBL"
  "OB\022\014\n\004pbID\030\004 \001(\014\0222\n\007ulIDLen\030\005 \001(\0132!.com."
  "westone.skf.WST_PROTO_UINT32\0226\n\013phKeyHan"
  "dle\030\006 \001(\0132!.com.westone.skf.WST_PROTO_UI"
  "NT32\"T\n\032Rsp_SKF_GenerateKeyWithECC\0226\n\013ph"
  "KeyHandle\030\001 \001(\0132!.com.westone.skf.WST_PR"
  "OTO_UINT32\"\313\001\n\027Req_SKF_ExportPublicKey\0225"
  "\n\nhContainer\030\001 \001(\0132!.com.westone.skf.WST"
  "_PROTO_UINT32\0222\n\tbSignFlag\030\002 \001(\0132\037.com.w"
  "estone.skf.WST_PROTO_BOOL\022\016\n\006pbBlob\030\003 \001("
  "\014\0225\n\npulBlobLen\030\004 \001(\0132!.com.westone.skf."
  "WST_PROTO_UINT32\"`\n\027Rsp_SKF_ExportPublic"
  "Key\022\016\n\006pbBlob\030\001 \001(\014\0225\n\npulBlobLen\030\002 \001(\0132"
  "!.com.westone.skf.WST_PROTO_UINT32\"\207\002\n\030R"
  "eq_SKF_ImportSessionKey\0225\n\nhContainer\030\001 "
  "\001(\0132!.com.westone.skf.WST_PROTO_UINT32\0222"
  "\n\007ulAlgID\030\002 \001(\0132!.com.westone.skf.WST_PR"
  "OTO_UINT32\022\025\n\rpbWrappedData\030\003 \001(\014\0227\n\014ulW"
  "rappedLen\030\004 \001(\0132!.com.westone.skf.WST_PR"
  "OTO_UINT32\0220\n\005phKey\030\005 \001(\0132!.com.westone."
  "skf.WST_PROTO_UINT32\"L\n\030Rsp_SKF_ImportSe"
  "ssionKey\0220\n\005phKey\030\001 \001(\0132!.com.westone.sk"
  "f.WST_PROTO_UINT32\"\272\001\n\022Req_SKF_SetSymmKe"
  "y\022/\n\004hDev\030\001 \001(\0132!.com.westone.skf.WST_PR"
  "OTO_UINT32\022\r\n\005pbKey\030\002 \001(\014\0222\n\007ulAlgID\030\003 \001"
  "(\0132!.com.westone.skf.WST_PROTO_UINT32\0220\n"
  "\005phKey\030\004 \001(\0132!.com.westone.skf.WST_PROTO"
  "_UINT32\"F\n\022Rsp_SKF_SetSymmKey\0220\n\005phKey\030\001"
  " \001(\0132!.com.westone.skf.WST_PROTO_UINT32\""
  "\203\001\n\023Req_SKF_EncryptInit\022/\n\004hKey\030\001 \001(\0132!."
  "com.westone.skf.WST_PROTO_UINT32\022;\n\014Encr"
  "yptParam\030\002 \001(\0132%.com.westone.skf.SKF_BLO"
  "CKCIPHERPARAM\"\025\n\023Rsp_SKF_EncryptInit\"\335\001\n"
  "\017Req_SKF_Encrypt\022/\n\004hKey\030\001 \001(\0132!.com.wes"
  "tone.skf.WST_PROTO_UINT32\022\016\n\006pbData\030\002 \001("
  "\014\0224\n\tulDataLen\030\003 \001(\0132!.com.westone.skf.W"
  "ST_PROTO_UINT32\022\027\n\017pbEncryptedData\030\004 \001(\014"
  "\022:\n\017pulEncryptedLen\030\005 \001(\0132!.com.westone."
  "skf.WST_PROTO_UINT32\"f\n\017Rsp_SKF_Encrypt\022"
  "\027\n\017pbEncryptedData\030\001 \001(\014\022:\n\017pulEncrypted"
  "Len\030\002 \001(\0132!.com.westone.skf.WST_PROTO_UI"
  "NT32\"\343\001\n\025Req_SKF_EncryptUpdate\022/\n\004hKey\030\001"
  " \001(\0132!.com.westone.skf.WST_PROTO_UINT32\022"
  "\016\n\006pbData\030\002 \001(\014\0224\n\tulDataLen\030\003 \001(\0132!.com"
  ".westone.skf.WST_PROTO_UINT32\022\027\n\017pbEncry"
  "ptedData\030\004 \001(\014\022:\n\017pulEncryptedLen\030\005 \001(\0132"
  "!.com.westone.skf.WST_PROTO_UINT32\"l\n\025Rs"
  "p_SKF_EncryptUpdate\022\027\n\017pbEncryptedData\030\001"
  " \001(\014\022:\n\017pulEncryptedLen\030\002 \001(\0132!.com.west"
  "one.skf.WST_PROTO_UINT32\"\240\001\n\024Req_SKF_Enc"
  "ryptFinal\022/\n\004hKey\030\001 \001(\0132!.com.westone.sk"
  "f.WST_PROTO_UINT32\022\027\n\017pbEncryptedData\030\002 "
  "\001(\014\022>\n\023pulEncryptedDataLen\030\003 \001(\0132!.com.w"
  "estone.skf.WST_PROTO_UINT32\"o\n\024Rsp_SKF_E"
  "ncryptFinal\022\027\n\017pbEncryptedData\030\001 \001(\014\022>\n\023"
  "pulEncryptedDataLen\030\002 \001(\0132!.com.westone."
  "skf.WST_PROTO_UINT32\"\203\001\n\023Req_SKF_Decrypt"
  "Init\022/\n\004hKey\030\001 \001(\0132!.com.westone.skf.WST"
  "_PROTO_UINT32\022;\n\014DecryptParam\030\002 \001(\0132%.co"
  "m.westone.skf.SKF_BLOCKCIPHERPARAM\"\025\n\023Rs"
  "p_SKF_DecryptInit\"\335\001\n\017Req_SKF_Decrypt\022/\n"
  "\004hKey\030\001 \001(\0132!.com.westone.skf.WST_PROTO_"
  "UINT32\022\027\n\017pbEncryptedData\030\002 \001(\014\0229\n\016ulEnc"
  "ryptedLen\030\003 \001(\0132!.com.westone.skf.WST_PR"
  "OTO_UINT32\022\016\n\006pbData\030\004 \001(\014\0225\n\npulDataLen"
  "\030\005 \001(\0132!.com.westone.skf.WST_PROTO_UINT3"
  "2\"X\n\017Rsp_SKF_Decrypt\022\016\n\006pbData\030\001 \001(\014\0225\n\n"
  "pulDataLen\030\002 \001(\0132!.com.westone.skf.WST_P"
  "ROTO_UINT32\"\343\001\n\025Req_SKF_DecryptUpdate\022/\n"
  "\004hKey\030\001 \001(\0132!.com.westone.skf.WST_PROTO_"
  "UINT32\022\027\n\017pbEncryptedData\030\002 \001(\014\0229\n\016ulEnc"
  "ryptedLen\030\003 \001(\0132!.com.westone.skf.WST_PR"
  "OTO_UINT32\022\016\n\006pbData\030\004 \001(\014\0225\n\npulDataLen"
  "\030\005 \001(\0132!.com.westone.skf.WST_PROTO_UINT3"
  "2\"^\n\025Rsp_SKF_DecryptUpdate\022\016\n\006pbData\030\001 \001"
  "(\014\0225\n\npulDataLen\030\002 \001(\0132!.com.westone.skf"
  ".WST_PROTO_UINT32\"\230\001\n\024Req_SKF_DecryptFin"
  "al\022/\n\004hKey\030\001 \001(\0132!.com.westone.skf.WST_P"
  "ROTO_UINT32\022\023\n\013pbPlainText\030\002 \001(\014\022:\n\017pulP"
  "lainTextLen\030\003 \001(\0132!.com.westone.skf.WST_"
  "PROTO_UINT32\"g\n\024Rsp_SKF_DecryptFinal\022\023\n\013"
  "pbPlainText\030\001 \001(\014\022:\n\017pulPlainTextLen\030\002 \001"
  "(\0132!.com.westone.skf.WST_PROTO_UINT32\"\247\002"
  "\n\022Req_SKF_DigestInit\022/\n\004hDev\030\001 \001(\0132!.com"
  ".westone.skf.WST_PROTO_UINT32\0222\n\007ulAlgID"
  "\030\002 \001(\0132!.com.westone.skf.WST_PROTO_UINT3"
  "2\0226\n\007pPubKey\030\003 \001(\0132%.com.westone.skf.SKF"
  "_ECCPUBLICKEYBLOB\022\r\n\005pucID\030\004 \001(\014\0222\n\007ulID"
  "Len\030\005 \001(\0132!.com.westone.skf.WST_PROTO_UI"
  "NT32\0221\n\006phHash\030\006 \001(\0132!.com.westone.skf.W"
  "ST_PROTO_UINT32\"G\n\022Rsp_SKF_DigestInit\0221\n"
  "\006phHash\030\001 \001(\0132!.com.westone.skf.WST_PROT"
  "O_UINT32\"\323\001\n\016Req_SKF_Digest\0220\n\005hHash\030\001 \001"
  "(\0132!.com.westone.skf.WST_PROTO_UINT32\022\016\n"
  "\006pbData\030\002 \001(\014\0224\n\tulDataLen\030\003 \001(\0132!.com.w"
  "estone.skf.WST_PROTO_UINT32\022\022\n\npbHashDat"
  "a\030\004 \001(\014\0225\n\npulHashLen\030\005 \001(\0132!.com.weston"
  "e.skf.WST_PROTO_UINT32\"[\n\016Rsp_SKF_Digest"
  "\022\022\n\npbHashData\030\001 \001(\014\0225\n\npulHashLen\030\002 \001(\013"
  "2!.com.westone.skf.WST_PROTO_UINT32\"\216\001\n\024"
  "Req_SKF_DigestUpdate\0220\n\005hHash\030\001 \001(\0132!.co"
  "m.westone.skf.WST_PROTO_UINT32\022\016\n\006pbData"
  "\030\002 \001(\014\0224\n\tulDataLen\030\003 \001(\0132!.com.westone."
  "skf.WST_PROTO_UINT32\"\026\n\024Rsp_SKF_DigestUp"
  "date\"\221\001\n\023Req_SKF_DigestFinal\0220\n\005hHash\030\001 "
  "\001(\0132!.com.westone.skf.WST_PROTO_UINT32\022\021"
  "\n\tpHashData\030\002 \001(\014\0225\n\npulHashLen\030\003 \001(\0132!."
  "com.westone.skf.WST_PROTO_UINT32\"_\n\023Rsp_"
  "SKF_DigestFinal\022\021\n\tpHashData\030\001 \001(\014\0225\n\npu"
  "lHashLen\030\002 \001(\0132!.com.westone.skf.WST_PRO"
  "TO_UINT32\"\255\001\n\017Req_SKF_MacInit\022/\n\004hKey\030\001 "
  "\001(\0132!.com.westone.skf.WST_PROTO_UINT32\0227"
  "\n\010MacParam\030\002 \001(\0132%.com.westone.skf.SKF_B"
  "LOCKCIPHERPARAM\0220\n\005phMac\030\003 \001(\0132!.com.wes"
  "tone.skf.WST_PROTO_UINT32\"C\n\017Rsp_SKF_Mac"
  "Init\0220\n\005phMac\030\001 \001(\0132!.com.westone.skf.WS"
  "T_PROTO_UINT32\"\315\001\n\013Req_SKF_Mac\022/\n\004hMac\030\001"
  " \001(\0132!.com.westone.skf.WST_PROTO_UINT32\022"
  "\016\n\006pbData\030\002 \001(\014\0224\n\tulDataLen\030\003 \001(\0132!.com"
  ".westone.skf.WST_PROTO_UINT32\022\021\n\tpbMacDa"
  "ta\030\004 \001(\014\0224\n\tpulMacLen\030\005 \001(\0132!.com.weston"
  "e.skf.WST_PROTO_UINT32\"V\n\013Rsp_SKF_Mac\022\021\n"
  "\tpbMacData\030\001 \001(\014\0224\n\tpulMacLen\030\002 \001(\0132!.co"
  "m.westone.skf.WST_PROTO_UINT32\"\212\001\n\021Req_S"
  "KF_MacUpdate\022/\n\004hMac\030\001 \001(\0132!.com.westone"
  ".skf.WST_PROTO_UINT32\022\016\n\006pbData\030\002 \001(\014\0224\n"
  "\tulDataLen\030\003 \001(\0132!.com.westone.skf.WST_P"
  "ROTO_UINT32\"\023\n\021Rsp_SKF_MacUpdate\"\220\001\n\020Req"
  "_SKF_MacFinal\022/\n\004hMac\030\001 \001(\0132!.com.weston"
  "e.skf.WST_PROTO_UINT32\022\021\n\tpbMacData\030\002 \001("
  "\014\0228\n\rpulMacDataLen\030\003 \001(\0132!.com.westone.s"
  "kf.WST_PROTO_UINT32\"_\n\020Rsp_SKF_MacFinal\022"
  "\021\n\tpbMacData\030\002 \001(\014\0228\n\rpulMacDataLen\030\003 \001("
  "\0132!.com.westone.skf.WST_PROTO_UINT32\"I\n\023"
  "Req_SKF_CloseHandle\0222\n\007hHandle\030\001 \001(\0132!.c"
  "om.westone.skf.WST_PROTO_UINT32\"\025\n\023Rsp_S"
  "KF_CloseHandle\"\326\001\n\020Req_SKF_Transmit\022/\n\004h"
  "Dev\030\001 \001(\0132!.com.westone.skf.WST_PROTO_UI"
  "NT32\022\021\n\tpbCommand\030\002 \001(\014\0227\n\014ulCommandLen\030"
  "\003 \001(\0132!.com.westone.skf.WST_PROTO_UINT32"
  "\022\016\n\006pbData\030\004 \001(\014\0225\n\npulDataLen\030\005 \001(\0132!.c"
  "om.westone.skf.WST_PROTO_UINT32\"Y\n\020Rsp_S"
  "KF_Transmit\022\016\n\006pbData\030\001 \001(\014\0225\n\npulDataLe"
  "n\030\002 \001(\0132!.com.westone.skf.WST_PROTO_UINT"
  "32\"\314\001\n\031Req_SKF_ImportCertificate\0225\n\nhCon"
  "tainer\030\001 \001(\0132!.com.westone.skf.WST_PROTO"
  "_UINT32\0222\n\tbSignFlag\030\002 \001(\0132\037.com.westone"
  ".skf.WST_PROTO_BOOL\022\016\n\006pbCert\030\003 \001(\014\0224\n\tu"
  "lCertLen\030\004 \001(\0132!.com.westone.skf.WST_PRO"
  "TO_UINT32\"\033\n\031Rsp_SKF_ImportCertificate\"\315"
  "\001\n\031Req_SKF_ExportCertificate\0225\n\nhContain"
  "er\030\001 \001(\0132!.com.westone.skf.WST_PROTO_UIN"
  "T32\0222\n\tbSignFlag\030\002 \001(\0132\037.com.westone.skf"
  ".WST_PROTO_BOOL\022\016\n\006pbCert\030\004 \001(\014\0225\n\npulCe"
  "rtLen\030\005 \001(\0132!.com.westone.skf.WST_PROTO_"
  "UINT32\"b\n\031Rsp_SKF_ExportCertificate\022\016\n\006p"
  "bCert\030\001 \001(\014\0225\n\npulCertLen\030\002 \001(\0132!.com.we"
  "stone.skf.WST_PROTO_UINT32\"\220\001\n\034Req_SKF_G"
  "etContainerProperty\0225\n\nhContainer\030\001 \001(\0132"
  "!.com.westone.skf.WST_PROTO_UINT32\0229\n\016pu"
  "lConProperty\030\002 \001(\0132!.com.westone.skf.WST"
  "_PROTO_UINT32\"Y\n\034Rsp_SKF_GetContainerPro"
  "perty\0229\n\016pulConProperty\030\001 \001(\0132!.com.west"
  "one.skf.WST_PROTO_UINT32b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_skf_2eproto = {
  false, InitDefaults_skf_2eproto, 
  descriptor_table_protodef_skf_2eproto,
  "skf.proto", &assign_descriptors_table_skf_2eproto, 23512,
};

void AddDescriptors_skf_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_skf_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_skf_2eproto = []() { AddDescriptors_skf_2eproto(); return true; }();
namespace com {
namespace westone {
namespace skf {

// ===================================================================

void WST_PROTO_UINT32::InitAsDefaultInstance() {
}
class WST_PROTO_UINT32::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WST_PROTO_UINT32::kU32ValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WST_PROTO_UINT32::WST_PROTO_UINT32()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.WST_PROTO_UINT32)
}
WST_PROTO_UINT32::WST_PROTO_UINT32(const WST_PROTO_UINT32& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  u32value_ = from.u32value_;
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.WST_PROTO_UINT32)
}

void WST_PROTO_UINT32::SharedCtor() {
  u32value_ = 0u;
}

WST_PROTO_UINT32::~WST_PROTO_UINT32() {
  // @@protoc_insertion_point(destructor:com.westone.skf.WST_PROTO_UINT32)
  SharedDtor();
}

void WST_PROTO_UINT32::SharedDtor() {
}

void WST_PROTO_UINT32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WST_PROTO_UINT32& WST_PROTO_UINT32::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WST_PROTO_UINT32_skf_2eproto.base);
  return *internal_default_instance();
}


void WST_PROTO_UINT32::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.WST_PROTO_UINT32)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  u32value_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WST_PROTO_UINT32::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WST_PROTO_UINT32*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 u32value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_u32value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WST_PROTO_UINT32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.WST_PROTO_UINT32)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 u32value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &u32value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.WST_PROTO_UINT32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.WST_PROTO_UINT32)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WST_PROTO_UINT32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.WST_PROTO_UINT32)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 u32value = 1;
  if (this->u32value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->u32value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.WST_PROTO_UINT32)
}

::google::protobuf::uint8* WST_PROTO_UINT32::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.WST_PROTO_UINT32)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 u32value = 1;
  if (this->u32value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->u32value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.WST_PROTO_UINT32)
  return target;
}

size_t WST_PROTO_UINT32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.WST_PROTO_UINT32)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 u32value = 1;
  if (this->u32value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->u32value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WST_PROTO_UINT32::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.WST_PROTO_UINT32)
  GOOGLE_DCHECK_NE(&from, this);
  const WST_PROTO_UINT32* source =
      ::google::protobuf::DynamicCastToGenerated<WST_PROTO_UINT32>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.WST_PROTO_UINT32)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.WST_PROTO_UINT32)
    MergeFrom(*source);
  }
}

void WST_PROTO_UINT32::MergeFrom(const WST_PROTO_UINT32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.WST_PROTO_UINT32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.u32value() != 0) {
    set_u32value(from.u32value());
  }
}

void WST_PROTO_UINT32::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.WST_PROTO_UINT32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WST_PROTO_UINT32::CopyFrom(const WST_PROTO_UINT32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.WST_PROTO_UINT32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WST_PROTO_UINT32::IsInitialized() const {
  return true;
}

void WST_PROTO_UINT32::Swap(WST_PROTO_UINT32* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WST_PROTO_UINT32::InternalSwap(WST_PROTO_UINT32* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(u32value_, other->u32value_);
}

::google::protobuf::Metadata WST_PROTO_UINT32::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void WST_PROTO_BOOL::InitAsDefaultInstance() {
}
class WST_PROTO_BOOL::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WST_PROTO_BOOL::kBoolvalueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WST_PROTO_BOOL::WST_PROTO_BOOL()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.WST_PROTO_BOOL)
}
WST_PROTO_BOOL::WST_PROTO_BOOL(const WST_PROTO_BOOL& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  boolvalue_ = from.boolvalue_;
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.WST_PROTO_BOOL)
}

void WST_PROTO_BOOL::SharedCtor() {
  boolvalue_ = false;
}

WST_PROTO_BOOL::~WST_PROTO_BOOL() {
  // @@protoc_insertion_point(destructor:com.westone.skf.WST_PROTO_BOOL)
  SharedDtor();
}

void WST_PROTO_BOOL::SharedDtor() {
}

void WST_PROTO_BOOL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WST_PROTO_BOOL& WST_PROTO_BOOL::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_WST_PROTO_BOOL_skf_2eproto.base);
  return *internal_default_instance();
}


void WST_PROTO_BOOL::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.WST_PROTO_BOOL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boolvalue_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WST_PROTO_BOOL::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<WST_PROTO_BOOL*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool boolvalue = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_boolvalue(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WST_PROTO_BOOL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.WST_PROTO_BOOL)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool boolvalue = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boolvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.WST_PROTO_BOOL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.WST_PROTO_BOOL)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WST_PROTO_BOOL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.WST_PROTO_BOOL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool boolvalue = 1;
  if (this->boolvalue() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->boolvalue(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.WST_PROTO_BOOL)
}

::google::protobuf::uint8* WST_PROTO_BOOL::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.WST_PROTO_BOOL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool boolvalue = 1;
  if (this->boolvalue() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->boolvalue(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.WST_PROTO_BOOL)
  return target;
}

size_t WST_PROTO_BOOL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.WST_PROTO_BOOL)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool boolvalue = 1;
  if (this->boolvalue() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WST_PROTO_BOOL::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.WST_PROTO_BOOL)
  GOOGLE_DCHECK_NE(&from, this);
  const WST_PROTO_BOOL* source =
      ::google::protobuf::DynamicCastToGenerated<WST_PROTO_BOOL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.WST_PROTO_BOOL)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.WST_PROTO_BOOL)
    MergeFrom(*source);
  }
}

void WST_PROTO_BOOL::MergeFrom(const WST_PROTO_BOOL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.WST_PROTO_BOOL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.boolvalue() != 0) {
    set_boolvalue(from.boolvalue());
  }
}

void WST_PROTO_BOOL::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.WST_PROTO_BOOL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WST_PROTO_BOOL::CopyFrom(const WST_PROTO_BOOL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.WST_PROTO_BOOL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WST_PROTO_BOOL::IsInitialized() const {
  return true;
}

void WST_PROTO_BOOL::Swap(WST_PROTO_BOOL* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WST_PROTO_BOOL::InternalSwap(WST_PROTO_BOOL* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(boolvalue_, other->boolvalue_);
}

::google::protobuf::Metadata WST_PROTO_BOOL::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SKF_Version::InitAsDefaultInstance() {
  ::com::westone::skf::_SKF_Version_default_instance_._instance.get_mutable()->major_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_SKF_Version_default_instance_._instance.get_mutable()->minor_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class SKF_Version::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& major(const SKF_Version* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& minor(const SKF_Version* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
SKF_Version::HasBitSetters::major(const SKF_Version* msg) {
  return *msg->major_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
SKF_Version::HasBitSetters::minor(const SKF_Version* msg) {
  return *msg->minor_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SKF_Version::kMajorFieldNumber;
const int SKF_Version::kMinorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SKF_Version::SKF_Version()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.SKF_Version)
}
SKF_Version::SKF_Version(const SKF_Version& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_major()) {
    major_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.major_);
  } else {
    major_ = nullptr;
  }
  if (from.has_minor()) {
    minor_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.minor_);
  } else {
    minor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.SKF_Version)
}

void SKF_Version::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SKF_Version_skf_2eproto.base);
  ::memset(&major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minor_) -
      reinterpret_cast<char*>(&major_)) + sizeof(minor_));
}

SKF_Version::~SKF_Version() {
  // @@protoc_insertion_point(destructor:com.westone.skf.SKF_Version)
  SharedDtor();
}

void SKF_Version::SharedDtor() {
  if (this != internal_default_instance()) delete major_;
  if (this != internal_default_instance()) delete minor_;
}

void SKF_Version::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SKF_Version& SKF_Version::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SKF_Version_skf_2eproto.base);
  return *internal_default_instance();
}


void SKF_Version::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.SKF_Version)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && major_ != nullptr) {
    delete major_;
  }
  major_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && minor_ != nullptr) {
    delete minor_;
  }
  minor_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SKF_Version::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SKF_Version*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 major = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_major();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 minor = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_minor();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SKF_Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.SKF_Version)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 major = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_major()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 minor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_minor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.SKF_Version)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.SKF_Version)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SKF_Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.SKF_Version)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 major = 1;
  if (this->has_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::major(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 minor = 2;
  if (this->has_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::minor(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.SKF_Version)
}

::google::protobuf::uint8* SKF_Version::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.SKF_Version)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 major = 1;
  if (this->has_major()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::major(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 minor = 2;
  if (this->has_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::minor(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.SKF_Version)
  return target;
}

size_t SKF_Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.SKF_Version)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 major = 1;
  if (this->has_major()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *major_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 minor = 2;
  if (this->has_minor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *minor_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SKF_Version::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.SKF_Version)
  GOOGLE_DCHECK_NE(&from, this);
  const SKF_Version* source =
      ::google::protobuf::DynamicCastToGenerated<SKF_Version>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.SKF_Version)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.SKF_Version)
    MergeFrom(*source);
  }
}

void SKF_Version::MergeFrom(const SKF_Version& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.SKF_Version)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_major()) {
    mutable_major()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.major());
  }
  if (from.has_minor()) {
    mutable_minor()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.minor());
  }
}

void SKF_Version::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.SKF_Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SKF_Version::CopyFrom(const SKF_Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.SKF_Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SKF_Version::IsInitialized() const {
  return true;
}

void SKF_Version::Swap(SKF_Version* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SKF_Version::InternalSwap(SKF_Version* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(major_, other->major_);
  swap(minor_, other->minor_);
}

::google::protobuf::Metadata SKF_Version::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SKF_DevInfo::InitAsDefaultInstance() {
  ::com::westone::skf::_SKF_DevInfo_default_instance_._instance.get_mutable()->version_ = const_cast< ::com::westone::skf::SKF_Version*>(
      ::com::westone::skf::SKF_Version::internal_default_instance());
  ::com::westone::skf::_SKF_DevInfo_default_instance_._instance.get_mutable()->hwversion_ = const_cast< ::com::westone::skf::SKF_Version*>(
      ::com::westone::skf::SKF_Version::internal_default_instance());
  ::com::westone::skf::_SKF_DevInfo_default_instance_._instance.get_mutable()->firmwareversion_ = const_cast< ::com::westone::skf::SKF_Version*>(
      ::com::westone::skf::SKF_Version::internal_default_instance());
  ::com::westone::skf::_SKF_DevInfo_default_instance_._instance.get_mutable()->algsymcap_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_SKF_DevInfo_default_instance_._instance.get_mutable()->algasymcap_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_SKF_DevInfo_default_instance_._instance.get_mutable()->alghashcap_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_SKF_DevInfo_default_instance_._instance.get_mutable()->devauthalgid_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_SKF_DevInfo_default_instance_._instance.get_mutable()->totalspace_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_SKF_DevInfo_default_instance_._instance.get_mutable()->freespace_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_SKF_DevInfo_default_instance_._instance.get_mutable()->maxeccbuffersize_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_SKF_DevInfo_default_instance_._instance.get_mutable()->maxbuffersize_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class SKF_DevInfo::HasBitSetters {
 public:
  static const ::com::westone::skf::SKF_Version& version(const SKF_DevInfo* msg);
  static const ::com::westone::skf::SKF_Version& hwversion(const SKF_DevInfo* msg);
  static const ::com::westone::skf::SKF_Version& firmwareversion(const SKF_DevInfo* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& algsymcap(const SKF_DevInfo* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& algasymcap(const SKF_DevInfo* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& alghashcap(const SKF_DevInfo* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& devauthalgid(const SKF_DevInfo* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& totalspace(const SKF_DevInfo* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& freespace(const SKF_DevInfo* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& maxeccbuffersize(const SKF_DevInfo* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& maxbuffersize(const SKF_DevInfo* msg);
};

const ::com::westone::skf::SKF_Version&
SKF_DevInfo::HasBitSetters::version(const SKF_DevInfo* msg) {
  return *msg->version_;
}
const ::com::westone::skf::SKF_Version&
SKF_DevInfo::HasBitSetters::hwversion(const SKF_DevInfo* msg) {
  return *msg->hwversion_;
}
const ::com::westone::skf::SKF_Version&
SKF_DevInfo::HasBitSetters::firmwareversion(const SKF_DevInfo* msg) {
  return *msg->firmwareversion_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
SKF_DevInfo::HasBitSetters::algsymcap(const SKF_DevInfo* msg) {
  return *msg->algsymcap_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
SKF_DevInfo::HasBitSetters::algasymcap(const SKF_DevInfo* msg) {
  return *msg->algasymcap_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
SKF_DevInfo::HasBitSetters::alghashcap(const SKF_DevInfo* msg) {
  return *msg->alghashcap_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
SKF_DevInfo::HasBitSetters::devauthalgid(const SKF_DevInfo* msg) {
  return *msg->devauthalgid_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
SKF_DevInfo::HasBitSetters::totalspace(const SKF_DevInfo* msg) {
  return *msg->totalspace_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
SKF_DevInfo::HasBitSetters::freespace(const SKF_DevInfo* msg) {
  return *msg->freespace_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
SKF_DevInfo::HasBitSetters::maxeccbuffersize(const SKF_DevInfo* msg) {
  return *msg->maxeccbuffersize_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
SKF_DevInfo::HasBitSetters::maxbuffersize(const SKF_DevInfo* msg) {
  return *msg->maxbuffersize_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SKF_DevInfo::kVersionFieldNumber;
const int SKF_DevInfo::kManufacturerFieldNumber;
const int SKF_DevInfo::kIssuerFieldNumber;
const int SKF_DevInfo::kLabelFieldNumber;
const int SKF_DevInfo::kSerialNumberFieldNumber;
const int SKF_DevInfo::kHWVersionFieldNumber;
const int SKF_DevInfo::kFirmwareVersionFieldNumber;
const int SKF_DevInfo::kAlgSymCapFieldNumber;
const int SKF_DevInfo::kAlgAsymCapFieldNumber;
const int SKF_DevInfo::kAlgHashCapFieldNumber;
const int SKF_DevInfo::kDevAuthAlgIdFieldNumber;
const int SKF_DevInfo::kTotalSpaceFieldNumber;
const int SKF_DevInfo::kFreeSpaceFieldNumber;
const int SKF_DevInfo::kMaxEccBufferSizeFieldNumber;
const int SKF_DevInfo::kMaxBufferSizeFieldNumber;
const int SKF_DevInfo::kReservedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SKF_DevInfo::SKF_DevInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.SKF_DevInfo)
}
SKF_DevInfo::SKF_DevInfo(const SKF_DevInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufacturer().size() > 0) {
    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  issuer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.issuer().size() > 0) {
    issuer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issuer_);
  }
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.label().size() > 0) {
    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  serialnumber_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serialnumber().size() > 0) {
    serialnumber_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialnumber_);
  }
  reserved_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reserved().size() > 0) {
    reserved_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reserved_);
  }
  if (from.has_version()) {
    version_ = new ::com::westone::skf::SKF_Version(*from.version_);
  } else {
    version_ = nullptr;
  }
  if (from.has_hwversion()) {
    hwversion_ = new ::com::westone::skf::SKF_Version(*from.hwversion_);
  } else {
    hwversion_ = nullptr;
  }
  if (from.has_firmwareversion()) {
    firmwareversion_ = new ::com::westone::skf::SKF_Version(*from.firmwareversion_);
  } else {
    firmwareversion_ = nullptr;
  }
  if (from.has_algsymcap()) {
    algsymcap_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.algsymcap_);
  } else {
    algsymcap_ = nullptr;
  }
  if (from.has_algasymcap()) {
    algasymcap_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.algasymcap_);
  } else {
    algasymcap_ = nullptr;
  }
  if (from.has_alghashcap()) {
    alghashcap_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.alghashcap_);
  } else {
    alghashcap_ = nullptr;
  }
  if (from.has_devauthalgid()) {
    devauthalgid_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.devauthalgid_);
  } else {
    devauthalgid_ = nullptr;
  }
  if (from.has_totalspace()) {
    totalspace_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.totalspace_);
  } else {
    totalspace_ = nullptr;
  }
  if (from.has_freespace()) {
    freespace_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.freespace_);
  } else {
    freespace_ = nullptr;
  }
  if (from.has_maxeccbuffersize()) {
    maxeccbuffersize_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.maxeccbuffersize_);
  } else {
    maxeccbuffersize_ = nullptr;
  }
  if (from.has_maxbuffersize()) {
    maxbuffersize_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.maxbuffersize_);
  } else {
    maxbuffersize_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.SKF_DevInfo)
}

void SKF_DevInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SKF_DevInfo_skf_2eproto.base);
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issuer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialnumber_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reserved_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxbuffersize_) -
      reinterpret_cast<char*>(&version_)) + sizeof(maxbuffersize_));
}

SKF_DevInfo::~SKF_DevInfo() {
  // @@protoc_insertion_point(destructor:com.westone.skf.SKF_DevInfo)
  SharedDtor();
}

void SKF_DevInfo::SharedDtor() {
  manufacturer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issuer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialnumber_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reserved_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete version_;
  if (this != internal_default_instance()) delete hwversion_;
  if (this != internal_default_instance()) delete firmwareversion_;
  if (this != internal_default_instance()) delete algsymcap_;
  if (this != internal_default_instance()) delete algasymcap_;
  if (this != internal_default_instance()) delete alghashcap_;
  if (this != internal_default_instance()) delete devauthalgid_;
  if (this != internal_default_instance()) delete totalspace_;
  if (this != internal_default_instance()) delete freespace_;
  if (this != internal_default_instance()) delete maxeccbuffersize_;
  if (this != internal_default_instance()) delete maxbuffersize_;
}

void SKF_DevInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SKF_DevInfo& SKF_DevInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SKF_DevInfo_skf_2eproto.base);
  return *internal_default_instance();
}


void SKF_DevInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.SKF_DevInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  issuer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialnumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reserved_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && hwversion_ != nullptr) {
    delete hwversion_;
  }
  hwversion_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && firmwareversion_ != nullptr) {
    delete firmwareversion_;
  }
  firmwareversion_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && algsymcap_ != nullptr) {
    delete algsymcap_;
  }
  algsymcap_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && algasymcap_ != nullptr) {
    delete algasymcap_;
  }
  algasymcap_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && alghashcap_ != nullptr) {
    delete alghashcap_;
  }
  alghashcap_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && devauthalgid_ != nullptr) {
    delete devauthalgid_;
  }
  devauthalgid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && totalspace_ != nullptr) {
    delete totalspace_;
  }
  totalspace_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && freespace_ != nullptr) {
    delete freespace_;
  }
  freespace_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && maxeccbuffersize_ != nullptr) {
    delete maxeccbuffersize_;
  }
  maxeccbuffersize_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && maxbuffersize_ != nullptr) {
    delete maxbuffersize_;
  }
  maxbuffersize_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SKF_DevInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SKF_DevInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.SKF_Version version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_Version::_InternalParse;
        object = msg->mutable_version();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes Manufacturer = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_manufacturer();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes Issuer = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_issuer();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes Label = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_label();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes SerialNumber = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_serialnumber();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.SKF_Version HWVersion = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_Version::_InternalParse;
        object = msg->mutable_hwversion();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_Version FirmwareVersion = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_Version::_InternalParse;
        object = msg->mutable_firmwareversion();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 AlgSymCap = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_algsymcap();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 AlgAsymCap = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_algasymcap();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 AlgHashCap = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_alghashcap();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 DevAuthAlgId = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_devauthalgid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 TotalSpace = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_totalspace();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 FreeSpace = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_freespace();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 MaxEccBufferSize = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_maxeccbuffersize();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 MaxBufferSize = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_maxbuffersize();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes Reserved = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_reserved();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SKF_DevInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.SKF_DevInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.SKF_Version version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Manufacturer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_manufacturer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Issuer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_issuer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Label = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes SerialNumber = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialnumber()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_Version HWVersion = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hwversion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_Version FirmwareVersion = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_firmwareversion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 AlgSymCap = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_algsymcap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 AlgAsymCap = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_algasymcap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 AlgHashCap = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_alghashcap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 DevAuthAlgId = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_devauthalgid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 TotalSpace = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_totalspace()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 FreeSpace = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_freespace()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 MaxEccBufferSize = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_maxeccbuffersize()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 MaxBufferSize = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_maxbuffersize()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Reserved = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reserved()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.SKF_DevInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.SKF_DevInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SKF_DevInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.SKF_DevInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.SKF_Version version = 1;
  if (this->has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::version(this), output);
  }

  // bytes Manufacturer = 2;
  if (this->manufacturer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->manufacturer(), output);
  }

  // bytes Issuer = 3;
  if (this->issuer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->issuer(), output);
  }

  // bytes Label = 4;
  if (this->label().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->label(), output);
  }

  // bytes SerialNumber = 5;
  if (this->serialnumber().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->serialnumber(), output);
  }

  // .com.westone.skf.SKF_Version HWVersion = 6;
  if (this->has_hwversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::hwversion(this), output);
  }

  // .com.westone.skf.SKF_Version FirmwareVersion = 7;
  if (this->has_firmwareversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::firmwareversion(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 AlgSymCap = 8;
  if (this->has_algsymcap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::algsymcap(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 AlgAsymCap = 9;
  if (this->has_algasymcap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::algasymcap(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 AlgHashCap = 10;
  if (this->has_alghashcap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::alghashcap(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 DevAuthAlgId = 11;
  if (this->has_devauthalgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::devauthalgid(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 TotalSpace = 12;
  if (this->has_totalspace()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::totalspace(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 FreeSpace = 13;
  if (this->has_freespace()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::freespace(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 MaxEccBufferSize = 14;
  if (this->has_maxeccbuffersize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, HasBitSetters::maxeccbuffersize(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 MaxBufferSize = 15;
  if (this->has_maxbuffersize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, HasBitSetters::maxbuffersize(this), output);
  }

  // bytes Reserved = 16;
  if (this->reserved().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->reserved(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.SKF_DevInfo)
}

::google::protobuf::uint8* SKF_DevInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.SKF_DevInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.SKF_Version version = 1;
  if (this->has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::version(this), target);
  }

  // bytes Manufacturer = 2;
  if (this->manufacturer().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->manufacturer(), target);
  }

  // bytes Issuer = 3;
  if (this->issuer().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->issuer(), target);
  }

  // bytes Label = 4;
  if (this->label().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->label(), target);
  }

  // bytes SerialNumber = 5;
  if (this->serialnumber().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->serialnumber(), target);
  }

  // .com.westone.skf.SKF_Version HWVersion = 6;
  if (this->has_hwversion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::hwversion(this), target);
  }

  // .com.westone.skf.SKF_Version FirmwareVersion = 7;
  if (this->has_firmwareversion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::firmwareversion(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 AlgSymCap = 8;
  if (this->has_algsymcap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::algsymcap(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 AlgAsymCap = 9;
  if (this->has_algasymcap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::algasymcap(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 AlgHashCap = 10;
  if (this->has_alghashcap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::alghashcap(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 DevAuthAlgId = 11;
  if (this->has_devauthalgid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::devauthalgid(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 TotalSpace = 12;
  if (this->has_totalspace()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::totalspace(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 FreeSpace = 13;
  if (this->has_freespace()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::freespace(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 MaxEccBufferSize = 14;
  if (this->has_maxeccbuffersize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, HasBitSetters::maxeccbuffersize(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 MaxBufferSize = 15;
  if (this->has_maxbuffersize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, HasBitSetters::maxbuffersize(this), target);
  }

  // bytes Reserved = 16;
  if (this->reserved().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->reserved(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.SKF_DevInfo)
  return target;
}

size_t SKF_DevInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.SKF_DevInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Manufacturer = 2;
  if (this->manufacturer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->manufacturer());
  }

  // bytes Issuer = 3;
  if (this->issuer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->issuer());
  }

  // bytes Label = 4;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->label());
  }

  // bytes SerialNumber = 5;
  if (this->serialnumber().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->serialnumber());
  }

  // bytes Reserved = 16;
  if (this->reserved().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->reserved());
  }

  // .com.westone.skf.SKF_Version version = 1;
  if (this->has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *version_);
  }

  // .com.westone.skf.SKF_Version HWVersion = 6;
  if (this->has_hwversion()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hwversion_);
  }

  // .com.westone.skf.SKF_Version FirmwareVersion = 7;
  if (this->has_firmwareversion()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *firmwareversion_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 AlgSymCap = 8;
  if (this->has_algsymcap()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *algsymcap_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 AlgAsymCap = 9;
  if (this->has_algasymcap()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *algasymcap_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 AlgHashCap = 10;
  if (this->has_alghashcap()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *alghashcap_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 DevAuthAlgId = 11;
  if (this->has_devauthalgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *devauthalgid_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 TotalSpace = 12;
  if (this->has_totalspace()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *totalspace_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 FreeSpace = 13;
  if (this->has_freespace()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *freespace_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 MaxEccBufferSize = 14;
  if (this->has_maxeccbuffersize()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *maxeccbuffersize_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 MaxBufferSize = 15;
  if (this->has_maxbuffersize()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *maxbuffersize_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SKF_DevInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.SKF_DevInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SKF_DevInfo* source =
      ::google::protobuf::DynamicCastToGenerated<SKF_DevInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.SKF_DevInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.SKF_DevInfo)
    MergeFrom(*source);
  }
}

void SKF_DevInfo::MergeFrom(const SKF_DevInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.SKF_DevInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.manufacturer().size() > 0) {

    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  if (from.issuer().size() > 0) {

    issuer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.issuer_);
  }
  if (from.label().size() > 0) {

    label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  if (from.serialnumber().size() > 0) {

    serialnumber_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialnumber_);
  }
  if (from.reserved().size() > 0) {

    reserved_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reserved_);
  }
  if (from.has_version()) {
    mutable_version()->::com::westone::skf::SKF_Version::MergeFrom(from.version());
  }
  if (from.has_hwversion()) {
    mutable_hwversion()->::com::westone::skf::SKF_Version::MergeFrom(from.hwversion());
  }
  if (from.has_firmwareversion()) {
    mutable_firmwareversion()->::com::westone::skf::SKF_Version::MergeFrom(from.firmwareversion());
  }
  if (from.has_algsymcap()) {
    mutable_algsymcap()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.algsymcap());
  }
  if (from.has_algasymcap()) {
    mutable_algasymcap()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.algasymcap());
  }
  if (from.has_alghashcap()) {
    mutable_alghashcap()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.alghashcap());
  }
  if (from.has_devauthalgid()) {
    mutable_devauthalgid()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.devauthalgid());
  }
  if (from.has_totalspace()) {
    mutable_totalspace()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.totalspace());
  }
  if (from.has_freespace()) {
    mutable_freespace()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.freespace());
  }
  if (from.has_maxeccbuffersize()) {
    mutable_maxeccbuffersize()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.maxeccbuffersize());
  }
  if (from.has_maxbuffersize()) {
    mutable_maxbuffersize()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.maxbuffersize());
  }
}

void SKF_DevInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.SKF_DevInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SKF_DevInfo::CopyFrom(const SKF_DevInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.SKF_DevInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SKF_DevInfo::IsInitialized() const {
  return true;
}

void SKF_DevInfo::Swap(SKF_DevInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SKF_DevInfo::InternalSwap(SKF_DevInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  manufacturer_.Swap(&other->manufacturer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  issuer_.Swap(&other->issuer_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  label_.Swap(&other->label_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serialnumber_.Swap(&other->serialnumber_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reserved_.Swap(&other->reserved_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
  swap(hwversion_, other->hwversion_);
  swap(firmwareversion_, other->firmwareversion_);
  swap(algsymcap_, other->algsymcap_);
  swap(algasymcap_, other->algasymcap_);
  swap(alghashcap_, other->alghashcap_);
  swap(devauthalgid_, other->devauthalgid_);
  swap(totalspace_, other->totalspace_);
  swap(freespace_, other->freespace_);
  swap(maxeccbuffersize_, other->maxeccbuffersize_);
  swap(maxbuffersize_, other->maxbuffersize_);
}

::google::protobuf::Metadata SKF_DevInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SKF_RSAPUBLICKEYBLOB::InitAsDefaultInstance() {
  ::com::westone::skf::_SKF_RSAPUBLICKEYBLOB_default_instance_._instance.get_mutable()->algid_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_SKF_RSAPUBLICKEYBLOB_default_instance_._instance.get_mutable()->bitlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class SKF_RSAPUBLICKEYBLOB::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& algid(const SKF_RSAPUBLICKEYBLOB* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& bitlen(const SKF_RSAPUBLICKEYBLOB* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
SKF_RSAPUBLICKEYBLOB::HasBitSetters::algid(const SKF_RSAPUBLICKEYBLOB* msg) {
  return *msg->algid_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
SKF_RSAPUBLICKEYBLOB::HasBitSetters::bitlen(const SKF_RSAPUBLICKEYBLOB* msg) {
  return *msg->bitlen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SKF_RSAPUBLICKEYBLOB::kAlgIDFieldNumber;
const int SKF_RSAPUBLICKEYBLOB::kBitLenFieldNumber;
const int SKF_RSAPUBLICKEYBLOB::kModulusFieldNumber;
const int SKF_RSAPUBLICKEYBLOB::kPublicExponentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SKF_RSAPUBLICKEYBLOB::SKF_RSAPUBLICKEYBLOB()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.SKF_RSAPUBLICKEYBLOB)
}
SKF_RSAPUBLICKEYBLOB::SKF_RSAPUBLICKEYBLOB(const SKF_RSAPUBLICKEYBLOB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  modulus_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.modulus().size() > 0) {
    modulus_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modulus_);
  }
  publicexponent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.publicexponent().size() > 0) {
    publicexponent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publicexponent_);
  }
  if (from.has_algid()) {
    algid_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.algid_);
  } else {
    algid_ = nullptr;
  }
  if (from.has_bitlen()) {
    bitlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.bitlen_);
  } else {
    bitlen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.SKF_RSAPUBLICKEYBLOB)
}

void SKF_RSAPUBLICKEYBLOB::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SKF_RSAPUBLICKEYBLOB_skf_2eproto.base);
  modulus_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publicexponent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&algid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bitlen_) -
      reinterpret_cast<char*>(&algid_)) + sizeof(bitlen_));
}

SKF_RSAPUBLICKEYBLOB::~SKF_RSAPUBLICKEYBLOB() {
  // @@protoc_insertion_point(destructor:com.westone.skf.SKF_RSAPUBLICKEYBLOB)
  SharedDtor();
}

void SKF_RSAPUBLICKEYBLOB::SharedDtor() {
  modulus_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publicexponent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete algid_;
  if (this != internal_default_instance()) delete bitlen_;
}

void SKF_RSAPUBLICKEYBLOB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SKF_RSAPUBLICKEYBLOB& SKF_RSAPUBLICKEYBLOB::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SKF_RSAPUBLICKEYBLOB_skf_2eproto.base);
  return *internal_default_instance();
}


void SKF_RSAPUBLICKEYBLOB::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.SKF_RSAPUBLICKEYBLOB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modulus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publicexponent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && algid_ != nullptr) {
    delete algid_;
  }
  algid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bitlen_ != nullptr) {
    delete bitlen_;
  }
  bitlen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SKF_RSAPUBLICKEYBLOB::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SKF_RSAPUBLICKEYBLOB*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 AlgID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_algid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 BitLen = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_bitlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes Modulus = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_modulus();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes PublicExponent = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_publicexponent();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SKF_RSAPUBLICKEYBLOB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.SKF_RSAPUBLICKEYBLOB)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 AlgID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_algid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 BitLen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bitlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Modulus = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_modulus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes PublicExponent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_publicexponent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.SKF_RSAPUBLICKEYBLOB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.SKF_RSAPUBLICKEYBLOB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SKF_RSAPUBLICKEYBLOB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.SKF_RSAPUBLICKEYBLOB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 AlgID = 1;
  if (this->has_algid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::algid(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 BitLen = 2;
  if (this->has_bitlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::bitlen(this), output);
  }

  // bytes Modulus = 3;
  if (this->modulus().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->modulus(), output);
  }

  // bytes PublicExponent = 4;
  if (this->publicexponent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->publicexponent(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.SKF_RSAPUBLICKEYBLOB)
}

::google::protobuf::uint8* SKF_RSAPUBLICKEYBLOB::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.SKF_RSAPUBLICKEYBLOB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 AlgID = 1;
  if (this->has_algid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::algid(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 BitLen = 2;
  if (this->has_bitlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::bitlen(this), target);
  }

  // bytes Modulus = 3;
  if (this->modulus().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->modulus(), target);
  }

  // bytes PublicExponent = 4;
  if (this->publicexponent().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->publicexponent(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.SKF_RSAPUBLICKEYBLOB)
  return target;
}

size_t SKF_RSAPUBLICKEYBLOB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.SKF_RSAPUBLICKEYBLOB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Modulus = 3;
  if (this->modulus().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->modulus());
  }

  // bytes PublicExponent = 4;
  if (this->publicexponent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->publicexponent());
  }

  // .com.westone.skf.WST_PROTO_UINT32 AlgID = 1;
  if (this->has_algid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *algid_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 BitLen = 2;
  if (this->has_bitlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bitlen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SKF_RSAPUBLICKEYBLOB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.SKF_RSAPUBLICKEYBLOB)
  GOOGLE_DCHECK_NE(&from, this);
  const SKF_RSAPUBLICKEYBLOB* source =
      ::google::protobuf::DynamicCastToGenerated<SKF_RSAPUBLICKEYBLOB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.SKF_RSAPUBLICKEYBLOB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.SKF_RSAPUBLICKEYBLOB)
    MergeFrom(*source);
  }
}

void SKF_RSAPUBLICKEYBLOB::MergeFrom(const SKF_RSAPUBLICKEYBLOB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.SKF_RSAPUBLICKEYBLOB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.modulus().size() > 0) {

    modulus_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modulus_);
  }
  if (from.publicexponent().size() > 0) {

    publicexponent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publicexponent_);
  }
  if (from.has_algid()) {
    mutable_algid()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.algid());
  }
  if (from.has_bitlen()) {
    mutable_bitlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.bitlen());
  }
}

void SKF_RSAPUBLICKEYBLOB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.SKF_RSAPUBLICKEYBLOB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SKF_RSAPUBLICKEYBLOB::CopyFrom(const SKF_RSAPUBLICKEYBLOB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.SKF_RSAPUBLICKEYBLOB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SKF_RSAPUBLICKEYBLOB::IsInitialized() const {
  return true;
}

void SKF_RSAPUBLICKEYBLOB::Swap(SKF_RSAPUBLICKEYBLOB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SKF_RSAPUBLICKEYBLOB::InternalSwap(SKF_RSAPUBLICKEYBLOB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  modulus_.Swap(&other->modulus_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  publicexponent_.Swap(&other->publicexponent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(algid_, other->algid_);
  swap(bitlen_, other->bitlen_);
}

::google::protobuf::Metadata SKF_RSAPUBLICKEYBLOB::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SKF_RSAPRIVATEKEYBLOB::InitAsDefaultInstance() {
  ::com::westone::skf::_SKF_RSAPRIVATEKEYBLOB_default_instance_._instance.get_mutable()->algid_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_SKF_RSAPRIVATEKEYBLOB_default_instance_._instance.get_mutable()->bitlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class SKF_RSAPRIVATEKEYBLOB::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& algid(const SKF_RSAPRIVATEKEYBLOB* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& bitlen(const SKF_RSAPRIVATEKEYBLOB* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
SKF_RSAPRIVATEKEYBLOB::HasBitSetters::algid(const SKF_RSAPRIVATEKEYBLOB* msg) {
  return *msg->algid_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
SKF_RSAPRIVATEKEYBLOB::HasBitSetters::bitlen(const SKF_RSAPRIVATEKEYBLOB* msg) {
  return *msg->bitlen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SKF_RSAPRIVATEKEYBLOB::kAlgIDFieldNumber;
const int SKF_RSAPRIVATEKEYBLOB::kBitLenFieldNumber;
const int SKF_RSAPRIVATEKEYBLOB::kModulusFieldNumber;
const int SKF_RSAPRIVATEKEYBLOB::kPublicExponentFieldNumber;
const int SKF_RSAPRIVATEKEYBLOB::kPrivateExponentFieldNumber;
const int SKF_RSAPRIVATEKEYBLOB::kPrime1FieldNumber;
const int SKF_RSAPRIVATEKEYBLOB::kPrime2FieldNumber;
const int SKF_RSAPRIVATEKEYBLOB::kPrime1ExponentFieldNumber;
const int SKF_RSAPRIVATEKEYBLOB::kPrime2ExponentFieldNumber;
const int SKF_RSAPRIVATEKEYBLOB::kCoefficientFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SKF_RSAPRIVATEKEYBLOB::SKF_RSAPRIVATEKEYBLOB()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.SKF_RSAPRIVATEKEYBLOB)
}
SKF_RSAPRIVATEKEYBLOB::SKF_RSAPRIVATEKEYBLOB(const SKF_RSAPRIVATEKEYBLOB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  modulus_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.modulus().size() > 0) {
    modulus_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modulus_);
  }
  publicexponent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.publicexponent().size() > 0) {
    publicexponent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publicexponent_);
  }
  privateexponent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.privateexponent().size() > 0) {
    privateexponent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.privateexponent_);
  }
  prime1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prime1().size() > 0) {
    prime1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prime1_);
  }
  prime2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prime2().size() > 0) {
    prime2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prime2_);
  }
  prime1exponent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prime1exponent().size() > 0) {
    prime1exponent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prime1exponent_);
  }
  prime2exponent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prime2exponent().size() > 0) {
    prime2exponent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prime2exponent_);
  }
  coefficient_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.coefficient().size() > 0) {
    coefficient_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.coefficient_);
  }
  if (from.has_algid()) {
    algid_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.algid_);
  } else {
    algid_ = nullptr;
  }
  if (from.has_bitlen()) {
    bitlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.bitlen_);
  } else {
    bitlen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.SKF_RSAPRIVATEKEYBLOB)
}

void SKF_RSAPRIVATEKEYBLOB::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SKF_RSAPRIVATEKEYBLOB_skf_2eproto.base);
  modulus_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publicexponent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  privateexponent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prime1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prime2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prime1exponent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prime2exponent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coefficient_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&algid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bitlen_) -
      reinterpret_cast<char*>(&algid_)) + sizeof(bitlen_));
}

SKF_RSAPRIVATEKEYBLOB::~SKF_RSAPRIVATEKEYBLOB() {
  // @@protoc_insertion_point(destructor:com.westone.skf.SKF_RSAPRIVATEKEYBLOB)
  SharedDtor();
}

void SKF_RSAPRIVATEKEYBLOB::SharedDtor() {
  modulus_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publicexponent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  privateexponent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prime1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prime2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prime1exponent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prime2exponent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coefficient_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete algid_;
  if (this != internal_default_instance()) delete bitlen_;
}

void SKF_RSAPRIVATEKEYBLOB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SKF_RSAPRIVATEKEYBLOB& SKF_RSAPRIVATEKEYBLOB::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SKF_RSAPRIVATEKEYBLOB_skf_2eproto.base);
  return *internal_default_instance();
}


void SKF_RSAPRIVATEKEYBLOB::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.SKF_RSAPRIVATEKEYBLOB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modulus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publicexponent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  privateexponent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prime1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prime2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prime1exponent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prime2exponent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coefficient_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && algid_ != nullptr) {
    delete algid_;
  }
  algid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bitlen_ != nullptr) {
    delete bitlen_;
  }
  bitlen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SKF_RSAPRIVATEKEYBLOB::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SKF_RSAPRIVATEKEYBLOB*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 AlgID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_algid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 BitLen = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_bitlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes Modulus = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_modulus();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes PublicExponent = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_publicexponent();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes PrivateExponent = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_privateexponent();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes Prime1 = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_prime1();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes Prime2 = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_prime2();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes Prime1Exponent = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_prime1exponent();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes Prime2Exponent = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_prime2exponent();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes Coefficient = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_coefficient();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SKF_RSAPRIVATEKEYBLOB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.SKF_RSAPRIVATEKEYBLOB)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 AlgID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_algid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 BitLen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bitlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Modulus = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_modulus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes PublicExponent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_publicexponent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes PrivateExponent = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_privateexponent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Prime1 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prime1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Prime2 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prime2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Prime1Exponent = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prime1exponent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Prime2Exponent = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prime2exponent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Coefficient = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_coefficient()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.SKF_RSAPRIVATEKEYBLOB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.SKF_RSAPRIVATEKEYBLOB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SKF_RSAPRIVATEKEYBLOB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.SKF_RSAPRIVATEKEYBLOB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 AlgID = 1;
  if (this->has_algid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::algid(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 BitLen = 2;
  if (this->has_bitlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::bitlen(this), output);
  }

  // bytes Modulus = 3;
  if (this->modulus().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->modulus(), output);
  }

  // bytes PublicExponent = 4;
  if (this->publicexponent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->publicexponent(), output);
  }

  // bytes PrivateExponent = 5;
  if (this->privateexponent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->privateexponent(), output);
  }

  // bytes Prime1 = 6;
  if (this->prime1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->prime1(), output);
  }

  // bytes Prime2 = 7;
  if (this->prime2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->prime2(), output);
  }

  // bytes Prime1Exponent = 8;
  if (this->prime1exponent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->prime1exponent(), output);
  }

  // bytes Prime2Exponent = 9;
  if (this->prime2exponent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->prime2exponent(), output);
  }

  // bytes Coefficient = 10;
  if (this->coefficient().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->coefficient(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.SKF_RSAPRIVATEKEYBLOB)
}

::google::protobuf::uint8* SKF_RSAPRIVATEKEYBLOB::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.SKF_RSAPRIVATEKEYBLOB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 AlgID = 1;
  if (this->has_algid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::algid(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 BitLen = 2;
  if (this->has_bitlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::bitlen(this), target);
  }

  // bytes Modulus = 3;
  if (this->modulus().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->modulus(), target);
  }

  // bytes PublicExponent = 4;
  if (this->publicexponent().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->publicexponent(), target);
  }

  // bytes PrivateExponent = 5;
  if (this->privateexponent().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->privateexponent(), target);
  }

  // bytes Prime1 = 6;
  if (this->prime1().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->prime1(), target);
  }

  // bytes Prime2 = 7;
  if (this->prime2().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->prime2(), target);
  }

  // bytes Prime1Exponent = 8;
  if (this->prime1exponent().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->prime1exponent(), target);
  }

  // bytes Prime2Exponent = 9;
  if (this->prime2exponent().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->prime2exponent(), target);
  }

  // bytes Coefficient = 10;
  if (this->coefficient().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->coefficient(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.SKF_RSAPRIVATEKEYBLOB)
  return target;
}

size_t SKF_RSAPRIVATEKEYBLOB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.SKF_RSAPRIVATEKEYBLOB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Modulus = 3;
  if (this->modulus().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->modulus());
  }

  // bytes PublicExponent = 4;
  if (this->publicexponent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->publicexponent());
  }

  // bytes PrivateExponent = 5;
  if (this->privateexponent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->privateexponent());
  }

  // bytes Prime1 = 6;
  if (this->prime1().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->prime1());
  }

  // bytes Prime2 = 7;
  if (this->prime2().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->prime2());
  }

  // bytes Prime1Exponent = 8;
  if (this->prime1exponent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->prime1exponent());
  }

  // bytes Prime2Exponent = 9;
  if (this->prime2exponent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->prime2exponent());
  }

  // bytes Coefficient = 10;
  if (this->coefficient().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->coefficient());
  }

  // .com.westone.skf.WST_PROTO_UINT32 AlgID = 1;
  if (this->has_algid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *algid_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 BitLen = 2;
  if (this->has_bitlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bitlen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SKF_RSAPRIVATEKEYBLOB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.SKF_RSAPRIVATEKEYBLOB)
  GOOGLE_DCHECK_NE(&from, this);
  const SKF_RSAPRIVATEKEYBLOB* source =
      ::google::protobuf::DynamicCastToGenerated<SKF_RSAPRIVATEKEYBLOB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.SKF_RSAPRIVATEKEYBLOB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.SKF_RSAPRIVATEKEYBLOB)
    MergeFrom(*source);
  }
}

void SKF_RSAPRIVATEKEYBLOB::MergeFrom(const SKF_RSAPRIVATEKEYBLOB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.SKF_RSAPRIVATEKEYBLOB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.modulus().size() > 0) {

    modulus_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modulus_);
  }
  if (from.publicexponent().size() > 0) {

    publicexponent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publicexponent_);
  }
  if (from.privateexponent().size() > 0) {

    privateexponent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.privateexponent_);
  }
  if (from.prime1().size() > 0) {

    prime1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prime1_);
  }
  if (from.prime2().size() > 0) {

    prime2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prime2_);
  }
  if (from.prime1exponent().size() > 0) {

    prime1exponent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prime1exponent_);
  }
  if (from.prime2exponent().size() > 0) {

    prime2exponent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prime2exponent_);
  }
  if (from.coefficient().size() > 0) {

    coefficient_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.coefficient_);
  }
  if (from.has_algid()) {
    mutable_algid()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.algid());
  }
  if (from.has_bitlen()) {
    mutable_bitlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.bitlen());
  }
}

void SKF_RSAPRIVATEKEYBLOB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.SKF_RSAPRIVATEKEYBLOB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SKF_RSAPRIVATEKEYBLOB::CopyFrom(const SKF_RSAPRIVATEKEYBLOB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.SKF_RSAPRIVATEKEYBLOB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SKF_RSAPRIVATEKEYBLOB::IsInitialized() const {
  return true;
}

void SKF_RSAPRIVATEKEYBLOB::Swap(SKF_RSAPRIVATEKEYBLOB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SKF_RSAPRIVATEKEYBLOB::InternalSwap(SKF_RSAPRIVATEKEYBLOB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  modulus_.Swap(&other->modulus_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  publicexponent_.Swap(&other->publicexponent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  privateexponent_.Swap(&other->privateexponent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prime1_.Swap(&other->prime1_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prime2_.Swap(&other->prime2_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prime1exponent_.Swap(&other->prime1exponent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prime2exponent_.Swap(&other->prime2exponent_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  coefficient_.Swap(&other->coefficient_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(algid_, other->algid_);
  swap(bitlen_, other->bitlen_);
}

::google::protobuf::Metadata SKF_RSAPRIVATEKEYBLOB::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SKF_ECCPUBLICKEYBLOB::InitAsDefaultInstance() {
  ::com::westone::skf::_SKF_ECCPUBLICKEYBLOB_default_instance_._instance.get_mutable()->bitlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class SKF_ECCPUBLICKEYBLOB::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& bitlen(const SKF_ECCPUBLICKEYBLOB* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
SKF_ECCPUBLICKEYBLOB::HasBitSetters::bitlen(const SKF_ECCPUBLICKEYBLOB* msg) {
  return *msg->bitlen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SKF_ECCPUBLICKEYBLOB::kBitLenFieldNumber;
const int SKF_ECCPUBLICKEYBLOB::kXCoordinateFieldNumber;
const int SKF_ECCPUBLICKEYBLOB::kYCoordinateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SKF_ECCPUBLICKEYBLOB::SKF_ECCPUBLICKEYBLOB()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.SKF_ECCPUBLICKEYBLOB)
}
SKF_ECCPUBLICKEYBLOB::SKF_ECCPUBLICKEYBLOB(const SKF_ECCPUBLICKEYBLOB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  xcoordinate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.xcoordinate().size() > 0) {
    xcoordinate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xcoordinate_);
  }
  ycoordinate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ycoordinate().size() > 0) {
    ycoordinate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ycoordinate_);
  }
  if (from.has_bitlen()) {
    bitlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.bitlen_);
  } else {
    bitlen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.SKF_ECCPUBLICKEYBLOB)
}

void SKF_ECCPUBLICKEYBLOB::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SKF_ECCPUBLICKEYBLOB_skf_2eproto.base);
  xcoordinate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ycoordinate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bitlen_ = nullptr;
}

SKF_ECCPUBLICKEYBLOB::~SKF_ECCPUBLICKEYBLOB() {
  // @@protoc_insertion_point(destructor:com.westone.skf.SKF_ECCPUBLICKEYBLOB)
  SharedDtor();
}

void SKF_ECCPUBLICKEYBLOB::SharedDtor() {
  xcoordinate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ycoordinate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bitlen_;
}

void SKF_ECCPUBLICKEYBLOB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SKF_ECCPUBLICKEYBLOB& SKF_ECCPUBLICKEYBLOB::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SKF_ECCPUBLICKEYBLOB_skf_2eproto.base);
  return *internal_default_instance();
}


void SKF_ECCPUBLICKEYBLOB::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.SKF_ECCPUBLICKEYBLOB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xcoordinate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ycoordinate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && bitlen_ != nullptr) {
    delete bitlen_;
  }
  bitlen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SKF_ECCPUBLICKEYBLOB::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SKF_ECCPUBLICKEYBLOB*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 BitLen = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_bitlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes XCoordinate = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_xcoordinate();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes YCoordinate = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_ycoordinate();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SKF_ECCPUBLICKEYBLOB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.SKF_ECCPUBLICKEYBLOB)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 BitLen = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bitlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes XCoordinate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_xcoordinate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes YCoordinate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ycoordinate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.SKF_ECCPUBLICKEYBLOB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.SKF_ECCPUBLICKEYBLOB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SKF_ECCPUBLICKEYBLOB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.SKF_ECCPUBLICKEYBLOB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 BitLen = 1;
  if (this->has_bitlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::bitlen(this), output);
  }

  // bytes XCoordinate = 2;
  if (this->xcoordinate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->xcoordinate(), output);
  }

  // bytes YCoordinate = 3;
  if (this->ycoordinate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->ycoordinate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.SKF_ECCPUBLICKEYBLOB)
}

::google::protobuf::uint8* SKF_ECCPUBLICKEYBLOB::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.SKF_ECCPUBLICKEYBLOB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 BitLen = 1;
  if (this->has_bitlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::bitlen(this), target);
  }

  // bytes XCoordinate = 2;
  if (this->xcoordinate().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->xcoordinate(), target);
  }

  // bytes YCoordinate = 3;
  if (this->ycoordinate().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ycoordinate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.SKF_ECCPUBLICKEYBLOB)
  return target;
}

size_t SKF_ECCPUBLICKEYBLOB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.SKF_ECCPUBLICKEYBLOB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes XCoordinate = 2;
  if (this->xcoordinate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->xcoordinate());
  }

  // bytes YCoordinate = 3;
  if (this->ycoordinate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ycoordinate());
  }

  // .com.westone.skf.WST_PROTO_UINT32 BitLen = 1;
  if (this->has_bitlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bitlen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SKF_ECCPUBLICKEYBLOB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.SKF_ECCPUBLICKEYBLOB)
  GOOGLE_DCHECK_NE(&from, this);
  const SKF_ECCPUBLICKEYBLOB* source =
      ::google::protobuf::DynamicCastToGenerated<SKF_ECCPUBLICKEYBLOB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.SKF_ECCPUBLICKEYBLOB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.SKF_ECCPUBLICKEYBLOB)
    MergeFrom(*source);
  }
}

void SKF_ECCPUBLICKEYBLOB::MergeFrom(const SKF_ECCPUBLICKEYBLOB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.SKF_ECCPUBLICKEYBLOB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.xcoordinate().size() > 0) {

    xcoordinate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xcoordinate_);
  }
  if (from.ycoordinate().size() > 0) {

    ycoordinate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ycoordinate_);
  }
  if (from.has_bitlen()) {
    mutable_bitlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.bitlen());
  }
}

void SKF_ECCPUBLICKEYBLOB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.SKF_ECCPUBLICKEYBLOB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SKF_ECCPUBLICKEYBLOB::CopyFrom(const SKF_ECCPUBLICKEYBLOB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.SKF_ECCPUBLICKEYBLOB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SKF_ECCPUBLICKEYBLOB::IsInitialized() const {
  return true;
}

void SKF_ECCPUBLICKEYBLOB::Swap(SKF_ECCPUBLICKEYBLOB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SKF_ECCPUBLICKEYBLOB::InternalSwap(SKF_ECCPUBLICKEYBLOB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  xcoordinate_.Swap(&other->xcoordinate_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ycoordinate_.Swap(&other->ycoordinate_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bitlen_, other->bitlen_);
}

::google::protobuf::Metadata SKF_ECCPUBLICKEYBLOB::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SKF_ECCPRIVATEKEYBLOB::InitAsDefaultInstance() {
  ::com::westone::skf::_SKF_ECCPRIVATEKEYBLOB_default_instance_._instance.get_mutable()->bitlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class SKF_ECCPRIVATEKEYBLOB::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& bitlen(const SKF_ECCPRIVATEKEYBLOB* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
SKF_ECCPRIVATEKEYBLOB::HasBitSetters::bitlen(const SKF_ECCPRIVATEKEYBLOB* msg) {
  return *msg->bitlen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SKF_ECCPRIVATEKEYBLOB::kBitLenFieldNumber;
const int SKF_ECCPRIVATEKEYBLOB::kPrivateKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SKF_ECCPRIVATEKEYBLOB::SKF_ECCPRIVATEKEYBLOB()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.SKF_ECCPRIVATEKEYBLOB)
}
SKF_ECCPRIVATEKEYBLOB::SKF_ECCPRIVATEKEYBLOB(const SKF_ECCPRIVATEKEYBLOB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  privatekey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.privatekey().size() > 0) {
    privatekey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.privatekey_);
  }
  if (from.has_bitlen()) {
    bitlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.bitlen_);
  } else {
    bitlen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.SKF_ECCPRIVATEKEYBLOB)
}

void SKF_ECCPRIVATEKEYBLOB::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SKF_ECCPRIVATEKEYBLOB_skf_2eproto.base);
  privatekey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bitlen_ = nullptr;
}

SKF_ECCPRIVATEKEYBLOB::~SKF_ECCPRIVATEKEYBLOB() {
  // @@protoc_insertion_point(destructor:com.westone.skf.SKF_ECCPRIVATEKEYBLOB)
  SharedDtor();
}

void SKF_ECCPRIVATEKEYBLOB::SharedDtor() {
  privatekey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bitlen_;
}

void SKF_ECCPRIVATEKEYBLOB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SKF_ECCPRIVATEKEYBLOB& SKF_ECCPRIVATEKEYBLOB::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SKF_ECCPRIVATEKEYBLOB_skf_2eproto.base);
  return *internal_default_instance();
}


void SKF_ECCPRIVATEKEYBLOB::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.SKF_ECCPRIVATEKEYBLOB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  privatekey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && bitlen_ != nullptr) {
    delete bitlen_;
  }
  bitlen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SKF_ECCPRIVATEKEYBLOB::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SKF_ECCPRIVATEKEYBLOB*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 BitLen = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_bitlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes PrivateKey = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_privatekey();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SKF_ECCPRIVATEKEYBLOB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.SKF_ECCPRIVATEKEYBLOB)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 BitLen = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bitlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes PrivateKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_privatekey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.SKF_ECCPRIVATEKEYBLOB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.SKF_ECCPRIVATEKEYBLOB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SKF_ECCPRIVATEKEYBLOB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.SKF_ECCPRIVATEKEYBLOB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 BitLen = 1;
  if (this->has_bitlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::bitlen(this), output);
  }

  // bytes PrivateKey = 2;
  if (this->privatekey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->privatekey(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.SKF_ECCPRIVATEKEYBLOB)
}

::google::protobuf::uint8* SKF_ECCPRIVATEKEYBLOB::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.SKF_ECCPRIVATEKEYBLOB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 BitLen = 1;
  if (this->has_bitlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::bitlen(this), target);
  }

  // bytes PrivateKey = 2;
  if (this->privatekey().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->privatekey(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.SKF_ECCPRIVATEKEYBLOB)
  return target;
}

size_t SKF_ECCPRIVATEKEYBLOB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.SKF_ECCPRIVATEKEYBLOB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes PrivateKey = 2;
  if (this->privatekey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->privatekey());
  }

  // .com.westone.skf.WST_PROTO_UINT32 BitLen = 1;
  if (this->has_bitlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bitlen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SKF_ECCPRIVATEKEYBLOB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.SKF_ECCPRIVATEKEYBLOB)
  GOOGLE_DCHECK_NE(&from, this);
  const SKF_ECCPRIVATEKEYBLOB* source =
      ::google::protobuf::DynamicCastToGenerated<SKF_ECCPRIVATEKEYBLOB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.SKF_ECCPRIVATEKEYBLOB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.SKF_ECCPRIVATEKEYBLOB)
    MergeFrom(*source);
  }
}

void SKF_ECCPRIVATEKEYBLOB::MergeFrom(const SKF_ECCPRIVATEKEYBLOB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.SKF_ECCPRIVATEKEYBLOB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.privatekey().size() > 0) {

    privatekey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.privatekey_);
  }
  if (from.has_bitlen()) {
    mutable_bitlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.bitlen());
  }
}

void SKF_ECCPRIVATEKEYBLOB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.SKF_ECCPRIVATEKEYBLOB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SKF_ECCPRIVATEKEYBLOB::CopyFrom(const SKF_ECCPRIVATEKEYBLOB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.SKF_ECCPRIVATEKEYBLOB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SKF_ECCPRIVATEKEYBLOB::IsInitialized() const {
  return true;
}

void SKF_ECCPRIVATEKEYBLOB::Swap(SKF_ECCPRIVATEKEYBLOB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SKF_ECCPRIVATEKEYBLOB::InternalSwap(SKF_ECCPRIVATEKEYBLOB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  privatekey_.Swap(&other->privatekey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bitlen_, other->bitlen_);
}

::google::protobuf::Metadata SKF_ECCPRIVATEKEYBLOB::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SKF_ECCCIPHERBLOB::InitAsDefaultInstance() {
  ::com::westone::skf::_SKF_ECCCIPHERBLOB_default_instance_._instance.get_mutable()->cipherlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class SKF_ECCCIPHERBLOB::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& cipherlen(const SKF_ECCCIPHERBLOB* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
SKF_ECCCIPHERBLOB::HasBitSetters::cipherlen(const SKF_ECCCIPHERBLOB* msg) {
  return *msg->cipherlen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SKF_ECCCIPHERBLOB::kXCoordinateFieldNumber;
const int SKF_ECCCIPHERBLOB::kYCoordinateFieldNumber;
const int SKF_ECCCIPHERBLOB::kHASHFieldNumber;
const int SKF_ECCCIPHERBLOB::kCipherLenFieldNumber;
const int SKF_ECCCIPHERBLOB::kCipherFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SKF_ECCCIPHERBLOB::SKF_ECCCIPHERBLOB()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.SKF_ECCCIPHERBLOB)
}
SKF_ECCCIPHERBLOB::SKF_ECCCIPHERBLOB(const SKF_ECCCIPHERBLOB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  xcoordinate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.xcoordinate().size() > 0) {
    xcoordinate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xcoordinate_);
  }
  ycoordinate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ycoordinate().size() > 0) {
    ycoordinate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ycoordinate_);
  }
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  cipher_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cipher().size() > 0) {
    cipher_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cipher_);
  }
  if (from.has_cipherlen()) {
    cipherlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.cipherlen_);
  } else {
    cipherlen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.SKF_ECCCIPHERBLOB)
}

void SKF_ECCCIPHERBLOB::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SKF_ECCCIPHERBLOB_skf_2eproto.base);
  xcoordinate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ycoordinate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cipher_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cipherlen_ = nullptr;
}

SKF_ECCCIPHERBLOB::~SKF_ECCCIPHERBLOB() {
  // @@protoc_insertion_point(destructor:com.westone.skf.SKF_ECCCIPHERBLOB)
  SharedDtor();
}

void SKF_ECCCIPHERBLOB::SharedDtor() {
  xcoordinate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ycoordinate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cipher_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cipherlen_;
}

void SKF_ECCCIPHERBLOB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SKF_ECCCIPHERBLOB& SKF_ECCCIPHERBLOB::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SKF_ECCCIPHERBLOB_skf_2eproto.base);
  return *internal_default_instance();
}


void SKF_ECCCIPHERBLOB::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.SKF_ECCCIPHERBLOB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  xcoordinate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ycoordinate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cipher_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && cipherlen_ != nullptr) {
    delete cipherlen_;
  }
  cipherlen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SKF_ECCCIPHERBLOB::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SKF_ECCCIPHERBLOB*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes XCoordinate = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_xcoordinate();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes YCoordinate = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_ycoordinate();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes HASH = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_hash();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 CipherLen = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_cipherlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes Cipher = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_cipher();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SKF_ECCCIPHERBLOB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.SKF_ECCCIPHERBLOB)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes XCoordinate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_xcoordinate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes YCoordinate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ycoordinate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes HASH = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 CipherLen = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cipherlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes Cipher = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cipher()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.SKF_ECCCIPHERBLOB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.SKF_ECCCIPHERBLOB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SKF_ECCCIPHERBLOB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.SKF_ECCCIPHERBLOB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes XCoordinate = 1;
  if (this->xcoordinate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->xcoordinate(), output);
  }

  // bytes YCoordinate = 2;
  if (this->ycoordinate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->ycoordinate(), output);
  }

  // bytes HASH = 3;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->hash(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 CipherLen = 4;
  if (this->has_cipherlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::cipherlen(this), output);
  }

  // bytes Cipher = 5;
  if (this->cipher().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->cipher(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.SKF_ECCCIPHERBLOB)
}

::google::protobuf::uint8* SKF_ECCCIPHERBLOB::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.SKF_ECCCIPHERBLOB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes XCoordinate = 1;
  if (this->xcoordinate().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->xcoordinate(), target);
  }

  // bytes YCoordinate = 2;
  if (this->ycoordinate().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->ycoordinate(), target);
  }

  // bytes HASH = 3;
  if (this->hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->hash(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 CipherLen = 4;
  if (this->has_cipherlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::cipherlen(this), target);
  }

  // bytes Cipher = 5;
  if (this->cipher().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->cipher(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.SKF_ECCCIPHERBLOB)
  return target;
}

size_t SKF_ECCCIPHERBLOB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.SKF_ECCCIPHERBLOB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes XCoordinate = 1;
  if (this->xcoordinate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->xcoordinate());
  }

  // bytes YCoordinate = 2;
  if (this->ycoordinate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ycoordinate());
  }

  // bytes HASH = 3;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // bytes Cipher = 5;
  if (this->cipher().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cipher());
  }

  // .com.westone.skf.WST_PROTO_UINT32 CipherLen = 4;
  if (this->has_cipherlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cipherlen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SKF_ECCCIPHERBLOB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.SKF_ECCCIPHERBLOB)
  GOOGLE_DCHECK_NE(&from, this);
  const SKF_ECCCIPHERBLOB* source =
      ::google::protobuf::DynamicCastToGenerated<SKF_ECCCIPHERBLOB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.SKF_ECCCIPHERBLOB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.SKF_ECCCIPHERBLOB)
    MergeFrom(*source);
  }
}

void SKF_ECCCIPHERBLOB::MergeFrom(const SKF_ECCCIPHERBLOB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.SKF_ECCCIPHERBLOB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.xcoordinate().size() > 0) {

    xcoordinate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.xcoordinate_);
  }
  if (from.ycoordinate().size() > 0) {

    ycoordinate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ycoordinate_);
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.cipher().size() > 0) {

    cipher_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cipher_);
  }
  if (from.has_cipherlen()) {
    mutable_cipherlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.cipherlen());
  }
}

void SKF_ECCCIPHERBLOB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.SKF_ECCCIPHERBLOB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SKF_ECCCIPHERBLOB::CopyFrom(const SKF_ECCCIPHERBLOB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.SKF_ECCCIPHERBLOB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SKF_ECCCIPHERBLOB::IsInitialized() const {
  return true;
}

void SKF_ECCCIPHERBLOB::Swap(SKF_ECCCIPHERBLOB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SKF_ECCCIPHERBLOB::InternalSwap(SKF_ECCCIPHERBLOB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  xcoordinate_.Swap(&other->xcoordinate_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ycoordinate_.Swap(&other->ycoordinate_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hash_.Swap(&other->hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cipher_.Swap(&other->cipher_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cipherlen_, other->cipherlen_);
}

::google::protobuf::Metadata SKF_ECCCIPHERBLOB::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SKF_ECCSIGNATUREBLOB::InitAsDefaultInstance() {
}
class SKF_ECCSIGNATUREBLOB::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SKF_ECCSIGNATUREBLOB::kRFieldNumber;
const int SKF_ECCSIGNATUREBLOB::kSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SKF_ECCSIGNATUREBLOB::SKF_ECCSIGNATUREBLOB()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.SKF_ECCSIGNATUREBLOB)
}
SKF_ECCSIGNATUREBLOB::SKF_ECCSIGNATUREBLOB(const SKF_ECCSIGNATUREBLOB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  r_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.r().size() > 0) {
    r_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.r_);
  }
  s_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.s().size() > 0) {
    s_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_);
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.SKF_ECCSIGNATUREBLOB)
}

void SKF_ECCSIGNATUREBLOB::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SKF_ECCSIGNATUREBLOB_skf_2eproto.base);
  r_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SKF_ECCSIGNATUREBLOB::~SKF_ECCSIGNATUREBLOB() {
  // @@protoc_insertion_point(destructor:com.westone.skf.SKF_ECCSIGNATUREBLOB)
  SharedDtor();
}

void SKF_ECCSIGNATUREBLOB::SharedDtor() {
  r_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SKF_ECCSIGNATUREBLOB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SKF_ECCSIGNATUREBLOB& SKF_ECCSIGNATUREBLOB::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SKF_ECCSIGNATUREBLOB_skf_2eproto.base);
  return *internal_default_instance();
}


void SKF_ECCSIGNATUREBLOB::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.SKF_ECCSIGNATUREBLOB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  r_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SKF_ECCSIGNATUREBLOB::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SKF_ECCSIGNATUREBLOB*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes r = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_r();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes s = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_s();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SKF_ECCSIGNATUREBLOB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.SKF_ECCSIGNATUREBLOB)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes r = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_r()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_s()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.SKF_ECCSIGNATUREBLOB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.SKF_ECCSIGNATUREBLOB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SKF_ECCSIGNATUREBLOB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.SKF_ECCSIGNATUREBLOB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes r = 1;
  if (this->r().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->r(), output);
  }

  // bytes s = 2;
  if (this->s().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.SKF_ECCSIGNATUREBLOB)
}

::google::protobuf::uint8* SKF_ECCSIGNATUREBLOB::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.SKF_ECCSIGNATUREBLOB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes r = 1;
  if (this->r().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->r(), target);
  }

  // bytes s = 2;
  if (this->s().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.SKF_ECCSIGNATUREBLOB)
  return target;
}

size_t SKF_ECCSIGNATUREBLOB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.SKF_ECCSIGNATUREBLOB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes r = 1;
  if (this->r().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->r());
  }

  // bytes s = 2;
  if (this->s().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->s());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SKF_ECCSIGNATUREBLOB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.SKF_ECCSIGNATUREBLOB)
  GOOGLE_DCHECK_NE(&from, this);
  const SKF_ECCSIGNATUREBLOB* source =
      ::google::protobuf::DynamicCastToGenerated<SKF_ECCSIGNATUREBLOB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.SKF_ECCSIGNATUREBLOB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.SKF_ECCSIGNATUREBLOB)
    MergeFrom(*source);
  }
}

void SKF_ECCSIGNATUREBLOB::MergeFrom(const SKF_ECCSIGNATUREBLOB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.SKF_ECCSIGNATUREBLOB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.r().size() > 0) {

    r_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.r_);
  }
  if (from.s().size() > 0) {

    s_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_);
  }
}

void SKF_ECCSIGNATUREBLOB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.SKF_ECCSIGNATUREBLOB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SKF_ECCSIGNATUREBLOB::CopyFrom(const SKF_ECCSIGNATUREBLOB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.SKF_ECCSIGNATUREBLOB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SKF_ECCSIGNATUREBLOB::IsInitialized() const {
  return true;
}

void SKF_ECCSIGNATUREBLOB::Swap(SKF_ECCSIGNATUREBLOB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SKF_ECCSIGNATUREBLOB::InternalSwap(SKF_ECCSIGNATUREBLOB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  r_.Swap(&other->r_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  s_.Swap(&other->s_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata SKF_ECCSIGNATUREBLOB::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SKF_BLOCKCIPHERPARAM::InitAsDefaultInstance() {
  ::com::westone::skf::_SKF_BLOCKCIPHERPARAM_default_instance_._instance.get_mutable()->ivlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_SKF_BLOCKCIPHERPARAM_default_instance_._instance.get_mutable()->paddingtype_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_SKF_BLOCKCIPHERPARAM_default_instance_._instance.get_mutable()->feedbitlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class SKF_BLOCKCIPHERPARAM::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& ivlen(const SKF_BLOCKCIPHERPARAM* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& paddingtype(const SKF_BLOCKCIPHERPARAM* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& feedbitlen(const SKF_BLOCKCIPHERPARAM* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
SKF_BLOCKCIPHERPARAM::HasBitSetters::ivlen(const SKF_BLOCKCIPHERPARAM* msg) {
  return *msg->ivlen_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
SKF_BLOCKCIPHERPARAM::HasBitSetters::paddingtype(const SKF_BLOCKCIPHERPARAM* msg) {
  return *msg->paddingtype_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
SKF_BLOCKCIPHERPARAM::HasBitSetters::feedbitlen(const SKF_BLOCKCIPHERPARAM* msg) {
  return *msg->feedbitlen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SKF_BLOCKCIPHERPARAM::kIVFieldNumber;
const int SKF_BLOCKCIPHERPARAM::kIVLenFieldNumber;
const int SKF_BLOCKCIPHERPARAM::kPaddingTypeFieldNumber;
const int SKF_BLOCKCIPHERPARAM::kFeedBitLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SKF_BLOCKCIPHERPARAM::SKF_BLOCKCIPHERPARAM()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.SKF_BLOCKCIPHERPARAM)
}
SKF_BLOCKCIPHERPARAM::SKF_BLOCKCIPHERPARAM(const SKF_BLOCKCIPHERPARAM& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  iv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.iv().size() > 0) {
    iv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iv_);
  }
  if (from.has_ivlen()) {
    ivlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ivlen_);
  } else {
    ivlen_ = nullptr;
  }
  if (from.has_paddingtype()) {
    paddingtype_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.paddingtype_);
  } else {
    paddingtype_ = nullptr;
  }
  if (from.has_feedbitlen()) {
    feedbitlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.feedbitlen_);
  } else {
    feedbitlen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.SKF_BLOCKCIPHERPARAM)
}

void SKF_BLOCKCIPHERPARAM::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SKF_BLOCKCIPHERPARAM_skf_2eproto.base);
  iv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ivlen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&feedbitlen_) -
      reinterpret_cast<char*>(&ivlen_)) + sizeof(feedbitlen_));
}

SKF_BLOCKCIPHERPARAM::~SKF_BLOCKCIPHERPARAM() {
  // @@protoc_insertion_point(destructor:com.westone.skf.SKF_BLOCKCIPHERPARAM)
  SharedDtor();
}

void SKF_BLOCKCIPHERPARAM::SharedDtor() {
  iv_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ivlen_;
  if (this != internal_default_instance()) delete paddingtype_;
  if (this != internal_default_instance()) delete feedbitlen_;
}

void SKF_BLOCKCIPHERPARAM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SKF_BLOCKCIPHERPARAM& SKF_BLOCKCIPHERPARAM::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SKF_BLOCKCIPHERPARAM_skf_2eproto.base);
  return *internal_default_instance();
}


void SKF_BLOCKCIPHERPARAM::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.SKF_BLOCKCIPHERPARAM)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  iv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && ivlen_ != nullptr) {
    delete ivlen_;
  }
  ivlen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && paddingtype_ != nullptr) {
    delete paddingtype_;
  }
  paddingtype_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && feedbitlen_ != nullptr) {
    delete feedbitlen_;
  }
  feedbitlen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SKF_BLOCKCIPHERPARAM::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SKF_BLOCKCIPHERPARAM*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes IV = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_iv();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 IVLen = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ivlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 PaddingType = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_paddingtype();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 FeedBitLen = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_feedbitlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SKF_BLOCKCIPHERPARAM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.SKF_BLOCKCIPHERPARAM)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes IV = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_iv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 IVLen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ivlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 PaddingType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_paddingtype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 FeedBitLen = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_feedbitlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.SKF_BLOCKCIPHERPARAM)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.SKF_BLOCKCIPHERPARAM)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SKF_BLOCKCIPHERPARAM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.SKF_BLOCKCIPHERPARAM)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes IV = 1;
  if (this->iv().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->iv(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 IVLen = 2;
  if (this->has_ivlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::ivlen(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 PaddingType = 3;
  if (this->has_paddingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::paddingtype(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 FeedBitLen = 4;
  if (this->has_feedbitlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::feedbitlen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.SKF_BLOCKCIPHERPARAM)
}

::google::protobuf::uint8* SKF_BLOCKCIPHERPARAM::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.SKF_BLOCKCIPHERPARAM)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes IV = 1;
  if (this->iv().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->iv(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 IVLen = 2;
  if (this->has_ivlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::ivlen(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 PaddingType = 3;
  if (this->has_paddingtype()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::paddingtype(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 FeedBitLen = 4;
  if (this->has_feedbitlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::feedbitlen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.SKF_BLOCKCIPHERPARAM)
  return target;
}

size_t SKF_BLOCKCIPHERPARAM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.SKF_BLOCKCIPHERPARAM)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes IV = 1;
  if (this->iv().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->iv());
  }

  // .com.westone.skf.WST_PROTO_UINT32 IVLen = 2;
  if (this->has_ivlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ivlen_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 PaddingType = 3;
  if (this->has_paddingtype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *paddingtype_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 FeedBitLen = 4;
  if (this->has_feedbitlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *feedbitlen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SKF_BLOCKCIPHERPARAM::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.SKF_BLOCKCIPHERPARAM)
  GOOGLE_DCHECK_NE(&from, this);
  const SKF_BLOCKCIPHERPARAM* source =
      ::google::protobuf::DynamicCastToGenerated<SKF_BLOCKCIPHERPARAM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.SKF_BLOCKCIPHERPARAM)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.SKF_BLOCKCIPHERPARAM)
    MergeFrom(*source);
  }
}

void SKF_BLOCKCIPHERPARAM::MergeFrom(const SKF_BLOCKCIPHERPARAM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.SKF_BLOCKCIPHERPARAM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.iv().size() > 0) {

    iv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iv_);
  }
  if (from.has_ivlen()) {
    mutable_ivlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ivlen());
  }
  if (from.has_paddingtype()) {
    mutable_paddingtype()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.paddingtype());
  }
  if (from.has_feedbitlen()) {
    mutable_feedbitlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.feedbitlen());
  }
}

void SKF_BLOCKCIPHERPARAM::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.SKF_BLOCKCIPHERPARAM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SKF_BLOCKCIPHERPARAM::CopyFrom(const SKF_BLOCKCIPHERPARAM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.SKF_BLOCKCIPHERPARAM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SKF_BLOCKCIPHERPARAM::IsInitialized() const {
  return true;
}

void SKF_BLOCKCIPHERPARAM::Swap(SKF_BLOCKCIPHERPARAM* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SKF_BLOCKCIPHERPARAM::InternalSwap(SKF_BLOCKCIPHERPARAM* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  iv_.Swap(&other->iv_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ivlen_, other->ivlen_);
  swap(paddingtype_, other->paddingtype_);
  swap(feedbitlen_, other->feedbitlen_);
}

::google::protobuf::Metadata SKF_BLOCKCIPHERPARAM::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SKF_ENVELOPEDKEYBLOB::InitAsDefaultInstance() {
  ::com::westone::skf::_SKF_ENVELOPEDKEYBLOB_default_instance_._instance.get_mutable()->version_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_SKF_ENVELOPEDKEYBLOB_default_instance_._instance.get_mutable()->ulsymmalgid_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_SKF_ENVELOPEDKEYBLOB_default_instance_._instance.get_mutable()->ulbits_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_SKF_ENVELOPEDKEYBLOB_default_instance_._instance.get_mutable()->pubkey_ = const_cast< ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::internal_default_instance());
  ::com::westone::skf::_SKF_ENVELOPEDKEYBLOB_default_instance_._instance.get_mutable()->ecccipherblob_ = const_cast< ::com::westone::skf::SKF_ECCCIPHERBLOB*>(
      ::com::westone::skf::SKF_ECCCIPHERBLOB::internal_default_instance());
}
class SKF_ENVELOPEDKEYBLOB::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& version(const SKF_ENVELOPEDKEYBLOB* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulsymmalgid(const SKF_ENVELOPEDKEYBLOB* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulbits(const SKF_ENVELOPEDKEYBLOB* msg);
  static const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& pubkey(const SKF_ENVELOPEDKEYBLOB* msg);
  static const ::com::westone::skf::SKF_ECCCIPHERBLOB& ecccipherblob(const SKF_ENVELOPEDKEYBLOB* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
SKF_ENVELOPEDKEYBLOB::HasBitSetters::version(const SKF_ENVELOPEDKEYBLOB* msg) {
  return *msg->version_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
SKF_ENVELOPEDKEYBLOB::HasBitSetters::ulsymmalgid(const SKF_ENVELOPEDKEYBLOB* msg) {
  return *msg->ulsymmalgid_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
SKF_ENVELOPEDKEYBLOB::HasBitSetters::ulbits(const SKF_ENVELOPEDKEYBLOB* msg) {
  return *msg->ulbits_;
}
const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB&
SKF_ENVELOPEDKEYBLOB::HasBitSetters::pubkey(const SKF_ENVELOPEDKEYBLOB* msg) {
  return *msg->pubkey_;
}
const ::com::westone::skf::SKF_ECCCIPHERBLOB&
SKF_ENVELOPEDKEYBLOB::HasBitSetters::ecccipherblob(const SKF_ENVELOPEDKEYBLOB* msg) {
  return *msg->ecccipherblob_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SKF_ENVELOPEDKEYBLOB::kVersionFieldNumber;
const int SKF_ENVELOPEDKEYBLOB::kUlSymmAlgIDFieldNumber;
const int SKF_ENVELOPEDKEYBLOB::kUlBitsFieldNumber;
const int SKF_ENVELOPEDKEYBLOB::kCbEncryptedPriKeyFieldNumber;
const int SKF_ENVELOPEDKEYBLOB::kPubKeyFieldNumber;
const int SKF_ENVELOPEDKEYBLOB::kECCCipherBlobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SKF_ENVELOPEDKEYBLOB::SKF_ENVELOPEDKEYBLOB()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.SKF_ENVELOPEDKEYBLOB)
}
SKF_ENVELOPEDKEYBLOB::SKF_ENVELOPEDKEYBLOB(const SKF_ENVELOPEDKEYBLOB& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cbencryptedprikey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cbencryptedprikey().size() > 0) {
    cbencryptedprikey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cbencryptedprikey_);
  }
  if (from.has_version()) {
    version_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.version_);
  } else {
    version_ = nullptr;
  }
  if (from.has_ulsymmalgid()) {
    ulsymmalgid_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulsymmalgid_);
  } else {
    ulsymmalgid_ = nullptr;
  }
  if (from.has_ulbits()) {
    ulbits_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulbits_);
  } else {
    ulbits_ = nullptr;
  }
  if (from.has_pubkey()) {
    pubkey_ = new ::com::westone::skf::SKF_ECCPUBLICKEYBLOB(*from.pubkey_);
  } else {
    pubkey_ = nullptr;
  }
  if (from.has_ecccipherblob()) {
    ecccipherblob_ = new ::com::westone::skf::SKF_ECCCIPHERBLOB(*from.ecccipherblob_);
  } else {
    ecccipherblob_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.SKF_ENVELOPEDKEYBLOB)
}

void SKF_ENVELOPEDKEYBLOB::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SKF_ENVELOPEDKEYBLOB_skf_2eproto.base);
  cbencryptedprikey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ecccipherblob_) -
      reinterpret_cast<char*>(&version_)) + sizeof(ecccipherblob_));
}

SKF_ENVELOPEDKEYBLOB::~SKF_ENVELOPEDKEYBLOB() {
  // @@protoc_insertion_point(destructor:com.westone.skf.SKF_ENVELOPEDKEYBLOB)
  SharedDtor();
}

void SKF_ENVELOPEDKEYBLOB::SharedDtor() {
  cbencryptedprikey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete version_;
  if (this != internal_default_instance()) delete ulsymmalgid_;
  if (this != internal_default_instance()) delete ulbits_;
  if (this != internal_default_instance()) delete pubkey_;
  if (this != internal_default_instance()) delete ecccipherblob_;
}

void SKF_ENVELOPEDKEYBLOB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SKF_ENVELOPEDKEYBLOB& SKF_ENVELOPEDKEYBLOB::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SKF_ENVELOPEDKEYBLOB_skf_2eproto.base);
  return *internal_default_instance();
}


void SKF_ENVELOPEDKEYBLOB::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.SKF_ENVELOPEDKEYBLOB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cbencryptedprikey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulsymmalgid_ != nullptr) {
    delete ulsymmalgid_;
  }
  ulsymmalgid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulbits_ != nullptr) {
    delete ulbits_;
  }
  ulbits_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pubkey_ != nullptr) {
    delete pubkey_;
  }
  pubkey_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ecccipherblob_ != nullptr) {
    delete ecccipherblob_;
  }
  ecccipherblob_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SKF_ENVELOPEDKEYBLOB::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SKF_ENVELOPEDKEYBLOB*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 Version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_version();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulSymmAlgID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulsymmalgid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulBits = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulbits();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes cbEncryptedPriKey = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_cbencryptedprikey();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB PubKey = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::_InternalParse;
        object = msg->mutable_pubkey();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_ECCCIPHERBLOB ECCCipherBlob = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ECCCIPHERBLOB::_InternalParse;
        object = msg->mutable_ecccipherblob();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SKF_ENVELOPEDKEYBLOB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.SKF_ENVELOPEDKEYBLOB)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 Version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulSymmAlgID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulsymmalgid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulBits = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulbits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes cbEncryptedPriKey = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cbencryptedprikey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB PubKey = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_ECCCIPHERBLOB ECCCipherBlob = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ecccipherblob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.SKF_ENVELOPEDKEYBLOB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.SKF_ENVELOPEDKEYBLOB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SKF_ENVELOPEDKEYBLOB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.SKF_ENVELOPEDKEYBLOB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 Version = 1;
  if (this->has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::version(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulSymmAlgID = 2;
  if (this->has_ulsymmalgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::ulsymmalgid(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulBits = 3;
  if (this->has_ulbits()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::ulbits(this), output);
  }

  // bytes cbEncryptedPriKey = 4;
  if (this->cbencryptedprikey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->cbencryptedprikey(), output);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB PubKey = 5;
  if (this->has_pubkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::pubkey(this), output);
  }

  // .com.westone.skf.SKF_ECCCIPHERBLOB ECCCipherBlob = 6;
  if (this->has_ecccipherblob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::ecccipherblob(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.SKF_ENVELOPEDKEYBLOB)
}

::google::protobuf::uint8* SKF_ENVELOPEDKEYBLOB::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.SKF_ENVELOPEDKEYBLOB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 Version = 1;
  if (this->has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::version(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulSymmAlgID = 2;
  if (this->has_ulsymmalgid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::ulsymmalgid(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulBits = 3;
  if (this->has_ulbits()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::ulbits(this), target);
  }

  // bytes cbEncryptedPriKey = 4;
  if (this->cbencryptedprikey().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->cbencryptedprikey(), target);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB PubKey = 5;
  if (this->has_pubkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::pubkey(this), target);
  }

  // .com.westone.skf.SKF_ECCCIPHERBLOB ECCCipherBlob = 6;
  if (this->has_ecccipherblob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::ecccipherblob(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.SKF_ENVELOPEDKEYBLOB)
  return target;
}

size_t SKF_ENVELOPEDKEYBLOB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.SKF_ENVELOPEDKEYBLOB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes cbEncryptedPriKey = 4;
  if (this->cbencryptedprikey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->cbencryptedprikey());
  }

  // .com.westone.skf.WST_PROTO_UINT32 Version = 1;
  if (this->has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *version_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulSymmAlgID = 2;
  if (this->has_ulsymmalgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulsymmalgid_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulBits = 3;
  if (this->has_ulbits()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulbits_);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB PubKey = 5;
  if (this->has_pubkey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pubkey_);
  }

  // .com.westone.skf.SKF_ECCCIPHERBLOB ECCCipherBlob = 6;
  if (this->has_ecccipherblob()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ecccipherblob_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SKF_ENVELOPEDKEYBLOB::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.SKF_ENVELOPEDKEYBLOB)
  GOOGLE_DCHECK_NE(&from, this);
  const SKF_ENVELOPEDKEYBLOB* source =
      ::google::protobuf::DynamicCastToGenerated<SKF_ENVELOPEDKEYBLOB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.SKF_ENVELOPEDKEYBLOB)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.SKF_ENVELOPEDKEYBLOB)
    MergeFrom(*source);
  }
}

void SKF_ENVELOPEDKEYBLOB::MergeFrom(const SKF_ENVELOPEDKEYBLOB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.SKF_ENVELOPEDKEYBLOB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cbencryptedprikey().size() > 0) {

    cbencryptedprikey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cbencryptedprikey_);
  }
  if (from.has_version()) {
    mutable_version()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.version());
  }
  if (from.has_ulsymmalgid()) {
    mutable_ulsymmalgid()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulsymmalgid());
  }
  if (from.has_ulbits()) {
    mutable_ulbits()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulbits());
  }
  if (from.has_pubkey()) {
    mutable_pubkey()->::com::westone::skf::SKF_ECCPUBLICKEYBLOB::MergeFrom(from.pubkey());
  }
  if (from.has_ecccipherblob()) {
    mutable_ecccipherblob()->::com::westone::skf::SKF_ECCCIPHERBLOB::MergeFrom(from.ecccipherblob());
  }
}

void SKF_ENVELOPEDKEYBLOB::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.SKF_ENVELOPEDKEYBLOB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SKF_ENVELOPEDKEYBLOB::CopyFrom(const SKF_ENVELOPEDKEYBLOB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.SKF_ENVELOPEDKEYBLOB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SKF_ENVELOPEDKEYBLOB::IsInitialized() const {
  return true;
}

void SKF_ENVELOPEDKEYBLOB::Swap(SKF_ENVELOPEDKEYBLOB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SKF_ENVELOPEDKEYBLOB::InternalSwap(SKF_ENVELOPEDKEYBLOB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cbencryptedprikey_.Swap(&other->cbencryptedprikey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
  swap(ulsymmalgid_, other->ulsymmalgid_);
  swap(ulbits_, other->ulbits_);
  swap(pubkey_, other->pubkey_);
  swap(ecccipherblob_, other->ecccipherblob_);
}

::google::protobuf::Metadata SKF_ENVELOPEDKEYBLOB::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SKF_FILEATTRIBUTES::InitAsDefaultInstance() {
  ::com::westone::skf::_SKF_FILEATTRIBUTES_default_instance_._instance.get_mutable()->filesize_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_SKF_FILEATTRIBUTES_default_instance_._instance.get_mutable()->readrights_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_SKF_FILEATTRIBUTES_default_instance_._instance.get_mutable()->writerights_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class SKF_FILEATTRIBUTES::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& filesize(const SKF_FILEATTRIBUTES* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& readrights(const SKF_FILEATTRIBUTES* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& writerights(const SKF_FILEATTRIBUTES* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
SKF_FILEATTRIBUTES::HasBitSetters::filesize(const SKF_FILEATTRIBUTES* msg) {
  return *msg->filesize_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
SKF_FILEATTRIBUTES::HasBitSetters::readrights(const SKF_FILEATTRIBUTES* msg) {
  return *msg->readrights_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
SKF_FILEATTRIBUTES::HasBitSetters::writerights(const SKF_FILEATTRIBUTES* msg) {
  return *msg->writerights_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SKF_FILEATTRIBUTES::kFileNameFieldNumber;
const int SKF_FILEATTRIBUTES::kFileSizeFieldNumber;
const int SKF_FILEATTRIBUTES::kReadRightsFieldNumber;
const int SKF_FILEATTRIBUTES::kWriteRightsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SKF_FILEATTRIBUTES::SKF_FILEATTRIBUTES()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.SKF_FILEATTRIBUTES)
}
SKF_FILEATTRIBUTES::SKF_FILEATTRIBUTES(const SKF_FILEATTRIBUTES& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.has_filesize()) {
    filesize_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.filesize_);
  } else {
    filesize_ = nullptr;
  }
  if (from.has_readrights()) {
    readrights_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.readrights_);
  } else {
    readrights_ = nullptr;
  }
  if (from.has_writerights()) {
    writerights_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.writerights_);
  } else {
    writerights_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.SKF_FILEATTRIBUTES)
}

void SKF_FILEATTRIBUTES::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SKF_FILEATTRIBUTES_skf_2eproto.base);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&filesize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&writerights_) -
      reinterpret_cast<char*>(&filesize_)) + sizeof(writerights_));
}

SKF_FILEATTRIBUTES::~SKF_FILEATTRIBUTES() {
  // @@protoc_insertion_point(destructor:com.westone.skf.SKF_FILEATTRIBUTES)
  SharedDtor();
}

void SKF_FILEATTRIBUTES::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete filesize_;
  if (this != internal_default_instance()) delete readrights_;
  if (this != internal_default_instance()) delete writerights_;
}

void SKF_FILEATTRIBUTES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SKF_FILEATTRIBUTES& SKF_FILEATTRIBUTES::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SKF_FILEATTRIBUTES_skf_2eproto.base);
  return *internal_default_instance();
}


void SKF_FILEATTRIBUTES::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.SKF_FILEATTRIBUTES)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && filesize_ != nullptr) {
    delete filesize_;
  }
  filesize_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && readrights_ != nullptr) {
    delete readrights_;
  }
  readrights_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && writerights_ != nullptr) {
    delete writerights_;
  }
  writerights_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SKF_FILEATTRIBUTES::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SKF_FILEATTRIBUTES*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes FileName = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_filename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 FileSize = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_filesize();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ReadRights = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_readrights();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 WriteRights = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_writerights();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SKF_FILEATTRIBUTES::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.SKF_FILEATTRIBUTES)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes FileName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_filename()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 FileSize = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_filesize()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ReadRights = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_readrights()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 WriteRights = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_writerights()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.SKF_FILEATTRIBUTES)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.SKF_FILEATTRIBUTES)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SKF_FILEATTRIBUTES::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.SKF_FILEATTRIBUTES)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes FileName = 1;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->filename(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 FileSize = 2;
  if (this->has_filesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::filesize(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ReadRights = 3;
  if (this->has_readrights()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::readrights(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 WriteRights = 4;
  if (this->has_writerights()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::writerights(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.SKF_FILEATTRIBUTES)
}

::google::protobuf::uint8* SKF_FILEATTRIBUTES::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.SKF_FILEATTRIBUTES)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes FileName = 1;
  if (this->filename().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->filename(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 FileSize = 2;
  if (this->has_filesize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::filesize(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ReadRights = 3;
  if (this->has_readrights()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::readrights(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 WriteRights = 4;
  if (this->has_writerights()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::writerights(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.SKF_FILEATTRIBUTES)
  return target;
}

size_t SKF_FILEATTRIBUTES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.SKF_FILEATTRIBUTES)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes FileName = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->filename());
  }

  // .com.westone.skf.WST_PROTO_UINT32 FileSize = 2;
  if (this->has_filesize()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *filesize_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ReadRights = 3;
  if (this->has_readrights()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *readrights_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 WriteRights = 4;
  if (this->has_writerights()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *writerights_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SKF_FILEATTRIBUTES::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.SKF_FILEATTRIBUTES)
  GOOGLE_DCHECK_NE(&from, this);
  const SKF_FILEATTRIBUTES* source =
      ::google::protobuf::DynamicCastToGenerated<SKF_FILEATTRIBUTES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.SKF_FILEATTRIBUTES)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.SKF_FILEATTRIBUTES)
    MergeFrom(*source);
  }
}

void SKF_FILEATTRIBUTES::MergeFrom(const SKF_FILEATTRIBUTES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.SKF_FILEATTRIBUTES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.has_filesize()) {
    mutable_filesize()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.filesize());
  }
  if (from.has_readrights()) {
    mutable_readrights()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.readrights());
  }
  if (from.has_writerights()) {
    mutable_writerights()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.writerights());
  }
}

void SKF_FILEATTRIBUTES::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.SKF_FILEATTRIBUTES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SKF_FILEATTRIBUTES::CopyFrom(const SKF_FILEATTRIBUTES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.SKF_FILEATTRIBUTES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SKF_FILEATTRIBUTES::IsInitialized() const {
  return true;
}

void SKF_FILEATTRIBUTES::Swap(SKF_FILEATTRIBUTES* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SKF_FILEATTRIBUTES::InternalSwap(SKF_FILEATTRIBUTES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(filesize_, other->filesize_);
  swap(readrights_, other->readrights_);
  swap(writerights_, other->writerights_);
}

::google::protobuf::Metadata SKF_FILEATTRIBUTES::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_WaitForDevEvent::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_WaitForDevEvent_default_instance_._instance.get_mutable()->puldevnamelen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_WaitForDevEvent_default_instance_._instance.get_mutable()->pulevent_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_WaitForDevEvent::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& puldevnamelen(const Req_SKF_WaitForDevEvent* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& pulevent(const Req_SKF_WaitForDevEvent* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_WaitForDevEvent::HasBitSetters::puldevnamelen(const Req_SKF_WaitForDevEvent* msg) {
  return *msg->puldevnamelen_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_WaitForDevEvent::HasBitSetters::pulevent(const Req_SKF_WaitForDevEvent* msg) {
  return *msg->pulevent_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_WaitForDevEvent::kSzDevNameFieldNumber;
const int Req_SKF_WaitForDevEvent::kPulDevNameLenFieldNumber;
const int Req_SKF_WaitForDevEvent::kPulEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_WaitForDevEvent::Req_SKF_WaitForDevEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_WaitForDevEvent)
}
Req_SKF_WaitForDevEvent::Req_SKF_WaitForDevEvent(const Req_SKF_WaitForDevEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szdevname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szdevname().size() > 0) {
    szdevname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szdevname_);
  }
  if (from.has_puldevnamelen()) {
    puldevnamelen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.puldevnamelen_);
  } else {
    puldevnamelen_ = nullptr;
  }
  if (from.has_pulevent()) {
    pulevent_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulevent_);
  } else {
    pulevent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_WaitForDevEvent)
}

void Req_SKF_WaitForDevEvent::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_WaitForDevEvent_skf_2eproto.base);
  szdevname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&puldevnamelen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pulevent_) -
      reinterpret_cast<char*>(&puldevnamelen_)) + sizeof(pulevent_));
}

Req_SKF_WaitForDevEvent::~Req_SKF_WaitForDevEvent() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_WaitForDevEvent)
  SharedDtor();
}

void Req_SKF_WaitForDevEvent::SharedDtor() {
  szdevname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete puldevnamelen_;
  if (this != internal_default_instance()) delete pulevent_;
}

void Req_SKF_WaitForDevEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_WaitForDevEvent& Req_SKF_WaitForDevEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_WaitForDevEvent_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_WaitForDevEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_WaitForDevEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szdevname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && puldevnamelen_ != nullptr) {
    delete puldevnamelen_;
  }
  puldevnamelen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pulevent_ != nullptr) {
    delete pulevent_;
  }
  pulevent_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_WaitForDevEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_WaitForDevEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes szDevName = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_szdevname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulDevNameLen = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_puldevnamelen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulEvent = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulevent();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_WaitForDevEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_WaitForDevEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes szDevName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_szdevname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulDevNameLen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_puldevnamelen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulEvent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulevent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_WaitForDevEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_WaitForDevEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_WaitForDevEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_WaitForDevEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes szDevName = 1;
  if (this->szdevname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->szdevname(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulDevNameLen = 2;
  if (this->has_puldevnamelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::puldevnamelen(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulEvent = 3;
  if (this->has_pulevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::pulevent(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_WaitForDevEvent)
}

::google::protobuf::uint8* Req_SKF_WaitForDevEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_WaitForDevEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes szDevName = 1;
  if (this->szdevname().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->szdevname(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulDevNameLen = 2;
  if (this->has_puldevnamelen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::puldevnamelen(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulEvent = 3;
  if (this->has_pulevent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::pulevent(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_WaitForDevEvent)
  return target;
}

size_t Req_SKF_WaitForDevEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_WaitForDevEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes szDevName = 1;
  if (this->szdevname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->szdevname());
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulDevNameLen = 2;
  if (this->has_puldevnamelen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *puldevnamelen_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulEvent = 3;
  if (this->has_pulevent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulevent_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_WaitForDevEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_WaitForDevEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_WaitForDevEvent* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_WaitForDevEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_WaitForDevEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_WaitForDevEvent)
    MergeFrom(*source);
  }
}

void Req_SKF_WaitForDevEvent::MergeFrom(const Req_SKF_WaitForDevEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_WaitForDevEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.szdevname().size() > 0) {

    szdevname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szdevname_);
  }
  if (from.has_puldevnamelen()) {
    mutable_puldevnamelen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.puldevnamelen());
  }
  if (from.has_pulevent()) {
    mutable_pulevent()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulevent());
  }
}

void Req_SKF_WaitForDevEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_WaitForDevEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_WaitForDevEvent::CopyFrom(const Req_SKF_WaitForDevEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_WaitForDevEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_WaitForDevEvent::IsInitialized() const {
  return true;
}

void Req_SKF_WaitForDevEvent::Swap(Req_SKF_WaitForDevEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_WaitForDevEvent::InternalSwap(Req_SKF_WaitForDevEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  szdevname_.Swap(&other->szdevname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(puldevnamelen_, other->puldevnamelen_);
  swap(pulevent_, other->pulevent_);
}

::google::protobuf::Metadata Req_SKF_WaitForDevEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_WaitForDevEvent::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_WaitForDevEvent_default_instance_._instance.get_mutable()->puldevnamelen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Rsp_SKF_WaitForDevEvent_default_instance_._instance.get_mutable()->pulevent_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_WaitForDevEvent::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& puldevnamelen(const Rsp_SKF_WaitForDevEvent* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& pulevent(const Rsp_SKF_WaitForDevEvent* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_WaitForDevEvent::HasBitSetters::puldevnamelen(const Rsp_SKF_WaitForDevEvent* msg) {
  return *msg->puldevnamelen_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_WaitForDevEvent::HasBitSetters::pulevent(const Rsp_SKF_WaitForDevEvent* msg) {
  return *msg->pulevent_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_WaitForDevEvent::kSzDevNameFieldNumber;
const int Rsp_SKF_WaitForDevEvent::kPulDevNameLenFieldNumber;
const int Rsp_SKF_WaitForDevEvent::kPulEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_WaitForDevEvent::Rsp_SKF_WaitForDevEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_WaitForDevEvent)
}
Rsp_SKF_WaitForDevEvent::Rsp_SKF_WaitForDevEvent(const Rsp_SKF_WaitForDevEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szdevname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szdevname().size() > 0) {
    szdevname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szdevname_);
  }
  if (from.has_puldevnamelen()) {
    puldevnamelen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.puldevnamelen_);
  } else {
    puldevnamelen_ = nullptr;
  }
  if (from.has_pulevent()) {
    pulevent_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulevent_);
  } else {
    pulevent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_WaitForDevEvent)
}

void Rsp_SKF_WaitForDevEvent::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_WaitForDevEvent_skf_2eproto.base);
  szdevname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&puldevnamelen_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pulevent_) -
      reinterpret_cast<char*>(&puldevnamelen_)) + sizeof(pulevent_));
}

Rsp_SKF_WaitForDevEvent::~Rsp_SKF_WaitForDevEvent() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_WaitForDevEvent)
  SharedDtor();
}

void Rsp_SKF_WaitForDevEvent::SharedDtor() {
  szdevname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete puldevnamelen_;
  if (this != internal_default_instance()) delete pulevent_;
}

void Rsp_SKF_WaitForDevEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_WaitForDevEvent& Rsp_SKF_WaitForDevEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_WaitForDevEvent_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_WaitForDevEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_WaitForDevEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szdevname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && puldevnamelen_ != nullptr) {
    delete puldevnamelen_;
  }
  puldevnamelen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pulevent_ != nullptr) {
    delete pulevent_;
  }
  pulevent_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_WaitForDevEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_WaitForDevEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes szDevName = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_szdevname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulDevNameLen = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_puldevnamelen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulEvent = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulevent();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_WaitForDevEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_WaitForDevEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes szDevName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_szdevname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulDevNameLen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_puldevnamelen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulEvent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulevent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_WaitForDevEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_WaitForDevEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_WaitForDevEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_WaitForDevEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes szDevName = 1;
  if (this->szdevname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->szdevname(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulDevNameLen = 2;
  if (this->has_puldevnamelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::puldevnamelen(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulEvent = 3;
  if (this->has_pulevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::pulevent(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_WaitForDevEvent)
}

::google::protobuf::uint8* Rsp_SKF_WaitForDevEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_WaitForDevEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes szDevName = 1;
  if (this->szdevname().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->szdevname(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulDevNameLen = 2;
  if (this->has_puldevnamelen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::puldevnamelen(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulEvent = 3;
  if (this->has_pulevent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::pulevent(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_WaitForDevEvent)
  return target;
}

size_t Rsp_SKF_WaitForDevEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_WaitForDevEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes szDevName = 1;
  if (this->szdevname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->szdevname());
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulDevNameLen = 2;
  if (this->has_puldevnamelen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *puldevnamelen_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulEvent = 3;
  if (this->has_pulevent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulevent_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_WaitForDevEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_WaitForDevEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_WaitForDevEvent* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_WaitForDevEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_WaitForDevEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_WaitForDevEvent)
    MergeFrom(*source);
  }
}

void Rsp_SKF_WaitForDevEvent::MergeFrom(const Rsp_SKF_WaitForDevEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_WaitForDevEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.szdevname().size() > 0) {

    szdevname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szdevname_);
  }
  if (from.has_puldevnamelen()) {
    mutable_puldevnamelen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.puldevnamelen());
  }
  if (from.has_pulevent()) {
    mutable_pulevent()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulevent());
  }
}

void Rsp_SKF_WaitForDevEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_WaitForDevEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_WaitForDevEvent::CopyFrom(const Rsp_SKF_WaitForDevEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_WaitForDevEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_WaitForDevEvent::IsInitialized() const {
  return true;
}

void Rsp_SKF_WaitForDevEvent::Swap(Rsp_SKF_WaitForDevEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_WaitForDevEvent::InternalSwap(Rsp_SKF_WaitForDevEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  szdevname_.Swap(&other->szdevname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(puldevnamelen_, other->puldevnamelen_);
  swap(pulevent_, other->pulevent_);
}

::google::protobuf::Metadata Rsp_SKF_WaitForDevEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_CancelWaitForDevEvent::InitAsDefaultInstance() {
}
class Req_SKF_CancelWaitForDevEvent::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_CancelWaitForDevEvent::Req_SKF_CancelWaitForDevEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_CancelWaitForDevEvent)
}
Req_SKF_CancelWaitForDevEvent::Req_SKF_CancelWaitForDevEvent(const Req_SKF_CancelWaitForDevEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_CancelWaitForDevEvent)
}

void Req_SKF_CancelWaitForDevEvent::SharedCtor() {
}

Req_SKF_CancelWaitForDevEvent::~Req_SKF_CancelWaitForDevEvent() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_CancelWaitForDevEvent)
  SharedDtor();
}

void Req_SKF_CancelWaitForDevEvent::SharedDtor() {
}

void Req_SKF_CancelWaitForDevEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_CancelWaitForDevEvent& Req_SKF_CancelWaitForDevEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_CancelWaitForDevEvent_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_CancelWaitForDevEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_CancelWaitForDevEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_CancelWaitForDevEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_CancelWaitForDevEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_CancelWaitForDevEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_CancelWaitForDevEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_CancelWaitForDevEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_CancelWaitForDevEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_CancelWaitForDevEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_CancelWaitForDevEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_CancelWaitForDevEvent)
}

::google::protobuf::uint8* Req_SKF_CancelWaitForDevEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_CancelWaitForDevEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_CancelWaitForDevEvent)
  return target;
}

size_t Req_SKF_CancelWaitForDevEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_CancelWaitForDevEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_CancelWaitForDevEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_CancelWaitForDevEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_CancelWaitForDevEvent* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_CancelWaitForDevEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_CancelWaitForDevEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_CancelWaitForDevEvent)
    MergeFrom(*source);
  }
}

void Req_SKF_CancelWaitForDevEvent::MergeFrom(const Req_SKF_CancelWaitForDevEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_CancelWaitForDevEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Req_SKF_CancelWaitForDevEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_CancelWaitForDevEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_CancelWaitForDevEvent::CopyFrom(const Req_SKF_CancelWaitForDevEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_CancelWaitForDevEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_CancelWaitForDevEvent::IsInitialized() const {
  return true;
}

void Req_SKF_CancelWaitForDevEvent::Swap(Req_SKF_CancelWaitForDevEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_CancelWaitForDevEvent::InternalSwap(Req_SKF_CancelWaitForDevEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Req_SKF_CancelWaitForDevEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_CancelWaitForDevEvent::InitAsDefaultInstance() {
}
class Rsp_SKF_CancelWaitForDevEvent::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_CancelWaitForDevEvent::Rsp_SKF_CancelWaitForDevEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_CancelWaitForDevEvent)
}
Rsp_SKF_CancelWaitForDevEvent::Rsp_SKF_CancelWaitForDevEvent(const Rsp_SKF_CancelWaitForDevEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_CancelWaitForDevEvent)
}

void Rsp_SKF_CancelWaitForDevEvent::SharedCtor() {
}

Rsp_SKF_CancelWaitForDevEvent::~Rsp_SKF_CancelWaitForDevEvent() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_CancelWaitForDevEvent)
  SharedDtor();
}

void Rsp_SKF_CancelWaitForDevEvent::SharedDtor() {
}

void Rsp_SKF_CancelWaitForDevEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_CancelWaitForDevEvent& Rsp_SKF_CancelWaitForDevEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_CancelWaitForDevEvent_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_CancelWaitForDevEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_CancelWaitForDevEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_CancelWaitForDevEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_CancelWaitForDevEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_CancelWaitForDevEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_CancelWaitForDevEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_CancelWaitForDevEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_CancelWaitForDevEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_CancelWaitForDevEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_CancelWaitForDevEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_CancelWaitForDevEvent)
}

::google::protobuf::uint8* Rsp_SKF_CancelWaitForDevEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_CancelWaitForDevEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_CancelWaitForDevEvent)
  return target;
}

size_t Rsp_SKF_CancelWaitForDevEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_CancelWaitForDevEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_CancelWaitForDevEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_CancelWaitForDevEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_CancelWaitForDevEvent* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_CancelWaitForDevEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_CancelWaitForDevEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_CancelWaitForDevEvent)
    MergeFrom(*source);
  }
}

void Rsp_SKF_CancelWaitForDevEvent::MergeFrom(const Rsp_SKF_CancelWaitForDevEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_CancelWaitForDevEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rsp_SKF_CancelWaitForDevEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_CancelWaitForDevEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_CancelWaitForDevEvent::CopyFrom(const Rsp_SKF_CancelWaitForDevEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_CancelWaitForDevEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_CancelWaitForDevEvent::IsInitialized() const {
  return true;
}

void Rsp_SKF_CancelWaitForDevEvent::Swap(Rsp_SKF_CancelWaitForDevEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_CancelWaitForDevEvent::InternalSwap(Rsp_SKF_CancelWaitForDevEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rsp_SKF_CancelWaitForDevEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_EnumDev::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_EnumDev_default_instance_._instance.get_mutable()->bpresent_ = const_cast< ::com::westone::skf::WST_PROTO_BOOL*>(
      ::com::westone::skf::WST_PROTO_BOOL::internal_default_instance());
  ::com::westone::skf::_Req_SKF_EnumDev_default_instance_._instance.get_mutable()->pulsize_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_EnumDev::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_BOOL& bpresent(const Req_SKF_EnumDev* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& pulsize(const Req_SKF_EnumDev* msg);
};

const ::com::westone::skf::WST_PROTO_BOOL&
Req_SKF_EnumDev::HasBitSetters::bpresent(const Req_SKF_EnumDev* msg) {
  return *msg->bpresent_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_EnumDev::HasBitSetters::pulsize(const Req_SKF_EnumDev* msg) {
  return *msg->pulsize_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_EnumDev::kBPresentFieldNumber;
const int Req_SKF_EnumDev::kSzNameListFieldNumber;
const int Req_SKF_EnumDev::kPulSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_EnumDev::Req_SKF_EnumDev()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_EnumDev)
}
Req_SKF_EnumDev::Req_SKF_EnumDev(const Req_SKF_EnumDev& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sznamelist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sznamelist().size() > 0) {
    sznamelist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sznamelist_);
  }
  if (from.has_bpresent()) {
    bpresent_ = new ::com::westone::skf::WST_PROTO_BOOL(*from.bpresent_);
  } else {
    bpresent_ = nullptr;
  }
  if (from.has_pulsize()) {
    pulsize_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulsize_);
  } else {
    pulsize_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_EnumDev)
}

void Req_SKF_EnumDev::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_EnumDev_skf_2eproto.base);
  sznamelist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bpresent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pulsize_) -
      reinterpret_cast<char*>(&bpresent_)) + sizeof(pulsize_));
}

Req_SKF_EnumDev::~Req_SKF_EnumDev() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_EnumDev)
  SharedDtor();
}

void Req_SKF_EnumDev::SharedDtor() {
  sznamelist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bpresent_;
  if (this != internal_default_instance()) delete pulsize_;
}

void Req_SKF_EnumDev::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_EnumDev& Req_SKF_EnumDev::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_EnumDev_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_EnumDev::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_EnumDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sznamelist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && bpresent_ != nullptr) {
    delete bpresent_;
  }
  bpresent_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pulsize_ != nullptr) {
    delete pulsize_;
  }
  pulsize_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_EnumDev::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_EnumDev*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_BOOL bPresent = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_BOOL::_InternalParse;
        object = msg->mutable_bpresent();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes szNameList = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_sznamelist();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulSize = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulsize();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_EnumDev::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_EnumDev)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_BOOL bPresent = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bpresent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes szNameList = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sznamelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulSize = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulsize()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_EnumDev)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_EnumDev)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_EnumDev::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_EnumDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_BOOL bPresent = 1;
  if (this->has_bpresent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::bpresent(this), output);
  }

  // bytes szNameList = 2;
  if (this->sznamelist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sznamelist(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 3;
  if (this->has_pulsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::pulsize(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_EnumDev)
}

::google::protobuf::uint8* Req_SKF_EnumDev::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_EnumDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_BOOL bPresent = 1;
  if (this->has_bpresent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::bpresent(this), target);
  }

  // bytes szNameList = 2;
  if (this->sznamelist().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sznamelist(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 3;
  if (this->has_pulsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::pulsize(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_EnumDev)
  return target;
}

size_t Req_SKF_EnumDev::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_EnumDev)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes szNameList = 2;
  if (this->sznamelist().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sznamelist());
  }

  // .com.westone.skf.WST_PROTO_BOOL bPresent = 1;
  if (this->has_bpresent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bpresent_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 3;
  if (this->has_pulsize()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulsize_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_EnumDev::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_EnumDev)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_EnumDev* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_EnumDev>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_EnumDev)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_EnumDev)
    MergeFrom(*source);
  }
}

void Req_SKF_EnumDev::MergeFrom(const Req_SKF_EnumDev& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_EnumDev)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sznamelist().size() > 0) {

    sznamelist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sznamelist_);
  }
  if (from.has_bpresent()) {
    mutable_bpresent()->::com::westone::skf::WST_PROTO_BOOL::MergeFrom(from.bpresent());
  }
  if (from.has_pulsize()) {
    mutable_pulsize()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulsize());
  }
}

void Req_SKF_EnumDev::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_EnumDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_EnumDev::CopyFrom(const Req_SKF_EnumDev& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_EnumDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_EnumDev::IsInitialized() const {
  return true;
}

void Req_SKF_EnumDev::Swap(Req_SKF_EnumDev* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_EnumDev::InternalSwap(Req_SKF_EnumDev* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sznamelist_.Swap(&other->sznamelist_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bpresent_, other->bpresent_);
  swap(pulsize_, other->pulsize_);
}

::google::protobuf::Metadata Req_SKF_EnumDev::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_EnumDev::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_EnumDev_default_instance_._instance.get_mutable()->pulsize_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_EnumDev::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& pulsize(const Rsp_SKF_EnumDev* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_EnumDev::HasBitSetters::pulsize(const Rsp_SKF_EnumDev* msg) {
  return *msg->pulsize_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_EnumDev::kSzNameListFieldNumber;
const int Rsp_SKF_EnumDev::kPulSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_EnumDev::Rsp_SKF_EnumDev()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_EnumDev)
}
Rsp_SKF_EnumDev::Rsp_SKF_EnumDev(const Rsp_SKF_EnumDev& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sznamelist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sznamelist().size() > 0) {
    sznamelist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sznamelist_);
  }
  if (from.has_pulsize()) {
    pulsize_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulsize_);
  } else {
    pulsize_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_EnumDev)
}

void Rsp_SKF_EnumDev::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_EnumDev_skf_2eproto.base);
  sznamelist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pulsize_ = nullptr;
}

Rsp_SKF_EnumDev::~Rsp_SKF_EnumDev() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_EnumDev)
  SharedDtor();
}

void Rsp_SKF_EnumDev::SharedDtor() {
  sznamelist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pulsize_;
}

void Rsp_SKF_EnumDev::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_EnumDev& Rsp_SKF_EnumDev::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_EnumDev_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_EnumDev::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_EnumDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sznamelist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && pulsize_ != nullptr) {
    delete pulsize_;
  }
  pulsize_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_EnumDev::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_EnumDev*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes szNameList = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_sznamelist();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulSize = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulsize();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_EnumDev::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_EnumDev)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes szNameList = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sznamelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulSize = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulsize()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_EnumDev)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_EnumDev)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_EnumDev::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_EnumDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes szNameList = 1;
  if (this->sznamelist().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->sznamelist(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 2;
  if (this->has_pulsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pulsize(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_EnumDev)
}

::google::protobuf::uint8* Rsp_SKF_EnumDev::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_EnumDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes szNameList = 1;
  if (this->sznamelist().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->sznamelist(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 2;
  if (this->has_pulsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pulsize(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_EnumDev)
  return target;
}

size_t Rsp_SKF_EnumDev::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_EnumDev)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes szNameList = 1;
  if (this->sznamelist().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sznamelist());
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 2;
  if (this->has_pulsize()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulsize_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_EnumDev::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_EnumDev)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_EnumDev* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_EnumDev>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_EnumDev)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_EnumDev)
    MergeFrom(*source);
  }
}

void Rsp_SKF_EnumDev::MergeFrom(const Rsp_SKF_EnumDev& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_EnumDev)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sznamelist().size() > 0) {

    sznamelist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sznamelist_);
  }
  if (from.has_pulsize()) {
    mutable_pulsize()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulsize());
  }
}

void Rsp_SKF_EnumDev::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_EnumDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_EnumDev::CopyFrom(const Rsp_SKF_EnumDev& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_EnumDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_EnumDev::IsInitialized() const {
  return true;
}

void Rsp_SKF_EnumDev::Swap(Rsp_SKF_EnumDev* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_EnumDev::InternalSwap(Rsp_SKF_EnumDev* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sznamelist_.Swap(&other->sznamelist_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pulsize_, other->pulsize_);
}

::google::protobuf::Metadata Rsp_SKF_EnumDev::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_ConnectDev::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_ConnectDev_default_instance_._instance.get_mutable()->phdev_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_ConnectDev::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& phdev(const Req_SKF_ConnectDev* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ConnectDev::HasBitSetters::phdev(const Req_SKF_ConnectDev* msg) {
  return *msg->phdev_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_ConnectDev::kSzNameFieldNumber;
const int Req_SKF_ConnectDev::kPhDevFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_ConnectDev::Req_SKF_ConnectDev()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_ConnectDev)
}
Req_SKF_ConnectDev::Req_SKF_ConnectDev(const Req_SKF_ConnectDev& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szname().size() > 0) {
    szname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szname_);
  }
  if (from.has_phdev()) {
    phdev_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.phdev_);
  } else {
    phdev_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_ConnectDev)
}

void Req_SKF_ConnectDev::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_ConnectDev_skf_2eproto.base);
  szname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phdev_ = nullptr;
}

Req_SKF_ConnectDev::~Req_SKF_ConnectDev() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_ConnectDev)
  SharedDtor();
}

void Req_SKF_ConnectDev::SharedDtor() {
  szname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete phdev_;
}

void Req_SKF_ConnectDev::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_ConnectDev& Req_SKF_ConnectDev::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_ConnectDev_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_ConnectDev::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_ConnectDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && phdev_ != nullptr) {
    delete phdev_;
  }
  phdev_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_ConnectDev::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_ConnectDev*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string szName = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.westone.skf.Req_SKF_ConnectDev.szName");
        object = msg->mutable_szname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 phDev = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_phdev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_ConnectDev::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_ConnectDev)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string szName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szname().data(), static_cast<int>(this->szname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.westone.skf.Req_SKF_ConnectDev.szName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 phDev = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phdev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_ConnectDev)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_ConnectDev)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_ConnectDev::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_ConnectDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string szName = 1;
  if (this->szname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szname().data(), static_cast<int>(this->szname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_ConnectDev.szName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->szname(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phDev = 2;
  if (this->has_phdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::phdev(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_ConnectDev)
}

::google::protobuf::uint8* Req_SKF_ConnectDev::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_ConnectDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string szName = 1;
  if (this->szname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szname().data(), static_cast<int>(this->szname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_ConnectDev.szName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->szname(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phDev = 2;
  if (this->has_phdev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::phdev(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_ConnectDev)
  return target;
}

size_t Req_SKF_ConnectDev::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_ConnectDev)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string szName = 1;
  if (this->szname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szname());
  }

  // .com.westone.skf.WST_PROTO_UINT32 phDev = 2;
  if (this->has_phdev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *phdev_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_ConnectDev::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_ConnectDev)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_ConnectDev* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_ConnectDev>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_ConnectDev)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_ConnectDev)
    MergeFrom(*source);
  }
}

void Req_SKF_ConnectDev::MergeFrom(const Req_SKF_ConnectDev& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_ConnectDev)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.szname().size() > 0) {

    szname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szname_);
  }
  if (from.has_phdev()) {
    mutable_phdev()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.phdev());
  }
}

void Req_SKF_ConnectDev::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_ConnectDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_ConnectDev::CopyFrom(const Req_SKF_ConnectDev& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_ConnectDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_ConnectDev::IsInitialized() const {
  return true;
}

void Req_SKF_ConnectDev::Swap(Req_SKF_ConnectDev* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_ConnectDev::InternalSwap(Req_SKF_ConnectDev* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  szname_.Swap(&other->szname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(phdev_, other->phdev_);
}

::google::protobuf::Metadata Req_SKF_ConnectDev::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_ConnectDev::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_ConnectDev_default_instance_._instance.get_mutable()->phdev_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_ConnectDev::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& phdev(const Rsp_SKF_ConnectDev* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_ConnectDev::HasBitSetters::phdev(const Rsp_SKF_ConnectDev* msg) {
  return *msg->phdev_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_ConnectDev::kPhDevFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_ConnectDev::Rsp_SKF_ConnectDev()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_ConnectDev)
}
Rsp_SKF_ConnectDev::Rsp_SKF_ConnectDev(const Rsp_SKF_ConnectDev& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_phdev()) {
    phdev_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.phdev_);
  } else {
    phdev_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_ConnectDev)
}

void Rsp_SKF_ConnectDev::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_ConnectDev_skf_2eproto.base);
  phdev_ = nullptr;
}

Rsp_SKF_ConnectDev::~Rsp_SKF_ConnectDev() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_ConnectDev)
  SharedDtor();
}

void Rsp_SKF_ConnectDev::SharedDtor() {
  if (this != internal_default_instance()) delete phdev_;
}

void Rsp_SKF_ConnectDev::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_ConnectDev& Rsp_SKF_ConnectDev::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_ConnectDev_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_ConnectDev::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_ConnectDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && phdev_ != nullptr) {
    delete phdev_;
  }
  phdev_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_ConnectDev::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_ConnectDev*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 phDev = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_phdev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_ConnectDev::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_ConnectDev)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 phDev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phdev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_ConnectDev)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_ConnectDev)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_ConnectDev::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_ConnectDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 phDev = 1;
  if (this->has_phdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::phdev(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_ConnectDev)
}

::google::protobuf::uint8* Rsp_SKF_ConnectDev::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_ConnectDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 phDev = 1;
  if (this->has_phdev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::phdev(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_ConnectDev)
  return target;
}

size_t Rsp_SKF_ConnectDev::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_ConnectDev)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 phDev = 1;
  if (this->has_phdev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *phdev_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_ConnectDev::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_ConnectDev)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_ConnectDev* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_ConnectDev>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_ConnectDev)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_ConnectDev)
    MergeFrom(*source);
  }
}

void Rsp_SKF_ConnectDev::MergeFrom(const Rsp_SKF_ConnectDev& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_ConnectDev)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_phdev()) {
    mutable_phdev()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.phdev());
  }
}

void Rsp_SKF_ConnectDev::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_ConnectDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_ConnectDev::CopyFrom(const Rsp_SKF_ConnectDev& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_ConnectDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_ConnectDev::IsInitialized() const {
  return true;
}

void Rsp_SKF_ConnectDev::Swap(Rsp_SKF_ConnectDev* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_ConnectDev::InternalSwap(Rsp_SKF_ConnectDev* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(phdev_, other->phdev_);
}

::google::protobuf::Metadata Rsp_SKF_ConnectDev::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_DisConnectDev::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_DisConnectDev_default_instance_._instance.get_mutable()->hdev_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_DisConnectDev::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hdev(const Req_SKF_DisConnectDev* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_DisConnectDev::HasBitSetters::hdev(const Req_SKF_DisConnectDev* msg) {
  return *msg->hdev_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_DisConnectDev::kHDevFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_DisConnectDev::Req_SKF_DisConnectDev()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_DisConnectDev)
}
Req_SKF_DisConnectDev::Req_SKF_DisConnectDev(const Req_SKF_DisConnectDev& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hdev()) {
    hdev_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hdev_);
  } else {
    hdev_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_DisConnectDev)
}

void Req_SKF_DisConnectDev::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_DisConnectDev_skf_2eproto.base);
  hdev_ = nullptr;
}

Req_SKF_DisConnectDev::~Req_SKF_DisConnectDev() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_DisConnectDev)
  SharedDtor();
}

void Req_SKF_DisConnectDev::SharedDtor() {
  if (this != internal_default_instance()) delete hdev_;
}

void Req_SKF_DisConnectDev::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_DisConnectDev& Req_SKF_DisConnectDev::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_DisConnectDev_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_DisConnectDev::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_DisConnectDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_DisConnectDev::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_DisConnectDev*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hdev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_DisConnectDev::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_DisConnectDev)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hdev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_DisConnectDev)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_DisConnectDev)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_DisConnectDev::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_DisConnectDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hdev(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_DisConnectDev)
}

::google::protobuf::uint8* Req_SKF_DisConnectDev::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_DisConnectDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hdev(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_DisConnectDev)
  return target;
}

size_t Req_SKF_DisConnectDev::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_DisConnectDev)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hdev_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_DisConnectDev::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_DisConnectDev)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_DisConnectDev* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_DisConnectDev>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_DisConnectDev)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_DisConnectDev)
    MergeFrom(*source);
  }
}

void Req_SKF_DisConnectDev::MergeFrom(const Req_SKF_DisConnectDev& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_DisConnectDev)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdev()) {
    mutable_hdev()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hdev());
  }
}

void Req_SKF_DisConnectDev::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_DisConnectDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_DisConnectDev::CopyFrom(const Req_SKF_DisConnectDev& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_DisConnectDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_DisConnectDev::IsInitialized() const {
  return true;
}

void Req_SKF_DisConnectDev::Swap(Req_SKF_DisConnectDev* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_DisConnectDev::InternalSwap(Req_SKF_DisConnectDev* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(hdev_, other->hdev_);
}

::google::protobuf::Metadata Req_SKF_DisConnectDev::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_DisConnectDev::InitAsDefaultInstance() {
}
class Rsp_SKF_DisConnectDev::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_DisConnectDev::Rsp_SKF_DisConnectDev()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_DisConnectDev)
}
Rsp_SKF_DisConnectDev::Rsp_SKF_DisConnectDev(const Rsp_SKF_DisConnectDev& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_DisConnectDev)
}

void Rsp_SKF_DisConnectDev::SharedCtor() {
}

Rsp_SKF_DisConnectDev::~Rsp_SKF_DisConnectDev() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_DisConnectDev)
  SharedDtor();
}

void Rsp_SKF_DisConnectDev::SharedDtor() {
}

void Rsp_SKF_DisConnectDev::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_DisConnectDev& Rsp_SKF_DisConnectDev::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_DisConnectDev_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_DisConnectDev::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_DisConnectDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_DisConnectDev::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_DisConnectDev*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_DisConnectDev::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_DisConnectDev)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_DisConnectDev)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_DisConnectDev)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_DisConnectDev::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_DisConnectDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_DisConnectDev)
}

::google::protobuf::uint8* Rsp_SKF_DisConnectDev::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_DisConnectDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_DisConnectDev)
  return target;
}

size_t Rsp_SKF_DisConnectDev::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_DisConnectDev)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_DisConnectDev::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_DisConnectDev)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_DisConnectDev* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_DisConnectDev>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_DisConnectDev)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_DisConnectDev)
    MergeFrom(*source);
  }
}

void Rsp_SKF_DisConnectDev::MergeFrom(const Rsp_SKF_DisConnectDev& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_DisConnectDev)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rsp_SKF_DisConnectDev::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_DisConnectDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_DisConnectDev::CopyFrom(const Rsp_SKF_DisConnectDev& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_DisConnectDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_DisConnectDev::IsInitialized() const {
  return true;
}

void Rsp_SKF_DisConnectDev::Swap(Rsp_SKF_DisConnectDev* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_DisConnectDev::InternalSwap(Rsp_SKF_DisConnectDev* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rsp_SKF_DisConnectDev::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_GetDevState::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_GetDevState_default_instance_._instance.get_mutable()->puldevstate_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_GetDevState::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& puldevstate(const Req_SKF_GetDevState* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GetDevState::HasBitSetters::puldevstate(const Req_SKF_GetDevState* msg) {
  return *msg->puldevstate_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_GetDevState::kSzDevNameFieldNumber;
const int Req_SKF_GetDevState::kPulDevStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_GetDevState::Req_SKF_GetDevState()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_GetDevState)
}
Req_SKF_GetDevState::Req_SKF_GetDevState(const Req_SKF_GetDevState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szdevname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szdevname().size() > 0) {
    szdevname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szdevname_);
  }
  if (from.has_puldevstate()) {
    puldevstate_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.puldevstate_);
  } else {
    puldevstate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_GetDevState)
}

void Req_SKF_GetDevState::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_GetDevState_skf_2eproto.base);
  szdevname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  puldevstate_ = nullptr;
}

Req_SKF_GetDevState::~Req_SKF_GetDevState() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_GetDevState)
  SharedDtor();
}

void Req_SKF_GetDevState::SharedDtor() {
  szdevname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete puldevstate_;
}

void Req_SKF_GetDevState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_GetDevState& Req_SKF_GetDevState::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_GetDevState_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_GetDevState::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_GetDevState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szdevname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && puldevstate_ != nullptr) {
    delete puldevstate_;
  }
  puldevstate_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_GetDevState::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_GetDevState*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string szDevName = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.westone.skf.Req_SKF_GetDevState.szDevName");
        object = msg->mutable_szdevname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulDevState = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_puldevstate();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_GetDevState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_GetDevState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string szDevName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szdevname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szdevname().data(), static_cast<int>(this->szdevname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.westone.skf.Req_SKF_GetDevState.szDevName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulDevState = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_puldevstate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_GetDevState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_GetDevState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_GetDevState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_GetDevState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string szDevName = 1;
  if (this->szdevname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szdevname().data(), static_cast<int>(this->szdevname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_GetDevState.szDevName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->szdevname(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulDevState = 2;
  if (this->has_puldevstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::puldevstate(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_GetDevState)
}

::google::protobuf::uint8* Req_SKF_GetDevState::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_GetDevState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string szDevName = 1;
  if (this->szdevname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szdevname().data(), static_cast<int>(this->szdevname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_GetDevState.szDevName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->szdevname(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulDevState = 2;
  if (this->has_puldevstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::puldevstate(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_GetDevState)
  return target;
}

size_t Req_SKF_GetDevState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_GetDevState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string szDevName = 1;
  if (this->szdevname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szdevname());
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulDevState = 2;
  if (this->has_puldevstate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *puldevstate_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_GetDevState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_GetDevState)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_GetDevState* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_GetDevState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_GetDevState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_GetDevState)
    MergeFrom(*source);
  }
}

void Req_SKF_GetDevState::MergeFrom(const Req_SKF_GetDevState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_GetDevState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.szdevname().size() > 0) {

    szdevname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szdevname_);
  }
  if (from.has_puldevstate()) {
    mutable_puldevstate()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.puldevstate());
  }
}

void Req_SKF_GetDevState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_GetDevState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_GetDevState::CopyFrom(const Req_SKF_GetDevState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_GetDevState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_GetDevState::IsInitialized() const {
  return true;
}

void Req_SKF_GetDevState::Swap(Req_SKF_GetDevState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_GetDevState::InternalSwap(Req_SKF_GetDevState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  szdevname_.Swap(&other->szdevname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(puldevstate_, other->puldevstate_);
}

::google::protobuf::Metadata Req_SKF_GetDevState::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_GetDevState::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_GetDevState_default_instance_._instance.get_mutable()->puldevstate_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_GetDevState::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& puldevstate(const Rsp_SKF_GetDevState* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_GetDevState::HasBitSetters::puldevstate(const Rsp_SKF_GetDevState* msg) {
  return *msg->puldevstate_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_GetDevState::kPulDevStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_GetDevState::Rsp_SKF_GetDevState()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_GetDevState)
}
Rsp_SKF_GetDevState::Rsp_SKF_GetDevState(const Rsp_SKF_GetDevState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_puldevstate()) {
    puldevstate_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.puldevstate_);
  } else {
    puldevstate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_GetDevState)
}

void Rsp_SKF_GetDevState::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_GetDevState_skf_2eproto.base);
  puldevstate_ = nullptr;
}

Rsp_SKF_GetDevState::~Rsp_SKF_GetDevState() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_GetDevState)
  SharedDtor();
}

void Rsp_SKF_GetDevState::SharedDtor() {
  if (this != internal_default_instance()) delete puldevstate_;
}

void Rsp_SKF_GetDevState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_GetDevState& Rsp_SKF_GetDevState::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_GetDevState_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_GetDevState::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_GetDevState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && puldevstate_ != nullptr) {
    delete puldevstate_;
  }
  puldevstate_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_GetDevState::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_GetDevState*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 pulDevState = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_puldevstate();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_GetDevState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_GetDevState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 pulDevState = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_puldevstate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_GetDevState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_GetDevState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_GetDevState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_GetDevState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 pulDevState = 1;
  if (this->has_puldevstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::puldevstate(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_GetDevState)
}

::google::protobuf::uint8* Rsp_SKF_GetDevState::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_GetDevState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 pulDevState = 1;
  if (this->has_puldevstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::puldevstate(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_GetDevState)
  return target;
}

size_t Rsp_SKF_GetDevState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_GetDevState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 pulDevState = 1;
  if (this->has_puldevstate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *puldevstate_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_GetDevState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_GetDevState)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_GetDevState* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_GetDevState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_GetDevState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_GetDevState)
    MergeFrom(*source);
  }
}

void Rsp_SKF_GetDevState::MergeFrom(const Rsp_SKF_GetDevState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_GetDevState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_puldevstate()) {
    mutable_puldevstate()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.puldevstate());
  }
}

void Rsp_SKF_GetDevState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_GetDevState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_GetDevState::CopyFrom(const Rsp_SKF_GetDevState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_GetDevState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_GetDevState::IsInitialized() const {
  return true;
}

void Rsp_SKF_GetDevState::Swap(Rsp_SKF_GetDevState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_GetDevState::InternalSwap(Rsp_SKF_GetDevState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(puldevstate_, other->puldevstate_);
}

::google::protobuf::Metadata Rsp_SKF_GetDevState::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_SetLabel::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_SetLabel_default_instance_._instance.get_mutable()->hdev_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_SetLabel::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hdev(const Req_SKF_SetLabel* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_SetLabel::HasBitSetters::hdev(const Req_SKF_SetLabel* msg) {
  return *msg->hdev_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_SetLabel::kHDevFieldNumber;
const int Req_SKF_SetLabel::kSzLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_SetLabel::Req_SKF_SetLabel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_SetLabel)
}
Req_SKF_SetLabel::Req_SKF_SetLabel(const Req_SKF_SetLabel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szlabel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szlabel().size() > 0) {
    szlabel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szlabel_);
  }
  if (from.has_hdev()) {
    hdev_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hdev_);
  } else {
    hdev_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_SetLabel)
}

void Req_SKF_SetLabel::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_SetLabel_skf_2eproto.base);
  szlabel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hdev_ = nullptr;
}

Req_SKF_SetLabel::~Req_SKF_SetLabel() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_SetLabel)
  SharedDtor();
}

void Req_SKF_SetLabel::SharedDtor() {
  szlabel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hdev_;
}

void Req_SKF_SetLabel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_SetLabel& Req_SKF_SetLabel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_SetLabel_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_SetLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_SetLabel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szlabel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_SetLabel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_SetLabel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hdev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string szLabel = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.westone.skf.Req_SKF_SetLabel.szLabel");
        object = msg->mutable_szlabel();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_SetLabel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_SetLabel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hdev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szLabel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szlabel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szlabel().data(), static_cast<int>(this->szlabel().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.westone.skf.Req_SKF_SetLabel.szLabel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_SetLabel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_SetLabel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_SetLabel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_SetLabel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hdev(this), output);
  }

  // string szLabel = 2;
  if (this->szlabel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szlabel().data(), static_cast<int>(this->szlabel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_SetLabel.szLabel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szlabel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_SetLabel)
}

::google::protobuf::uint8* Req_SKF_SetLabel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_SetLabel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hdev(this), target);
  }

  // string szLabel = 2;
  if (this->szlabel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szlabel().data(), static_cast<int>(this->szlabel().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_SetLabel.szLabel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->szlabel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_SetLabel)
  return target;
}

size_t Req_SKF_SetLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_SetLabel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string szLabel = 2;
  if (this->szlabel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szlabel());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hdev_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_SetLabel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_SetLabel)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_SetLabel* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_SetLabel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_SetLabel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_SetLabel)
    MergeFrom(*source);
  }
}

void Req_SKF_SetLabel::MergeFrom(const Req_SKF_SetLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_SetLabel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.szlabel().size() > 0) {

    szlabel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szlabel_);
  }
  if (from.has_hdev()) {
    mutable_hdev()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hdev());
  }
}

void Req_SKF_SetLabel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_SetLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_SetLabel::CopyFrom(const Req_SKF_SetLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_SetLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_SetLabel::IsInitialized() const {
  return true;
}

void Req_SKF_SetLabel::Swap(Req_SKF_SetLabel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_SetLabel::InternalSwap(Req_SKF_SetLabel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  szlabel_.Swap(&other->szlabel_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hdev_, other->hdev_);
}

::google::protobuf::Metadata Req_SKF_SetLabel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_SetLabel::InitAsDefaultInstance() {
}
class Rsp_SKF_SetLabel::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_SetLabel::Rsp_SKF_SetLabel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_SetLabel)
}
Rsp_SKF_SetLabel::Rsp_SKF_SetLabel(const Rsp_SKF_SetLabel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_SetLabel)
}

void Rsp_SKF_SetLabel::SharedCtor() {
}

Rsp_SKF_SetLabel::~Rsp_SKF_SetLabel() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_SetLabel)
  SharedDtor();
}

void Rsp_SKF_SetLabel::SharedDtor() {
}

void Rsp_SKF_SetLabel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_SetLabel& Rsp_SKF_SetLabel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_SetLabel_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_SetLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_SetLabel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_SetLabel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_SetLabel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_SetLabel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_SetLabel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_SetLabel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_SetLabel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_SetLabel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_SetLabel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_SetLabel)
}

::google::protobuf::uint8* Rsp_SKF_SetLabel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_SetLabel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_SetLabel)
  return target;
}

size_t Rsp_SKF_SetLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_SetLabel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_SetLabel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_SetLabel)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_SetLabel* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_SetLabel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_SetLabel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_SetLabel)
    MergeFrom(*source);
  }
}

void Rsp_SKF_SetLabel::MergeFrom(const Rsp_SKF_SetLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_SetLabel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rsp_SKF_SetLabel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_SetLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_SetLabel::CopyFrom(const Rsp_SKF_SetLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_SetLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_SetLabel::IsInitialized() const {
  return true;
}

void Rsp_SKF_SetLabel::Swap(Rsp_SKF_SetLabel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_SetLabel::InternalSwap(Rsp_SKF_SetLabel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rsp_SKF_SetLabel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_GetDevInfo::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_GetDevInfo_default_instance_._instance.get_mutable()->hdev_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_GetDevInfo_default_instance_._instance.get_mutable()->pdevinfo_ = const_cast< ::com::westone::skf::SKF_DevInfo*>(
      ::com::westone::skf::SKF_DevInfo::internal_default_instance());
}
class Req_SKF_GetDevInfo::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hdev(const Req_SKF_GetDevInfo* msg);
  static const ::com::westone::skf::SKF_DevInfo& pdevinfo(const Req_SKF_GetDevInfo* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GetDevInfo::HasBitSetters::hdev(const Req_SKF_GetDevInfo* msg) {
  return *msg->hdev_;
}
const ::com::westone::skf::SKF_DevInfo&
Req_SKF_GetDevInfo::HasBitSetters::pdevinfo(const Req_SKF_GetDevInfo* msg) {
  return *msg->pdevinfo_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_GetDevInfo::kHDevFieldNumber;
const int Req_SKF_GetDevInfo::kPDevInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_GetDevInfo::Req_SKF_GetDevInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_GetDevInfo)
}
Req_SKF_GetDevInfo::Req_SKF_GetDevInfo(const Req_SKF_GetDevInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hdev()) {
    hdev_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hdev_);
  } else {
    hdev_ = nullptr;
  }
  if (from.has_pdevinfo()) {
    pdevinfo_ = new ::com::westone::skf::SKF_DevInfo(*from.pdevinfo_);
  } else {
    pdevinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_GetDevInfo)
}

void Req_SKF_GetDevInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_GetDevInfo_skf_2eproto.base);
  ::memset(&hdev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pdevinfo_) -
      reinterpret_cast<char*>(&hdev_)) + sizeof(pdevinfo_));
}

Req_SKF_GetDevInfo::~Req_SKF_GetDevInfo() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_GetDevInfo)
  SharedDtor();
}

void Req_SKF_GetDevInfo::SharedDtor() {
  if (this != internal_default_instance()) delete hdev_;
  if (this != internal_default_instance()) delete pdevinfo_;
}

void Req_SKF_GetDevInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_GetDevInfo& Req_SKF_GetDevInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_GetDevInfo_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_GetDevInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_GetDevInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pdevinfo_ != nullptr) {
    delete pdevinfo_;
  }
  pdevinfo_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_GetDevInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_GetDevInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hdev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_DevInfo pDevInfo = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_DevInfo::_InternalParse;
        object = msg->mutable_pdevinfo();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_GetDevInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_GetDevInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hdev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_DevInfo pDevInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pdevinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_GetDevInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_GetDevInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_GetDevInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_GetDevInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hdev(this), output);
  }

  // .com.westone.skf.SKF_DevInfo pDevInfo = 2;
  if (this->has_pdevinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pdevinfo(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_GetDevInfo)
}

::google::protobuf::uint8* Req_SKF_GetDevInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_GetDevInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hdev(this), target);
  }

  // .com.westone.skf.SKF_DevInfo pDevInfo = 2;
  if (this->has_pdevinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pdevinfo(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_GetDevInfo)
  return target;
}

size_t Req_SKF_GetDevInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_GetDevInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hdev_);
  }

  // .com.westone.skf.SKF_DevInfo pDevInfo = 2;
  if (this->has_pdevinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pdevinfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_GetDevInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_GetDevInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_GetDevInfo* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_GetDevInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_GetDevInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_GetDevInfo)
    MergeFrom(*source);
  }
}

void Req_SKF_GetDevInfo::MergeFrom(const Req_SKF_GetDevInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_GetDevInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdev()) {
    mutable_hdev()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hdev());
  }
  if (from.has_pdevinfo()) {
    mutable_pdevinfo()->::com::westone::skf::SKF_DevInfo::MergeFrom(from.pdevinfo());
  }
}

void Req_SKF_GetDevInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_GetDevInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_GetDevInfo::CopyFrom(const Req_SKF_GetDevInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_GetDevInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_GetDevInfo::IsInitialized() const {
  return true;
}

void Req_SKF_GetDevInfo::Swap(Req_SKF_GetDevInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_GetDevInfo::InternalSwap(Req_SKF_GetDevInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(hdev_, other->hdev_);
  swap(pdevinfo_, other->pdevinfo_);
}

::google::protobuf::Metadata Req_SKF_GetDevInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_GetDevInfo::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_GetDevInfo_default_instance_._instance.get_mutable()->pdevinfo_ = const_cast< ::com::westone::skf::SKF_DevInfo*>(
      ::com::westone::skf::SKF_DevInfo::internal_default_instance());
}
class Rsp_SKF_GetDevInfo::HasBitSetters {
 public:
  static const ::com::westone::skf::SKF_DevInfo& pdevinfo(const Rsp_SKF_GetDevInfo* msg);
};

const ::com::westone::skf::SKF_DevInfo&
Rsp_SKF_GetDevInfo::HasBitSetters::pdevinfo(const Rsp_SKF_GetDevInfo* msg) {
  return *msg->pdevinfo_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_GetDevInfo::kPDevInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_GetDevInfo::Rsp_SKF_GetDevInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_GetDevInfo)
}
Rsp_SKF_GetDevInfo::Rsp_SKF_GetDevInfo(const Rsp_SKF_GetDevInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pdevinfo()) {
    pdevinfo_ = new ::com::westone::skf::SKF_DevInfo(*from.pdevinfo_);
  } else {
    pdevinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_GetDevInfo)
}

void Rsp_SKF_GetDevInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_GetDevInfo_skf_2eproto.base);
  pdevinfo_ = nullptr;
}

Rsp_SKF_GetDevInfo::~Rsp_SKF_GetDevInfo() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_GetDevInfo)
  SharedDtor();
}

void Rsp_SKF_GetDevInfo::SharedDtor() {
  if (this != internal_default_instance()) delete pdevinfo_;
}

void Rsp_SKF_GetDevInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_GetDevInfo& Rsp_SKF_GetDevInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_GetDevInfo_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_GetDevInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_GetDevInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pdevinfo_ != nullptr) {
    delete pdevinfo_;
  }
  pdevinfo_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_GetDevInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_GetDevInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.SKF_DevInfo pDevInfo = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_DevInfo::_InternalParse;
        object = msg->mutable_pdevinfo();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_GetDevInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_GetDevInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.SKF_DevInfo pDevInfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pdevinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_GetDevInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_GetDevInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_GetDevInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_GetDevInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.SKF_DevInfo pDevInfo = 1;
  if (this->has_pdevinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::pdevinfo(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_GetDevInfo)
}

::google::protobuf::uint8* Rsp_SKF_GetDevInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_GetDevInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.SKF_DevInfo pDevInfo = 1;
  if (this->has_pdevinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::pdevinfo(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_GetDevInfo)
  return target;
}

size_t Rsp_SKF_GetDevInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_GetDevInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.SKF_DevInfo pDevInfo = 1;
  if (this->has_pdevinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pdevinfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_GetDevInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_GetDevInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_GetDevInfo* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_GetDevInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_GetDevInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_GetDevInfo)
    MergeFrom(*source);
  }
}

void Rsp_SKF_GetDevInfo::MergeFrom(const Rsp_SKF_GetDevInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_GetDevInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pdevinfo()) {
    mutable_pdevinfo()->::com::westone::skf::SKF_DevInfo::MergeFrom(from.pdevinfo());
  }
}

void Rsp_SKF_GetDevInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_GetDevInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_GetDevInfo::CopyFrom(const Rsp_SKF_GetDevInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_GetDevInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_GetDevInfo::IsInitialized() const {
  return true;
}

void Rsp_SKF_GetDevInfo::Swap(Rsp_SKF_GetDevInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_GetDevInfo::InternalSwap(Rsp_SKF_GetDevInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pdevinfo_, other->pdevinfo_);
}

::google::protobuf::Metadata Rsp_SKF_GetDevInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_LockDev::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_LockDev_default_instance_._instance.get_mutable()->hdev_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_LockDev_default_instance_._instance.get_mutable()->ultimeout_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_LockDev::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hdev(const Req_SKF_LockDev* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ultimeout(const Req_SKF_LockDev* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_LockDev::HasBitSetters::hdev(const Req_SKF_LockDev* msg) {
  return *msg->hdev_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_LockDev::HasBitSetters::ultimeout(const Req_SKF_LockDev* msg) {
  return *msg->ultimeout_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_LockDev::kHDevFieldNumber;
const int Req_SKF_LockDev::kUlTimeOutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_LockDev::Req_SKF_LockDev()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_LockDev)
}
Req_SKF_LockDev::Req_SKF_LockDev(const Req_SKF_LockDev& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hdev()) {
    hdev_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hdev_);
  } else {
    hdev_ = nullptr;
  }
  if (from.has_ultimeout()) {
    ultimeout_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ultimeout_);
  } else {
    ultimeout_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_LockDev)
}

void Req_SKF_LockDev::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_LockDev_skf_2eproto.base);
  ::memset(&hdev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ultimeout_) -
      reinterpret_cast<char*>(&hdev_)) + sizeof(ultimeout_));
}

Req_SKF_LockDev::~Req_SKF_LockDev() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_LockDev)
  SharedDtor();
}

void Req_SKF_LockDev::SharedDtor() {
  if (this != internal_default_instance()) delete hdev_;
  if (this != internal_default_instance()) delete ultimeout_;
}

void Req_SKF_LockDev::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_LockDev& Req_SKF_LockDev::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_LockDev_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_LockDev::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_LockDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ultimeout_ != nullptr) {
    delete ultimeout_;
  }
  ultimeout_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_LockDev::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_LockDev*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hdev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulTimeOut = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ultimeout();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_LockDev::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_LockDev)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hdev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulTimeOut = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ultimeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_LockDev)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_LockDev)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_LockDev::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_LockDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hdev(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulTimeOut = 2;
  if (this->has_ultimeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::ultimeout(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_LockDev)
}

::google::protobuf::uint8* Req_SKF_LockDev::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_LockDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hdev(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulTimeOut = 2;
  if (this->has_ultimeout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::ultimeout(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_LockDev)
  return target;
}

size_t Req_SKF_LockDev::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_LockDev)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hdev_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulTimeOut = 2;
  if (this->has_ultimeout()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ultimeout_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_LockDev::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_LockDev)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_LockDev* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_LockDev>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_LockDev)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_LockDev)
    MergeFrom(*source);
  }
}

void Req_SKF_LockDev::MergeFrom(const Req_SKF_LockDev& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_LockDev)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdev()) {
    mutable_hdev()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hdev());
  }
  if (from.has_ultimeout()) {
    mutable_ultimeout()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ultimeout());
  }
}

void Req_SKF_LockDev::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_LockDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_LockDev::CopyFrom(const Req_SKF_LockDev& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_LockDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_LockDev::IsInitialized() const {
  return true;
}

void Req_SKF_LockDev::Swap(Req_SKF_LockDev* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_LockDev::InternalSwap(Req_SKF_LockDev* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(hdev_, other->hdev_);
  swap(ultimeout_, other->ultimeout_);
}

::google::protobuf::Metadata Req_SKF_LockDev::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_LockDev::InitAsDefaultInstance() {
}
class Rsp_SKF_LockDev::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_LockDev::Rsp_SKF_LockDev()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_LockDev)
}
Rsp_SKF_LockDev::Rsp_SKF_LockDev(const Rsp_SKF_LockDev& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_LockDev)
}

void Rsp_SKF_LockDev::SharedCtor() {
}

Rsp_SKF_LockDev::~Rsp_SKF_LockDev() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_LockDev)
  SharedDtor();
}

void Rsp_SKF_LockDev::SharedDtor() {
}

void Rsp_SKF_LockDev::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_LockDev& Rsp_SKF_LockDev::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_LockDev_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_LockDev::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_LockDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_LockDev::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_LockDev*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_LockDev::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_LockDev)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_LockDev)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_LockDev)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_LockDev::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_LockDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_LockDev)
}

::google::protobuf::uint8* Rsp_SKF_LockDev::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_LockDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_LockDev)
  return target;
}

size_t Rsp_SKF_LockDev::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_LockDev)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_LockDev::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_LockDev)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_LockDev* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_LockDev>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_LockDev)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_LockDev)
    MergeFrom(*source);
  }
}

void Rsp_SKF_LockDev::MergeFrom(const Rsp_SKF_LockDev& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_LockDev)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rsp_SKF_LockDev::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_LockDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_LockDev::CopyFrom(const Rsp_SKF_LockDev& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_LockDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_LockDev::IsInitialized() const {
  return true;
}

void Rsp_SKF_LockDev::Swap(Rsp_SKF_LockDev* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_LockDev::InternalSwap(Rsp_SKF_LockDev* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rsp_SKF_LockDev::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_UnlockDev::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_UnlockDev_default_instance_._instance.get_mutable()->hdev_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_UnlockDev::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hdev(const Req_SKF_UnlockDev* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_UnlockDev::HasBitSetters::hdev(const Req_SKF_UnlockDev* msg) {
  return *msg->hdev_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_UnlockDev::kHDevFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_UnlockDev::Req_SKF_UnlockDev()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_UnlockDev)
}
Req_SKF_UnlockDev::Req_SKF_UnlockDev(const Req_SKF_UnlockDev& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hdev()) {
    hdev_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hdev_);
  } else {
    hdev_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_UnlockDev)
}

void Req_SKF_UnlockDev::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_UnlockDev_skf_2eproto.base);
  hdev_ = nullptr;
}

Req_SKF_UnlockDev::~Req_SKF_UnlockDev() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_UnlockDev)
  SharedDtor();
}

void Req_SKF_UnlockDev::SharedDtor() {
  if (this != internal_default_instance()) delete hdev_;
}

void Req_SKF_UnlockDev::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_UnlockDev& Req_SKF_UnlockDev::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_UnlockDev_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_UnlockDev::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_UnlockDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_UnlockDev::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_UnlockDev*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hdev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_UnlockDev::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_UnlockDev)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hdev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_UnlockDev)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_UnlockDev)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_UnlockDev::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_UnlockDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hdev(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_UnlockDev)
}

::google::protobuf::uint8* Req_SKF_UnlockDev::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_UnlockDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hdev(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_UnlockDev)
  return target;
}

size_t Req_SKF_UnlockDev::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_UnlockDev)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hdev_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_UnlockDev::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_UnlockDev)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_UnlockDev* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_UnlockDev>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_UnlockDev)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_UnlockDev)
    MergeFrom(*source);
  }
}

void Req_SKF_UnlockDev::MergeFrom(const Req_SKF_UnlockDev& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_UnlockDev)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdev()) {
    mutable_hdev()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hdev());
  }
}

void Req_SKF_UnlockDev::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_UnlockDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_UnlockDev::CopyFrom(const Req_SKF_UnlockDev& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_UnlockDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_UnlockDev::IsInitialized() const {
  return true;
}

void Req_SKF_UnlockDev::Swap(Req_SKF_UnlockDev* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_UnlockDev::InternalSwap(Req_SKF_UnlockDev* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(hdev_, other->hdev_);
}

::google::protobuf::Metadata Req_SKF_UnlockDev::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_UnlockDev::InitAsDefaultInstance() {
}
class Rsp_SKF_UnlockDev::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_UnlockDev::Rsp_SKF_UnlockDev()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_UnlockDev)
}
Rsp_SKF_UnlockDev::Rsp_SKF_UnlockDev(const Rsp_SKF_UnlockDev& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_UnlockDev)
}

void Rsp_SKF_UnlockDev::SharedCtor() {
}

Rsp_SKF_UnlockDev::~Rsp_SKF_UnlockDev() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_UnlockDev)
  SharedDtor();
}

void Rsp_SKF_UnlockDev::SharedDtor() {
}

void Rsp_SKF_UnlockDev::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_UnlockDev& Rsp_SKF_UnlockDev::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_UnlockDev_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_UnlockDev::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_UnlockDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_UnlockDev::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_UnlockDev*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_UnlockDev::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_UnlockDev)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_UnlockDev)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_UnlockDev)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_UnlockDev::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_UnlockDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_UnlockDev)
}

::google::protobuf::uint8* Rsp_SKF_UnlockDev::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_UnlockDev)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_UnlockDev)
  return target;
}

size_t Rsp_SKF_UnlockDev::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_UnlockDev)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_UnlockDev::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_UnlockDev)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_UnlockDev* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_UnlockDev>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_UnlockDev)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_UnlockDev)
    MergeFrom(*source);
  }
}

void Rsp_SKF_UnlockDev::MergeFrom(const Rsp_SKF_UnlockDev& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_UnlockDev)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rsp_SKF_UnlockDev::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_UnlockDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_UnlockDev::CopyFrom(const Rsp_SKF_UnlockDev& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_UnlockDev)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_UnlockDev::IsInitialized() const {
  return true;
}

void Rsp_SKF_UnlockDev::Swap(Rsp_SKF_UnlockDev* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_UnlockDev::InternalSwap(Rsp_SKF_UnlockDev* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rsp_SKF_UnlockDev::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_ChangeDevAuthKey::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_ChangeDevAuthKey_default_instance_._instance.get_mutable()->hdev_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ChangeDevAuthKey_default_instance_._instance.get_mutable()->ulkeylen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_ChangeDevAuthKey::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hdev(const Req_SKF_ChangeDevAuthKey* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulkeylen(const Req_SKF_ChangeDevAuthKey* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ChangeDevAuthKey::HasBitSetters::hdev(const Req_SKF_ChangeDevAuthKey* msg) {
  return *msg->hdev_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ChangeDevAuthKey::HasBitSetters::ulkeylen(const Req_SKF_ChangeDevAuthKey* msg) {
  return *msg->ulkeylen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_ChangeDevAuthKey::kHDevFieldNumber;
const int Req_SKF_ChangeDevAuthKey::kPbKeyValueFieldNumber;
const int Req_SKF_ChangeDevAuthKey::kUlKeyLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_ChangeDevAuthKey::Req_SKF_ChangeDevAuthKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_ChangeDevAuthKey)
}
Req_SKF_ChangeDevAuthKey::Req_SKF_ChangeDevAuthKey(const Req_SKF_ChangeDevAuthKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbkeyvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbkeyvalue().size() > 0) {
    pbkeyvalue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbkeyvalue_);
  }
  if (from.has_hdev()) {
    hdev_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hdev_);
  } else {
    hdev_ = nullptr;
  }
  if (from.has_ulkeylen()) {
    ulkeylen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulkeylen_);
  } else {
    ulkeylen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_ChangeDevAuthKey)
}

void Req_SKF_ChangeDevAuthKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_ChangeDevAuthKey_skf_2eproto.base);
  pbkeyvalue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hdev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ulkeylen_) -
      reinterpret_cast<char*>(&hdev_)) + sizeof(ulkeylen_));
}

Req_SKF_ChangeDevAuthKey::~Req_SKF_ChangeDevAuthKey() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_ChangeDevAuthKey)
  SharedDtor();
}

void Req_SKF_ChangeDevAuthKey::SharedDtor() {
  pbkeyvalue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hdev_;
  if (this != internal_default_instance()) delete ulkeylen_;
}

void Req_SKF_ChangeDevAuthKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_ChangeDevAuthKey& Req_SKF_ChangeDevAuthKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_ChangeDevAuthKey_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_ChangeDevAuthKey::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_ChangeDevAuthKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbkeyvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulkeylen_ != nullptr) {
    delete ulkeylen_;
  }
  ulkeylen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_ChangeDevAuthKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_ChangeDevAuthKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hdev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbKeyValue = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbkeyvalue();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulKeyLen = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulkeylen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_ChangeDevAuthKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_ChangeDevAuthKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hdev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbKeyValue = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbkeyvalue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulKeyLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulkeylen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_ChangeDevAuthKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_ChangeDevAuthKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_ChangeDevAuthKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_ChangeDevAuthKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hdev(this), output);
  }

  // bytes pbKeyValue = 2;
  if (this->pbkeyvalue().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pbkeyvalue(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulKeyLen = 3;
  if (this->has_ulkeylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::ulkeylen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_ChangeDevAuthKey)
}

::google::protobuf::uint8* Req_SKF_ChangeDevAuthKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_ChangeDevAuthKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hdev(this), target);
  }

  // bytes pbKeyValue = 2;
  if (this->pbkeyvalue().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pbkeyvalue(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulKeyLen = 3;
  if (this->has_ulkeylen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::ulkeylen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_ChangeDevAuthKey)
  return target;
}

size_t Req_SKF_ChangeDevAuthKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_ChangeDevAuthKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbKeyValue = 2;
  if (this->pbkeyvalue().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbkeyvalue());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hdev_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulKeyLen = 3;
  if (this->has_ulkeylen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulkeylen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_ChangeDevAuthKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_ChangeDevAuthKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_ChangeDevAuthKey* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_ChangeDevAuthKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_ChangeDevAuthKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_ChangeDevAuthKey)
    MergeFrom(*source);
  }
}

void Req_SKF_ChangeDevAuthKey::MergeFrom(const Req_SKF_ChangeDevAuthKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_ChangeDevAuthKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbkeyvalue().size() > 0) {

    pbkeyvalue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbkeyvalue_);
  }
  if (from.has_hdev()) {
    mutable_hdev()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hdev());
  }
  if (from.has_ulkeylen()) {
    mutable_ulkeylen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulkeylen());
  }
}

void Req_SKF_ChangeDevAuthKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_ChangeDevAuthKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_ChangeDevAuthKey::CopyFrom(const Req_SKF_ChangeDevAuthKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_ChangeDevAuthKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_ChangeDevAuthKey::IsInitialized() const {
  return true;
}

void Req_SKF_ChangeDevAuthKey::Swap(Req_SKF_ChangeDevAuthKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_ChangeDevAuthKey::InternalSwap(Req_SKF_ChangeDevAuthKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbkeyvalue_.Swap(&other->pbkeyvalue_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hdev_, other->hdev_);
  swap(ulkeylen_, other->ulkeylen_);
}

::google::protobuf::Metadata Req_SKF_ChangeDevAuthKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_ChangeDevAuthKey::InitAsDefaultInstance() {
}
class Rsp_SKF_ChangeDevAuthKey::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_ChangeDevAuthKey::Rsp_SKF_ChangeDevAuthKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_ChangeDevAuthKey)
}
Rsp_SKF_ChangeDevAuthKey::Rsp_SKF_ChangeDevAuthKey(const Rsp_SKF_ChangeDevAuthKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_ChangeDevAuthKey)
}

void Rsp_SKF_ChangeDevAuthKey::SharedCtor() {
}

Rsp_SKF_ChangeDevAuthKey::~Rsp_SKF_ChangeDevAuthKey() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_ChangeDevAuthKey)
  SharedDtor();
}

void Rsp_SKF_ChangeDevAuthKey::SharedDtor() {
}

void Rsp_SKF_ChangeDevAuthKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_ChangeDevAuthKey& Rsp_SKF_ChangeDevAuthKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_ChangeDevAuthKey_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_ChangeDevAuthKey::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_ChangeDevAuthKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_ChangeDevAuthKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_ChangeDevAuthKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_ChangeDevAuthKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_ChangeDevAuthKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_ChangeDevAuthKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_ChangeDevAuthKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_ChangeDevAuthKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_ChangeDevAuthKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_ChangeDevAuthKey)
}

::google::protobuf::uint8* Rsp_SKF_ChangeDevAuthKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_ChangeDevAuthKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_ChangeDevAuthKey)
  return target;
}

size_t Rsp_SKF_ChangeDevAuthKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_ChangeDevAuthKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_ChangeDevAuthKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_ChangeDevAuthKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_ChangeDevAuthKey* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_ChangeDevAuthKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_ChangeDevAuthKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_ChangeDevAuthKey)
    MergeFrom(*source);
  }
}

void Rsp_SKF_ChangeDevAuthKey::MergeFrom(const Rsp_SKF_ChangeDevAuthKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_ChangeDevAuthKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rsp_SKF_ChangeDevAuthKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_ChangeDevAuthKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_ChangeDevAuthKey::CopyFrom(const Rsp_SKF_ChangeDevAuthKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_ChangeDevAuthKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_ChangeDevAuthKey::IsInitialized() const {
  return true;
}

void Rsp_SKF_ChangeDevAuthKey::Swap(Rsp_SKF_ChangeDevAuthKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_ChangeDevAuthKey::InternalSwap(Rsp_SKF_ChangeDevAuthKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rsp_SKF_ChangeDevAuthKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_DevAuth::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_DevAuth_default_instance_._instance.get_mutable()->hdev_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_DevAuth_default_instance_._instance.get_mutable()->ullen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_DevAuth::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hdev(const Req_SKF_DevAuth* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ullen(const Req_SKF_DevAuth* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_DevAuth::HasBitSetters::hdev(const Req_SKF_DevAuth* msg) {
  return *msg->hdev_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_DevAuth::HasBitSetters::ullen(const Req_SKF_DevAuth* msg) {
  return *msg->ullen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_DevAuth::kHDevFieldNumber;
const int Req_SKF_DevAuth::kPbAuthDataFieldNumber;
const int Req_SKF_DevAuth::kUlLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_DevAuth::Req_SKF_DevAuth()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_DevAuth)
}
Req_SKF_DevAuth::Req_SKF_DevAuth(const Req_SKF_DevAuth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbauthdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbauthdata().size() > 0) {
    pbauthdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbauthdata_);
  }
  if (from.has_hdev()) {
    hdev_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hdev_);
  } else {
    hdev_ = nullptr;
  }
  if (from.has_ullen()) {
    ullen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ullen_);
  } else {
    ullen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_DevAuth)
}

void Req_SKF_DevAuth::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_DevAuth_skf_2eproto.base);
  pbauthdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hdev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ullen_) -
      reinterpret_cast<char*>(&hdev_)) + sizeof(ullen_));
}

Req_SKF_DevAuth::~Req_SKF_DevAuth() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_DevAuth)
  SharedDtor();
}

void Req_SKF_DevAuth::SharedDtor() {
  pbauthdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hdev_;
  if (this != internal_default_instance()) delete ullen_;
}

void Req_SKF_DevAuth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_DevAuth& Req_SKF_DevAuth::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_DevAuth_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_DevAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_DevAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbauthdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ullen_ != nullptr) {
    delete ullen_;
  }
  ullen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_DevAuth::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_DevAuth*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hdev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbAuthData = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbauthdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulLen = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ullen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_DevAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_DevAuth)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hdev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbAuthData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbauthdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ullen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_DevAuth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_DevAuth)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_DevAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_DevAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hdev(this), output);
  }

  // bytes pbAuthData = 2;
  if (this->pbauthdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pbauthdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulLen = 3;
  if (this->has_ullen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::ullen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_DevAuth)
}

::google::protobuf::uint8* Req_SKF_DevAuth::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_DevAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hdev(this), target);
  }

  // bytes pbAuthData = 2;
  if (this->pbauthdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pbauthdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulLen = 3;
  if (this->has_ullen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::ullen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_DevAuth)
  return target;
}

size_t Req_SKF_DevAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_DevAuth)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbAuthData = 2;
  if (this->pbauthdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbauthdata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hdev_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulLen = 3;
  if (this->has_ullen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ullen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_DevAuth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_DevAuth)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_DevAuth* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_DevAuth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_DevAuth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_DevAuth)
    MergeFrom(*source);
  }
}

void Req_SKF_DevAuth::MergeFrom(const Req_SKF_DevAuth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_DevAuth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbauthdata().size() > 0) {

    pbauthdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbauthdata_);
  }
  if (from.has_hdev()) {
    mutable_hdev()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hdev());
  }
  if (from.has_ullen()) {
    mutable_ullen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ullen());
  }
}

void Req_SKF_DevAuth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_DevAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_DevAuth::CopyFrom(const Req_SKF_DevAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_DevAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_DevAuth::IsInitialized() const {
  return true;
}

void Req_SKF_DevAuth::Swap(Req_SKF_DevAuth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_DevAuth::InternalSwap(Req_SKF_DevAuth* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbauthdata_.Swap(&other->pbauthdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hdev_, other->hdev_);
  swap(ullen_, other->ullen_);
}

::google::protobuf::Metadata Req_SKF_DevAuth::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_DevAuth::InitAsDefaultInstance() {
}
class Rsp_SKF_DevAuth::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_DevAuth::Rsp_SKF_DevAuth()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_DevAuth)
}
Rsp_SKF_DevAuth::Rsp_SKF_DevAuth(const Rsp_SKF_DevAuth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_DevAuth)
}

void Rsp_SKF_DevAuth::SharedCtor() {
}

Rsp_SKF_DevAuth::~Rsp_SKF_DevAuth() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_DevAuth)
  SharedDtor();
}

void Rsp_SKF_DevAuth::SharedDtor() {
}

void Rsp_SKF_DevAuth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_DevAuth& Rsp_SKF_DevAuth::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_DevAuth_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_DevAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_DevAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_DevAuth::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_DevAuth*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_DevAuth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_DevAuth)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_DevAuth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_DevAuth)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_DevAuth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_DevAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_DevAuth)
}

::google::protobuf::uint8* Rsp_SKF_DevAuth::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_DevAuth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_DevAuth)
  return target;
}

size_t Rsp_SKF_DevAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_DevAuth)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_DevAuth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_DevAuth)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_DevAuth* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_DevAuth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_DevAuth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_DevAuth)
    MergeFrom(*source);
  }
}

void Rsp_SKF_DevAuth::MergeFrom(const Rsp_SKF_DevAuth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_DevAuth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rsp_SKF_DevAuth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_DevAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_DevAuth::CopyFrom(const Rsp_SKF_DevAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_DevAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_DevAuth::IsInitialized() const {
  return true;
}

void Rsp_SKF_DevAuth::Swap(Rsp_SKF_DevAuth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_DevAuth::InternalSwap(Rsp_SKF_DevAuth* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rsp_SKF_DevAuth::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_ChangePIN::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_ChangePIN_default_instance_._instance.get_mutable()->happlication_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ChangePIN_default_instance_._instance.get_mutable()->ulpintype_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ChangePIN_default_instance_._instance.get_mutable()->pulretrycount_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_ChangePIN::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& happlication(const Req_SKF_ChangePIN* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulpintype(const Req_SKF_ChangePIN* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& pulretrycount(const Req_SKF_ChangePIN* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ChangePIN::HasBitSetters::happlication(const Req_SKF_ChangePIN* msg) {
  return *msg->happlication_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ChangePIN::HasBitSetters::ulpintype(const Req_SKF_ChangePIN* msg) {
  return *msg->ulpintype_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ChangePIN::HasBitSetters::pulretrycount(const Req_SKF_ChangePIN* msg) {
  return *msg->pulretrycount_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_ChangePIN::kHApplicationFieldNumber;
const int Req_SKF_ChangePIN::kUlPINTypeFieldNumber;
const int Req_SKF_ChangePIN::kSzOldPINFieldNumber;
const int Req_SKF_ChangePIN::kSzNewPINFieldNumber;
const int Req_SKF_ChangePIN::kPulRetryCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_ChangePIN::Req_SKF_ChangePIN()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_ChangePIN)
}
Req_SKF_ChangePIN::Req_SKF_ChangePIN(const Req_SKF_ChangePIN& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szoldpin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szoldpin().size() > 0) {
    szoldpin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szoldpin_);
  }
  sznewpin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sznewpin().size() > 0) {
    sznewpin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sznewpin_);
  }
  if (from.has_happlication()) {
    happlication_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.happlication_);
  } else {
    happlication_ = nullptr;
  }
  if (from.has_ulpintype()) {
    ulpintype_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulpintype_);
  } else {
    ulpintype_ = nullptr;
  }
  if (from.has_pulretrycount()) {
    pulretrycount_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulretrycount_);
  } else {
    pulretrycount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_ChangePIN)
}

void Req_SKF_ChangePIN::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_ChangePIN_skf_2eproto.base);
  szoldpin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sznewpin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&happlication_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pulretrycount_) -
      reinterpret_cast<char*>(&happlication_)) + sizeof(pulretrycount_));
}

Req_SKF_ChangePIN::~Req_SKF_ChangePIN() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_ChangePIN)
  SharedDtor();
}

void Req_SKF_ChangePIN::SharedDtor() {
  szoldpin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sznewpin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete happlication_;
  if (this != internal_default_instance()) delete ulpintype_;
  if (this != internal_default_instance()) delete pulretrycount_;
}

void Req_SKF_ChangePIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_ChangePIN& Req_SKF_ChangePIN::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_ChangePIN_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_ChangePIN::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_ChangePIN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szoldpin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sznewpin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulpintype_ != nullptr) {
    delete ulpintype_;
  }
  ulpintype_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pulretrycount_ != nullptr) {
    delete pulretrycount_;
  }
  pulretrycount_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_ChangePIN::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_ChangePIN*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_happlication();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulPINType = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulpintype();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string szOldPIN = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.westone.skf.Req_SKF_ChangePIN.szOldPIN");
        object = msg->mutable_szoldpin();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string szNewPIN = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.westone.skf.Req_SKF_ChangePIN.szNewPIN");
        object = msg->mutable_sznewpin();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulretrycount();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_ChangePIN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_ChangePIN)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_happlication()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulPINType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulpintype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szOldPIN = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szoldpin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szoldpin().data(), static_cast<int>(this->szoldpin().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.westone.skf.Req_SKF_ChangePIN.szOldPIN"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szNewPIN = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sznewpin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sznewpin().data(), static_cast<int>(this->sznewpin().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.westone.skf.Req_SKF_ChangePIN.szNewPIN"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulretrycount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_ChangePIN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_ChangePIN)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_ChangePIN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_ChangePIN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::happlication(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulPINType = 2;
  if (this->has_ulpintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::ulpintype(this), output);
  }

  // string szOldPIN = 3;
  if (this->szoldpin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szoldpin().data(), static_cast<int>(this->szoldpin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_ChangePIN.szOldPIN");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->szoldpin(), output);
  }

  // string szNewPIN = 4;
  if (this->sznewpin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sznewpin().data(), static_cast<int>(this->sznewpin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_ChangePIN.szNewPIN");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sznewpin(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 5;
  if (this->has_pulretrycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::pulretrycount(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_ChangePIN)
}

::google::protobuf::uint8* Req_SKF_ChangePIN::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_ChangePIN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::happlication(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulPINType = 2;
  if (this->has_ulpintype()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::ulpintype(this), target);
  }

  // string szOldPIN = 3;
  if (this->szoldpin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szoldpin().data(), static_cast<int>(this->szoldpin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_ChangePIN.szOldPIN");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->szoldpin(), target);
  }

  // string szNewPIN = 4;
  if (this->sznewpin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sznewpin().data(), static_cast<int>(this->sznewpin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_ChangePIN.szNewPIN");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sznewpin(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 5;
  if (this->has_pulretrycount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::pulretrycount(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_ChangePIN)
  return target;
}

size_t Req_SKF_ChangePIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_ChangePIN)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string szOldPIN = 3;
  if (this->szoldpin().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szoldpin());
  }

  // string szNewPIN = 4;
  if (this->sznewpin().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sznewpin());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *happlication_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulPINType = 2;
  if (this->has_ulpintype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulpintype_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 5;
  if (this->has_pulretrycount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulretrycount_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_ChangePIN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_ChangePIN)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_ChangePIN* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_ChangePIN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_ChangePIN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_ChangePIN)
    MergeFrom(*source);
  }
}

void Req_SKF_ChangePIN::MergeFrom(const Req_SKF_ChangePIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_ChangePIN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.szoldpin().size() > 0) {

    szoldpin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szoldpin_);
  }
  if (from.sznewpin().size() > 0) {

    sznewpin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sznewpin_);
  }
  if (from.has_happlication()) {
    mutable_happlication()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.happlication());
  }
  if (from.has_ulpintype()) {
    mutable_ulpintype()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulpintype());
  }
  if (from.has_pulretrycount()) {
    mutable_pulretrycount()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulretrycount());
  }
}

void Req_SKF_ChangePIN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_ChangePIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_ChangePIN::CopyFrom(const Req_SKF_ChangePIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_ChangePIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_ChangePIN::IsInitialized() const {
  return true;
}

void Req_SKF_ChangePIN::Swap(Req_SKF_ChangePIN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_ChangePIN::InternalSwap(Req_SKF_ChangePIN* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  szoldpin_.Swap(&other->szoldpin_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sznewpin_.Swap(&other->sznewpin_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(happlication_, other->happlication_);
  swap(ulpintype_, other->ulpintype_);
  swap(pulretrycount_, other->pulretrycount_);
}

::google::protobuf::Metadata Req_SKF_ChangePIN::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_ChangePIN::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_ChangePIN_default_instance_._instance.get_mutable()->pulretrycount_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_ChangePIN::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& pulretrycount(const Rsp_SKF_ChangePIN* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_ChangePIN::HasBitSetters::pulretrycount(const Rsp_SKF_ChangePIN* msg) {
  return *msg->pulretrycount_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_ChangePIN::kPulRetryCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_ChangePIN::Rsp_SKF_ChangePIN()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_ChangePIN)
}
Rsp_SKF_ChangePIN::Rsp_SKF_ChangePIN(const Rsp_SKF_ChangePIN& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pulretrycount()) {
    pulretrycount_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulretrycount_);
  } else {
    pulretrycount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_ChangePIN)
}

void Rsp_SKF_ChangePIN::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_ChangePIN_skf_2eproto.base);
  pulretrycount_ = nullptr;
}

Rsp_SKF_ChangePIN::~Rsp_SKF_ChangePIN() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_ChangePIN)
  SharedDtor();
}

void Rsp_SKF_ChangePIN::SharedDtor() {
  if (this != internal_default_instance()) delete pulretrycount_;
}

void Rsp_SKF_ChangePIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_ChangePIN& Rsp_SKF_ChangePIN::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_ChangePIN_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_ChangePIN::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_ChangePIN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pulretrycount_ != nullptr) {
    delete pulretrycount_;
  }
  pulretrycount_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_ChangePIN::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_ChangePIN*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulretrycount();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_ChangePIN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_ChangePIN)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulretrycount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_ChangePIN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_ChangePIN)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_ChangePIN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_ChangePIN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 1;
  if (this->has_pulretrycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::pulretrycount(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_ChangePIN)
}

::google::protobuf::uint8* Rsp_SKF_ChangePIN::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_ChangePIN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 1;
  if (this->has_pulretrycount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::pulretrycount(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_ChangePIN)
  return target;
}

size_t Rsp_SKF_ChangePIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_ChangePIN)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 1;
  if (this->has_pulretrycount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulretrycount_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_ChangePIN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_ChangePIN)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_ChangePIN* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_ChangePIN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_ChangePIN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_ChangePIN)
    MergeFrom(*source);
  }
}

void Rsp_SKF_ChangePIN::MergeFrom(const Rsp_SKF_ChangePIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_ChangePIN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pulretrycount()) {
    mutable_pulretrycount()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulretrycount());
  }
}

void Rsp_SKF_ChangePIN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_ChangePIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_ChangePIN::CopyFrom(const Rsp_SKF_ChangePIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_ChangePIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_ChangePIN::IsInitialized() const {
  return true;
}

void Rsp_SKF_ChangePIN::Swap(Rsp_SKF_ChangePIN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_ChangePIN::InternalSwap(Rsp_SKF_ChangePIN* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pulretrycount_, other->pulretrycount_);
}

::google::protobuf::Metadata Rsp_SKF_ChangePIN::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_GetPINInfo::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_GetPINInfo_default_instance_._instance.get_mutable()->happlication_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_GetPINInfo_default_instance_._instance.get_mutable()->ulpintype_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_GetPINInfo_default_instance_._instance.get_mutable()->pulmaxretrycount_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_GetPINInfo_default_instance_._instance.get_mutable()->pulremainretrycount_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_GetPINInfo_default_instance_._instance.get_mutable()->pbdefaultpin_ = const_cast< ::com::westone::skf::WST_PROTO_BOOL*>(
      ::com::westone::skf::WST_PROTO_BOOL::internal_default_instance());
}
class Req_SKF_GetPINInfo::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& happlication(const Req_SKF_GetPINInfo* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulpintype(const Req_SKF_GetPINInfo* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& pulmaxretrycount(const Req_SKF_GetPINInfo* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& pulremainretrycount(const Req_SKF_GetPINInfo* msg);
  static const ::com::westone::skf::WST_PROTO_BOOL& pbdefaultpin(const Req_SKF_GetPINInfo* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GetPINInfo::HasBitSetters::happlication(const Req_SKF_GetPINInfo* msg) {
  return *msg->happlication_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GetPINInfo::HasBitSetters::ulpintype(const Req_SKF_GetPINInfo* msg) {
  return *msg->ulpintype_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GetPINInfo::HasBitSetters::pulmaxretrycount(const Req_SKF_GetPINInfo* msg) {
  return *msg->pulmaxretrycount_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GetPINInfo::HasBitSetters::pulremainretrycount(const Req_SKF_GetPINInfo* msg) {
  return *msg->pulremainretrycount_;
}
const ::com::westone::skf::WST_PROTO_BOOL&
Req_SKF_GetPINInfo::HasBitSetters::pbdefaultpin(const Req_SKF_GetPINInfo* msg) {
  return *msg->pbdefaultpin_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_GetPINInfo::kHApplicationFieldNumber;
const int Req_SKF_GetPINInfo::kUlPINTypeFieldNumber;
const int Req_SKF_GetPINInfo::kPulMaxRetryCountFieldNumber;
const int Req_SKF_GetPINInfo::kPulRemainRetryCountFieldNumber;
const int Req_SKF_GetPINInfo::kPbDefaultPinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_GetPINInfo::Req_SKF_GetPINInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_GetPINInfo)
}
Req_SKF_GetPINInfo::Req_SKF_GetPINInfo(const Req_SKF_GetPINInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_happlication()) {
    happlication_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.happlication_);
  } else {
    happlication_ = nullptr;
  }
  if (from.has_ulpintype()) {
    ulpintype_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulpintype_);
  } else {
    ulpintype_ = nullptr;
  }
  if (from.has_pulmaxretrycount()) {
    pulmaxretrycount_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulmaxretrycount_);
  } else {
    pulmaxretrycount_ = nullptr;
  }
  if (from.has_pulremainretrycount()) {
    pulremainretrycount_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulremainretrycount_);
  } else {
    pulremainretrycount_ = nullptr;
  }
  if (from.has_pbdefaultpin()) {
    pbdefaultpin_ = new ::com::westone::skf::WST_PROTO_BOOL(*from.pbdefaultpin_);
  } else {
    pbdefaultpin_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_GetPINInfo)
}

void Req_SKF_GetPINInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_GetPINInfo_skf_2eproto.base);
  ::memset(&happlication_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pbdefaultpin_) -
      reinterpret_cast<char*>(&happlication_)) + sizeof(pbdefaultpin_));
}

Req_SKF_GetPINInfo::~Req_SKF_GetPINInfo() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_GetPINInfo)
  SharedDtor();
}

void Req_SKF_GetPINInfo::SharedDtor() {
  if (this != internal_default_instance()) delete happlication_;
  if (this != internal_default_instance()) delete ulpintype_;
  if (this != internal_default_instance()) delete pulmaxretrycount_;
  if (this != internal_default_instance()) delete pulremainretrycount_;
  if (this != internal_default_instance()) delete pbdefaultpin_;
}

void Req_SKF_GetPINInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_GetPINInfo& Req_SKF_GetPINInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_GetPINInfo_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_GetPINInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_GetPINInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulpintype_ != nullptr) {
    delete ulpintype_;
  }
  ulpintype_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pulmaxretrycount_ != nullptr) {
    delete pulmaxretrycount_;
  }
  pulmaxretrycount_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pulremainretrycount_ != nullptr) {
    delete pulremainretrycount_;
  }
  pulremainretrycount_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pbdefaultpin_ != nullptr) {
    delete pbdefaultpin_;
  }
  pbdefaultpin_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_GetPINInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_GetPINInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_happlication();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulPINType = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulpintype();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulMaxRetryCount = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulmaxretrycount();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulRemainRetryCount = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulremainretrycount();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_BOOL pbDefaultPin = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_BOOL::_InternalParse;
        object = msg->mutable_pbdefaultpin();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_GetPINInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_GetPINInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_happlication()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulPINType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulpintype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulMaxRetryCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulmaxretrycount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulRemainRetryCount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulremainretrycount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_BOOL pbDefaultPin = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pbdefaultpin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_GetPINInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_GetPINInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_GetPINInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_GetPINInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::happlication(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulPINType = 2;
  if (this->has_ulpintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::ulpintype(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulMaxRetryCount = 3;
  if (this->has_pulmaxretrycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::pulmaxretrycount(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulRemainRetryCount = 4;
  if (this->has_pulremainretrycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::pulremainretrycount(this), output);
  }

  // .com.westone.skf.WST_PROTO_BOOL pbDefaultPin = 5;
  if (this->has_pbdefaultpin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::pbdefaultpin(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_GetPINInfo)
}

::google::protobuf::uint8* Req_SKF_GetPINInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_GetPINInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::happlication(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulPINType = 2;
  if (this->has_ulpintype()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::ulpintype(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulMaxRetryCount = 3;
  if (this->has_pulmaxretrycount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::pulmaxretrycount(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulRemainRetryCount = 4;
  if (this->has_pulremainretrycount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::pulremainretrycount(this), target);
  }

  // .com.westone.skf.WST_PROTO_BOOL pbDefaultPin = 5;
  if (this->has_pbdefaultpin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::pbdefaultpin(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_GetPINInfo)
  return target;
}

size_t Req_SKF_GetPINInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_GetPINInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *happlication_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulPINType = 2;
  if (this->has_ulpintype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulpintype_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulMaxRetryCount = 3;
  if (this->has_pulmaxretrycount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulmaxretrycount_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulRemainRetryCount = 4;
  if (this->has_pulremainretrycount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulremainretrycount_);
  }

  // .com.westone.skf.WST_PROTO_BOOL pbDefaultPin = 5;
  if (this->has_pbdefaultpin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pbdefaultpin_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_GetPINInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_GetPINInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_GetPINInfo* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_GetPINInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_GetPINInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_GetPINInfo)
    MergeFrom(*source);
  }
}

void Req_SKF_GetPINInfo::MergeFrom(const Req_SKF_GetPINInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_GetPINInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_happlication()) {
    mutable_happlication()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.happlication());
  }
  if (from.has_ulpintype()) {
    mutable_ulpintype()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulpintype());
  }
  if (from.has_pulmaxretrycount()) {
    mutable_pulmaxretrycount()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulmaxretrycount());
  }
  if (from.has_pulremainretrycount()) {
    mutable_pulremainretrycount()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulremainretrycount());
  }
  if (from.has_pbdefaultpin()) {
    mutable_pbdefaultpin()->::com::westone::skf::WST_PROTO_BOOL::MergeFrom(from.pbdefaultpin());
  }
}

void Req_SKF_GetPINInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_GetPINInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_GetPINInfo::CopyFrom(const Req_SKF_GetPINInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_GetPINInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_GetPINInfo::IsInitialized() const {
  return true;
}

void Req_SKF_GetPINInfo::Swap(Req_SKF_GetPINInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_GetPINInfo::InternalSwap(Req_SKF_GetPINInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(happlication_, other->happlication_);
  swap(ulpintype_, other->ulpintype_);
  swap(pulmaxretrycount_, other->pulmaxretrycount_);
  swap(pulremainretrycount_, other->pulremainretrycount_);
  swap(pbdefaultpin_, other->pbdefaultpin_);
}

::google::protobuf::Metadata Req_SKF_GetPINInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_GetPINInfo::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_GetPINInfo_default_instance_._instance.get_mutable()->pulmaxretrycount_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Rsp_SKF_GetPINInfo_default_instance_._instance.get_mutable()->pulremainretrycount_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Rsp_SKF_GetPINInfo_default_instance_._instance.get_mutable()->pbdefaultpin_ = const_cast< ::com::westone::skf::WST_PROTO_BOOL*>(
      ::com::westone::skf::WST_PROTO_BOOL::internal_default_instance());
}
class Rsp_SKF_GetPINInfo::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& pulmaxretrycount(const Rsp_SKF_GetPINInfo* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& pulremainretrycount(const Rsp_SKF_GetPINInfo* msg);
  static const ::com::westone::skf::WST_PROTO_BOOL& pbdefaultpin(const Rsp_SKF_GetPINInfo* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_GetPINInfo::HasBitSetters::pulmaxretrycount(const Rsp_SKF_GetPINInfo* msg) {
  return *msg->pulmaxretrycount_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_GetPINInfo::HasBitSetters::pulremainretrycount(const Rsp_SKF_GetPINInfo* msg) {
  return *msg->pulremainretrycount_;
}
const ::com::westone::skf::WST_PROTO_BOOL&
Rsp_SKF_GetPINInfo::HasBitSetters::pbdefaultpin(const Rsp_SKF_GetPINInfo* msg) {
  return *msg->pbdefaultpin_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_GetPINInfo::kPulMaxRetryCountFieldNumber;
const int Rsp_SKF_GetPINInfo::kPulRemainRetryCountFieldNumber;
const int Rsp_SKF_GetPINInfo::kPbDefaultPinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_GetPINInfo::Rsp_SKF_GetPINInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_GetPINInfo)
}
Rsp_SKF_GetPINInfo::Rsp_SKF_GetPINInfo(const Rsp_SKF_GetPINInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pulmaxretrycount()) {
    pulmaxretrycount_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulmaxretrycount_);
  } else {
    pulmaxretrycount_ = nullptr;
  }
  if (from.has_pulremainretrycount()) {
    pulremainretrycount_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulremainretrycount_);
  } else {
    pulremainretrycount_ = nullptr;
  }
  if (from.has_pbdefaultpin()) {
    pbdefaultpin_ = new ::com::westone::skf::WST_PROTO_BOOL(*from.pbdefaultpin_);
  } else {
    pbdefaultpin_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_GetPINInfo)
}

void Rsp_SKF_GetPINInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_GetPINInfo_skf_2eproto.base);
  ::memset(&pulmaxretrycount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pbdefaultpin_) -
      reinterpret_cast<char*>(&pulmaxretrycount_)) + sizeof(pbdefaultpin_));
}

Rsp_SKF_GetPINInfo::~Rsp_SKF_GetPINInfo() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_GetPINInfo)
  SharedDtor();
}

void Rsp_SKF_GetPINInfo::SharedDtor() {
  if (this != internal_default_instance()) delete pulmaxretrycount_;
  if (this != internal_default_instance()) delete pulremainretrycount_;
  if (this != internal_default_instance()) delete pbdefaultpin_;
}

void Rsp_SKF_GetPINInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_GetPINInfo& Rsp_SKF_GetPINInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_GetPINInfo_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_GetPINInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_GetPINInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pulmaxretrycount_ != nullptr) {
    delete pulmaxretrycount_;
  }
  pulmaxretrycount_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pulremainretrycount_ != nullptr) {
    delete pulremainretrycount_;
  }
  pulremainretrycount_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pbdefaultpin_ != nullptr) {
    delete pbdefaultpin_;
  }
  pbdefaultpin_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_GetPINInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_GetPINInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 pulMaxRetryCount = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulmaxretrycount();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulRemainRetryCount = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulremainretrycount();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_BOOL pbDefaultPin = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_BOOL::_InternalParse;
        object = msg->mutable_pbdefaultpin();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_GetPINInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_GetPINInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 pulMaxRetryCount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulmaxretrycount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulRemainRetryCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulremainretrycount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_BOOL pbDefaultPin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pbdefaultpin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_GetPINInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_GetPINInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_GetPINInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_GetPINInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 pulMaxRetryCount = 1;
  if (this->has_pulmaxretrycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::pulmaxretrycount(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulRemainRetryCount = 2;
  if (this->has_pulremainretrycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pulremainretrycount(this), output);
  }

  // .com.westone.skf.WST_PROTO_BOOL pbDefaultPin = 3;
  if (this->has_pbdefaultpin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::pbdefaultpin(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_GetPINInfo)
}

::google::protobuf::uint8* Rsp_SKF_GetPINInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_GetPINInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 pulMaxRetryCount = 1;
  if (this->has_pulmaxretrycount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::pulmaxretrycount(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulRemainRetryCount = 2;
  if (this->has_pulremainretrycount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pulremainretrycount(this), target);
  }

  // .com.westone.skf.WST_PROTO_BOOL pbDefaultPin = 3;
  if (this->has_pbdefaultpin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::pbdefaultpin(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_GetPINInfo)
  return target;
}

size_t Rsp_SKF_GetPINInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_GetPINInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 pulMaxRetryCount = 1;
  if (this->has_pulmaxretrycount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulmaxretrycount_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulRemainRetryCount = 2;
  if (this->has_pulremainretrycount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulremainretrycount_);
  }

  // .com.westone.skf.WST_PROTO_BOOL pbDefaultPin = 3;
  if (this->has_pbdefaultpin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pbdefaultpin_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_GetPINInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_GetPINInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_GetPINInfo* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_GetPINInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_GetPINInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_GetPINInfo)
    MergeFrom(*source);
  }
}

void Rsp_SKF_GetPINInfo::MergeFrom(const Rsp_SKF_GetPINInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_GetPINInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pulmaxretrycount()) {
    mutable_pulmaxretrycount()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulmaxretrycount());
  }
  if (from.has_pulremainretrycount()) {
    mutable_pulremainretrycount()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulremainretrycount());
  }
  if (from.has_pbdefaultpin()) {
    mutable_pbdefaultpin()->::com::westone::skf::WST_PROTO_BOOL::MergeFrom(from.pbdefaultpin());
  }
}

void Rsp_SKF_GetPINInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_GetPINInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_GetPINInfo::CopyFrom(const Rsp_SKF_GetPINInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_GetPINInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_GetPINInfo::IsInitialized() const {
  return true;
}

void Rsp_SKF_GetPINInfo::Swap(Rsp_SKF_GetPINInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_GetPINInfo::InternalSwap(Rsp_SKF_GetPINInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pulmaxretrycount_, other->pulmaxretrycount_);
  swap(pulremainretrycount_, other->pulremainretrycount_);
  swap(pbdefaultpin_, other->pbdefaultpin_);
}

::google::protobuf::Metadata Rsp_SKF_GetPINInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_VerifyPIN::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_VerifyPIN_default_instance_._instance.get_mutable()->happlication_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_VerifyPIN_default_instance_._instance.get_mutable()->ulpintype_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_VerifyPIN_default_instance_._instance.get_mutable()->pulretrycount_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_VerifyPIN::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& happlication(const Req_SKF_VerifyPIN* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulpintype(const Req_SKF_VerifyPIN* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& pulretrycount(const Req_SKF_VerifyPIN* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_VerifyPIN::HasBitSetters::happlication(const Req_SKF_VerifyPIN* msg) {
  return *msg->happlication_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_VerifyPIN::HasBitSetters::ulpintype(const Req_SKF_VerifyPIN* msg) {
  return *msg->ulpintype_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_VerifyPIN::HasBitSetters::pulretrycount(const Req_SKF_VerifyPIN* msg) {
  return *msg->pulretrycount_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_VerifyPIN::kHApplicationFieldNumber;
const int Req_SKF_VerifyPIN::kUlPINTypeFieldNumber;
const int Req_SKF_VerifyPIN::kSzPINFieldNumber;
const int Req_SKF_VerifyPIN::kPulRetryCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_VerifyPIN::Req_SKF_VerifyPIN()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_VerifyPIN)
}
Req_SKF_VerifyPIN::Req_SKF_VerifyPIN(const Req_SKF_VerifyPIN& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szpin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szpin().size() > 0) {
    szpin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szpin_);
  }
  if (from.has_happlication()) {
    happlication_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.happlication_);
  } else {
    happlication_ = nullptr;
  }
  if (from.has_ulpintype()) {
    ulpintype_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulpintype_);
  } else {
    ulpintype_ = nullptr;
  }
  if (from.has_pulretrycount()) {
    pulretrycount_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulretrycount_);
  } else {
    pulretrycount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_VerifyPIN)
}

void Req_SKF_VerifyPIN::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_VerifyPIN_skf_2eproto.base);
  szpin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&happlication_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pulretrycount_) -
      reinterpret_cast<char*>(&happlication_)) + sizeof(pulretrycount_));
}

Req_SKF_VerifyPIN::~Req_SKF_VerifyPIN() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_VerifyPIN)
  SharedDtor();
}

void Req_SKF_VerifyPIN::SharedDtor() {
  szpin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete happlication_;
  if (this != internal_default_instance()) delete ulpintype_;
  if (this != internal_default_instance()) delete pulretrycount_;
}

void Req_SKF_VerifyPIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_VerifyPIN& Req_SKF_VerifyPIN::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_VerifyPIN_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_VerifyPIN::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_VerifyPIN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szpin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulpintype_ != nullptr) {
    delete ulpintype_;
  }
  ulpintype_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pulretrycount_ != nullptr) {
    delete pulretrycount_;
  }
  pulretrycount_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_VerifyPIN::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_VerifyPIN*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_happlication();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulPINType = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulpintype();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string szPIN = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.westone.skf.Req_SKF_VerifyPIN.szPIN");
        object = msg->mutable_szpin();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulretrycount();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_VerifyPIN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_VerifyPIN)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_happlication()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulPINType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulpintype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szPIN = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szpin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szpin().data(), static_cast<int>(this->szpin().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.westone.skf.Req_SKF_VerifyPIN.szPIN"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulretrycount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_VerifyPIN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_VerifyPIN)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_VerifyPIN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_VerifyPIN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::happlication(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulPINType = 2;
  if (this->has_ulpintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::ulpintype(this), output);
  }

  // string szPIN = 3;
  if (this->szpin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szpin().data(), static_cast<int>(this->szpin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_VerifyPIN.szPIN");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->szpin(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 4;
  if (this->has_pulretrycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::pulretrycount(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_VerifyPIN)
}

::google::protobuf::uint8* Req_SKF_VerifyPIN::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_VerifyPIN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::happlication(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulPINType = 2;
  if (this->has_ulpintype()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::ulpintype(this), target);
  }

  // string szPIN = 3;
  if (this->szpin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szpin().data(), static_cast<int>(this->szpin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_VerifyPIN.szPIN");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->szpin(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 4;
  if (this->has_pulretrycount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::pulretrycount(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_VerifyPIN)
  return target;
}

size_t Req_SKF_VerifyPIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_VerifyPIN)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string szPIN = 3;
  if (this->szpin().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szpin());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *happlication_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulPINType = 2;
  if (this->has_ulpintype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulpintype_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 4;
  if (this->has_pulretrycount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulretrycount_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_VerifyPIN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_VerifyPIN)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_VerifyPIN* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_VerifyPIN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_VerifyPIN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_VerifyPIN)
    MergeFrom(*source);
  }
}

void Req_SKF_VerifyPIN::MergeFrom(const Req_SKF_VerifyPIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_VerifyPIN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.szpin().size() > 0) {

    szpin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szpin_);
  }
  if (from.has_happlication()) {
    mutable_happlication()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.happlication());
  }
  if (from.has_ulpintype()) {
    mutable_ulpintype()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulpintype());
  }
  if (from.has_pulretrycount()) {
    mutable_pulretrycount()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulretrycount());
  }
}

void Req_SKF_VerifyPIN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_VerifyPIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_VerifyPIN::CopyFrom(const Req_SKF_VerifyPIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_VerifyPIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_VerifyPIN::IsInitialized() const {
  return true;
}

void Req_SKF_VerifyPIN::Swap(Req_SKF_VerifyPIN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_VerifyPIN::InternalSwap(Req_SKF_VerifyPIN* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  szpin_.Swap(&other->szpin_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(happlication_, other->happlication_);
  swap(ulpintype_, other->ulpintype_);
  swap(pulretrycount_, other->pulretrycount_);
}

::google::protobuf::Metadata Req_SKF_VerifyPIN::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_VerifyPIN::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_VerifyPIN_default_instance_._instance.get_mutable()->pulretrycount_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_VerifyPIN::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& pulretrycount(const Rsp_SKF_VerifyPIN* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_VerifyPIN::HasBitSetters::pulretrycount(const Rsp_SKF_VerifyPIN* msg) {
  return *msg->pulretrycount_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_VerifyPIN::kPulRetryCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_VerifyPIN::Rsp_SKF_VerifyPIN()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_VerifyPIN)
}
Rsp_SKF_VerifyPIN::Rsp_SKF_VerifyPIN(const Rsp_SKF_VerifyPIN& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pulretrycount()) {
    pulretrycount_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulretrycount_);
  } else {
    pulretrycount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_VerifyPIN)
}

void Rsp_SKF_VerifyPIN::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_VerifyPIN_skf_2eproto.base);
  pulretrycount_ = nullptr;
}

Rsp_SKF_VerifyPIN::~Rsp_SKF_VerifyPIN() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_VerifyPIN)
  SharedDtor();
}

void Rsp_SKF_VerifyPIN::SharedDtor() {
  if (this != internal_default_instance()) delete pulretrycount_;
}

void Rsp_SKF_VerifyPIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_VerifyPIN& Rsp_SKF_VerifyPIN::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_VerifyPIN_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_VerifyPIN::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_VerifyPIN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pulretrycount_ != nullptr) {
    delete pulretrycount_;
  }
  pulretrycount_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_VerifyPIN::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_VerifyPIN*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulretrycount();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_VerifyPIN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_VerifyPIN)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulretrycount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_VerifyPIN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_VerifyPIN)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_VerifyPIN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_VerifyPIN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 1;
  if (this->has_pulretrycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::pulretrycount(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_VerifyPIN)
}

::google::protobuf::uint8* Rsp_SKF_VerifyPIN::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_VerifyPIN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 1;
  if (this->has_pulretrycount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::pulretrycount(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_VerifyPIN)
  return target;
}

size_t Rsp_SKF_VerifyPIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_VerifyPIN)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 1;
  if (this->has_pulretrycount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulretrycount_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_VerifyPIN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_VerifyPIN)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_VerifyPIN* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_VerifyPIN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_VerifyPIN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_VerifyPIN)
    MergeFrom(*source);
  }
}

void Rsp_SKF_VerifyPIN::MergeFrom(const Rsp_SKF_VerifyPIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_VerifyPIN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pulretrycount()) {
    mutable_pulretrycount()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulretrycount());
  }
}

void Rsp_SKF_VerifyPIN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_VerifyPIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_VerifyPIN::CopyFrom(const Rsp_SKF_VerifyPIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_VerifyPIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_VerifyPIN::IsInitialized() const {
  return true;
}

void Rsp_SKF_VerifyPIN::Swap(Rsp_SKF_VerifyPIN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_VerifyPIN::InternalSwap(Rsp_SKF_VerifyPIN* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pulretrycount_, other->pulretrycount_);
}

::google::protobuf::Metadata Rsp_SKF_VerifyPIN::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_UnblockPIN::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_UnblockPIN_default_instance_._instance.get_mutable()->happlication_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_UnblockPIN_default_instance_._instance.get_mutable()->pulretrycount_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_UnblockPIN::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& happlication(const Req_SKF_UnblockPIN* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& pulretrycount(const Req_SKF_UnblockPIN* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_UnblockPIN::HasBitSetters::happlication(const Req_SKF_UnblockPIN* msg) {
  return *msg->happlication_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_UnblockPIN::HasBitSetters::pulretrycount(const Req_SKF_UnblockPIN* msg) {
  return *msg->pulretrycount_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_UnblockPIN::kHApplicationFieldNumber;
const int Req_SKF_UnblockPIN::kSzAdminPINFieldNumber;
const int Req_SKF_UnblockPIN::kSzNewUserPINFieldNumber;
const int Req_SKF_UnblockPIN::kPulRetryCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_UnblockPIN::Req_SKF_UnblockPIN()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_UnblockPIN)
}
Req_SKF_UnblockPIN::Req_SKF_UnblockPIN(const Req_SKF_UnblockPIN& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szadminpin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szadminpin().size() > 0) {
    szadminpin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szadminpin_);
  }
  sznewuserpin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sznewuserpin().size() > 0) {
    sznewuserpin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sznewuserpin_);
  }
  if (from.has_happlication()) {
    happlication_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.happlication_);
  } else {
    happlication_ = nullptr;
  }
  if (from.has_pulretrycount()) {
    pulretrycount_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulretrycount_);
  } else {
    pulretrycount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_UnblockPIN)
}

void Req_SKF_UnblockPIN::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_UnblockPIN_skf_2eproto.base);
  szadminpin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sznewuserpin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&happlication_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pulretrycount_) -
      reinterpret_cast<char*>(&happlication_)) + sizeof(pulretrycount_));
}

Req_SKF_UnblockPIN::~Req_SKF_UnblockPIN() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_UnblockPIN)
  SharedDtor();
}

void Req_SKF_UnblockPIN::SharedDtor() {
  szadminpin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sznewuserpin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete happlication_;
  if (this != internal_default_instance()) delete pulretrycount_;
}

void Req_SKF_UnblockPIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_UnblockPIN& Req_SKF_UnblockPIN::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_UnblockPIN_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_UnblockPIN::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_UnblockPIN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szadminpin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sznewuserpin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pulretrycount_ != nullptr) {
    delete pulretrycount_;
  }
  pulretrycount_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_UnblockPIN::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_UnblockPIN*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_happlication();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string szAdminPIN = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.westone.skf.Req_SKF_UnblockPIN.szAdminPIN");
        object = msg->mutable_szadminpin();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string szNewUserPIN = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.westone.skf.Req_SKF_UnblockPIN.szNewUserPIN");
        object = msg->mutable_sznewuserpin();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulretrycount();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_UnblockPIN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_UnblockPIN)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_happlication()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szAdminPIN = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szadminpin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szadminpin().data(), static_cast<int>(this->szadminpin().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.westone.skf.Req_SKF_UnblockPIN.szAdminPIN"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szNewUserPIN = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sznewuserpin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sznewuserpin().data(), static_cast<int>(this->sznewuserpin().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.westone.skf.Req_SKF_UnblockPIN.szNewUserPIN"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulretrycount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_UnblockPIN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_UnblockPIN)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_UnblockPIN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_UnblockPIN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::happlication(this), output);
  }

  // string szAdminPIN = 2;
  if (this->szadminpin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szadminpin().data(), static_cast<int>(this->szadminpin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_UnblockPIN.szAdminPIN");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szadminpin(), output);
  }

  // string szNewUserPIN = 3;
  if (this->sznewuserpin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sznewuserpin().data(), static_cast<int>(this->sznewuserpin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_UnblockPIN.szNewUserPIN");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sznewuserpin(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 4;
  if (this->has_pulretrycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::pulretrycount(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_UnblockPIN)
}

::google::protobuf::uint8* Req_SKF_UnblockPIN::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_UnblockPIN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::happlication(this), target);
  }

  // string szAdminPIN = 2;
  if (this->szadminpin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szadminpin().data(), static_cast<int>(this->szadminpin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_UnblockPIN.szAdminPIN");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->szadminpin(), target);
  }

  // string szNewUserPIN = 3;
  if (this->sznewuserpin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sznewuserpin().data(), static_cast<int>(this->sznewuserpin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_UnblockPIN.szNewUserPIN");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sznewuserpin(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 4;
  if (this->has_pulretrycount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::pulretrycount(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_UnblockPIN)
  return target;
}

size_t Req_SKF_UnblockPIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_UnblockPIN)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string szAdminPIN = 2;
  if (this->szadminpin().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szadminpin());
  }

  // string szNewUserPIN = 3;
  if (this->sznewuserpin().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sznewuserpin());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *happlication_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 4;
  if (this->has_pulretrycount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulretrycount_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_UnblockPIN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_UnblockPIN)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_UnblockPIN* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_UnblockPIN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_UnblockPIN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_UnblockPIN)
    MergeFrom(*source);
  }
}

void Req_SKF_UnblockPIN::MergeFrom(const Req_SKF_UnblockPIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_UnblockPIN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.szadminpin().size() > 0) {

    szadminpin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szadminpin_);
  }
  if (from.sznewuserpin().size() > 0) {

    sznewuserpin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sznewuserpin_);
  }
  if (from.has_happlication()) {
    mutable_happlication()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.happlication());
  }
  if (from.has_pulretrycount()) {
    mutable_pulretrycount()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulretrycount());
  }
}

void Req_SKF_UnblockPIN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_UnblockPIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_UnblockPIN::CopyFrom(const Req_SKF_UnblockPIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_UnblockPIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_UnblockPIN::IsInitialized() const {
  return true;
}

void Req_SKF_UnblockPIN::Swap(Req_SKF_UnblockPIN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_UnblockPIN::InternalSwap(Req_SKF_UnblockPIN* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  szadminpin_.Swap(&other->szadminpin_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sznewuserpin_.Swap(&other->sznewuserpin_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(happlication_, other->happlication_);
  swap(pulretrycount_, other->pulretrycount_);
}

::google::protobuf::Metadata Req_SKF_UnblockPIN::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_UnblockPIN::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_UnblockPIN_default_instance_._instance.get_mutable()->pulretrycount_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_UnblockPIN::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& pulretrycount(const Rsp_SKF_UnblockPIN* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_UnblockPIN::HasBitSetters::pulretrycount(const Rsp_SKF_UnblockPIN* msg) {
  return *msg->pulretrycount_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_UnblockPIN::kPulRetryCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_UnblockPIN::Rsp_SKF_UnblockPIN()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_UnblockPIN)
}
Rsp_SKF_UnblockPIN::Rsp_SKF_UnblockPIN(const Rsp_SKF_UnblockPIN& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pulretrycount()) {
    pulretrycount_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulretrycount_);
  } else {
    pulretrycount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_UnblockPIN)
}

void Rsp_SKF_UnblockPIN::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_UnblockPIN_skf_2eproto.base);
  pulretrycount_ = nullptr;
}

Rsp_SKF_UnblockPIN::~Rsp_SKF_UnblockPIN() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_UnblockPIN)
  SharedDtor();
}

void Rsp_SKF_UnblockPIN::SharedDtor() {
  if (this != internal_default_instance()) delete pulretrycount_;
}

void Rsp_SKF_UnblockPIN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_UnblockPIN& Rsp_SKF_UnblockPIN::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_UnblockPIN_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_UnblockPIN::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_UnblockPIN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pulretrycount_ != nullptr) {
    delete pulretrycount_;
  }
  pulretrycount_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_UnblockPIN::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_UnblockPIN*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulretrycount();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_UnblockPIN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_UnblockPIN)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulretrycount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_UnblockPIN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_UnblockPIN)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_UnblockPIN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_UnblockPIN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 1;
  if (this->has_pulretrycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::pulretrycount(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_UnblockPIN)
}

::google::protobuf::uint8* Rsp_SKF_UnblockPIN::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_UnblockPIN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 1;
  if (this->has_pulretrycount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::pulretrycount(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_UnblockPIN)
  return target;
}

size_t Rsp_SKF_UnblockPIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_UnblockPIN)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 1;
  if (this->has_pulretrycount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulretrycount_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_UnblockPIN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_UnblockPIN)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_UnblockPIN* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_UnblockPIN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_UnblockPIN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_UnblockPIN)
    MergeFrom(*source);
  }
}

void Rsp_SKF_UnblockPIN::MergeFrom(const Rsp_SKF_UnblockPIN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_UnblockPIN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pulretrycount()) {
    mutable_pulretrycount()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulretrycount());
  }
}

void Rsp_SKF_UnblockPIN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_UnblockPIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_UnblockPIN::CopyFrom(const Rsp_SKF_UnblockPIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_UnblockPIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_UnblockPIN::IsInitialized() const {
  return true;
}

void Rsp_SKF_UnblockPIN::Swap(Rsp_SKF_UnblockPIN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_UnblockPIN::InternalSwap(Rsp_SKF_UnblockPIN* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pulretrycount_, other->pulretrycount_);
}

::google::protobuf::Metadata Rsp_SKF_UnblockPIN::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_ClearSecureState::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_ClearSecureState_default_instance_._instance.get_mutable()->happlication_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_ClearSecureState::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& happlication(const Req_SKF_ClearSecureState* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ClearSecureState::HasBitSetters::happlication(const Req_SKF_ClearSecureState* msg) {
  return *msg->happlication_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_ClearSecureState::kHApplicationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_ClearSecureState::Req_SKF_ClearSecureState()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_ClearSecureState)
}
Req_SKF_ClearSecureState::Req_SKF_ClearSecureState(const Req_SKF_ClearSecureState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_happlication()) {
    happlication_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.happlication_);
  } else {
    happlication_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_ClearSecureState)
}

void Req_SKF_ClearSecureState::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_ClearSecureState_skf_2eproto.base);
  happlication_ = nullptr;
}

Req_SKF_ClearSecureState::~Req_SKF_ClearSecureState() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_ClearSecureState)
  SharedDtor();
}

void Req_SKF_ClearSecureState::SharedDtor() {
  if (this != internal_default_instance()) delete happlication_;
}

void Req_SKF_ClearSecureState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_ClearSecureState& Req_SKF_ClearSecureState::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_ClearSecureState_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_ClearSecureState::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_ClearSecureState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_ClearSecureState::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_ClearSecureState*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_happlication();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_ClearSecureState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_ClearSecureState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_happlication()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_ClearSecureState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_ClearSecureState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_ClearSecureState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_ClearSecureState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::happlication(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_ClearSecureState)
}

::google::protobuf::uint8* Req_SKF_ClearSecureState::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_ClearSecureState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::happlication(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_ClearSecureState)
  return target;
}

size_t Req_SKF_ClearSecureState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_ClearSecureState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *happlication_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_ClearSecureState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_ClearSecureState)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_ClearSecureState* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_ClearSecureState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_ClearSecureState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_ClearSecureState)
    MergeFrom(*source);
  }
}

void Req_SKF_ClearSecureState::MergeFrom(const Req_SKF_ClearSecureState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_ClearSecureState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_happlication()) {
    mutable_happlication()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.happlication());
  }
}

void Req_SKF_ClearSecureState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_ClearSecureState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_ClearSecureState::CopyFrom(const Req_SKF_ClearSecureState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_ClearSecureState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_ClearSecureState::IsInitialized() const {
  return true;
}

void Req_SKF_ClearSecureState::Swap(Req_SKF_ClearSecureState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_ClearSecureState::InternalSwap(Req_SKF_ClearSecureState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(happlication_, other->happlication_);
}

::google::protobuf::Metadata Req_SKF_ClearSecureState::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_ClearSecureState::InitAsDefaultInstance() {
}
class Rsp_SKF_ClearSecureState::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_ClearSecureState::Rsp_SKF_ClearSecureState()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_ClearSecureState)
}
Rsp_SKF_ClearSecureState::Rsp_SKF_ClearSecureState(const Rsp_SKF_ClearSecureState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_ClearSecureState)
}

void Rsp_SKF_ClearSecureState::SharedCtor() {
}

Rsp_SKF_ClearSecureState::~Rsp_SKF_ClearSecureState() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_ClearSecureState)
  SharedDtor();
}

void Rsp_SKF_ClearSecureState::SharedDtor() {
}

void Rsp_SKF_ClearSecureState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_ClearSecureState& Rsp_SKF_ClearSecureState::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_ClearSecureState_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_ClearSecureState::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_ClearSecureState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_ClearSecureState::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_ClearSecureState*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_ClearSecureState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_ClearSecureState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_ClearSecureState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_ClearSecureState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_ClearSecureState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_ClearSecureState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_ClearSecureState)
}

::google::protobuf::uint8* Rsp_SKF_ClearSecureState::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_ClearSecureState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_ClearSecureState)
  return target;
}

size_t Rsp_SKF_ClearSecureState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_ClearSecureState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_ClearSecureState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_ClearSecureState)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_ClearSecureState* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_ClearSecureState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_ClearSecureState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_ClearSecureState)
    MergeFrom(*source);
  }
}

void Rsp_SKF_ClearSecureState::MergeFrom(const Rsp_SKF_ClearSecureState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_ClearSecureState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rsp_SKF_ClearSecureState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_ClearSecureState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_ClearSecureState::CopyFrom(const Rsp_SKF_ClearSecureState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_ClearSecureState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_ClearSecureState::IsInitialized() const {
  return true;
}

void Rsp_SKF_ClearSecureState::Swap(Rsp_SKF_ClearSecureState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_ClearSecureState::InternalSwap(Rsp_SKF_ClearSecureState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rsp_SKF_ClearSecureState::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_CreateApplication::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_CreateApplication_default_instance_._instance.get_mutable()->hdev_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_CreateApplication_default_instance_._instance.get_mutable()->dwadminpinretrycount_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_CreateApplication_default_instance_._instance.get_mutable()->dwuserpinretrycount_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_CreateApplication_default_instance_._instance.get_mutable()->dwcreatefilerights_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_CreateApplication_default_instance_._instance.get_mutable()->phapplication_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_CreateApplication::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hdev(const Req_SKF_CreateApplication* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& dwadminpinretrycount(const Req_SKF_CreateApplication* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& dwuserpinretrycount(const Req_SKF_CreateApplication* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& dwcreatefilerights(const Req_SKF_CreateApplication* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& phapplication(const Req_SKF_CreateApplication* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_CreateApplication::HasBitSetters::hdev(const Req_SKF_CreateApplication* msg) {
  return *msg->hdev_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_CreateApplication::HasBitSetters::dwadminpinretrycount(const Req_SKF_CreateApplication* msg) {
  return *msg->dwadminpinretrycount_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_CreateApplication::HasBitSetters::dwuserpinretrycount(const Req_SKF_CreateApplication* msg) {
  return *msg->dwuserpinretrycount_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_CreateApplication::HasBitSetters::dwcreatefilerights(const Req_SKF_CreateApplication* msg) {
  return *msg->dwcreatefilerights_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_CreateApplication::HasBitSetters::phapplication(const Req_SKF_CreateApplication* msg) {
  return *msg->phapplication_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_CreateApplication::kHDevFieldNumber;
const int Req_SKF_CreateApplication::kSzAppNameFieldNumber;
const int Req_SKF_CreateApplication::kSzAdminPINFieldNumber;
const int Req_SKF_CreateApplication::kDwAdminPinRetryCountFieldNumber;
const int Req_SKF_CreateApplication::kSzUserPINFieldNumber;
const int Req_SKF_CreateApplication::kDwUserPinRetryCountFieldNumber;
const int Req_SKF_CreateApplication::kDwCreateFileRightsFieldNumber;
const int Req_SKF_CreateApplication::kPhApplicationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_CreateApplication::Req_SKF_CreateApplication()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_CreateApplication)
}
Req_SKF_CreateApplication::Req_SKF_CreateApplication(const Req_SKF_CreateApplication& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szappname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szappname().size() > 0) {
    szappname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szappname_);
  }
  szadminpin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szadminpin().size() > 0) {
    szadminpin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szadminpin_);
  }
  szuserpin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szuserpin().size() > 0) {
    szuserpin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szuserpin_);
  }
  if (from.has_hdev()) {
    hdev_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hdev_);
  } else {
    hdev_ = nullptr;
  }
  if (from.has_dwadminpinretrycount()) {
    dwadminpinretrycount_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.dwadminpinretrycount_);
  } else {
    dwadminpinretrycount_ = nullptr;
  }
  if (from.has_dwuserpinretrycount()) {
    dwuserpinretrycount_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.dwuserpinretrycount_);
  } else {
    dwuserpinretrycount_ = nullptr;
  }
  if (from.has_dwcreatefilerights()) {
    dwcreatefilerights_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.dwcreatefilerights_);
  } else {
    dwcreatefilerights_ = nullptr;
  }
  if (from.has_phapplication()) {
    phapplication_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.phapplication_);
  } else {
    phapplication_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_CreateApplication)
}

void Req_SKF_CreateApplication::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_CreateApplication_skf_2eproto.base);
  szappname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szadminpin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szuserpin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hdev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phapplication_) -
      reinterpret_cast<char*>(&hdev_)) + sizeof(phapplication_));
}

Req_SKF_CreateApplication::~Req_SKF_CreateApplication() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_CreateApplication)
  SharedDtor();
}

void Req_SKF_CreateApplication::SharedDtor() {
  szappname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szadminpin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szuserpin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hdev_;
  if (this != internal_default_instance()) delete dwadminpinretrycount_;
  if (this != internal_default_instance()) delete dwuserpinretrycount_;
  if (this != internal_default_instance()) delete dwcreatefilerights_;
  if (this != internal_default_instance()) delete phapplication_;
}

void Req_SKF_CreateApplication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_CreateApplication& Req_SKF_CreateApplication::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_CreateApplication_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_CreateApplication::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_CreateApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szappname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szadminpin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  szuserpin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && dwadminpinretrycount_ != nullptr) {
    delete dwadminpinretrycount_;
  }
  dwadminpinretrycount_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && dwuserpinretrycount_ != nullptr) {
    delete dwuserpinretrycount_;
  }
  dwuserpinretrycount_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && dwcreatefilerights_ != nullptr) {
    delete dwcreatefilerights_;
  }
  dwcreatefilerights_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && phapplication_ != nullptr) {
    delete phapplication_;
  }
  phapplication_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_CreateApplication::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_CreateApplication*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hdev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string szAppName = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.westone.skf.Req_SKF_CreateApplication.szAppName");
        object = msg->mutable_szappname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string szAdminPIN = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.westone.skf.Req_SKF_CreateApplication.szAdminPIN");
        object = msg->mutable_szadminpin();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 dwAdminPinRetryCount = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_dwadminpinretrycount();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string szUserPIN = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.westone.skf.Req_SKF_CreateApplication.szUserPIN");
        object = msg->mutable_szuserpin();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 dwUserPinRetryCount = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_dwuserpinretrycount();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 dwCreateFileRights = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_dwcreatefilerights();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 phApplication = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_phapplication();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_CreateApplication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_CreateApplication)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hdev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szAppName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szappname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szappname().data(), static_cast<int>(this->szappname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.westone.skf.Req_SKF_CreateApplication.szAppName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szAdminPIN = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szadminpin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szadminpin().data(), static_cast<int>(this->szadminpin().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.westone.skf.Req_SKF_CreateApplication.szAdminPIN"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 dwAdminPinRetryCount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dwadminpinretrycount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szUserPIN = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szuserpin()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szuserpin().data(), static_cast<int>(this->szuserpin().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.westone.skf.Req_SKF_CreateApplication.szUserPIN"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 dwUserPinRetryCount = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dwuserpinretrycount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 dwCreateFileRights = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dwcreatefilerights()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 phApplication = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phapplication()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_CreateApplication)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_CreateApplication)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_CreateApplication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_CreateApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hdev(this), output);
  }

  // string szAppName = 2;
  if (this->szappname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szappname().data(), static_cast<int>(this->szappname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_CreateApplication.szAppName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szappname(), output);
  }

  // string szAdminPIN = 3;
  if (this->szadminpin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szadminpin().data(), static_cast<int>(this->szadminpin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_CreateApplication.szAdminPIN");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->szadminpin(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 dwAdminPinRetryCount = 4;
  if (this->has_dwadminpinretrycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::dwadminpinretrycount(this), output);
  }

  // string szUserPIN = 5;
  if (this->szuserpin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szuserpin().data(), static_cast<int>(this->szuserpin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_CreateApplication.szUserPIN");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->szuserpin(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 dwUserPinRetryCount = 6;
  if (this->has_dwuserpinretrycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::dwuserpinretrycount(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 dwCreateFileRights = 7;
  if (this->has_dwcreatefilerights()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::dwcreatefilerights(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phApplication = 8;
  if (this->has_phapplication()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::phapplication(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_CreateApplication)
}

::google::protobuf::uint8* Req_SKF_CreateApplication::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_CreateApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hdev(this), target);
  }

  // string szAppName = 2;
  if (this->szappname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szappname().data(), static_cast<int>(this->szappname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_CreateApplication.szAppName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->szappname(), target);
  }

  // string szAdminPIN = 3;
  if (this->szadminpin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szadminpin().data(), static_cast<int>(this->szadminpin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_CreateApplication.szAdminPIN");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->szadminpin(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 dwAdminPinRetryCount = 4;
  if (this->has_dwadminpinretrycount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::dwadminpinretrycount(this), target);
  }

  // string szUserPIN = 5;
  if (this->szuserpin().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szuserpin().data(), static_cast<int>(this->szuserpin().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_CreateApplication.szUserPIN");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->szuserpin(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 dwUserPinRetryCount = 6;
  if (this->has_dwuserpinretrycount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::dwuserpinretrycount(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 dwCreateFileRights = 7;
  if (this->has_dwcreatefilerights()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::dwcreatefilerights(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phApplication = 8;
  if (this->has_phapplication()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::phapplication(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_CreateApplication)
  return target;
}

size_t Req_SKF_CreateApplication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_CreateApplication)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string szAppName = 2;
  if (this->szappname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szappname());
  }

  // string szAdminPIN = 3;
  if (this->szadminpin().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szadminpin());
  }

  // string szUserPIN = 5;
  if (this->szuserpin().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szuserpin());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hdev_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 dwAdminPinRetryCount = 4;
  if (this->has_dwadminpinretrycount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dwadminpinretrycount_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 dwUserPinRetryCount = 6;
  if (this->has_dwuserpinretrycount()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dwuserpinretrycount_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 dwCreateFileRights = 7;
  if (this->has_dwcreatefilerights()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dwcreatefilerights_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phApplication = 8;
  if (this->has_phapplication()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *phapplication_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_CreateApplication::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_CreateApplication)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_CreateApplication* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_CreateApplication>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_CreateApplication)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_CreateApplication)
    MergeFrom(*source);
  }
}

void Req_SKF_CreateApplication::MergeFrom(const Req_SKF_CreateApplication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_CreateApplication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.szappname().size() > 0) {

    szappname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szappname_);
  }
  if (from.szadminpin().size() > 0) {

    szadminpin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szadminpin_);
  }
  if (from.szuserpin().size() > 0) {

    szuserpin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szuserpin_);
  }
  if (from.has_hdev()) {
    mutable_hdev()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hdev());
  }
  if (from.has_dwadminpinretrycount()) {
    mutable_dwadminpinretrycount()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.dwadminpinretrycount());
  }
  if (from.has_dwuserpinretrycount()) {
    mutable_dwuserpinretrycount()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.dwuserpinretrycount());
  }
  if (from.has_dwcreatefilerights()) {
    mutable_dwcreatefilerights()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.dwcreatefilerights());
  }
  if (from.has_phapplication()) {
    mutable_phapplication()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.phapplication());
  }
}

void Req_SKF_CreateApplication::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_CreateApplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_CreateApplication::CopyFrom(const Req_SKF_CreateApplication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_CreateApplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_CreateApplication::IsInitialized() const {
  return true;
}

void Req_SKF_CreateApplication::Swap(Req_SKF_CreateApplication* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_CreateApplication::InternalSwap(Req_SKF_CreateApplication* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  szappname_.Swap(&other->szappname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  szadminpin_.Swap(&other->szadminpin_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  szuserpin_.Swap(&other->szuserpin_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hdev_, other->hdev_);
  swap(dwadminpinretrycount_, other->dwadminpinretrycount_);
  swap(dwuserpinretrycount_, other->dwuserpinretrycount_);
  swap(dwcreatefilerights_, other->dwcreatefilerights_);
  swap(phapplication_, other->phapplication_);
}

::google::protobuf::Metadata Req_SKF_CreateApplication::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_CreateApplication::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_CreateApplication_default_instance_._instance.get_mutable()->phapplication_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_CreateApplication::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& phapplication(const Rsp_SKF_CreateApplication* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_CreateApplication::HasBitSetters::phapplication(const Rsp_SKF_CreateApplication* msg) {
  return *msg->phapplication_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_CreateApplication::kPhApplicationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_CreateApplication::Rsp_SKF_CreateApplication()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_CreateApplication)
}
Rsp_SKF_CreateApplication::Rsp_SKF_CreateApplication(const Rsp_SKF_CreateApplication& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_phapplication()) {
    phapplication_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.phapplication_);
  } else {
    phapplication_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_CreateApplication)
}

void Rsp_SKF_CreateApplication::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_CreateApplication_skf_2eproto.base);
  phapplication_ = nullptr;
}

Rsp_SKF_CreateApplication::~Rsp_SKF_CreateApplication() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_CreateApplication)
  SharedDtor();
}

void Rsp_SKF_CreateApplication::SharedDtor() {
  if (this != internal_default_instance()) delete phapplication_;
}

void Rsp_SKF_CreateApplication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_CreateApplication& Rsp_SKF_CreateApplication::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_CreateApplication_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_CreateApplication::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_CreateApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && phapplication_ != nullptr) {
    delete phapplication_;
  }
  phapplication_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_CreateApplication::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_CreateApplication*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 phApplication = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_phapplication();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_CreateApplication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_CreateApplication)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 phApplication = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phapplication()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_CreateApplication)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_CreateApplication)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_CreateApplication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_CreateApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 phApplication = 1;
  if (this->has_phapplication()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::phapplication(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_CreateApplication)
}

::google::protobuf::uint8* Rsp_SKF_CreateApplication::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_CreateApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 phApplication = 1;
  if (this->has_phapplication()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::phapplication(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_CreateApplication)
  return target;
}

size_t Rsp_SKF_CreateApplication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_CreateApplication)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 phApplication = 1;
  if (this->has_phapplication()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *phapplication_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_CreateApplication::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_CreateApplication)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_CreateApplication* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_CreateApplication>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_CreateApplication)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_CreateApplication)
    MergeFrom(*source);
  }
}

void Rsp_SKF_CreateApplication::MergeFrom(const Rsp_SKF_CreateApplication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_CreateApplication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_phapplication()) {
    mutable_phapplication()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.phapplication());
  }
}

void Rsp_SKF_CreateApplication::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_CreateApplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_CreateApplication::CopyFrom(const Rsp_SKF_CreateApplication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_CreateApplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_CreateApplication::IsInitialized() const {
  return true;
}

void Rsp_SKF_CreateApplication::Swap(Rsp_SKF_CreateApplication* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_CreateApplication::InternalSwap(Rsp_SKF_CreateApplication* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(phapplication_, other->phapplication_);
}

::google::protobuf::Metadata Rsp_SKF_CreateApplication::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_EnumApplication::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_EnumApplication_default_instance_._instance.get_mutable()->hdev_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_EnumApplication_default_instance_._instance.get_mutable()->pulsize_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_EnumApplication::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hdev(const Req_SKF_EnumApplication* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& pulsize(const Req_SKF_EnumApplication* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_EnumApplication::HasBitSetters::hdev(const Req_SKF_EnumApplication* msg) {
  return *msg->hdev_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_EnumApplication::HasBitSetters::pulsize(const Req_SKF_EnumApplication* msg) {
  return *msg->pulsize_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_EnumApplication::kHDevFieldNumber;
const int Req_SKF_EnumApplication::kSzAppNameFieldNumber;
const int Req_SKF_EnumApplication::kPulSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_EnumApplication::Req_SKF_EnumApplication()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_EnumApplication)
}
Req_SKF_EnumApplication::Req_SKF_EnumApplication(const Req_SKF_EnumApplication& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szappname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szappname().size() > 0) {
    szappname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szappname_);
  }
  if (from.has_hdev()) {
    hdev_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hdev_);
  } else {
    hdev_ = nullptr;
  }
  if (from.has_pulsize()) {
    pulsize_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulsize_);
  } else {
    pulsize_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_EnumApplication)
}

void Req_SKF_EnumApplication::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_EnumApplication_skf_2eproto.base);
  szappname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hdev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pulsize_) -
      reinterpret_cast<char*>(&hdev_)) + sizeof(pulsize_));
}

Req_SKF_EnumApplication::~Req_SKF_EnumApplication() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_EnumApplication)
  SharedDtor();
}

void Req_SKF_EnumApplication::SharedDtor() {
  szappname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hdev_;
  if (this != internal_default_instance()) delete pulsize_;
}

void Req_SKF_EnumApplication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_EnumApplication& Req_SKF_EnumApplication::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_EnumApplication_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_EnumApplication::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_EnumApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szappname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pulsize_ != nullptr) {
    delete pulsize_;
  }
  pulsize_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_EnumApplication::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_EnumApplication*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hdev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes szAppName = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_szappname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulSize = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulsize();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_EnumApplication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_EnumApplication)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hdev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes szAppName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_szappname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulSize = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulsize()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_EnumApplication)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_EnumApplication)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_EnumApplication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_EnumApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hdev(this), output);
  }

  // bytes szAppName = 2;
  if (this->szappname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->szappname(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 3;
  if (this->has_pulsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::pulsize(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_EnumApplication)
}

::google::protobuf::uint8* Req_SKF_EnumApplication::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_EnumApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hdev(this), target);
  }

  // bytes szAppName = 2;
  if (this->szappname().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->szappname(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 3;
  if (this->has_pulsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::pulsize(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_EnumApplication)
  return target;
}

size_t Req_SKF_EnumApplication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_EnumApplication)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes szAppName = 2;
  if (this->szappname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->szappname());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hdev_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 3;
  if (this->has_pulsize()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulsize_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_EnumApplication::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_EnumApplication)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_EnumApplication* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_EnumApplication>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_EnumApplication)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_EnumApplication)
    MergeFrom(*source);
  }
}

void Req_SKF_EnumApplication::MergeFrom(const Req_SKF_EnumApplication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_EnumApplication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.szappname().size() > 0) {

    szappname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szappname_);
  }
  if (from.has_hdev()) {
    mutable_hdev()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hdev());
  }
  if (from.has_pulsize()) {
    mutable_pulsize()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulsize());
  }
}

void Req_SKF_EnumApplication::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_EnumApplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_EnumApplication::CopyFrom(const Req_SKF_EnumApplication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_EnumApplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_EnumApplication::IsInitialized() const {
  return true;
}

void Req_SKF_EnumApplication::Swap(Req_SKF_EnumApplication* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_EnumApplication::InternalSwap(Req_SKF_EnumApplication* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  szappname_.Swap(&other->szappname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hdev_, other->hdev_);
  swap(pulsize_, other->pulsize_);
}

::google::protobuf::Metadata Req_SKF_EnumApplication::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_EnumApplication::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_EnumApplication_default_instance_._instance.get_mutable()->pulsize_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_EnumApplication::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& pulsize(const Rsp_SKF_EnumApplication* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_EnumApplication::HasBitSetters::pulsize(const Rsp_SKF_EnumApplication* msg) {
  return *msg->pulsize_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_EnumApplication::kSzAppNameFieldNumber;
const int Rsp_SKF_EnumApplication::kPulSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_EnumApplication::Rsp_SKF_EnumApplication()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_EnumApplication)
}
Rsp_SKF_EnumApplication::Rsp_SKF_EnumApplication(const Rsp_SKF_EnumApplication& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szappname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szappname().size() > 0) {
    szappname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szappname_);
  }
  if (from.has_pulsize()) {
    pulsize_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulsize_);
  } else {
    pulsize_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_EnumApplication)
}

void Rsp_SKF_EnumApplication::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_EnumApplication_skf_2eproto.base);
  szappname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pulsize_ = nullptr;
}

Rsp_SKF_EnumApplication::~Rsp_SKF_EnumApplication() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_EnumApplication)
  SharedDtor();
}

void Rsp_SKF_EnumApplication::SharedDtor() {
  szappname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pulsize_;
}

void Rsp_SKF_EnumApplication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_EnumApplication& Rsp_SKF_EnumApplication::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_EnumApplication_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_EnumApplication::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_EnumApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szappname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && pulsize_ != nullptr) {
    delete pulsize_;
  }
  pulsize_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_EnumApplication::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_EnumApplication*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes szAppName = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_szappname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulSize = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulsize();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_EnumApplication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_EnumApplication)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes szAppName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_szappname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulSize = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulsize()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_EnumApplication)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_EnumApplication)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_EnumApplication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_EnumApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes szAppName = 1;
  if (this->szappname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->szappname(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 2;
  if (this->has_pulsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pulsize(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_EnumApplication)
}

::google::protobuf::uint8* Rsp_SKF_EnumApplication::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_EnumApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes szAppName = 1;
  if (this->szappname().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->szappname(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 2;
  if (this->has_pulsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pulsize(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_EnumApplication)
  return target;
}

size_t Rsp_SKF_EnumApplication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_EnumApplication)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes szAppName = 1;
  if (this->szappname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->szappname());
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 2;
  if (this->has_pulsize()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulsize_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_EnumApplication::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_EnumApplication)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_EnumApplication* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_EnumApplication>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_EnumApplication)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_EnumApplication)
    MergeFrom(*source);
  }
}

void Rsp_SKF_EnumApplication::MergeFrom(const Rsp_SKF_EnumApplication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_EnumApplication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.szappname().size() > 0) {

    szappname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szappname_);
  }
  if (from.has_pulsize()) {
    mutable_pulsize()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulsize());
  }
}

void Rsp_SKF_EnumApplication::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_EnumApplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_EnumApplication::CopyFrom(const Rsp_SKF_EnumApplication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_EnumApplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_EnumApplication::IsInitialized() const {
  return true;
}

void Rsp_SKF_EnumApplication::Swap(Rsp_SKF_EnumApplication* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_EnumApplication::InternalSwap(Rsp_SKF_EnumApplication* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  szappname_.Swap(&other->szappname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pulsize_, other->pulsize_);
}

::google::protobuf::Metadata Rsp_SKF_EnumApplication::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_DeleteApplication::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_DeleteApplication_default_instance_._instance.get_mutable()->hdev_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_DeleteApplication::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hdev(const Req_SKF_DeleteApplication* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_DeleteApplication::HasBitSetters::hdev(const Req_SKF_DeleteApplication* msg) {
  return *msg->hdev_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_DeleteApplication::kHDevFieldNumber;
const int Req_SKF_DeleteApplication::kSzAppNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_DeleteApplication::Req_SKF_DeleteApplication()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_DeleteApplication)
}
Req_SKF_DeleteApplication::Req_SKF_DeleteApplication(const Req_SKF_DeleteApplication& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szappname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szappname().size() > 0) {
    szappname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szappname_);
  }
  if (from.has_hdev()) {
    hdev_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hdev_);
  } else {
    hdev_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_DeleteApplication)
}

void Req_SKF_DeleteApplication::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_DeleteApplication_skf_2eproto.base);
  szappname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hdev_ = nullptr;
}

Req_SKF_DeleteApplication::~Req_SKF_DeleteApplication() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_DeleteApplication)
  SharedDtor();
}

void Req_SKF_DeleteApplication::SharedDtor() {
  szappname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hdev_;
}

void Req_SKF_DeleteApplication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_DeleteApplication& Req_SKF_DeleteApplication::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_DeleteApplication_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_DeleteApplication::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_DeleteApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szappname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_DeleteApplication::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_DeleteApplication*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hdev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string szAppName = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.westone.skf.Req_SKF_DeleteApplication.szAppName");
        object = msg->mutable_szappname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_DeleteApplication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_DeleteApplication)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hdev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szAppName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szappname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szappname().data(), static_cast<int>(this->szappname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.westone.skf.Req_SKF_DeleteApplication.szAppName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_DeleteApplication)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_DeleteApplication)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_DeleteApplication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_DeleteApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hdev(this), output);
  }

  // string szAppName = 2;
  if (this->szappname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szappname().data(), static_cast<int>(this->szappname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_DeleteApplication.szAppName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szappname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_DeleteApplication)
}

::google::protobuf::uint8* Req_SKF_DeleteApplication::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_DeleteApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hdev(this), target);
  }

  // string szAppName = 2;
  if (this->szappname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szappname().data(), static_cast<int>(this->szappname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_DeleteApplication.szAppName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->szappname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_DeleteApplication)
  return target;
}

size_t Req_SKF_DeleteApplication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_DeleteApplication)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string szAppName = 2;
  if (this->szappname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szappname());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hdev_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_DeleteApplication::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_DeleteApplication)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_DeleteApplication* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_DeleteApplication>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_DeleteApplication)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_DeleteApplication)
    MergeFrom(*source);
  }
}

void Req_SKF_DeleteApplication::MergeFrom(const Req_SKF_DeleteApplication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_DeleteApplication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.szappname().size() > 0) {

    szappname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szappname_);
  }
  if (from.has_hdev()) {
    mutable_hdev()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hdev());
  }
}

void Req_SKF_DeleteApplication::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_DeleteApplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_DeleteApplication::CopyFrom(const Req_SKF_DeleteApplication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_DeleteApplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_DeleteApplication::IsInitialized() const {
  return true;
}

void Req_SKF_DeleteApplication::Swap(Req_SKF_DeleteApplication* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_DeleteApplication::InternalSwap(Req_SKF_DeleteApplication* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  szappname_.Swap(&other->szappname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hdev_, other->hdev_);
}

::google::protobuf::Metadata Req_SKF_DeleteApplication::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_DeleteApplication::InitAsDefaultInstance() {
}
class Rsp_SKF_DeleteApplication::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_DeleteApplication::Rsp_SKF_DeleteApplication()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_DeleteApplication)
}
Rsp_SKF_DeleteApplication::Rsp_SKF_DeleteApplication(const Rsp_SKF_DeleteApplication& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_DeleteApplication)
}

void Rsp_SKF_DeleteApplication::SharedCtor() {
}

Rsp_SKF_DeleteApplication::~Rsp_SKF_DeleteApplication() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_DeleteApplication)
  SharedDtor();
}

void Rsp_SKF_DeleteApplication::SharedDtor() {
}

void Rsp_SKF_DeleteApplication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_DeleteApplication& Rsp_SKF_DeleteApplication::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_DeleteApplication_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_DeleteApplication::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_DeleteApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_DeleteApplication::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_DeleteApplication*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_DeleteApplication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_DeleteApplication)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_DeleteApplication)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_DeleteApplication)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_DeleteApplication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_DeleteApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_DeleteApplication)
}

::google::protobuf::uint8* Rsp_SKF_DeleteApplication::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_DeleteApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_DeleteApplication)
  return target;
}

size_t Rsp_SKF_DeleteApplication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_DeleteApplication)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_DeleteApplication::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_DeleteApplication)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_DeleteApplication* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_DeleteApplication>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_DeleteApplication)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_DeleteApplication)
    MergeFrom(*source);
  }
}

void Rsp_SKF_DeleteApplication::MergeFrom(const Rsp_SKF_DeleteApplication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_DeleteApplication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rsp_SKF_DeleteApplication::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_DeleteApplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_DeleteApplication::CopyFrom(const Rsp_SKF_DeleteApplication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_DeleteApplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_DeleteApplication::IsInitialized() const {
  return true;
}

void Rsp_SKF_DeleteApplication::Swap(Rsp_SKF_DeleteApplication* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_DeleteApplication::InternalSwap(Rsp_SKF_DeleteApplication* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rsp_SKF_DeleteApplication::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_OpenApplication::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_OpenApplication_default_instance_._instance.get_mutable()->hdev_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_OpenApplication_default_instance_._instance.get_mutable()->phapplication_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_OpenApplication::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hdev(const Req_SKF_OpenApplication* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& phapplication(const Req_SKF_OpenApplication* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_OpenApplication::HasBitSetters::hdev(const Req_SKF_OpenApplication* msg) {
  return *msg->hdev_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_OpenApplication::HasBitSetters::phapplication(const Req_SKF_OpenApplication* msg) {
  return *msg->phapplication_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_OpenApplication::kHDevFieldNumber;
const int Req_SKF_OpenApplication::kSzAppNameFieldNumber;
const int Req_SKF_OpenApplication::kPhApplicationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_OpenApplication::Req_SKF_OpenApplication()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_OpenApplication)
}
Req_SKF_OpenApplication::Req_SKF_OpenApplication(const Req_SKF_OpenApplication& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szappname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szappname().size() > 0) {
    szappname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szappname_);
  }
  if (from.has_hdev()) {
    hdev_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hdev_);
  } else {
    hdev_ = nullptr;
  }
  if (from.has_phapplication()) {
    phapplication_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.phapplication_);
  } else {
    phapplication_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_OpenApplication)
}

void Req_SKF_OpenApplication::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_OpenApplication_skf_2eproto.base);
  szappname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hdev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phapplication_) -
      reinterpret_cast<char*>(&hdev_)) + sizeof(phapplication_));
}

Req_SKF_OpenApplication::~Req_SKF_OpenApplication() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_OpenApplication)
  SharedDtor();
}

void Req_SKF_OpenApplication::SharedDtor() {
  szappname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hdev_;
  if (this != internal_default_instance()) delete phapplication_;
}

void Req_SKF_OpenApplication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_OpenApplication& Req_SKF_OpenApplication::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_OpenApplication_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_OpenApplication::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_OpenApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szappname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && phapplication_ != nullptr) {
    delete phapplication_;
  }
  phapplication_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_OpenApplication::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_OpenApplication*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hdev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string szAppName = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.westone.skf.Req_SKF_OpenApplication.szAppName");
        object = msg->mutable_szappname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 phApplication = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_phapplication();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_OpenApplication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_OpenApplication)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hdev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szAppName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szappname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szappname().data(), static_cast<int>(this->szappname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.westone.skf.Req_SKF_OpenApplication.szAppName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 phApplication = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phapplication()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_OpenApplication)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_OpenApplication)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_OpenApplication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_OpenApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hdev(this), output);
  }

  // string szAppName = 2;
  if (this->szappname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szappname().data(), static_cast<int>(this->szappname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_OpenApplication.szAppName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szappname(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phApplication = 3;
  if (this->has_phapplication()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::phapplication(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_OpenApplication)
}

::google::protobuf::uint8* Req_SKF_OpenApplication::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_OpenApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hdev(this), target);
  }

  // string szAppName = 2;
  if (this->szappname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szappname().data(), static_cast<int>(this->szappname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_OpenApplication.szAppName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->szappname(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phApplication = 3;
  if (this->has_phapplication()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::phapplication(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_OpenApplication)
  return target;
}

size_t Req_SKF_OpenApplication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_OpenApplication)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string szAppName = 2;
  if (this->szappname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szappname());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hdev_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phApplication = 3;
  if (this->has_phapplication()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *phapplication_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_OpenApplication::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_OpenApplication)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_OpenApplication* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_OpenApplication>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_OpenApplication)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_OpenApplication)
    MergeFrom(*source);
  }
}

void Req_SKF_OpenApplication::MergeFrom(const Req_SKF_OpenApplication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_OpenApplication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.szappname().size() > 0) {

    szappname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szappname_);
  }
  if (from.has_hdev()) {
    mutable_hdev()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hdev());
  }
  if (from.has_phapplication()) {
    mutable_phapplication()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.phapplication());
  }
}

void Req_SKF_OpenApplication::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_OpenApplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_OpenApplication::CopyFrom(const Req_SKF_OpenApplication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_OpenApplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_OpenApplication::IsInitialized() const {
  return true;
}

void Req_SKF_OpenApplication::Swap(Req_SKF_OpenApplication* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_OpenApplication::InternalSwap(Req_SKF_OpenApplication* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  szappname_.Swap(&other->szappname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hdev_, other->hdev_);
  swap(phapplication_, other->phapplication_);
}

::google::protobuf::Metadata Req_SKF_OpenApplication::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_OpenApplication::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_OpenApplication_default_instance_._instance.get_mutable()->phapplication_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_OpenApplication::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& phapplication(const Rsp_SKF_OpenApplication* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_OpenApplication::HasBitSetters::phapplication(const Rsp_SKF_OpenApplication* msg) {
  return *msg->phapplication_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_OpenApplication::kPhApplicationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_OpenApplication::Rsp_SKF_OpenApplication()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_OpenApplication)
}
Rsp_SKF_OpenApplication::Rsp_SKF_OpenApplication(const Rsp_SKF_OpenApplication& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_phapplication()) {
    phapplication_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.phapplication_);
  } else {
    phapplication_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_OpenApplication)
}

void Rsp_SKF_OpenApplication::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_OpenApplication_skf_2eproto.base);
  phapplication_ = nullptr;
}

Rsp_SKF_OpenApplication::~Rsp_SKF_OpenApplication() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_OpenApplication)
  SharedDtor();
}

void Rsp_SKF_OpenApplication::SharedDtor() {
  if (this != internal_default_instance()) delete phapplication_;
}

void Rsp_SKF_OpenApplication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_OpenApplication& Rsp_SKF_OpenApplication::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_OpenApplication_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_OpenApplication::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_OpenApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && phapplication_ != nullptr) {
    delete phapplication_;
  }
  phapplication_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_OpenApplication::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_OpenApplication*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 phApplication = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_phapplication();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_OpenApplication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_OpenApplication)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 phApplication = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phapplication()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_OpenApplication)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_OpenApplication)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_OpenApplication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_OpenApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 phApplication = 1;
  if (this->has_phapplication()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::phapplication(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_OpenApplication)
}

::google::protobuf::uint8* Rsp_SKF_OpenApplication::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_OpenApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 phApplication = 1;
  if (this->has_phapplication()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::phapplication(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_OpenApplication)
  return target;
}

size_t Rsp_SKF_OpenApplication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_OpenApplication)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 phApplication = 1;
  if (this->has_phapplication()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *phapplication_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_OpenApplication::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_OpenApplication)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_OpenApplication* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_OpenApplication>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_OpenApplication)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_OpenApplication)
    MergeFrom(*source);
  }
}

void Rsp_SKF_OpenApplication::MergeFrom(const Rsp_SKF_OpenApplication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_OpenApplication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_phapplication()) {
    mutable_phapplication()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.phapplication());
  }
}

void Rsp_SKF_OpenApplication::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_OpenApplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_OpenApplication::CopyFrom(const Rsp_SKF_OpenApplication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_OpenApplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_OpenApplication::IsInitialized() const {
  return true;
}

void Rsp_SKF_OpenApplication::Swap(Rsp_SKF_OpenApplication* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_OpenApplication::InternalSwap(Rsp_SKF_OpenApplication* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(phapplication_, other->phapplication_);
}

::google::protobuf::Metadata Rsp_SKF_OpenApplication::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_CloseApplication::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_CloseApplication_default_instance_._instance.get_mutable()->happlication_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_CloseApplication::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& happlication(const Req_SKF_CloseApplication* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_CloseApplication::HasBitSetters::happlication(const Req_SKF_CloseApplication* msg) {
  return *msg->happlication_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_CloseApplication::kHApplicationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_CloseApplication::Req_SKF_CloseApplication()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_CloseApplication)
}
Req_SKF_CloseApplication::Req_SKF_CloseApplication(const Req_SKF_CloseApplication& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_happlication()) {
    happlication_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.happlication_);
  } else {
    happlication_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_CloseApplication)
}

void Req_SKF_CloseApplication::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_CloseApplication_skf_2eproto.base);
  happlication_ = nullptr;
}

Req_SKF_CloseApplication::~Req_SKF_CloseApplication() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_CloseApplication)
  SharedDtor();
}

void Req_SKF_CloseApplication::SharedDtor() {
  if (this != internal_default_instance()) delete happlication_;
}

void Req_SKF_CloseApplication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_CloseApplication& Req_SKF_CloseApplication::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_CloseApplication_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_CloseApplication::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_CloseApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_CloseApplication::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_CloseApplication*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_happlication();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_CloseApplication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_CloseApplication)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_happlication()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_CloseApplication)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_CloseApplication)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_CloseApplication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_CloseApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::happlication(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_CloseApplication)
}

::google::protobuf::uint8* Req_SKF_CloseApplication::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_CloseApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::happlication(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_CloseApplication)
  return target;
}

size_t Req_SKF_CloseApplication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_CloseApplication)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *happlication_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_CloseApplication::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_CloseApplication)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_CloseApplication* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_CloseApplication>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_CloseApplication)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_CloseApplication)
    MergeFrom(*source);
  }
}

void Req_SKF_CloseApplication::MergeFrom(const Req_SKF_CloseApplication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_CloseApplication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_happlication()) {
    mutable_happlication()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.happlication());
  }
}

void Req_SKF_CloseApplication::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_CloseApplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_CloseApplication::CopyFrom(const Req_SKF_CloseApplication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_CloseApplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_CloseApplication::IsInitialized() const {
  return true;
}

void Req_SKF_CloseApplication::Swap(Req_SKF_CloseApplication* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_CloseApplication::InternalSwap(Req_SKF_CloseApplication* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(happlication_, other->happlication_);
}

::google::protobuf::Metadata Req_SKF_CloseApplication::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_CloseApplication::InitAsDefaultInstance() {
}
class Rsp_SKF_CloseApplication::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_CloseApplication::Rsp_SKF_CloseApplication()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_CloseApplication)
}
Rsp_SKF_CloseApplication::Rsp_SKF_CloseApplication(const Rsp_SKF_CloseApplication& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_CloseApplication)
}

void Rsp_SKF_CloseApplication::SharedCtor() {
}

Rsp_SKF_CloseApplication::~Rsp_SKF_CloseApplication() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_CloseApplication)
  SharedDtor();
}

void Rsp_SKF_CloseApplication::SharedDtor() {
}

void Rsp_SKF_CloseApplication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_CloseApplication& Rsp_SKF_CloseApplication::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_CloseApplication_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_CloseApplication::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_CloseApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_CloseApplication::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_CloseApplication*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_CloseApplication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_CloseApplication)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_CloseApplication)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_CloseApplication)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_CloseApplication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_CloseApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_CloseApplication)
}

::google::protobuf::uint8* Rsp_SKF_CloseApplication::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_CloseApplication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_CloseApplication)
  return target;
}

size_t Rsp_SKF_CloseApplication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_CloseApplication)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_CloseApplication::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_CloseApplication)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_CloseApplication* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_CloseApplication>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_CloseApplication)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_CloseApplication)
    MergeFrom(*source);
  }
}

void Rsp_SKF_CloseApplication::MergeFrom(const Rsp_SKF_CloseApplication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_CloseApplication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rsp_SKF_CloseApplication::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_CloseApplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_CloseApplication::CopyFrom(const Rsp_SKF_CloseApplication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_CloseApplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_CloseApplication::IsInitialized() const {
  return true;
}

void Rsp_SKF_CloseApplication::Swap(Rsp_SKF_CloseApplication* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_CloseApplication::InternalSwap(Rsp_SKF_CloseApplication* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rsp_SKF_CloseApplication::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_CreateFile::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_CreateFile_default_instance_._instance.get_mutable()->happlication_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_CreateFile_default_instance_._instance.get_mutable()->ulfilesize_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_CreateFile_default_instance_._instance.get_mutable()->ulreadrights_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_CreateFile_default_instance_._instance.get_mutable()->ulwriterights_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_CreateFile::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& happlication(const Req_SKF_CreateFile* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulfilesize(const Req_SKF_CreateFile* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulreadrights(const Req_SKF_CreateFile* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulwriterights(const Req_SKF_CreateFile* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_CreateFile::HasBitSetters::happlication(const Req_SKF_CreateFile* msg) {
  return *msg->happlication_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_CreateFile::HasBitSetters::ulfilesize(const Req_SKF_CreateFile* msg) {
  return *msg->ulfilesize_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_CreateFile::HasBitSetters::ulreadrights(const Req_SKF_CreateFile* msg) {
  return *msg->ulreadrights_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_CreateFile::HasBitSetters::ulwriterights(const Req_SKF_CreateFile* msg) {
  return *msg->ulwriterights_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_CreateFile::kHApplicationFieldNumber;
const int Req_SKF_CreateFile::kSzFileNameFieldNumber;
const int Req_SKF_CreateFile::kUlFileSizeFieldNumber;
const int Req_SKF_CreateFile::kUlReadRightsFieldNumber;
const int Req_SKF_CreateFile::kUlWriteRightsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_CreateFile::Req_SKF_CreateFile()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_CreateFile)
}
Req_SKF_CreateFile::Req_SKF_CreateFile(const Req_SKF_CreateFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szfilename().size() > 0) {
    szfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szfilename_);
  }
  if (from.has_happlication()) {
    happlication_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.happlication_);
  } else {
    happlication_ = nullptr;
  }
  if (from.has_ulfilesize()) {
    ulfilesize_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulfilesize_);
  } else {
    ulfilesize_ = nullptr;
  }
  if (from.has_ulreadrights()) {
    ulreadrights_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulreadrights_);
  } else {
    ulreadrights_ = nullptr;
  }
  if (from.has_ulwriterights()) {
    ulwriterights_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulwriterights_);
  } else {
    ulwriterights_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_CreateFile)
}

void Req_SKF_CreateFile::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_CreateFile_skf_2eproto.base);
  szfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&happlication_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ulwriterights_) -
      reinterpret_cast<char*>(&happlication_)) + sizeof(ulwriterights_));
}

Req_SKF_CreateFile::~Req_SKF_CreateFile() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_CreateFile)
  SharedDtor();
}

void Req_SKF_CreateFile::SharedDtor() {
  szfilename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete happlication_;
  if (this != internal_default_instance()) delete ulfilesize_;
  if (this != internal_default_instance()) delete ulreadrights_;
  if (this != internal_default_instance()) delete ulwriterights_;
}

void Req_SKF_CreateFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_CreateFile& Req_SKF_CreateFile::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_CreateFile_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_CreateFile::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_CreateFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulfilesize_ != nullptr) {
    delete ulfilesize_;
  }
  ulfilesize_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulreadrights_ != nullptr) {
    delete ulreadrights_;
  }
  ulreadrights_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulwriterights_ != nullptr) {
    delete ulwriterights_;
  }
  ulwriterights_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_CreateFile::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_CreateFile*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_happlication();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string szFileName = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.westone.skf.Req_SKF_CreateFile.szFileName");
        object = msg->mutable_szfilename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulFileSize = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulfilesize();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulReadRights = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulreadrights();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulWriteRights = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulwriterights();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_CreateFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_CreateFile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_happlication()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szFileName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szfilename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szfilename().data(), static_cast<int>(this->szfilename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.westone.skf.Req_SKF_CreateFile.szFileName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulFileSize = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulfilesize()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulReadRights = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulreadrights()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulWriteRights = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulwriterights()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_CreateFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_CreateFile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_CreateFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_CreateFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::happlication(this), output);
  }

  // string szFileName = 2;
  if (this->szfilename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szfilename().data(), static_cast<int>(this->szfilename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_CreateFile.szFileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szfilename(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulFileSize = 3;
  if (this->has_ulfilesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::ulfilesize(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulReadRights = 4;
  if (this->has_ulreadrights()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::ulreadrights(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulWriteRights = 5;
  if (this->has_ulwriterights()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::ulwriterights(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_CreateFile)
}

::google::protobuf::uint8* Req_SKF_CreateFile::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_CreateFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::happlication(this), target);
  }

  // string szFileName = 2;
  if (this->szfilename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szfilename().data(), static_cast<int>(this->szfilename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_CreateFile.szFileName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->szfilename(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulFileSize = 3;
  if (this->has_ulfilesize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::ulfilesize(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulReadRights = 4;
  if (this->has_ulreadrights()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::ulreadrights(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulWriteRights = 5;
  if (this->has_ulwriterights()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::ulwriterights(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_CreateFile)
  return target;
}

size_t Req_SKF_CreateFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_CreateFile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string szFileName = 2;
  if (this->szfilename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szfilename());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *happlication_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulFileSize = 3;
  if (this->has_ulfilesize()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulfilesize_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulReadRights = 4;
  if (this->has_ulreadrights()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulreadrights_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulWriteRights = 5;
  if (this->has_ulwriterights()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulwriterights_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_CreateFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_CreateFile)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_CreateFile* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_CreateFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_CreateFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_CreateFile)
    MergeFrom(*source);
  }
}

void Req_SKF_CreateFile::MergeFrom(const Req_SKF_CreateFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_CreateFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.szfilename().size() > 0) {

    szfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szfilename_);
  }
  if (from.has_happlication()) {
    mutable_happlication()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.happlication());
  }
  if (from.has_ulfilesize()) {
    mutable_ulfilesize()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulfilesize());
  }
  if (from.has_ulreadrights()) {
    mutable_ulreadrights()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulreadrights());
  }
  if (from.has_ulwriterights()) {
    mutable_ulwriterights()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulwriterights());
  }
}

void Req_SKF_CreateFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_CreateFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_CreateFile::CopyFrom(const Req_SKF_CreateFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_CreateFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_CreateFile::IsInitialized() const {
  return true;
}

void Req_SKF_CreateFile::Swap(Req_SKF_CreateFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_CreateFile::InternalSwap(Req_SKF_CreateFile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  szfilename_.Swap(&other->szfilename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(happlication_, other->happlication_);
  swap(ulfilesize_, other->ulfilesize_);
  swap(ulreadrights_, other->ulreadrights_);
  swap(ulwriterights_, other->ulwriterights_);
}

::google::protobuf::Metadata Req_SKF_CreateFile::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_CreateFile::InitAsDefaultInstance() {
}
class Rsp_SKF_CreateFile::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_CreateFile::Rsp_SKF_CreateFile()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_CreateFile)
}
Rsp_SKF_CreateFile::Rsp_SKF_CreateFile(const Rsp_SKF_CreateFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_CreateFile)
}

void Rsp_SKF_CreateFile::SharedCtor() {
}

Rsp_SKF_CreateFile::~Rsp_SKF_CreateFile() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_CreateFile)
  SharedDtor();
}

void Rsp_SKF_CreateFile::SharedDtor() {
}

void Rsp_SKF_CreateFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_CreateFile& Rsp_SKF_CreateFile::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_CreateFile_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_CreateFile::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_CreateFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_CreateFile::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_CreateFile*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_CreateFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_CreateFile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_CreateFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_CreateFile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_CreateFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_CreateFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_CreateFile)
}

::google::protobuf::uint8* Rsp_SKF_CreateFile::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_CreateFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_CreateFile)
  return target;
}

size_t Rsp_SKF_CreateFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_CreateFile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_CreateFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_CreateFile)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_CreateFile* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_CreateFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_CreateFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_CreateFile)
    MergeFrom(*source);
  }
}

void Rsp_SKF_CreateFile::MergeFrom(const Rsp_SKF_CreateFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_CreateFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rsp_SKF_CreateFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_CreateFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_CreateFile::CopyFrom(const Rsp_SKF_CreateFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_CreateFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_CreateFile::IsInitialized() const {
  return true;
}

void Rsp_SKF_CreateFile::Swap(Rsp_SKF_CreateFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_CreateFile::InternalSwap(Rsp_SKF_CreateFile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rsp_SKF_CreateFile::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_DeleteFile::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_DeleteFile_default_instance_._instance.get_mutable()->happlication_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_DeleteFile::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& happlication(const Req_SKF_DeleteFile* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_DeleteFile::HasBitSetters::happlication(const Req_SKF_DeleteFile* msg) {
  return *msg->happlication_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_DeleteFile::kHApplicationFieldNumber;
const int Req_SKF_DeleteFile::kSzFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_DeleteFile::Req_SKF_DeleteFile()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_DeleteFile)
}
Req_SKF_DeleteFile::Req_SKF_DeleteFile(const Req_SKF_DeleteFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szfilename().size() > 0) {
    szfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szfilename_);
  }
  if (from.has_happlication()) {
    happlication_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.happlication_);
  } else {
    happlication_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_DeleteFile)
}

void Req_SKF_DeleteFile::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_DeleteFile_skf_2eproto.base);
  szfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  happlication_ = nullptr;
}

Req_SKF_DeleteFile::~Req_SKF_DeleteFile() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_DeleteFile)
  SharedDtor();
}

void Req_SKF_DeleteFile::SharedDtor() {
  szfilename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete happlication_;
}

void Req_SKF_DeleteFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_DeleteFile& Req_SKF_DeleteFile::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_DeleteFile_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_DeleteFile::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_DeleteFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_DeleteFile::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_DeleteFile*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_happlication();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string szFileName = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.westone.skf.Req_SKF_DeleteFile.szFileName");
        object = msg->mutable_szfilename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_DeleteFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_DeleteFile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_happlication()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szFileName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szfilename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szfilename().data(), static_cast<int>(this->szfilename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.westone.skf.Req_SKF_DeleteFile.szFileName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_DeleteFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_DeleteFile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_DeleteFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_DeleteFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::happlication(this), output);
  }

  // string szFileName = 2;
  if (this->szfilename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szfilename().data(), static_cast<int>(this->szfilename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_DeleteFile.szFileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szfilename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_DeleteFile)
}

::google::protobuf::uint8* Req_SKF_DeleteFile::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_DeleteFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::happlication(this), target);
  }

  // string szFileName = 2;
  if (this->szfilename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szfilename().data(), static_cast<int>(this->szfilename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_DeleteFile.szFileName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->szfilename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_DeleteFile)
  return target;
}

size_t Req_SKF_DeleteFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_DeleteFile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string szFileName = 2;
  if (this->szfilename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szfilename());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *happlication_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_DeleteFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_DeleteFile)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_DeleteFile* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_DeleteFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_DeleteFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_DeleteFile)
    MergeFrom(*source);
  }
}

void Req_SKF_DeleteFile::MergeFrom(const Req_SKF_DeleteFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_DeleteFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.szfilename().size() > 0) {

    szfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szfilename_);
  }
  if (from.has_happlication()) {
    mutable_happlication()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.happlication());
  }
}

void Req_SKF_DeleteFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_DeleteFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_DeleteFile::CopyFrom(const Req_SKF_DeleteFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_DeleteFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_DeleteFile::IsInitialized() const {
  return true;
}

void Req_SKF_DeleteFile::Swap(Req_SKF_DeleteFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_DeleteFile::InternalSwap(Req_SKF_DeleteFile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  szfilename_.Swap(&other->szfilename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(happlication_, other->happlication_);
}

::google::protobuf::Metadata Req_SKF_DeleteFile::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_DeleteFile::InitAsDefaultInstance() {
}
class Rsp_SKF_DeleteFile::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_DeleteFile::Rsp_SKF_DeleteFile()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_DeleteFile)
}
Rsp_SKF_DeleteFile::Rsp_SKF_DeleteFile(const Rsp_SKF_DeleteFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_DeleteFile)
}

void Rsp_SKF_DeleteFile::SharedCtor() {
}

Rsp_SKF_DeleteFile::~Rsp_SKF_DeleteFile() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_DeleteFile)
  SharedDtor();
}

void Rsp_SKF_DeleteFile::SharedDtor() {
}

void Rsp_SKF_DeleteFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_DeleteFile& Rsp_SKF_DeleteFile::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_DeleteFile_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_DeleteFile::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_DeleteFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_DeleteFile::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_DeleteFile*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_DeleteFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_DeleteFile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_DeleteFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_DeleteFile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_DeleteFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_DeleteFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_DeleteFile)
}

::google::protobuf::uint8* Rsp_SKF_DeleteFile::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_DeleteFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_DeleteFile)
  return target;
}

size_t Rsp_SKF_DeleteFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_DeleteFile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_DeleteFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_DeleteFile)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_DeleteFile* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_DeleteFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_DeleteFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_DeleteFile)
    MergeFrom(*source);
  }
}

void Rsp_SKF_DeleteFile::MergeFrom(const Rsp_SKF_DeleteFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_DeleteFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rsp_SKF_DeleteFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_DeleteFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_DeleteFile::CopyFrom(const Rsp_SKF_DeleteFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_DeleteFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_DeleteFile::IsInitialized() const {
  return true;
}

void Rsp_SKF_DeleteFile::Swap(Rsp_SKF_DeleteFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_DeleteFile::InternalSwap(Rsp_SKF_DeleteFile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rsp_SKF_DeleteFile::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_EnumFiles::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_EnumFiles_default_instance_._instance.get_mutable()->happlication_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_EnumFiles_default_instance_._instance.get_mutable()->pulsize_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_EnumFiles::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& happlication(const Req_SKF_EnumFiles* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& pulsize(const Req_SKF_EnumFiles* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_EnumFiles::HasBitSetters::happlication(const Req_SKF_EnumFiles* msg) {
  return *msg->happlication_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_EnumFiles::HasBitSetters::pulsize(const Req_SKF_EnumFiles* msg) {
  return *msg->pulsize_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_EnumFiles::kHApplicationFieldNumber;
const int Req_SKF_EnumFiles::kSzFileNameFieldNumber;
const int Req_SKF_EnumFiles::kPulSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_EnumFiles::Req_SKF_EnumFiles()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_EnumFiles)
}
Req_SKF_EnumFiles::Req_SKF_EnumFiles(const Req_SKF_EnumFiles& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szfilename().size() > 0) {
    szfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szfilename_);
  }
  if (from.has_happlication()) {
    happlication_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.happlication_);
  } else {
    happlication_ = nullptr;
  }
  if (from.has_pulsize()) {
    pulsize_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulsize_);
  } else {
    pulsize_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_EnumFiles)
}

void Req_SKF_EnumFiles::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_EnumFiles_skf_2eproto.base);
  szfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&happlication_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pulsize_) -
      reinterpret_cast<char*>(&happlication_)) + sizeof(pulsize_));
}

Req_SKF_EnumFiles::~Req_SKF_EnumFiles() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_EnumFiles)
  SharedDtor();
}

void Req_SKF_EnumFiles::SharedDtor() {
  szfilename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete happlication_;
  if (this != internal_default_instance()) delete pulsize_;
}

void Req_SKF_EnumFiles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_EnumFiles& Req_SKF_EnumFiles::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_EnumFiles_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_EnumFiles::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_EnumFiles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pulsize_ != nullptr) {
    delete pulsize_;
  }
  pulsize_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_EnumFiles::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_EnumFiles*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_happlication();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string szFileName = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.westone.skf.Req_SKF_EnumFiles.szFileName");
        object = msg->mutable_szfilename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulSize = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulsize();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_EnumFiles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_EnumFiles)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_happlication()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szFileName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szfilename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szfilename().data(), static_cast<int>(this->szfilename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.westone.skf.Req_SKF_EnumFiles.szFileName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulSize = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulsize()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_EnumFiles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_EnumFiles)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_EnumFiles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_EnumFiles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::happlication(this), output);
  }

  // string szFileName = 2;
  if (this->szfilename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szfilename().data(), static_cast<int>(this->szfilename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_EnumFiles.szFileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szfilename(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 3;
  if (this->has_pulsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::pulsize(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_EnumFiles)
}

::google::protobuf::uint8* Req_SKF_EnumFiles::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_EnumFiles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::happlication(this), target);
  }

  // string szFileName = 2;
  if (this->szfilename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szfilename().data(), static_cast<int>(this->szfilename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_EnumFiles.szFileName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->szfilename(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 3;
  if (this->has_pulsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::pulsize(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_EnumFiles)
  return target;
}

size_t Req_SKF_EnumFiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_EnumFiles)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string szFileName = 2;
  if (this->szfilename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szfilename());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *happlication_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 3;
  if (this->has_pulsize()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulsize_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_EnumFiles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_EnumFiles)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_EnumFiles* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_EnumFiles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_EnumFiles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_EnumFiles)
    MergeFrom(*source);
  }
}

void Req_SKF_EnumFiles::MergeFrom(const Req_SKF_EnumFiles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_EnumFiles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.szfilename().size() > 0) {

    szfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szfilename_);
  }
  if (from.has_happlication()) {
    mutable_happlication()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.happlication());
  }
  if (from.has_pulsize()) {
    mutable_pulsize()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulsize());
  }
}

void Req_SKF_EnumFiles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_EnumFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_EnumFiles::CopyFrom(const Req_SKF_EnumFiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_EnumFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_EnumFiles::IsInitialized() const {
  return true;
}

void Req_SKF_EnumFiles::Swap(Req_SKF_EnumFiles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_EnumFiles::InternalSwap(Req_SKF_EnumFiles* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  szfilename_.Swap(&other->szfilename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(happlication_, other->happlication_);
  swap(pulsize_, other->pulsize_);
}

::google::protobuf::Metadata Req_SKF_EnumFiles::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_EnumFiles::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_EnumFiles_default_instance_._instance.get_mutable()->pulsize_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_EnumFiles::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& pulsize(const Rsp_SKF_EnumFiles* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_EnumFiles::HasBitSetters::pulsize(const Rsp_SKF_EnumFiles* msg) {
  return *msg->pulsize_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_EnumFiles::kSzFileNameFieldNumber;
const int Rsp_SKF_EnumFiles::kPulSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_EnumFiles::Rsp_SKF_EnumFiles()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_EnumFiles)
}
Rsp_SKF_EnumFiles::Rsp_SKF_EnumFiles(const Rsp_SKF_EnumFiles& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szfilename().size() > 0) {
    szfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szfilename_);
  }
  if (from.has_pulsize()) {
    pulsize_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulsize_);
  } else {
    pulsize_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_EnumFiles)
}

void Rsp_SKF_EnumFiles::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_EnumFiles_skf_2eproto.base);
  szfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pulsize_ = nullptr;
}

Rsp_SKF_EnumFiles::~Rsp_SKF_EnumFiles() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_EnumFiles)
  SharedDtor();
}

void Rsp_SKF_EnumFiles::SharedDtor() {
  szfilename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pulsize_;
}

void Rsp_SKF_EnumFiles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_EnumFiles& Rsp_SKF_EnumFiles::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_EnumFiles_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_EnumFiles::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_EnumFiles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && pulsize_ != nullptr) {
    delete pulsize_;
  }
  pulsize_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_EnumFiles::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_EnumFiles*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string szFileName = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.westone.skf.Rsp_SKF_EnumFiles.szFileName");
        object = msg->mutable_szfilename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulSize = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulsize();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_EnumFiles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_EnumFiles)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string szFileName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szfilename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szfilename().data(), static_cast<int>(this->szfilename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.westone.skf.Rsp_SKF_EnumFiles.szFileName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulSize = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulsize()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_EnumFiles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_EnumFiles)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_EnumFiles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_EnumFiles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string szFileName = 1;
  if (this->szfilename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szfilename().data(), static_cast<int>(this->szfilename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Rsp_SKF_EnumFiles.szFileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->szfilename(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 2;
  if (this->has_pulsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pulsize(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_EnumFiles)
}

::google::protobuf::uint8* Rsp_SKF_EnumFiles::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_EnumFiles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string szFileName = 1;
  if (this->szfilename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szfilename().data(), static_cast<int>(this->szfilename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Rsp_SKF_EnumFiles.szFileName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->szfilename(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 2;
  if (this->has_pulsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pulsize(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_EnumFiles)
  return target;
}

size_t Rsp_SKF_EnumFiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_EnumFiles)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string szFileName = 1;
  if (this->szfilename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szfilename());
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 2;
  if (this->has_pulsize()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulsize_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_EnumFiles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_EnumFiles)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_EnumFiles* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_EnumFiles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_EnumFiles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_EnumFiles)
    MergeFrom(*source);
  }
}

void Rsp_SKF_EnumFiles::MergeFrom(const Rsp_SKF_EnumFiles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_EnumFiles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.szfilename().size() > 0) {

    szfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szfilename_);
  }
  if (from.has_pulsize()) {
    mutable_pulsize()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulsize());
  }
}

void Rsp_SKF_EnumFiles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_EnumFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_EnumFiles::CopyFrom(const Rsp_SKF_EnumFiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_EnumFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_EnumFiles::IsInitialized() const {
  return true;
}

void Rsp_SKF_EnumFiles::Swap(Rsp_SKF_EnumFiles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_EnumFiles::InternalSwap(Rsp_SKF_EnumFiles* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  szfilename_.Swap(&other->szfilename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pulsize_, other->pulsize_);
}

::google::protobuf::Metadata Rsp_SKF_EnumFiles::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_GetFileInfo::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_GetFileInfo_default_instance_._instance.get_mutable()->happlication_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_GetFileInfo_default_instance_._instance.get_mutable()->pfileinfo_ = const_cast< ::com::westone::skf::SKF_FILEATTRIBUTES*>(
      ::com::westone::skf::SKF_FILEATTRIBUTES::internal_default_instance());
}
class Req_SKF_GetFileInfo::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& happlication(const Req_SKF_GetFileInfo* msg);
  static const ::com::westone::skf::SKF_FILEATTRIBUTES& pfileinfo(const Req_SKF_GetFileInfo* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GetFileInfo::HasBitSetters::happlication(const Req_SKF_GetFileInfo* msg) {
  return *msg->happlication_;
}
const ::com::westone::skf::SKF_FILEATTRIBUTES&
Req_SKF_GetFileInfo::HasBitSetters::pfileinfo(const Req_SKF_GetFileInfo* msg) {
  return *msg->pfileinfo_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_GetFileInfo::kHApplicationFieldNumber;
const int Req_SKF_GetFileInfo::kSzFileNameFieldNumber;
const int Req_SKF_GetFileInfo::kPFileInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_GetFileInfo::Req_SKF_GetFileInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_GetFileInfo)
}
Req_SKF_GetFileInfo::Req_SKF_GetFileInfo(const Req_SKF_GetFileInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szfilename().size() > 0) {
    szfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szfilename_);
  }
  if (from.has_happlication()) {
    happlication_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.happlication_);
  } else {
    happlication_ = nullptr;
  }
  if (from.has_pfileinfo()) {
    pfileinfo_ = new ::com::westone::skf::SKF_FILEATTRIBUTES(*from.pfileinfo_);
  } else {
    pfileinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_GetFileInfo)
}

void Req_SKF_GetFileInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_GetFileInfo_skf_2eproto.base);
  szfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&happlication_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pfileinfo_) -
      reinterpret_cast<char*>(&happlication_)) + sizeof(pfileinfo_));
}

Req_SKF_GetFileInfo::~Req_SKF_GetFileInfo() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_GetFileInfo)
  SharedDtor();
}

void Req_SKF_GetFileInfo::SharedDtor() {
  szfilename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete happlication_;
  if (this != internal_default_instance()) delete pfileinfo_;
}

void Req_SKF_GetFileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_GetFileInfo& Req_SKF_GetFileInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_GetFileInfo_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_GetFileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_GetFileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pfileinfo_ != nullptr) {
    delete pfileinfo_;
  }
  pfileinfo_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_GetFileInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_GetFileInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_happlication();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string szFileName = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.westone.skf.Req_SKF_GetFileInfo.szFileName");
        object = msg->mutable_szfilename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.SKF_FILEATTRIBUTES pFileInfo = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_FILEATTRIBUTES::_InternalParse;
        object = msg->mutable_pfileinfo();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_GetFileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_GetFileInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_happlication()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szFileName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szfilename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szfilename().data(), static_cast<int>(this->szfilename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.westone.skf.Req_SKF_GetFileInfo.szFileName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_FILEATTRIBUTES pFileInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pfileinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_GetFileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_GetFileInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_GetFileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_GetFileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::happlication(this), output);
  }

  // string szFileName = 2;
  if (this->szfilename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szfilename().data(), static_cast<int>(this->szfilename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_GetFileInfo.szFileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szfilename(), output);
  }

  // .com.westone.skf.SKF_FILEATTRIBUTES pFileInfo = 3;
  if (this->has_pfileinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::pfileinfo(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_GetFileInfo)
}

::google::protobuf::uint8* Req_SKF_GetFileInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_GetFileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::happlication(this), target);
  }

  // string szFileName = 2;
  if (this->szfilename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szfilename().data(), static_cast<int>(this->szfilename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_GetFileInfo.szFileName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->szfilename(), target);
  }

  // .com.westone.skf.SKF_FILEATTRIBUTES pFileInfo = 3;
  if (this->has_pfileinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::pfileinfo(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_GetFileInfo)
  return target;
}

size_t Req_SKF_GetFileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_GetFileInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string szFileName = 2;
  if (this->szfilename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szfilename());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *happlication_);
  }

  // .com.westone.skf.SKF_FILEATTRIBUTES pFileInfo = 3;
  if (this->has_pfileinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pfileinfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_GetFileInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_GetFileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_GetFileInfo* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_GetFileInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_GetFileInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_GetFileInfo)
    MergeFrom(*source);
  }
}

void Req_SKF_GetFileInfo::MergeFrom(const Req_SKF_GetFileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_GetFileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.szfilename().size() > 0) {

    szfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szfilename_);
  }
  if (from.has_happlication()) {
    mutable_happlication()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.happlication());
  }
  if (from.has_pfileinfo()) {
    mutable_pfileinfo()->::com::westone::skf::SKF_FILEATTRIBUTES::MergeFrom(from.pfileinfo());
  }
}

void Req_SKF_GetFileInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_GetFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_GetFileInfo::CopyFrom(const Req_SKF_GetFileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_GetFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_GetFileInfo::IsInitialized() const {
  return true;
}

void Req_SKF_GetFileInfo::Swap(Req_SKF_GetFileInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_GetFileInfo::InternalSwap(Req_SKF_GetFileInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  szfilename_.Swap(&other->szfilename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(happlication_, other->happlication_);
  swap(pfileinfo_, other->pfileinfo_);
}

::google::protobuf::Metadata Req_SKF_GetFileInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_GetFileInfo::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_GetFileInfo_default_instance_._instance.get_mutable()->pfileinfo_ = const_cast< ::com::westone::skf::SKF_FILEATTRIBUTES*>(
      ::com::westone::skf::SKF_FILEATTRIBUTES::internal_default_instance());
}
class Rsp_SKF_GetFileInfo::HasBitSetters {
 public:
  static const ::com::westone::skf::SKF_FILEATTRIBUTES& pfileinfo(const Rsp_SKF_GetFileInfo* msg);
};

const ::com::westone::skf::SKF_FILEATTRIBUTES&
Rsp_SKF_GetFileInfo::HasBitSetters::pfileinfo(const Rsp_SKF_GetFileInfo* msg) {
  return *msg->pfileinfo_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_GetFileInfo::kPFileInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_GetFileInfo::Rsp_SKF_GetFileInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_GetFileInfo)
}
Rsp_SKF_GetFileInfo::Rsp_SKF_GetFileInfo(const Rsp_SKF_GetFileInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pfileinfo()) {
    pfileinfo_ = new ::com::westone::skf::SKF_FILEATTRIBUTES(*from.pfileinfo_);
  } else {
    pfileinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_GetFileInfo)
}

void Rsp_SKF_GetFileInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_GetFileInfo_skf_2eproto.base);
  pfileinfo_ = nullptr;
}

Rsp_SKF_GetFileInfo::~Rsp_SKF_GetFileInfo() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_GetFileInfo)
  SharedDtor();
}

void Rsp_SKF_GetFileInfo::SharedDtor() {
  if (this != internal_default_instance()) delete pfileinfo_;
}

void Rsp_SKF_GetFileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_GetFileInfo& Rsp_SKF_GetFileInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_GetFileInfo_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_GetFileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_GetFileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pfileinfo_ != nullptr) {
    delete pfileinfo_;
  }
  pfileinfo_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_GetFileInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_GetFileInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.SKF_FILEATTRIBUTES pFileInfo = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_FILEATTRIBUTES::_InternalParse;
        object = msg->mutable_pfileinfo();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_GetFileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_GetFileInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.SKF_FILEATTRIBUTES pFileInfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pfileinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_GetFileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_GetFileInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_GetFileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_GetFileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.SKF_FILEATTRIBUTES pFileInfo = 1;
  if (this->has_pfileinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::pfileinfo(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_GetFileInfo)
}

::google::protobuf::uint8* Rsp_SKF_GetFileInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_GetFileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.SKF_FILEATTRIBUTES pFileInfo = 1;
  if (this->has_pfileinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::pfileinfo(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_GetFileInfo)
  return target;
}

size_t Rsp_SKF_GetFileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_GetFileInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.SKF_FILEATTRIBUTES pFileInfo = 1;
  if (this->has_pfileinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pfileinfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_GetFileInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_GetFileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_GetFileInfo* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_GetFileInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_GetFileInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_GetFileInfo)
    MergeFrom(*source);
  }
}

void Rsp_SKF_GetFileInfo::MergeFrom(const Rsp_SKF_GetFileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_GetFileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pfileinfo()) {
    mutable_pfileinfo()->::com::westone::skf::SKF_FILEATTRIBUTES::MergeFrom(from.pfileinfo());
  }
}

void Rsp_SKF_GetFileInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_GetFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_GetFileInfo::CopyFrom(const Rsp_SKF_GetFileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_GetFileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_GetFileInfo::IsInitialized() const {
  return true;
}

void Rsp_SKF_GetFileInfo::Swap(Rsp_SKF_GetFileInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_GetFileInfo::InternalSwap(Rsp_SKF_GetFileInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pfileinfo_, other->pfileinfo_);
}

::google::protobuf::Metadata Rsp_SKF_GetFileInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_ReadFile::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_ReadFile_default_instance_._instance.get_mutable()->happlication_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ReadFile_default_instance_._instance.get_mutable()->uloffset_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ReadFile_default_instance_._instance.get_mutable()->ulsize_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ReadFile_default_instance_._instance.get_mutable()->puloutlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_ReadFile::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& happlication(const Req_SKF_ReadFile* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& uloffset(const Req_SKF_ReadFile* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulsize(const Req_SKF_ReadFile* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& puloutlen(const Req_SKF_ReadFile* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ReadFile::HasBitSetters::happlication(const Req_SKF_ReadFile* msg) {
  return *msg->happlication_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ReadFile::HasBitSetters::uloffset(const Req_SKF_ReadFile* msg) {
  return *msg->uloffset_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ReadFile::HasBitSetters::ulsize(const Req_SKF_ReadFile* msg) {
  return *msg->ulsize_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ReadFile::HasBitSetters::puloutlen(const Req_SKF_ReadFile* msg) {
  return *msg->puloutlen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_ReadFile::kHApplicationFieldNumber;
const int Req_SKF_ReadFile::kSzFileNameFieldNumber;
const int Req_SKF_ReadFile::kUlOffsetFieldNumber;
const int Req_SKF_ReadFile::kUlSizeFieldNumber;
const int Req_SKF_ReadFile::kPbOutDataFieldNumber;
const int Req_SKF_ReadFile::kPulOutLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_ReadFile::Req_SKF_ReadFile()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_ReadFile)
}
Req_SKF_ReadFile::Req_SKF_ReadFile(const Req_SKF_ReadFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szfilename().size() > 0) {
    szfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szfilename_);
  }
  pboutdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pboutdata().size() > 0) {
    pboutdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pboutdata_);
  }
  if (from.has_happlication()) {
    happlication_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.happlication_);
  } else {
    happlication_ = nullptr;
  }
  if (from.has_uloffset()) {
    uloffset_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.uloffset_);
  } else {
    uloffset_ = nullptr;
  }
  if (from.has_ulsize()) {
    ulsize_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulsize_);
  } else {
    ulsize_ = nullptr;
  }
  if (from.has_puloutlen()) {
    puloutlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.puloutlen_);
  } else {
    puloutlen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_ReadFile)
}

void Req_SKF_ReadFile::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_ReadFile_skf_2eproto.base);
  szfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pboutdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&happlication_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&puloutlen_) -
      reinterpret_cast<char*>(&happlication_)) + sizeof(puloutlen_));
}

Req_SKF_ReadFile::~Req_SKF_ReadFile() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_ReadFile)
  SharedDtor();
}

void Req_SKF_ReadFile::SharedDtor() {
  szfilename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pboutdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete happlication_;
  if (this != internal_default_instance()) delete uloffset_;
  if (this != internal_default_instance()) delete ulsize_;
  if (this != internal_default_instance()) delete puloutlen_;
}

void Req_SKF_ReadFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_ReadFile& Req_SKF_ReadFile::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_ReadFile_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_ReadFile::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_ReadFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pboutdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && uloffset_ != nullptr) {
    delete uloffset_;
  }
  uloffset_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulsize_ != nullptr) {
    delete ulsize_;
  }
  ulsize_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && puloutlen_ != nullptr) {
    delete puloutlen_;
  }
  puloutlen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_ReadFile::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_ReadFile*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_happlication();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string szFileName = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.westone.skf.Req_SKF_ReadFile.szFileName");
        object = msg->mutable_szfilename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulOffset = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_uloffset();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulSize = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulsize();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbOutData = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pboutdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulOutLen = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_puloutlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_ReadFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_ReadFile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_happlication()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szFileName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szfilename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szfilename().data(), static_cast<int>(this->szfilename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.westone.skf.Req_SKF_ReadFile.szFileName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulOffset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uloffset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulSize = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulsize()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbOutData = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pboutdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulOutLen = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_puloutlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_ReadFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_ReadFile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_ReadFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_ReadFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::happlication(this), output);
  }

  // string szFileName = 2;
  if (this->szfilename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szfilename().data(), static_cast<int>(this->szfilename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_ReadFile.szFileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szfilename(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulOffset = 3;
  if (this->has_uloffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::uloffset(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulSize = 4;
  if (this->has_ulsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::ulsize(this), output);
  }

  // bytes pbOutData = 5;
  if (this->pboutdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->pboutdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulOutLen = 6;
  if (this->has_puloutlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::puloutlen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_ReadFile)
}

::google::protobuf::uint8* Req_SKF_ReadFile::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_ReadFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::happlication(this), target);
  }

  // string szFileName = 2;
  if (this->szfilename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szfilename().data(), static_cast<int>(this->szfilename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_ReadFile.szFileName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->szfilename(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulOffset = 3;
  if (this->has_uloffset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::uloffset(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulSize = 4;
  if (this->has_ulsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::ulsize(this), target);
  }

  // bytes pbOutData = 5;
  if (this->pboutdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->pboutdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulOutLen = 6;
  if (this->has_puloutlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::puloutlen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_ReadFile)
  return target;
}

size_t Req_SKF_ReadFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_ReadFile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string szFileName = 2;
  if (this->szfilename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szfilename());
  }

  // bytes pbOutData = 5;
  if (this->pboutdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pboutdata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *happlication_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulOffset = 3;
  if (this->has_uloffset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *uloffset_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulSize = 4;
  if (this->has_ulsize()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulsize_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulOutLen = 6;
  if (this->has_puloutlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *puloutlen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_ReadFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_ReadFile)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_ReadFile* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_ReadFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_ReadFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_ReadFile)
    MergeFrom(*source);
  }
}

void Req_SKF_ReadFile::MergeFrom(const Req_SKF_ReadFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_ReadFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.szfilename().size() > 0) {

    szfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szfilename_);
  }
  if (from.pboutdata().size() > 0) {

    pboutdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pboutdata_);
  }
  if (from.has_happlication()) {
    mutable_happlication()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.happlication());
  }
  if (from.has_uloffset()) {
    mutable_uloffset()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.uloffset());
  }
  if (from.has_ulsize()) {
    mutable_ulsize()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulsize());
  }
  if (from.has_puloutlen()) {
    mutable_puloutlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.puloutlen());
  }
}

void Req_SKF_ReadFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_ReadFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_ReadFile::CopyFrom(const Req_SKF_ReadFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_ReadFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_ReadFile::IsInitialized() const {
  return true;
}

void Req_SKF_ReadFile::Swap(Req_SKF_ReadFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_ReadFile::InternalSwap(Req_SKF_ReadFile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  szfilename_.Swap(&other->szfilename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pboutdata_.Swap(&other->pboutdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(happlication_, other->happlication_);
  swap(uloffset_, other->uloffset_);
  swap(ulsize_, other->ulsize_);
  swap(puloutlen_, other->puloutlen_);
}

::google::protobuf::Metadata Req_SKF_ReadFile::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_ReadFile::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_ReadFile_default_instance_._instance.get_mutable()->puloutlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_ReadFile::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& puloutlen(const Rsp_SKF_ReadFile* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_ReadFile::HasBitSetters::puloutlen(const Rsp_SKF_ReadFile* msg) {
  return *msg->puloutlen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_ReadFile::kPbOutDataFieldNumber;
const int Rsp_SKF_ReadFile::kPulOutLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_ReadFile::Rsp_SKF_ReadFile()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_ReadFile)
}
Rsp_SKF_ReadFile::Rsp_SKF_ReadFile(const Rsp_SKF_ReadFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pboutdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pboutdata().size() > 0) {
    pboutdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pboutdata_);
  }
  if (from.has_puloutlen()) {
    puloutlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.puloutlen_);
  } else {
    puloutlen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_ReadFile)
}

void Rsp_SKF_ReadFile::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_ReadFile_skf_2eproto.base);
  pboutdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  puloutlen_ = nullptr;
}

Rsp_SKF_ReadFile::~Rsp_SKF_ReadFile() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_ReadFile)
  SharedDtor();
}

void Rsp_SKF_ReadFile::SharedDtor() {
  pboutdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete puloutlen_;
}

void Rsp_SKF_ReadFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_ReadFile& Rsp_SKF_ReadFile::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_ReadFile_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_ReadFile::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_ReadFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pboutdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && puloutlen_ != nullptr) {
    delete puloutlen_;
  }
  puloutlen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_ReadFile::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_ReadFile*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes pbOutData = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pboutdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulOutLen = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_puloutlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_ReadFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_ReadFile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes pbOutData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pboutdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulOutLen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_puloutlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_ReadFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_ReadFile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_ReadFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_ReadFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbOutData = 1;
  if (this->pboutdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pboutdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulOutLen = 2;
  if (this->has_puloutlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::puloutlen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_ReadFile)
}

::google::protobuf::uint8* Rsp_SKF_ReadFile::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_ReadFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbOutData = 1;
  if (this->pboutdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pboutdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulOutLen = 2;
  if (this->has_puloutlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::puloutlen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_ReadFile)
  return target;
}

size_t Rsp_SKF_ReadFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_ReadFile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbOutData = 1;
  if (this->pboutdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pboutdata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulOutLen = 2;
  if (this->has_puloutlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *puloutlen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_ReadFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_ReadFile)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_ReadFile* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_ReadFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_ReadFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_ReadFile)
    MergeFrom(*source);
  }
}

void Rsp_SKF_ReadFile::MergeFrom(const Rsp_SKF_ReadFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_ReadFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pboutdata().size() > 0) {

    pboutdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pboutdata_);
  }
  if (from.has_puloutlen()) {
    mutable_puloutlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.puloutlen());
  }
}

void Rsp_SKF_ReadFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_ReadFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_ReadFile::CopyFrom(const Rsp_SKF_ReadFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_ReadFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_ReadFile::IsInitialized() const {
  return true;
}

void Rsp_SKF_ReadFile::Swap(Rsp_SKF_ReadFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_ReadFile::InternalSwap(Rsp_SKF_ReadFile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pboutdata_.Swap(&other->pboutdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(puloutlen_, other->puloutlen_);
}

::google::protobuf::Metadata Rsp_SKF_ReadFile::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_WriteFile::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_WriteFile_default_instance_._instance.get_mutable()->happlication_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_WriteFile_default_instance_._instance.get_mutable()->uloffset_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_WriteFile_default_instance_._instance.get_mutable()->ulsize_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_WriteFile::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& happlication(const Req_SKF_WriteFile* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& uloffset(const Req_SKF_WriteFile* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulsize(const Req_SKF_WriteFile* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_WriteFile::HasBitSetters::happlication(const Req_SKF_WriteFile* msg) {
  return *msg->happlication_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_WriteFile::HasBitSetters::uloffset(const Req_SKF_WriteFile* msg) {
  return *msg->uloffset_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_WriteFile::HasBitSetters::ulsize(const Req_SKF_WriteFile* msg) {
  return *msg->ulsize_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_WriteFile::kHApplicationFieldNumber;
const int Req_SKF_WriteFile::kSzFileNameFieldNumber;
const int Req_SKF_WriteFile::kUlOffsetFieldNumber;
const int Req_SKF_WriteFile::kPbDataFieldNumber;
const int Req_SKF_WriteFile::kUlSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_WriteFile::Req_SKF_WriteFile()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_WriteFile)
}
Req_SKF_WriteFile::Req_SKF_WriteFile(const Req_SKF_WriteFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szfilename().size() > 0) {
    szfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szfilename_);
  }
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbdata().size() > 0) {
    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.has_happlication()) {
    happlication_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.happlication_);
  } else {
    happlication_ = nullptr;
  }
  if (from.has_uloffset()) {
    uloffset_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.uloffset_);
  } else {
    uloffset_ = nullptr;
  }
  if (from.has_ulsize()) {
    ulsize_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulsize_);
  } else {
    ulsize_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_WriteFile)
}

void Req_SKF_WriteFile::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_WriteFile_skf_2eproto.base);
  szfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&happlication_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ulsize_) -
      reinterpret_cast<char*>(&happlication_)) + sizeof(ulsize_));
}

Req_SKF_WriteFile::~Req_SKF_WriteFile() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_WriteFile)
  SharedDtor();
}

void Req_SKF_WriteFile::SharedDtor() {
  szfilename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete happlication_;
  if (this != internal_default_instance()) delete uloffset_;
  if (this != internal_default_instance()) delete ulsize_;
}

void Req_SKF_WriteFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_WriteFile& Req_SKF_WriteFile::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_WriteFile_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_WriteFile::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_WriteFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && uloffset_ != nullptr) {
    delete uloffset_;
  }
  uloffset_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulsize_ != nullptr) {
    delete ulsize_;
  }
  ulsize_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_WriteFile::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_WriteFile*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_happlication();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string szFileName = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.westone.skf.Req_SKF_WriteFile.szFileName");
        object = msg->mutable_szfilename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulOffset = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_uloffset();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbData = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulSize = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulsize();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_WriteFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_WriteFile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_happlication()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szFileName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szfilename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szfilename().data(), static_cast<int>(this->szfilename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.westone.skf.Req_SKF_WriteFile.szFileName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulOffset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uloffset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbData = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulSize = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulsize()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_WriteFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_WriteFile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_WriteFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_WriteFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::happlication(this), output);
  }

  // string szFileName = 2;
  if (this->szfilename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szfilename().data(), static_cast<int>(this->szfilename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_WriteFile.szFileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szfilename(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulOffset = 3;
  if (this->has_uloffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::uloffset(this), output);
  }

  // bytes pbData = 4;
  if (this->pbdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->pbdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulSize = 5;
  if (this->has_ulsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::ulsize(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_WriteFile)
}

::google::protobuf::uint8* Req_SKF_WriteFile::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_WriteFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::happlication(this), target);
  }

  // string szFileName = 2;
  if (this->szfilename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szfilename().data(), static_cast<int>(this->szfilename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_WriteFile.szFileName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->szfilename(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulOffset = 3;
  if (this->has_uloffset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::uloffset(this), target);
  }

  // bytes pbData = 4;
  if (this->pbdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->pbdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulSize = 5;
  if (this->has_ulsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::ulsize(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_WriteFile)
  return target;
}

size_t Req_SKF_WriteFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_WriteFile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string szFileName = 2;
  if (this->szfilename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szfilename());
  }

  // bytes pbData = 4;
  if (this->pbdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbdata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *happlication_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulOffset = 3;
  if (this->has_uloffset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *uloffset_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulSize = 5;
  if (this->has_ulsize()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulsize_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_WriteFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_WriteFile)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_WriteFile* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_WriteFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_WriteFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_WriteFile)
    MergeFrom(*source);
  }
}

void Req_SKF_WriteFile::MergeFrom(const Req_SKF_WriteFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_WriteFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.szfilename().size() > 0) {

    szfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szfilename_);
  }
  if (from.pbdata().size() > 0) {

    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.has_happlication()) {
    mutable_happlication()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.happlication());
  }
  if (from.has_uloffset()) {
    mutable_uloffset()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.uloffset());
  }
  if (from.has_ulsize()) {
    mutable_ulsize()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulsize());
  }
}

void Req_SKF_WriteFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_WriteFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_WriteFile::CopyFrom(const Req_SKF_WriteFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_WriteFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_WriteFile::IsInitialized() const {
  return true;
}

void Req_SKF_WriteFile::Swap(Req_SKF_WriteFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_WriteFile::InternalSwap(Req_SKF_WriteFile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  szfilename_.Swap(&other->szfilename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pbdata_.Swap(&other->pbdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(happlication_, other->happlication_);
  swap(uloffset_, other->uloffset_);
  swap(ulsize_, other->ulsize_);
}

::google::protobuf::Metadata Req_SKF_WriteFile::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_WriteFile::InitAsDefaultInstance() {
}
class Rsp_SKF_WriteFile::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_WriteFile::Rsp_SKF_WriteFile()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_WriteFile)
}
Rsp_SKF_WriteFile::Rsp_SKF_WriteFile(const Rsp_SKF_WriteFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_WriteFile)
}

void Rsp_SKF_WriteFile::SharedCtor() {
}

Rsp_SKF_WriteFile::~Rsp_SKF_WriteFile() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_WriteFile)
  SharedDtor();
}

void Rsp_SKF_WriteFile::SharedDtor() {
}

void Rsp_SKF_WriteFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_WriteFile& Rsp_SKF_WriteFile::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_WriteFile_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_WriteFile::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_WriteFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_WriteFile::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_WriteFile*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_WriteFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_WriteFile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_WriteFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_WriteFile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_WriteFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_WriteFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_WriteFile)
}

::google::protobuf::uint8* Rsp_SKF_WriteFile::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_WriteFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_WriteFile)
  return target;
}

size_t Rsp_SKF_WriteFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_WriteFile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_WriteFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_WriteFile)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_WriteFile* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_WriteFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_WriteFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_WriteFile)
    MergeFrom(*source);
  }
}

void Rsp_SKF_WriteFile::MergeFrom(const Rsp_SKF_WriteFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_WriteFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rsp_SKF_WriteFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_WriteFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_WriteFile::CopyFrom(const Rsp_SKF_WriteFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_WriteFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_WriteFile::IsInitialized() const {
  return true;
}

void Rsp_SKF_WriteFile::Swap(Rsp_SKF_WriteFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_WriteFile::InternalSwap(Rsp_SKF_WriteFile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rsp_SKF_WriteFile::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_CreateContainer::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_CreateContainer_default_instance_._instance.get_mutable()->happlication_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_CreateContainer_default_instance_._instance.get_mutable()->phcontainer_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_CreateContainer::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& happlication(const Req_SKF_CreateContainer* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& phcontainer(const Req_SKF_CreateContainer* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_CreateContainer::HasBitSetters::happlication(const Req_SKF_CreateContainer* msg) {
  return *msg->happlication_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_CreateContainer::HasBitSetters::phcontainer(const Req_SKF_CreateContainer* msg) {
  return *msg->phcontainer_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_CreateContainer::kHApplicationFieldNumber;
const int Req_SKF_CreateContainer::kSzContainerNameFieldNumber;
const int Req_SKF_CreateContainer::kPhContainerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_CreateContainer::Req_SKF_CreateContainer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_CreateContainer)
}
Req_SKF_CreateContainer::Req_SKF_CreateContainer(const Req_SKF_CreateContainer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szcontainername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szcontainername().size() > 0) {
    szcontainername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szcontainername_);
  }
  if (from.has_happlication()) {
    happlication_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.happlication_);
  } else {
    happlication_ = nullptr;
  }
  if (from.has_phcontainer()) {
    phcontainer_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.phcontainer_);
  } else {
    phcontainer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_CreateContainer)
}

void Req_SKF_CreateContainer::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_CreateContainer_skf_2eproto.base);
  szcontainername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&happlication_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phcontainer_) -
      reinterpret_cast<char*>(&happlication_)) + sizeof(phcontainer_));
}

Req_SKF_CreateContainer::~Req_SKF_CreateContainer() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_CreateContainer)
  SharedDtor();
}

void Req_SKF_CreateContainer::SharedDtor() {
  szcontainername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete happlication_;
  if (this != internal_default_instance()) delete phcontainer_;
}

void Req_SKF_CreateContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_CreateContainer& Req_SKF_CreateContainer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_CreateContainer_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_CreateContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_CreateContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szcontainername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && phcontainer_ != nullptr) {
    delete phcontainer_;
  }
  phcontainer_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_CreateContainer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_CreateContainer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_happlication();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string szContainerName = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.westone.skf.Req_SKF_CreateContainer.szContainerName");
        object = msg->mutable_szcontainername();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 phContainer = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_phcontainer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_CreateContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_CreateContainer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_happlication()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szContainerName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szcontainername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szcontainername().data(), static_cast<int>(this->szcontainername().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.westone.skf.Req_SKF_CreateContainer.szContainerName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 phContainer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phcontainer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_CreateContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_CreateContainer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_CreateContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_CreateContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::happlication(this), output);
  }

  // string szContainerName = 2;
  if (this->szcontainername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szcontainername().data(), static_cast<int>(this->szcontainername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_CreateContainer.szContainerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szcontainername(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phContainer = 3;
  if (this->has_phcontainer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::phcontainer(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_CreateContainer)
}

::google::protobuf::uint8* Req_SKF_CreateContainer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_CreateContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::happlication(this), target);
  }

  // string szContainerName = 2;
  if (this->szcontainername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szcontainername().data(), static_cast<int>(this->szcontainername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_CreateContainer.szContainerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->szcontainername(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phContainer = 3;
  if (this->has_phcontainer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::phcontainer(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_CreateContainer)
  return target;
}

size_t Req_SKF_CreateContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_CreateContainer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string szContainerName = 2;
  if (this->szcontainername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szcontainername());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *happlication_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phContainer = 3;
  if (this->has_phcontainer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *phcontainer_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_CreateContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_CreateContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_CreateContainer* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_CreateContainer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_CreateContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_CreateContainer)
    MergeFrom(*source);
  }
}

void Req_SKF_CreateContainer::MergeFrom(const Req_SKF_CreateContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_CreateContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.szcontainername().size() > 0) {

    szcontainername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szcontainername_);
  }
  if (from.has_happlication()) {
    mutable_happlication()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.happlication());
  }
  if (from.has_phcontainer()) {
    mutable_phcontainer()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.phcontainer());
  }
}

void Req_SKF_CreateContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_CreateContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_CreateContainer::CopyFrom(const Req_SKF_CreateContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_CreateContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_CreateContainer::IsInitialized() const {
  return true;
}

void Req_SKF_CreateContainer::Swap(Req_SKF_CreateContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_CreateContainer::InternalSwap(Req_SKF_CreateContainer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  szcontainername_.Swap(&other->szcontainername_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(happlication_, other->happlication_);
  swap(phcontainer_, other->phcontainer_);
}

::google::protobuf::Metadata Req_SKF_CreateContainer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_CreateContainer::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_CreateContainer_default_instance_._instance.get_mutable()->phcontainer_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_CreateContainer::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& phcontainer(const Rsp_SKF_CreateContainer* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_CreateContainer::HasBitSetters::phcontainer(const Rsp_SKF_CreateContainer* msg) {
  return *msg->phcontainer_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_CreateContainer::kPhContainerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_CreateContainer::Rsp_SKF_CreateContainer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_CreateContainer)
}
Rsp_SKF_CreateContainer::Rsp_SKF_CreateContainer(const Rsp_SKF_CreateContainer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_phcontainer()) {
    phcontainer_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.phcontainer_);
  } else {
    phcontainer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_CreateContainer)
}

void Rsp_SKF_CreateContainer::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_CreateContainer_skf_2eproto.base);
  phcontainer_ = nullptr;
}

Rsp_SKF_CreateContainer::~Rsp_SKF_CreateContainer() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_CreateContainer)
  SharedDtor();
}

void Rsp_SKF_CreateContainer::SharedDtor() {
  if (this != internal_default_instance()) delete phcontainer_;
}

void Rsp_SKF_CreateContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_CreateContainer& Rsp_SKF_CreateContainer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_CreateContainer_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_CreateContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_CreateContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && phcontainer_ != nullptr) {
    delete phcontainer_;
  }
  phcontainer_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_CreateContainer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_CreateContainer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 phContainer = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_phcontainer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_CreateContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_CreateContainer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 phContainer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phcontainer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_CreateContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_CreateContainer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_CreateContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_CreateContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 phContainer = 1;
  if (this->has_phcontainer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::phcontainer(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_CreateContainer)
}

::google::protobuf::uint8* Rsp_SKF_CreateContainer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_CreateContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 phContainer = 1;
  if (this->has_phcontainer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::phcontainer(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_CreateContainer)
  return target;
}

size_t Rsp_SKF_CreateContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_CreateContainer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 phContainer = 1;
  if (this->has_phcontainer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *phcontainer_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_CreateContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_CreateContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_CreateContainer* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_CreateContainer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_CreateContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_CreateContainer)
    MergeFrom(*source);
  }
}

void Rsp_SKF_CreateContainer::MergeFrom(const Rsp_SKF_CreateContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_CreateContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_phcontainer()) {
    mutable_phcontainer()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.phcontainer());
  }
}

void Rsp_SKF_CreateContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_CreateContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_CreateContainer::CopyFrom(const Rsp_SKF_CreateContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_CreateContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_CreateContainer::IsInitialized() const {
  return true;
}

void Rsp_SKF_CreateContainer::Swap(Rsp_SKF_CreateContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_CreateContainer::InternalSwap(Rsp_SKF_CreateContainer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(phcontainer_, other->phcontainer_);
}

::google::protobuf::Metadata Rsp_SKF_CreateContainer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_DeleteContainer::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_DeleteContainer_default_instance_._instance.get_mutable()->happlication_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_DeleteContainer::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& happlication(const Req_SKF_DeleteContainer* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_DeleteContainer::HasBitSetters::happlication(const Req_SKF_DeleteContainer* msg) {
  return *msg->happlication_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_DeleteContainer::kHApplicationFieldNumber;
const int Req_SKF_DeleteContainer::kSzContainerNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_DeleteContainer::Req_SKF_DeleteContainer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_DeleteContainer)
}
Req_SKF_DeleteContainer::Req_SKF_DeleteContainer(const Req_SKF_DeleteContainer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szcontainername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szcontainername().size() > 0) {
    szcontainername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szcontainername_);
  }
  if (from.has_happlication()) {
    happlication_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.happlication_);
  } else {
    happlication_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_DeleteContainer)
}

void Req_SKF_DeleteContainer::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_DeleteContainer_skf_2eproto.base);
  szcontainername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  happlication_ = nullptr;
}

Req_SKF_DeleteContainer::~Req_SKF_DeleteContainer() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_DeleteContainer)
  SharedDtor();
}

void Req_SKF_DeleteContainer::SharedDtor() {
  szcontainername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete happlication_;
}

void Req_SKF_DeleteContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_DeleteContainer& Req_SKF_DeleteContainer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_DeleteContainer_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_DeleteContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_DeleteContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szcontainername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_DeleteContainer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_DeleteContainer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_happlication();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string szContainerName = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.westone.skf.Req_SKF_DeleteContainer.szContainerName");
        object = msg->mutable_szcontainername();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_DeleteContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_DeleteContainer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_happlication()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szContainerName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szcontainername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szcontainername().data(), static_cast<int>(this->szcontainername().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.westone.skf.Req_SKF_DeleteContainer.szContainerName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_DeleteContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_DeleteContainer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_DeleteContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_DeleteContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::happlication(this), output);
  }

  // string szContainerName = 2;
  if (this->szcontainername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szcontainername().data(), static_cast<int>(this->szcontainername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_DeleteContainer.szContainerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szcontainername(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_DeleteContainer)
}

::google::protobuf::uint8* Req_SKF_DeleteContainer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_DeleteContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::happlication(this), target);
  }

  // string szContainerName = 2;
  if (this->szcontainername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szcontainername().data(), static_cast<int>(this->szcontainername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_DeleteContainer.szContainerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->szcontainername(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_DeleteContainer)
  return target;
}

size_t Req_SKF_DeleteContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_DeleteContainer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string szContainerName = 2;
  if (this->szcontainername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szcontainername());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *happlication_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_DeleteContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_DeleteContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_DeleteContainer* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_DeleteContainer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_DeleteContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_DeleteContainer)
    MergeFrom(*source);
  }
}

void Req_SKF_DeleteContainer::MergeFrom(const Req_SKF_DeleteContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_DeleteContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.szcontainername().size() > 0) {

    szcontainername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szcontainername_);
  }
  if (from.has_happlication()) {
    mutable_happlication()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.happlication());
  }
}

void Req_SKF_DeleteContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_DeleteContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_DeleteContainer::CopyFrom(const Req_SKF_DeleteContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_DeleteContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_DeleteContainer::IsInitialized() const {
  return true;
}

void Req_SKF_DeleteContainer::Swap(Req_SKF_DeleteContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_DeleteContainer::InternalSwap(Req_SKF_DeleteContainer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  szcontainername_.Swap(&other->szcontainername_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(happlication_, other->happlication_);
}

::google::protobuf::Metadata Req_SKF_DeleteContainer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_DeleteContainer::InitAsDefaultInstance() {
}
class Rsp_SKF_DeleteContainer::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_DeleteContainer::Rsp_SKF_DeleteContainer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_DeleteContainer)
}
Rsp_SKF_DeleteContainer::Rsp_SKF_DeleteContainer(const Rsp_SKF_DeleteContainer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_DeleteContainer)
}

void Rsp_SKF_DeleteContainer::SharedCtor() {
}

Rsp_SKF_DeleteContainer::~Rsp_SKF_DeleteContainer() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_DeleteContainer)
  SharedDtor();
}

void Rsp_SKF_DeleteContainer::SharedDtor() {
}

void Rsp_SKF_DeleteContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_DeleteContainer& Rsp_SKF_DeleteContainer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_DeleteContainer_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_DeleteContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_DeleteContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_DeleteContainer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_DeleteContainer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_DeleteContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_DeleteContainer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_DeleteContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_DeleteContainer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_DeleteContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_DeleteContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_DeleteContainer)
}

::google::protobuf::uint8* Rsp_SKF_DeleteContainer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_DeleteContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_DeleteContainer)
  return target;
}

size_t Rsp_SKF_DeleteContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_DeleteContainer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_DeleteContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_DeleteContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_DeleteContainer* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_DeleteContainer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_DeleteContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_DeleteContainer)
    MergeFrom(*source);
  }
}

void Rsp_SKF_DeleteContainer::MergeFrom(const Rsp_SKF_DeleteContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_DeleteContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rsp_SKF_DeleteContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_DeleteContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_DeleteContainer::CopyFrom(const Rsp_SKF_DeleteContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_DeleteContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_DeleteContainer::IsInitialized() const {
  return true;
}

void Rsp_SKF_DeleteContainer::Swap(Rsp_SKF_DeleteContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_DeleteContainer::InternalSwap(Rsp_SKF_DeleteContainer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rsp_SKF_DeleteContainer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_OpenContainer::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_OpenContainer_default_instance_._instance.get_mutable()->happlication_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_OpenContainer_default_instance_._instance.get_mutable()->phcontainer_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_OpenContainer::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& happlication(const Req_SKF_OpenContainer* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& phcontainer(const Req_SKF_OpenContainer* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_OpenContainer::HasBitSetters::happlication(const Req_SKF_OpenContainer* msg) {
  return *msg->happlication_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_OpenContainer::HasBitSetters::phcontainer(const Req_SKF_OpenContainer* msg) {
  return *msg->phcontainer_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_OpenContainer::kHApplicationFieldNumber;
const int Req_SKF_OpenContainer::kSzContainerNameFieldNumber;
const int Req_SKF_OpenContainer::kPhContainerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_OpenContainer::Req_SKF_OpenContainer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_OpenContainer)
}
Req_SKF_OpenContainer::Req_SKF_OpenContainer(const Req_SKF_OpenContainer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szcontainername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szcontainername().size() > 0) {
    szcontainername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szcontainername_);
  }
  if (from.has_happlication()) {
    happlication_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.happlication_);
  } else {
    happlication_ = nullptr;
  }
  if (from.has_phcontainer()) {
    phcontainer_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.phcontainer_);
  } else {
    phcontainer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_OpenContainer)
}

void Req_SKF_OpenContainer::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_OpenContainer_skf_2eproto.base);
  szcontainername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&happlication_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phcontainer_) -
      reinterpret_cast<char*>(&happlication_)) + sizeof(phcontainer_));
}

Req_SKF_OpenContainer::~Req_SKF_OpenContainer() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_OpenContainer)
  SharedDtor();
}

void Req_SKF_OpenContainer::SharedDtor() {
  szcontainername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete happlication_;
  if (this != internal_default_instance()) delete phcontainer_;
}

void Req_SKF_OpenContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_OpenContainer& Req_SKF_OpenContainer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_OpenContainer_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_OpenContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_OpenContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szcontainername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && phcontainer_ != nullptr) {
    delete phcontainer_;
  }
  phcontainer_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_OpenContainer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_OpenContainer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_happlication();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string szContainerName = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.westone.skf.Req_SKF_OpenContainer.szContainerName");
        object = msg->mutable_szcontainername();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 phContainer = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_phcontainer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_OpenContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_OpenContainer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_happlication()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szContainerName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szcontainername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szcontainername().data(), static_cast<int>(this->szcontainername().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.westone.skf.Req_SKF_OpenContainer.szContainerName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 phContainer = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phcontainer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_OpenContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_OpenContainer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_OpenContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_OpenContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::happlication(this), output);
  }

  // string szContainerName = 2;
  if (this->szcontainername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szcontainername().data(), static_cast<int>(this->szcontainername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_OpenContainer.szContainerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szcontainername(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phContainer = 3;
  if (this->has_phcontainer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::phcontainer(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_OpenContainer)
}

::google::protobuf::uint8* Req_SKF_OpenContainer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_OpenContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::happlication(this), target);
  }

  // string szContainerName = 2;
  if (this->szcontainername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szcontainername().data(), static_cast<int>(this->szcontainername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_OpenContainer.szContainerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->szcontainername(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phContainer = 3;
  if (this->has_phcontainer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::phcontainer(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_OpenContainer)
  return target;
}

size_t Req_SKF_OpenContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_OpenContainer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string szContainerName = 2;
  if (this->szcontainername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szcontainername());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *happlication_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phContainer = 3;
  if (this->has_phcontainer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *phcontainer_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_OpenContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_OpenContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_OpenContainer* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_OpenContainer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_OpenContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_OpenContainer)
    MergeFrom(*source);
  }
}

void Req_SKF_OpenContainer::MergeFrom(const Req_SKF_OpenContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_OpenContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.szcontainername().size() > 0) {

    szcontainername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szcontainername_);
  }
  if (from.has_happlication()) {
    mutable_happlication()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.happlication());
  }
  if (from.has_phcontainer()) {
    mutable_phcontainer()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.phcontainer());
  }
}

void Req_SKF_OpenContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_OpenContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_OpenContainer::CopyFrom(const Req_SKF_OpenContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_OpenContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_OpenContainer::IsInitialized() const {
  return true;
}

void Req_SKF_OpenContainer::Swap(Req_SKF_OpenContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_OpenContainer::InternalSwap(Req_SKF_OpenContainer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  szcontainername_.Swap(&other->szcontainername_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(happlication_, other->happlication_);
  swap(phcontainer_, other->phcontainer_);
}

::google::protobuf::Metadata Req_SKF_OpenContainer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_OpenContainer::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_OpenContainer_default_instance_._instance.get_mutable()->phcontainer_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_OpenContainer::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& phcontainer(const Rsp_SKF_OpenContainer* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_OpenContainer::HasBitSetters::phcontainer(const Rsp_SKF_OpenContainer* msg) {
  return *msg->phcontainer_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_OpenContainer::kPhContainerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_OpenContainer::Rsp_SKF_OpenContainer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_OpenContainer)
}
Rsp_SKF_OpenContainer::Rsp_SKF_OpenContainer(const Rsp_SKF_OpenContainer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_phcontainer()) {
    phcontainer_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.phcontainer_);
  } else {
    phcontainer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_OpenContainer)
}

void Rsp_SKF_OpenContainer::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_OpenContainer_skf_2eproto.base);
  phcontainer_ = nullptr;
}

Rsp_SKF_OpenContainer::~Rsp_SKF_OpenContainer() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_OpenContainer)
  SharedDtor();
}

void Rsp_SKF_OpenContainer::SharedDtor() {
  if (this != internal_default_instance()) delete phcontainer_;
}

void Rsp_SKF_OpenContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_OpenContainer& Rsp_SKF_OpenContainer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_OpenContainer_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_OpenContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_OpenContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && phcontainer_ != nullptr) {
    delete phcontainer_;
  }
  phcontainer_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_OpenContainer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_OpenContainer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 phContainer = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_phcontainer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_OpenContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_OpenContainer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 phContainer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phcontainer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_OpenContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_OpenContainer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_OpenContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_OpenContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 phContainer = 1;
  if (this->has_phcontainer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::phcontainer(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_OpenContainer)
}

::google::protobuf::uint8* Rsp_SKF_OpenContainer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_OpenContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 phContainer = 1;
  if (this->has_phcontainer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::phcontainer(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_OpenContainer)
  return target;
}

size_t Rsp_SKF_OpenContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_OpenContainer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 phContainer = 1;
  if (this->has_phcontainer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *phcontainer_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_OpenContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_OpenContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_OpenContainer* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_OpenContainer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_OpenContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_OpenContainer)
    MergeFrom(*source);
  }
}

void Rsp_SKF_OpenContainer::MergeFrom(const Rsp_SKF_OpenContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_OpenContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_phcontainer()) {
    mutable_phcontainer()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.phcontainer());
  }
}

void Rsp_SKF_OpenContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_OpenContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_OpenContainer::CopyFrom(const Rsp_SKF_OpenContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_OpenContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_OpenContainer::IsInitialized() const {
  return true;
}

void Rsp_SKF_OpenContainer::Swap(Rsp_SKF_OpenContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_OpenContainer::InternalSwap(Rsp_SKF_OpenContainer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(phcontainer_, other->phcontainer_);
}

::google::protobuf::Metadata Rsp_SKF_OpenContainer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_CloseContainer::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_CloseContainer_default_instance_._instance.get_mutable()->hcontainer_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_CloseContainer::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hcontainer(const Req_SKF_CloseContainer* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_CloseContainer::HasBitSetters::hcontainer(const Req_SKF_CloseContainer* msg) {
  return *msg->hcontainer_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_CloseContainer::kHContainerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_CloseContainer::Req_SKF_CloseContainer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_CloseContainer)
}
Req_SKF_CloseContainer::Req_SKF_CloseContainer(const Req_SKF_CloseContainer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hcontainer()) {
    hcontainer_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hcontainer_);
  } else {
    hcontainer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_CloseContainer)
}

void Req_SKF_CloseContainer::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_CloseContainer_skf_2eproto.base);
  hcontainer_ = nullptr;
}

Req_SKF_CloseContainer::~Req_SKF_CloseContainer() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_CloseContainer)
  SharedDtor();
}

void Req_SKF_CloseContainer::SharedDtor() {
  if (this != internal_default_instance()) delete hcontainer_;
}

void Req_SKF_CloseContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_CloseContainer& Req_SKF_CloseContainer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_CloseContainer_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_CloseContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_CloseContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_CloseContainer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_CloseContainer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hcontainer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_CloseContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_CloseContainer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hcontainer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_CloseContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_CloseContainer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_CloseContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_CloseContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hcontainer(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_CloseContainer)
}

::google::protobuf::uint8* Req_SKF_CloseContainer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_CloseContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hcontainer(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_CloseContainer)
  return target;
}

size_t Req_SKF_CloseContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_CloseContainer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hcontainer_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_CloseContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_CloseContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_CloseContainer* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_CloseContainer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_CloseContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_CloseContainer)
    MergeFrom(*source);
  }
}

void Req_SKF_CloseContainer::MergeFrom(const Req_SKF_CloseContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_CloseContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hcontainer()) {
    mutable_hcontainer()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hcontainer());
  }
}

void Req_SKF_CloseContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_CloseContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_CloseContainer::CopyFrom(const Req_SKF_CloseContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_CloseContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_CloseContainer::IsInitialized() const {
  return true;
}

void Req_SKF_CloseContainer::Swap(Req_SKF_CloseContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_CloseContainer::InternalSwap(Req_SKF_CloseContainer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(hcontainer_, other->hcontainer_);
}

::google::protobuf::Metadata Req_SKF_CloseContainer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_CloseContainer::InitAsDefaultInstance() {
}
class Rsp_SKF_CloseContainer::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_CloseContainer::Rsp_SKF_CloseContainer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_CloseContainer)
}
Rsp_SKF_CloseContainer::Rsp_SKF_CloseContainer(const Rsp_SKF_CloseContainer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_CloseContainer)
}

void Rsp_SKF_CloseContainer::SharedCtor() {
}

Rsp_SKF_CloseContainer::~Rsp_SKF_CloseContainer() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_CloseContainer)
  SharedDtor();
}

void Rsp_SKF_CloseContainer::SharedDtor() {
}

void Rsp_SKF_CloseContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_CloseContainer& Rsp_SKF_CloseContainer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_CloseContainer_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_CloseContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_CloseContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_CloseContainer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_CloseContainer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_CloseContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_CloseContainer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_CloseContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_CloseContainer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_CloseContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_CloseContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_CloseContainer)
}

::google::protobuf::uint8* Rsp_SKF_CloseContainer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_CloseContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_CloseContainer)
  return target;
}

size_t Rsp_SKF_CloseContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_CloseContainer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_CloseContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_CloseContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_CloseContainer* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_CloseContainer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_CloseContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_CloseContainer)
    MergeFrom(*source);
  }
}

void Rsp_SKF_CloseContainer::MergeFrom(const Rsp_SKF_CloseContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_CloseContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rsp_SKF_CloseContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_CloseContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_CloseContainer::CopyFrom(const Rsp_SKF_CloseContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_CloseContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_CloseContainer::IsInitialized() const {
  return true;
}

void Rsp_SKF_CloseContainer::Swap(Rsp_SKF_CloseContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_CloseContainer::InternalSwap(Rsp_SKF_CloseContainer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rsp_SKF_CloseContainer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_EnumContainer::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_EnumContainer_default_instance_._instance.get_mutable()->happlication_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_EnumContainer_default_instance_._instance.get_mutable()->pulsize_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_EnumContainer::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& happlication(const Req_SKF_EnumContainer* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& pulsize(const Req_SKF_EnumContainer* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_EnumContainer::HasBitSetters::happlication(const Req_SKF_EnumContainer* msg) {
  return *msg->happlication_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_EnumContainer::HasBitSetters::pulsize(const Req_SKF_EnumContainer* msg) {
  return *msg->pulsize_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_EnumContainer::kHApplicationFieldNumber;
const int Req_SKF_EnumContainer::kSzContainerNameFieldNumber;
const int Req_SKF_EnumContainer::kPulSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_EnumContainer::Req_SKF_EnumContainer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_EnumContainer)
}
Req_SKF_EnumContainer::Req_SKF_EnumContainer(const Req_SKF_EnumContainer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szcontainername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szcontainername().size() > 0) {
    szcontainername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szcontainername_);
  }
  if (from.has_happlication()) {
    happlication_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.happlication_);
  } else {
    happlication_ = nullptr;
  }
  if (from.has_pulsize()) {
    pulsize_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulsize_);
  } else {
    pulsize_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_EnumContainer)
}

void Req_SKF_EnumContainer::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_EnumContainer_skf_2eproto.base);
  szcontainername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&happlication_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pulsize_) -
      reinterpret_cast<char*>(&happlication_)) + sizeof(pulsize_));
}

Req_SKF_EnumContainer::~Req_SKF_EnumContainer() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_EnumContainer)
  SharedDtor();
}

void Req_SKF_EnumContainer::SharedDtor() {
  szcontainername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete happlication_;
  if (this != internal_default_instance()) delete pulsize_;
}

void Req_SKF_EnumContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_EnumContainer& Req_SKF_EnumContainer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_EnumContainer_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_EnumContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_EnumContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szcontainername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pulsize_ != nullptr) {
    delete pulsize_;
  }
  pulsize_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_EnumContainer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_EnumContainer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_happlication();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string szContainerName = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.westone.skf.Req_SKF_EnumContainer.szContainerName");
        object = msg->mutable_szcontainername();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulSize = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulsize();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_EnumContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_EnumContainer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_happlication()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string szContainerName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szcontainername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szcontainername().data(), static_cast<int>(this->szcontainername().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.westone.skf.Req_SKF_EnumContainer.szContainerName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulSize = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulsize()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_EnumContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_EnumContainer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_EnumContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_EnumContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::happlication(this), output);
  }

  // string szContainerName = 2;
  if (this->szcontainername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szcontainername().data(), static_cast<int>(this->szcontainername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_EnumContainer.szContainerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->szcontainername(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 3;
  if (this->has_pulsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::pulsize(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_EnumContainer)
}

::google::protobuf::uint8* Req_SKF_EnumContainer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_EnumContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::happlication(this), target);
  }

  // string szContainerName = 2;
  if (this->szcontainername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szcontainername().data(), static_cast<int>(this->szcontainername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Req_SKF_EnumContainer.szContainerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->szcontainername(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 3;
  if (this->has_pulsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::pulsize(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_EnumContainer)
  return target;
}

size_t Req_SKF_EnumContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_EnumContainer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string szContainerName = 2;
  if (this->szcontainername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szcontainername());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  if (this->has_happlication()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *happlication_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 3;
  if (this->has_pulsize()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulsize_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_EnumContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_EnumContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_EnumContainer* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_EnumContainer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_EnumContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_EnumContainer)
    MergeFrom(*source);
  }
}

void Req_SKF_EnumContainer::MergeFrom(const Req_SKF_EnumContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_EnumContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.szcontainername().size() > 0) {

    szcontainername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szcontainername_);
  }
  if (from.has_happlication()) {
    mutable_happlication()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.happlication());
  }
  if (from.has_pulsize()) {
    mutable_pulsize()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulsize());
  }
}

void Req_SKF_EnumContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_EnumContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_EnumContainer::CopyFrom(const Req_SKF_EnumContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_EnumContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_EnumContainer::IsInitialized() const {
  return true;
}

void Req_SKF_EnumContainer::Swap(Req_SKF_EnumContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_EnumContainer::InternalSwap(Req_SKF_EnumContainer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  szcontainername_.Swap(&other->szcontainername_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(happlication_, other->happlication_);
  swap(pulsize_, other->pulsize_);
}

::google::protobuf::Metadata Req_SKF_EnumContainer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_EnumContainer::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_EnumContainer_default_instance_._instance.get_mutable()->pulsize_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_EnumContainer::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& pulsize(const Rsp_SKF_EnumContainer* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_EnumContainer::HasBitSetters::pulsize(const Rsp_SKF_EnumContainer* msg) {
  return *msg->pulsize_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_EnumContainer::kSzContainerNameFieldNumber;
const int Rsp_SKF_EnumContainer::kPulSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_EnumContainer::Rsp_SKF_EnumContainer()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_EnumContainer)
}
Rsp_SKF_EnumContainer::Rsp_SKF_EnumContainer(const Rsp_SKF_EnumContainer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  szcontainername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.szcontainername().size() > 0) {
    szcontainername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szcontainername_);
  }
  if (from.has_pulsize()) {
    pulsize_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulsize_);
  } else {
    pulsize_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_EnumContainer)
}

void Rsp_SKF_EnumContainer::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_EnumContainer_skf_2eproto.base);
  szcontainername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pulsize_ = nullptr;
}

Rsp_SKF_EnumContainer::~Rsp_SKF_EnumContainer() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_EnumContainer)
  SharedDtor();
}

void Rsp_SKF_EnumContainer::SharedDtor() {
  szcontainername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pulsize_;
}

void Rsp_SKF_EnumContainer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_EnumContainer& Rsp_SKF_EnumContainer::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_EnumContainer_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_EnumContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_EnumContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  szcontainername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && pulsize_ != nullptr) {
    delete pulsize_;
  }
  pulsize_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_EnumContainer::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_EnumContainer*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string szContainerName = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.westone.skf.Rsp_SKF_EnumContainer.szContainerName");
        object = msg->mutable_szcontainername();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulSize = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulsize();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_EnumContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_EnumContainer)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string szContainerName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szcontainername()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->szcontainername().data(), static_cast<int>(this->szcontainername().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.westone.skf.Rsp_SKF_EnumContainer.szContainerName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulSize = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulsize()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_EnumContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_EnumContainer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_EnumContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_EnumContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string szContainerName = 1;
  if (this->szcontainername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szcontainername().data(), static_cast<int>(this->szcontainername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Rsp_SKF_EnumContainer.szContainerName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->szcontainername(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 2;
  if (this->has_pulsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pulsize(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_EnumContainer)
}

::google::protobuf::uint8* Rsp_SKF_EnumContainer::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_EnumContainer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string szContainerName = 1;
  if (this->szcontainername().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->szcontainername().data(), static_cast<int>(this->szcontainername().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.westone.skf.Rsp_SKF_EnumContainer.szContainerName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->szcontainername(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 2;
  if (this->has_pulsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pulsize(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_EnumContainer)
  return target;
}

size_t Rsp_SKF_EnumContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_EnumContainer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string szContainerName = 1;
  if (this->szcontainername().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->szcontainername());
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 2;
  if (this->has_pulsize()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulsize_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_EnumContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_EnumContainer)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_EnumContainer* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_EnumContainer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_EnumContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_EnumContainer)
    MergeFrom(*source);
  }
}

void Rsp_SKF_EnumContainer::MergeFrom(const Rsp_SKF_EnumContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_EnumContainer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.szcontainername().size() > 0) {

    szcontainername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.szcontainername_);
  }
  if (from.has_pulsize()) {
    mutable_pulsize()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulsize());
  }
}

void Rsp_SKF_EnumContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_EnumContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_EnumContainer::CopyFrom(const Rsp_SKF_EnumContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_EnumContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_EnumContainer::IsInitialized() const {
  return true;
}

void Rsp_SKF_EnumContainer::Swap(Rsp_SKF_EnumContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_EnumContainer::InternalSwap(Rsp_SKF_EnumContainer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  szcontainername_.Swap(&other->szcontainername_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pulsize_, other->pulsize_);
}

::google::protobuf::Metadata Rsp_SKF_EnumContainer::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_GetContainerType::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_GetContainerType_default_instance_._instance.get_mutable()->hcontainer_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_GetContainerType_default_instance_._instance.get_mutable()->pulcontainertype_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_GetContainerType::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hcontainer(const Req_SKF_GetContainerType* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& pulcontainertype(const Req_SKF_GetContainerType* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GetContainerType::HasBitSetters::hcontainer(const Req_SKF_GetContainerType* msg) {
  return *msg->hcontainer_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GetContainerType::HasBitSetters::pulcontainertype(const Req_SKF_GetContainerType* msg) {
  return *msg->pulcontainertype_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_GetContainerType::kHContainerFieldNumber;
const int Req_SKF_GetContainerType::kPulContainerTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_GetContainerType::Req_SKF_GetContainerType()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_GetContainerType)
}
Req_SKF_GetContainerType::Req_SKF_GetContainerType(const Req_SKF_GetContainerType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hcontainer()) {
    hcontainer_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hcontainer_);
  } else {
    hcontainer_ = nullptr;
  }
  if (from.has_pulcontainertype()) {
    pulcontainertype_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulcontainertype_);
  } else {
    pulcontainertype_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_GetContainerType)
}

void Req_SKF_GetContainerType::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_GetContainerType_skf_2eproto.base);
  ::memset(&hcontainer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pulcontainertype_) -
      reinterpret_cast<char*>(&hcontainer_)) + sizeof(pulcontainertype_));
}

Req_SKF_GetContainerType::~Req_SKF_GetContainerType() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_GetContainerType)
  SharedDtor();
}

void Req_SKF_GetContainerType::SharedDtor() {
  if (this != internal_default_instance()) delete hcontainer_;
  if (this != internal_default_instance()) delete pulcontainertype_;
}

void Req_SKF_GetContainerType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_GetContainerType& Req_SKF_GetContainerType::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_GetContainerType_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_GetContainerType::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_GetContainerType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pulcontainertype_ != nullptr) {
    delete pulcontainertype_;
  }
  pulcontainertype_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_GetContainerType::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_GetContainerType*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hcontainer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulContainerType = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulcontainertype();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_GetContainerType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_GetContainerType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hcontainer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulContainerType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulcontainertype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_GetContainerType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_GetContainerType)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_GetContainerType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_GetContainerType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hcontainer(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulContainerType = 2;
  if (this->has_pulcontainertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pulcontainertype(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_GetContainerType)
}

::google::protobuf::uint8* Req_SKF_GetContainerType::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_GetContainerType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hcontainer(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulContainerType = 2;
  if (this->has_pulcontainertype()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pulcontainertype(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_GetContainerType)
  return target;
}

size_t Req_SKF_GetContainerType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_GetContainerType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hcontainer_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulContainerType = 2;
  if (this->has_pulcontainertype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulcontainertype_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_GetContainerType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_GetContainerType)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_GetContainerType* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_GetContainerType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_GetContainerType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_GetContainerType)
    MergeFrom(*source);
  }
}

void Req_SKF_GetContainerType::MergeFrom(const Req_SKF_GetContainerType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_GetContainerType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hcontainer()) {
    mutable_hcontainer()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hcontainer());
  }
  if (from.has_pulcontainertype()) {
    mutable_pulcontainertype()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulcontainertype());
  }
}

void Req_SKF_GetContainerType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_GetContainerType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_GetContainerType::CopyFrom(const Req_SKF_GetContainerType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_GetContainerType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_GetContainerType::IsInitialized() const {
  return true;
}

void Req_SKF_GetContainerType::Swap(Req_SKF_GetContainerType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_GetContainerType::InternalSwap(Req_SKF_GetContainerType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(hcontainer_, other->hcontainer_);
  swap(pulcontainertype_, other->pulcontainertype_);
}

::google::protobuf::Metadata Req_SKF_GetContainerType::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_GetContainerType::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_GetContainerType_default_instance_._instance.get_mutable()->pulcontainertype_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_GetContainerType::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& pulcontainertype(const Rsp_SKF_GetContainerType* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_GetContainerType::HasBitSetters::pulcontainertype(const Rsp_SKF_GetContainerType* msg) {
  return *msg->pulcontainertype_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_GetContainerType::kPulContainerTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_GetContainerType::Rsp_SKF_GetContainerType()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_GetContainerType)
}
Rsp_SKF_GetContainerType::Rsp_SKF_GetContainerType(const Rsp_SKF_GetContainerType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pulcontainertype()) {
    pulcontainertype_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulcontainertype_);
  } else {
    pulcontainertype_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_GetContainerType)
}

void Rsp_SKF_GetContainerType::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_GetContainerType_skf_2eproto.base);
  pulcontainertype_ = nullptr;
}

Rsp_SKF_GetContainerType::~Rsp_SKF_GetContainerType() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_GetContainerType)
  SharedDtor();
}

void Rsp_SKF_GetContainerType::SharedDtor() {
  if (this != internal_default_instance()) delete pulcontainertype_;
}

void Rsp_SKF_GetContainerType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_GetContainerType& Rsp_SKF_GetContainerType::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_GetContainerType_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_GetContainerType::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_GetContainerType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pulcontainertype_ != nullptr) {
    delete pulcontainertype_;
  }
  pulcontainertype_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_GetContainerType::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_GetContainerType*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 pulContainerType = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulcontainertype();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_GetContainerType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_GetContainerType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 pulContainerType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulcontainertype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_GetContainerType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_GetContainerType)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_GetContainerType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_GetContainerType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 pulContainerType = 1;
  if (this->has_pulcontainertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::pulcontainertype(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_GetContainerType)
}

::google::protobuf::uint8* Rsp_SKF_GetContainerType::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_GetContainerType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 pulContainerType = 1;
  if (this->has_pulcontainertype()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::pulcontainertype(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_GetContainerType)
  return target;
}

size_t Rsp_SKF_GetContainerType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_GetContainerType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 pulContainerType = 1;
  if (this->has_pulcontainertype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulcontainertype_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_GetContainerType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_GetContainerType)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_GetContainerType* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_GetContainerType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_GetContainerType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_GetContainerType)
    MergeFrom(*source);
  }
}

void Rsp_SKF_GetContainerType::MergeFrom(const Rsp_SKF_GetContainerType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_GetContainerType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pulcontainertype()) {
    mutable_pulcontainertype()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulcontainertype());
  }
}

void Rsp_SKF_GetContainerType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_GetContainerType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_GetContainerType::CopyFrom(const Rsp_SKF_GetContainerType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_GetContainerType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_GetContainerType::IsInitialized() const {
  return true;
}

void Rsp_SKF_GetContainerType::Swap(Rsp_SKF_GetContainerType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_GetContainerType::InternalSwap(Rsp_SKF_GetContainerType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pulcontainertype_, other->pulcontainertype_);
}

::google::protobuf::Metadata Rsp_SKF_GetContainerType::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_GenRandom::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_GenRandom_default_instance_._instance.get_mutable()->hdev_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_GenRandom_default_instance_._instance.get_mutable()->ulrandomlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_GenRandom::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hdev(const Req_SKF_GenRandom* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulrandomlen(const Req_SKF_GenRandom* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GenRandom::HasBitSetters::hdev(const Req_SKF_GenRandom* msg) {
  return *msg->hdev_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GenRandom::HasBitSetters::ulrandomlen(const Req_SKF_GenRandom* msg) {
  return *msg->ulrandomlen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_GenRandom::kHDevFieldNumber;
const int Req_SKF_GenRandom::kPbRandomFieldNumber;
const int Req_SKF_GenRandom::kUlRandomLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_GenRandom::Req_SKF_GenRandom()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_GenRandom)
}
Req_SKF_GenRandom::Req_SKF_GenRandom(const Req_SKF_GenRandom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbrandom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbrandom().size() > 0) {
    pbrandom_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbrandom_);
  }
  if (from.has_hdev()) {
    hdev_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hdev_);
  } else {
    hdev_ = nullptr;
  }
  if (from.has_ulrandomlen()) {
    ulrandomlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulrandomlen_);
  } else {
    ulrandomlen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_GenRandom)
}

void Req_SKF_GenRandom::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_GenRandom_skf_2eproto.base);
  pbrandom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hdev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ulrandomlen_) -
      reinterpret_cast<char*>(&hdev_)) + sizeof(ulrandomlen_));
}

Req_SKF_GenRandom::~Req_SKF_GenRandom() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_GenRandom)
  SharedDtor();
}

void Req_SKF_GenRandom::SharedDtor() {
  pbrandom_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hdev_;
  if (this != internal_default_instance()) delete ulrandomlen_;
}

void Req_SKF_GenRandom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_GenRandom& Req_SKF_GenRandom::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_GenRandom_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_GenRandom::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_GenRandom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbrandom_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulrandomlen_ != nullptr) {
    delete ulrandomlen_;
  }
  ulrandomlen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_GenRandom::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_GenRandom*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hdev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbRandom = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbrandom();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulRandomLen = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulrandomlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_GenRandom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_GenRandom)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hdev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbRandom = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbrandom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulRandomLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulrandomlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_GenRandom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_GenRandom)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_GenRandom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_GenRandom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hdev(this), output);
  }

  // bytes pbRandom = 2;
  if (this->pbrandom().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pbrandom(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulRandomLen = 3;
  if (this->has_ulrandomlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::ulrandomlen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_GenRandom)
}

::google::protobuf::uint8* Req_SKF_GenRandom::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_GenRandom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hdev(this), target);
  }

  // bytes pbRandom = 2;
  if (this->pbrandom().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pbrandom(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulRandomLen = 3;
  if (this->has_ulrandomlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::ulrandomlen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_GenRandom)
  return target;
}

size_t Req_SKF_GenRandom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_GenRandom)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbRandom = 2;
  if (this->pbrandom().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbrandom());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hdev_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulRandomLen = 3;
  if (this->has_ulrandomlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulrandomlen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_GenRandom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_GenRandom)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_GenRandom* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_GenRandom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_GenRandom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_GenRandom)
    MergeFrom(*source);
  }
}

void Req_SKF_GenRandom::MergeFrom(const Req_SKF_GenRandom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_GenRandom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbrandom().size() > 0) {

    pbrandom_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbrandom_);
  }
  if (from.has_hdev()) {
    mutable_hdev()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hdev());
  }
  if (from.has_ulrandomlen()) {
    mutable_ulrandomlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulrandomlen());
  }
}

void Req_SKF_GenRandom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_GenRandom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_GenRandom::CopyFrom(const Req_SKF_GenRandom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_GenRandom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_GenRandom::IsInitialized() const {
  return true;
}

void Req_SKF_GenRandom::Swap(Req_SKF_GenRandom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_GenRandom::InternalSwap(Req_SKF_GenRandom* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbrandom_.Swap(&other->pbrandom_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hdev_, other->hdev_);
  swap(ulrandomlen_, other->ulrandomlen_);
}

::google::protobuf::Metadata Req_SKF_GenRandom::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_GenRandom::InitAsDefaultInstance() {
}
class Rsp_SKF_GenRandom::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_GenRandom::kPbRandomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_GenRandom::Rsp_SKF_GenRandom()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_GenRandom)
}
Rsp_SKF_GenRandom::Rsp_SKF_GenRandom(const Rsp_SKF_GenRandom& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbrandom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbrandom().size() > 0) {
    pbrandom_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbrandom_);
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_GenRandom)
}

void Rsp_SKF_GenRandom::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_GenRandom_skf_2eproto.base);
  pbrandom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Rsp_SKF_GenRandom::~Rsp_SKF_GenRandom() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_GenRandom)
  SharedDtor();
}

void Rsp_SKF_GenRandom::SharedDtor() {
  pbrandom_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Rsp_SKF_GenRandom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_GenRandom& Rsp_SKF_GenRandom::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_GenRandom_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_GenRandom::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_GenRandom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbrandom_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_GenRandom::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_GenRandom*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes pbRandom = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbrandom();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_GenRandom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_GenRandom)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes pbRandom = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbrandom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_GenRandom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_GenRandom)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_GenRandom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_GenRandom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbRandom = 1;
  if (this->pbrandom().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pbrandom(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_GenRandom)
}

::google::protobuf::uint8* Rsp_SKF_GenRandom::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_GenRandom)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbRandom = 1;
  if (this->pbrandom().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pbrandom(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_GenRandom)
  return target;
}

size_t Rsp_SKF_GenRandom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_GenRandom)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbRandom = 1;
  if (this->pbrandom().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbrandom());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_GenRandom::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_GenRandom)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_GenRandom* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_GenRandom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_GenRandom)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_GenRandom)
    MergeFrom(*source);
  }
}

void Rsp_SKF_GenRandom::MergeFrom(const Rsp_SKF_GenRandom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_GenRandom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbrandom().size() > 0) {

    pbrandom_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbrandom_);
  }
}

void Rsp_SKF_GenRandom::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_GenRandom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_GenRandom::CopyFrom(const Rsp_SKF_GenRandom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_GenRandom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_GenRandom::IsInitialized() const {
  return true;
}

void Rsp_SKF_GenRandom::Swap(Rsp_SKF_GenRandom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_GenRandom::InternalSwap(Rsp_SKF_GenRandom* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbrandom_.Swap(&other->pbrandom_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata Rsp_SKF_GenRandom::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_GenExtRSAKey::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_GenExtRSAKey_default_instance_._instance.get_mutable()->hdev_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_GenExtRSAKey_default_instance_._instance.get_mutable()->ulbitslen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_GenExtRSAKey_default_instance_._instance.get_mutable()->pblob_ = const_cast< ::com::westone::skf::SKF_RSAPUBLICKEYBLOB*>(
      ::com::westone::skf::SKF_RSAPUBLICKEYBLOB::internal_default_instance());
}
class Req_SKF_GenExtRSAKey::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hdev(const Req_SKF_GenExtRSAKey* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulbitslen(const Req_SKF_GenExtRSAKey* msg);
  static const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB& pblob(const Req_SKF_GenExtRSAKey* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GenExtRSAKey::HasBitSetters::hdev(const Req_SKF_GenExtRSAKey* msg) {
  return *msg->hdev_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GenExtRSAKey::HasBitSetters::ulbitslen(const Req_SKF_GenExtRSAKey* msg) {
  return *msg->ulbitslen_;
}
const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB&
Req_SKF_GenExtRSAKey::HasBitSetters::pblob(const Req_SKF_GenExtRSAKey* msg) {
  return *msg->pblob_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_GenExtRSAKey::kHDevFieldNumber;
const int Req_SKF_GenExtRSAKey::kUlBitsLenFieldNumber;
const int Req_SKF_GenExtRSAKey::kPBlobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_GenExtRSAKey::Req_SKF_GenExtRSAKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_GenExtRSAKey)
}
Req_SKF_GenExtRSAKey::Req_SKF_GenExtRSAKey(const Req_SKF_GenExtRSAKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hdev()) {
    hdev_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hdev_);
  } else {
    hdev_ = nullptr;
  }
  if (from.has_ulbitslen()) {
    ulbitslen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulbitslen_);
  } else {
    ulbitslen_ = nullptr;
  }
  if (from.has_pblob()) {
    pblob_ = new ::com::westone::skf::SKF_RSAPUBLICKEYBLOB(*from.pblob_);
  } else {
    pblob_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_GenExtRSAKey)
}

void Req_SKF_GenExtRSAKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_GenExtRSAKey_skf_2eproto.base);
  ::memset(&hdev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pblob_) -
      reinterpret_cast<char*>(&hdev_)) + sizeof(pblob_));
}

Req_SKF_GenExtRSAKey::~Req_SKF_GenExtRSAKey() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_GenExtRSAKey)
  SharedDtor();
}

void Req_SKF_GenExtRSAKey::SharedDtor() {
  if (this != internal_default_instance()) delete hdev_;
  if (this != internal_default_instance()) delete ulbitslen_;
  if (this != internal_default_instance()) delete pblob_;
}

void Req_SKF_GenExtRSAKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_GenExtRSAKey& Req_SKF_GenExtRSAKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_GenExtRSAKey_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_GenExtRSAKey::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_GenExtRSAKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulbitslen_ != nullptr) {
    delete ulbitslen_;
  }
  ulbitslen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pblob_ != nullptr) {
    delete pblob_;
  }
  pblob_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_GenExtRSAKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_GenExtRSAKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hdev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulBitsLen = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulbitslen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pBlob = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_RSAPUBLICKEYBLOB::_InternalParse;
        object = msg->mutable_pblob();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_GenExtRSAKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_GenExtRSAKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hdev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulBitsLen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulbitslen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pBlob = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pblob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_GenExtRSAKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_GenExtRSAKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_GenExtRSAKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_GenExtRSAKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hdev(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulBitsLen = 2;
  if (this->has_ulbitslen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::ulbitslen(this), output);
  }

  // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pBlob = 3;
  if (this->has_pblob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::pblob(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_GenExtRSAKey)
}

::google::protobuf::uint8* Req_SKF_GenExtRSAKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_GenExtRSAKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hdev(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulBitsLen = 2;
  if (this->has_ulbitslen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::ulbitslen(this), target);
  }

  // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pBlob = 3;
  if (this->has_pblob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::pblob(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_GenExtRSAKey)
  return target;
}

size_t Req_SKF_GenExtRSAKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_GenExtRSAKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hdev_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulBitsLen = 2;
  if (this->has_ulbitslen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulbitslen_);
  }

  // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pBlob = 3;
  if (this->has_pblob()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pblob_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_GenExtRSAKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_GenExtRSAKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_GenExtRSAKey* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_GenExtRSAKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_GenExtRSAKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_GenExtRSAKey)
    MergeFrom(*source);
  }
}

void Req_SKF_GenExtRSAKey::MergeFrom(const Req_SKF_GenExtRSAKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_GenExtRSAKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hdev()) {
    mutable_hdev()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hdev());
  }
  if (from.has_ulbitslen()) {
    mutable_ulbitslen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulbitslen());
  }
  if (from.has_pblob()) {
    mutable_pblob()->::com::westone::skf::SKF_RSAPUBLICKEYBLOB::MergeFrom(from.pblob());
  }
}

void Req_SKF_GenExtRSAKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_GenExtRSAKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_GenExtRSAKey::CopyFrom(const Req_SKF_GenExtRSAKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_GenExtRSAKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_GenExtRSAKey::IsInitialized() const {
  return true;
}

void Req_SKF_GenExtRSAKey::Swap(Req_SKF_GenExtRSAKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_GenExtRSAKey::InternalSwap(Req_SKF_GenExtRSAKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(hdev_, other->hdev_);
  swap(ulbitslen_, other->ulbitslen_);
  swap(pblob_, other->pblob_);
}

::google::protobuf::Metadata Req_SKF_GenExtRSAKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_GenExtRSAKey::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_GenExtRSAKey_default_instance_._instance.get_mutable()->pblob_ = const_cast< ::com::westone::skf::SKF_RSAPUBLICKEYBLOB*>(
      ::com::westone::skf::SKF_RSAPUBLICKEYBLOB::internal_default_instance());
}
class Rsp_SKF_GenExtRSAKey::HasBitSetters {
 public:
  static const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB& pblob(const Rsp_SKF_GenExtRSAKey* msg);
};

const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB&
Rsp_SKF_GenExtRSAKey::HasBitSetters::pblob(const Rsp_SKF_GenExtRSAKey* msg) {
  return *msg->pblob_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_GenExtRSAKey::kPBlobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_GenExtRSAKey::Rsp_SKF_GenExtRSAKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_GenExtRSAKey)
}
Rsp_SKF_GenExtRSAKey::Rsp_SKF_GenExtRSAKey(const Rsp_SKF_GenExtRSAKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pblob()) {
    pblob_ = new ::com::westone::skf::SKF_RSAPUBLICKEYBLOB(*from.pblob_);
  } else {
    pblob_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_GenExtRSAKey)
}

void Rsp_SKF_GenExtRSAKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_GenExtRSAKey_skf_2eproto.base);
  pblob_ = nullptr;
}

Rsp_SKF_GenExtRSAKey::~Rsp_SKF_GenExtRSAKey() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_GenExtRSAKey)
  SharedDtor();
}

void Rsp_SKF_GenExtRSAKey::SharedDtor() {
  if (this != internal_default_instance()) delete pblob_;
}

void Rsp_SKF_GenExtRSAKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_GenExtRSAKey& Rsp_SKF_GenExtRSAKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_GenExtRSAKey_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_GenExtRSAKey::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_GenExtRSAKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pblob_ != nullptr) {
    delete pblob_;
  }
  pblob_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_GenExtRSAKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_GenExtRSAKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pBlob = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_RSAPUBLICKEYBLOB::_InternalParse;
        object = msg->mutable_pblob();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_GenExtRSAKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_GenExtRSAKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pBlob = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pblob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_GenExtRSAKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_GenExtRSAKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_GenExtRSAKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_GenExtRSAKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pBlob = 1;
  if (this->has_pblob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::pblob(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_GenExtRSAKey)
}

::google::protobuf::uint8* Rsp_SKF_GenExtRSAKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_GenExtRSAKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pBlob = 1;
  if (this->has_pblob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::pblob(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_GenExtRSAKey)
  return target;
}

size_t Rsp_SKF_GenExtRSAKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_GenExtRSAKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pBlob = 1;
  if (this->has_pblob()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pblob_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_GenExtRSAKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_GenExtRSAKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_GenExtRSAKey* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_GenExtRSAKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_GenExtRSAKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_GenExtRSAKey)
    MergeFrom(*source);
  }
}

void Rsp_SKF_GenExtRSAKey::MergeFrom(const Rsp_SKF_GenExtRSAKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_GenExtRSAKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pblob()) {
    mutable_pblob()->::com::westone::skf::SKF_RSAPUBLICKEYBLOB::MergeFrom(from.pblob());
  }
}

void Rsp_SKF_GenExtRSAKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_GenExtRSAKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_GenExtRSAKey::CopyFrom(const Rsp_SKF_GenExtRSAKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_GenExtRSAKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_GenExtRSAKey::IsInitialized() const {
  return true;
}

void Rsp_SKF_GenExtRSAKey::Swap(Rsp_SKF_GenExtRSAKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_GenExtRSAKey::InternalSwap(Rsp_SKF_GenExtRSAKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pblob_, other->pblob_);
}

::google::protobuf::Metadata Rsp_SKF_GenExtRSAKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_GenRSAKeyPair::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_GenRSAKeyPair_default_instance_._instance.get_mutable()->hcontainer_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_GenRSAKeyPair_default_instance_._instance.get_mutable()->ulbitslen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_GenRSAKeyPair_default_instance_._instance.get_mutable()->pblob_ = const_cast< ::com::westone::skf::SKF_RSAPUBLICKEYBLOB*>(
      ::com::westone::skf::SKF_RSAPUBLICKEYBLOB::internal_default_instance());
}
class Req_SKF_GenRSAKeyPair::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hcontainer(const Req_SKF_GenRSAKeyPair* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulbitslen(const Req_SKF_GenRSAKeyPair* msg);
  static const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB& pblob(const Req_SKF_GenRSAKeyPair* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GenRSAKeyPair::HasBitSetters::hcontainer(const Req_SKF_GenRSAKeyPair* msg) {
  return *msg->hcontainer_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GenRSAKeyPair::HasBitSetters::ulbitslen(const Req_SKF_GenRSAKeyPair* msg) {
  return *msg->ulbitslen_;
}
const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB&
Req_SKF_GenRSAKeyPair::HasBitSetters::pblob(const Req_SKF_GenRSAKeyPair* msg) {
  return *msg->pblob_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_GenRSAKeyPair::kHContainerFieldNumber;
const int Req_SKF_GenRSAKeyPair::kUlBitsLenFieldNumber;
const int Req_SKF_GenRSAKeyPair::kPBlobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_GenRSAKeyPair::Req_SKF_GenRSAKeyPair()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_GenRSAKeyPair)
}
Req_SKF_GenRSAKeyPair::Req_SKF_GenRSAKeyPair(const Req_SKF_GenRSAKeyPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hcontainer()) {
    hcontainer_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hcontainer_);
  } else {
    hcontainer_ = nullptr;
  }
  if (from.has_ulbitslen()) {
    ulbitslen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulbitslen_);
  } else {
    ulbitslen_ = nullptr;
  }
  if (from.has_pblob()) {
    pblob_ = new ::com::westone::skf::SKF_RSAPUBLICKEYBLOB(*from.pblob_);
  } else {
    pblob_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_GenRSAKeyPair)
}

void Req_SKF_GenRSAKeyPair::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_GenRSAKeyPair_skf_2eproto.base);
  ::memset(&hcontainer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pblob_) -
      reinterpret_cast<char*>(&hcontainer_)) + sizeof(pblob_));
}

Req_SKF_GenRSAKeyPair::~Req_SKF_GenRSAKeyPair() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_GenRSAKeyPair)
  SharedDtor();
}

void Req_SKF_GenRSAKeyPair::SharedDtor() {
  if (this != internal_default_instance()) delete hcontainer_;
  if (this != internal_default_instance()) delete ulbitslen_;
  if (this != internal_default_instance()) delete pblob_;
}

void Req_SKF_GenRSAKeyPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_GenRSAKeyPair& Req_SKF_GenRSAKeyPair::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_GenRSAKeyPair_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_GenRSAKeyPair::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_GenRSAKeyPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulbitslen_ != nullptr) {
    delete ulbitslen_;
  }
  ulbitslen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pblob_ != nullptr) {
    delete pblob_;
  }
  pblob_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_GenRSAKeyPair::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_GenRSAKeyPair*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hcontainer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulBitsLen = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulbitslen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pBlob = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_RSAPUBLICKEYBLOB::_InternalParse;
        object = msg->mutable_pblob();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_GenRSAKeyPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_GenRSAKeyPair)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hcontainer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulBitsLen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulbitslen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pBlob = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pblob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_GenRSAKeyPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_GenRSAKeyPair)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_GenRSAKeyPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_GenRSAKeyPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hcontainer(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulBitsLen = 2;
  if (this->has_ulbitslen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::ulbitslen(this), output);
  }

  // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pBlob = 3;
  if (this->has_pblob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::pblob(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_GenRSAKeyPair)
}

::google::protobuf::uint8* Req_SKF_GenRSAKeyPair::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_GenRSAKeyPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hcontainer(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulBitsLen = 2;
  if (this->has_ulbitslen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::ulbitslen(this), target);
  }

  // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pBlob = 3;
  if (this->has_pblob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::pblob(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_GenRSAKeyPair)
  return target;
}

size_t Req_SKF_GenRSAKeyPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_GenRSAKeyPair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hcontainer_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulBitsLen = 2;
  if (this->has_ulbitslen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulbitslen_);
  }

  // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pBlob = 3;
  if (this->has_pblob()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pblob_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_GenRSAKeyPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_GenRSAKeyPair)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_GenRSAKeyPair* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_GenRSAKeyPair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_GenRSAKeyPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_GenRSAKeyPair)
    MergeFrom(*source);
  }
}

void Req_SKF_GenRSAKeyPair::MergeFrom(const Req_SKF_GenRSAKeyPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_GenRSAKeyPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hcontainer()) {
    mutable_hcontainer()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hcontainer());
  }
  if (from.has_ulbitslen()) {
    mutable_ulbitslen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulbitslen());
  }
  if (from.has_pblob()) {
    mutable_pblob()->::com::westone::skf::SKF_RSAPUBLICKEYBLOB::MergeFrom(from.pblob());
  }
}

void Req_SKF_GenRSAKeyPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_GenRSAKeyPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_GenRSAKeyPair::CopyFrom(const Req_SKF_GenRSAKeyPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_GenRSAKeyPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_GenRSAKeyPair::IsInitialized() const {
  return true;
}

void Req_SKF_GenRSAKeyPair::Swap(Req_SKF_GenRSAKeyPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_GenRSAKeyPair::InternalSwap(Req_SKF_GenRSAKeyPair* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(hcontainer_, other->hcontainer_);
  swap(ulbitslen_, other->ulbitslen_);
  swap(pblob_, other->pblob_);
}

::google::protobuf::Metadata Req_SKF_GenRSAKeyPair::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_GenRSAKeyPair::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_GenRSAKeyPair_default_instance_._instance.get_mutable()->pblob_ = const_cast< ::com::westone::skf::SKF_RSAPUBLICKEYBLOB*>(
      ::com::westone::skf::SKF_RSAPUBLICKEYBLOB::internal_default_instance());
}
class Rsp_SKF_GenRSAKeyPair::HasBitSetters {
 public:
  static const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB& pblob(const Rsp_SKF_GenRSAKeyPair* msg);
};

const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB&
Rsp_SKF_GenRSAKeyPair::HasBitSetters::pblob(const Rsp_SKF_GenRSAKeyPair* msg) {
  return *msg->pblob_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_GenRSAKeyPair::kPBlobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_GenRSAKeyPair::Rsp_SKF_GenRSAKeyPair()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_GenRSAKeyPair)
}
Rsp_SKF_GenRSAKeyPair::Rsp_SKF_GenRSAKeyPair(const Rsp_SKF_GenRSAKeyPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pblob()) {
    pblob_ = new ::com::westone::skf::SKF_RSAPUBLICKEYBLOB(*from.pblob_);
  } else {
    pblob_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_GenRSAKeyPair)
}

void Rsp_SKF_GenRSAKeyPair::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_GenRSAKeyPair_skf_2eproto.base);
  pblob_ = nullptr;
}

Rsp_SKF_GenRSAKeyPair::~Rsp_SKF_GenRSAKeyPair() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_GenRSAKeyPair)
  SharedDtor();
}

void Rsp_SKF_GenRSAKeyPair::SharedDtor() {
  if (this != internal_default_instance()) delete pblob_;
}

void Rsp_SKF_GenRSAKeyPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_GenRSAKeyPair& Rsp_SKF_GenRSAKeyPair::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_GenRSAKeyPair_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_GenRSAKeyPair::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_GenRSAKeyPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pblob_ != nullptr) {
    delete pblob_;
  }
  pblob_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_GenRSAKeyPair::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_GenRSAKeyPair*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pBlob = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_RSAPUBLICKEYBLOB::_InternalParse;
        object = msg->mutable_pblob();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_GenRSAKeyPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_GenRSAKeyPair)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pBlob = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pblob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_GenRSAKeyPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_GenRSAKeyPair)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_GenRSAKeyPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_GenRSAKeyPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pBlob = 1;
  if (this->has_pblob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::pblob(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_GenRSAKeyPair)
}

::google::protobuf::uint8* Rsp_SKF_GenRSAKeyPair::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_GenRSAKeyPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pBlob = 1;
  if (this->has_pblob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::pblob(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_GenRSAKeyPair)
  return target;
}

size_t Rsp_SKF_GenRSAKeyPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_GenRSAKeyPair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pBlob = 1;
  if (this->has_pblob()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pblob_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_GenRSAKeyPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_GenRSAKeyPair)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_GenRSAKeyPair* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_GenRSAKeyPair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_GenRSAKeyPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_GenRSAKeyPair)
    MergeFrom(*source);
  }
}

void Rsp_SKF_GenRSAKeyPair::MergeFrom(const Rsp_SKF_GenRSAKeyPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_GenRSAKeyPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pblob()) {
    mutable_pblob()->::com::westone::skf::SKF_RSAPUBLICKEYBLOB::MergeFrom(from.pblob());
  }
}

void Rsp_SKF_GenRSAKeyPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_GenRSAKeyPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_GenRSAKeyPair::CopyFrom(const Rsp_SKF_GenRSAKeyPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_GenRSAKeyPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_GenRSAKeyPair::IsInitialized() const {
  return true;
}

void Rsp_SKF_GenRSAKeyPair::Swap(Rsp_SKF_GenRSAKeyPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_GenRSAKeyPair::InternalSwap(Rsp_SKF_GenRSAKeyPair* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pblob_, other->pblob_);
}

::google::protobuf::Metadata Rsp_SKF_GenRSAKeyPair::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_ImportRSAKeyPair::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_ImportRSAKeyPair_default_instance_._instance.get_mutable()->hcontainer_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ImportRSAKeyPair_default_instance_._instance.get_mutable()->ulsymmalgid_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ImportRSAKeyPair_default_instance_._instance.get_mutable()->ulwrappedkeylen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ImportRSAKeyPair_default_instance_._instance.get_mutable()->ulencrypteddatalen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_ImportRSAKeyPair::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hcontainer(const Req_SKF_ImportRSAKeyPair* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulsymmalgid(const Req_SKF_ImportRSAKeyPair* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulwrappedkeylen(const Req_SKF_ImportRSAKeyPair* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulencrypteddatalen(const Req_SKF_ImportRSAKeyPair* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ImportRSAKeyPair::HasBitSetters::hcontainer(const Req_SKF_ImportRSAKeyPair* msg) {
  return *msg->hcontainer_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ImportRSAKeyPair::HasBitSetters::ulsymmalgid(const Req_SKF_ImportRSAKeyPair* msg) {
  return *msg->ulsymmalgid_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ImportRSAKeyPair::HasBitSetters::ulwrappedkeylen(const Req_SKF_ImportRSAKeyPair* msg) {
  return *msg->ulwrappedkeylen_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ImportRSAKeyPair::HasBitSetters::ulencrypteddatalen(const Req_SKF_ImportRSAKeyPair* msg) {
  return *msg->ulencrypteddatalen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_ImportRSAKeyPair::kHContainerFieldNumber;
const int Req_SKF_ImportRSAKeyPair::kUlSymmAlgIDFieldNumber;
const int Req_SKF_ImportRSAKeyPair::kPbWrappedKeyFieldNumber;
const int Req_SKF_ImportRSAKeyPair::kUlWrappedKeyLenFieldNumber;
const int Req_SKF_ImportRSAKeyPair::kPbEncryptedDataFieldNumber;
const int Req_SKF_ImportRSAKeyPair::kUlEncryptedDataLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_ImportRSAKeyPair::Req_SKF_ImportRSAKeyPair()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_ImportRSAKeyPair)
}
Req_SKF_ImportRSAKeyPair::Req_SKF_ImportRSAKeyPair(const Req_SKF_ImportRSAKeyPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbwrappedkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbwrappedkey().size() > 0) {
    pbwrappedkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbwrappedkey_);
  }
  pbencrypteddata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbencrypteddata().size() > 0) {
    pbencrypteddata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbencrypteddata_);
  }
  if (from.has_hcontainer()) {
    hcontainer_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hcontainer_);
  } else {
    hcontainer_ = nullptr;
  }
  if (from.has_ulsymmalgid()) {
    ulsymmalgid_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulsymmalgid_);
  } else {
    ulsymmalgid_ = nullptr;
  }
  if (from.has_ulwrappedkeylen()) {
    ulwrappedkeylen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulwrappedkeylen_);
  } else {
    ulwrappedkeylen_ = nullptr;
  }
  if (from.has_ulencrypteddatalen()) {
    ulencrypteddatalen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulencrypteddatalen_);
  } else {
    ulencrypteddatalen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_ImportRSAKeyPair)
}

void Req_SKF_ImportRSAKeyPair::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_ImportRSAKeyPair_skf_2eproto.base);
  pbwrappedkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbencrypteddata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hcontainer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ulencrypteddatalen_) -
      reinterpret_cast<char*>(&hcontainer_)) + sizeof(ulencrypteddatalen_));
}

Req_SKF_ImportRSAKeyPair::~Req_SKF_ImportRSAKeyPair() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_ImportRSAKeyPair)
  SharedDtor();
}

void Req_SKF_ImportRSAKeyPair::SharedDtor() {
  pbwrappedkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbencrypteddata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hcontainer_;
  if (this != internal_default_instance()) delete ulsymmalgid_;
  if (this != internal_default_instance()) delete ulwrappedkeylen_;
  if (this != internal_default_instance()) delete ulencrypteddatalen_;
}

void Req_SKF_ImportRSAKeyPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_ImportRSAKeyPair& Req_SKF_ImportRSAKeyPair::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_ImportRSAKeyPair_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_ImportRSAKeyPair::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_ImportRSAKeyPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbwrappedkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbencrypteddata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulsymmalgid_ != nullptr) {
    delete ulsymmalgid_;
  }
  ulsymmalgid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulwrappedkeylen_ != nullptr) {
    delete ulwrappedkeylen_;
  }
  ulwrappedkeylen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulencrypteddatalen_ != nullptr) {
    delete ulencrypteddatalen_;
  }
  ulencrypteddatalen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_ImportRSAKeyPair::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_ImportRSAKeyPair*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hcontainer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulSymmAlgID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulsymmalgid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbWrappedKey = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbwrappedkey();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulWrappedKeyLen = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulwrappedkeylen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbEncryptedData = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbencrypteddata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulEncryptedDataLen = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulencrypteddatalen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_ImportRSAKeyPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_ImportRSAKeyPair)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hcontainer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulSymmAlgID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulsymmalgid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbWrappedKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbwrappedkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulWrappedKeyLen = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulwrappedkeylen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbEncryptedData = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbencrypteddata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulEncryptedDataLen = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulencrypteddatalen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_ImportRSAKeyPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_ImportRSAKeyPair)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_ImportRSAKeyPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_ImportRSAKeyPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hcontainer(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulSymmAlgID = 2;
  if (this->has_ulsymmalgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::ulsymmalgid(this), output);
  }

  // bytes pbWrappedKey = 3;
  if (this->pbwrappedkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->pbwrappedkey(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulWrappedKeyLen = 4;
  if (this->has_ulwrappedkeylen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::ulwrappedkeylen(this), output);
  }

  // bytes pbEncryptedData = 5;
  if (this->pbencrypteddata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->pbencrypteddata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulEncryptedDataLen = 6;
  if (this->has_ulencrypteddatalen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::ulencrypteddatalen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_ImportRSAKeyPair)
}

::google::protobuf::uint8* Req_SKF_ImportRSAKeyPair::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_ImportRSAKeyPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hcontainer(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulSymmAlgID = 2;
  if (this->has_ulsymmalgid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::ulsymmalgid(this), target);
  }

  // bytes pbWrappedKey = 3;
  if (this->pbwrappedkey().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->pbwrappedkey(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulWrappedKeyLen = 4;
  if (this->has_ulwrappedkeylen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::ulwrappedkeylen(this), target);
  }

  // bytes pbEncryptedData = 5;
  if (this->pbencrypteddata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->pbencrypteddata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulEncryptedDataLen = 6;
  if (this->has_ulencrypteddatalen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::ulencrypteddatalen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_ImportRSAKeyPair)
  return target;
}

size_t Req_SKF_ImportRSAKeyPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_ImportRSAKeyPair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbWrappedKey = 3;
  if (this->pbwrappedkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbwrappedkey());
  }

  // bytes pbEncryptedData = 5;
  if (this->pbencrypteddata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbencrypteddata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hcontainer_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulSymmAlgID = 2;
  if (this->has_ulsymmalgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulsymmalgid_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulWrappedKeyLen = 4;
  if (this->has_ulwrappedkeylen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulwrappedkeylen_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulEncryptedDataLen = 6;
  if (this->has_ulencrypteddatalen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulencrypteddatalen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_ImportRSAKeyPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_ImportRSAKeyPair)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_ImportRSAKeyPair* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_ImportRSAKeyPair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_ImportRSAKeyPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_ImportRSAKeyPair)
    MergeFrom(*source);
  }
}

void Req_SKF_ImportRSAKeyPair::MergeFrom(const Req_SKF_ImportRSAKeyPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_ImportRSAKeyPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbwrappedkey().size() > 0) {

    pbwrappedkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbwrappedkey_);
  }
  if (from.pbencrypteddata().size() > 0) {

    pbencrypteddata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbencrypteddata_);
  }
  if (from.has_hcontainer()) {
    mutable_hcontainer()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hcontainer());
  }
  if (from.has_ulsymmalgid()) {
    mutable_ulsymmalgid()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulsymmalgid());
  }
  if (from.has_ulwrappedkeylen()) {
    mutable_ulwrappedkeylen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulwrappedkeylen());
  }
  if (from.has_ulencrypteddatalen()) {
    mutable_ulencrypteddatalen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulencrypteddatalen());
  }
}

void Req_SKF_ImportRSAKeyPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_ImportRSAKeyPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_ImportRSAKeyPair::CopyFrom(const Req_SKF_ImportRSAKeyPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_ImportRSAKeyPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_ImportRSAKeyPair::IsInitialized() const {
  return true;
}

void Req_SKF_ImportRSAKeyPair::Swap(Req_SKF_ImportRSAKeyPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_ImportRSAKeyPair::InternalSwap(Req_SKF_ImportRSAKeyPair* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbwrappedkey_.Swap(&other->pbwrappedkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pbencrypteddata_.Swap(&other->pbencrypteddata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hcontainer_, other->hcontainer_);
  swap(ulsymmalgid_, other->ulsymmalgid_);
  swap(ulwrappedkeylen_, other->ulwrappedkeylen_);
  swap(ulencrypteddatalen_, other->ulencrypteddatalen_);
}

::google::protobuf::Metadata Req_SKF_ImportRSAKeyPair::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_ImportRSAKeyPair::InitAsDefaultInstance() {
}
class Rsp_SKF_ImportRSAKeyPair::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_ImportRSAKeyPair::Rsp_SKF_ImportRSAKeyPair()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_ImportRSAKeyPair)
}
Rsp_SKF_ImportRSAKeyPair::Rsp_SKF_ImportRSAKeyPair(const Rsp_SKF_ImportRSAKeyPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_ImportRSAKeyPair)
}

void Rsp_SKF_ImportRSAKeyPair::SharedCtor() {
}

Rsp_SKF_ImportRSAKeyPair::~Rsp_SKF_ImportRSAKeyPair() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_ImportRSAKeyPair)
  SharedDtor();
}

void Rsp_SKF_ImportRSAKeyPair::SharedDtor() {
}

void Rsp_SKF_ImportRSAKeyPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_ImportRSAKeyPair& Rsp_SKF_ImportRSAKeyPair::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_ImportRSAKeyPair_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_ImportRSAKeyPair::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_ImportRSAKeyPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_ImportRSAKeyPair::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_ImportRSAKeyPair*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_ImportRSAKeyPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_ImportRSAKeyPair)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_ImportRSAKeyPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_ImportRSAKeyPair)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_ImportRSAKeyPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_ImportRSAKeyPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_ImportRSAKeyPair)
}

::google::protobuf::uint8* Rsp_SKF_ImportRSAKeyPair::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_ImportRSAKeyPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_ImportRSAKeyPair)
  return target;
}

size_t Rsp_SKF_ImportRSAKeyPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_ImportRSAKeyPair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_ImportRSAKeyPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_ImportRSAKeyPair)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_ImportRSAKeyPair* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_ImportRSAKeyPair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_ImportRSAKeyPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_ImportRSAKeyPair)
    MergeFrom(*source);
  }
}

void Rsp_SKF_ImportRSAKeyPair::MergeFrom(const Rsp_SKF_ImportRSAKeyPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_ImportRSAKeyPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rsp_SKF_ImportRSAKeyPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_ImportRSAKeyPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_ImportRSAKeyPair::CopyFrom(const Rsp_SKF_ImportRSAKeyPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_ImportRSAKeyPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_ImportRSAKeyPair::IsInitialized() const {
  return true;
}

void Rsp_SKF_ImportRSAKeyPair::Swap(Rsp_SKF_ImportRSAKeyPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_ImportRSAKeyPair::InternalSwap(Rsp_SKF_ImportRSAKeyPair* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rsp_SKF_ImportRSAKeyPair::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_RSASignData::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_RSASignData_default_instance_._instance.get_mutable()->hcontainer_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_RSASignData_default_instance_._instance.get_mutable()->uldatalen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_RSASignData_default_instance_._instance.get_mutable()->pulsiglen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_RSASignData::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hcontainer(const Req_SKF_RSASignData* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& uldatalen(const Req_SKF_RSASignData* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& pulsiglen(const Req_SKF_RSASignData* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_RSASignData::HasBitSetters::hcontainer(const Req_SKF_RSASignData* msg) {
  return *msg->hcontainer_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_RSASignData::HasBitSetters::uldatalen(const Req_SKF_RSASignData* msg) {
  return *msg->uldatalen_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_RSASignData::HasBitSetters::pulsiglen(const Req_SKF_RSASignData* msg) {
  return *msg->pulsiglen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_RSASignData::kHContainerFieldNumber;
const int Req_SKF_RSASignData::kPbDataFieldNumber;
const int Req_SKF_RSASignData::kUlDataLenFieldNumber;
const int Req_SKF_RSASignData::kPbSignatureFieldNumber;
const int Req_SKF_RSASignData::kPulSigLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_RSASignData::Req_SKF_RSASignData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_RSASignData)
}
Req_SKF_RSASignData::Req_SKF_RSASignData(const Req_SKF_RSASignData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbdata().size() > 0) {
    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  pbsignature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbsignature().size() > 0) {
    pbsignature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbsignature_);
  }
  if (from.has_hcontainer()) {
    hcontainer_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hcontainer_);
  } else {
    hcontainer_ = nullptr;
  }
  if (from.has_uldatalen()) {
    uldatalen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.uldatalen_);
  } else {
    uldatalen_ = nullptr;
  }
  if (from.has_pulsiglen()) {
    pulsiglen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulsiglen_);
  } else {
    pulsiglen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_RSASignData)
}

void Req_SKF_RSASignData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_RSASignData_skf_2eproto.base);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbsignature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hcontainer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pulsiglen_) -
      reinterpret_cast<char*>(&hcontainer_)) + sizeof(pulsiglen_));
}

Req_SKF_RSASignData::~Req_SKF_RSASignData() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_RSASignData)
  SharedDtor();
}

void Req_SKF_RSASignData::SharedDtor() {
  pbdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbsignature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hcontainer_;
  if (this != internal_default_instance()) delete uldatalen_;
  if (this != internal_default_instance()) delete pulsiglen_;
}

void Req_SKF_RSASignData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_RSASignData& Req_SKF_RSASignData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_RSASignData_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_RSASignData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_RSASignData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbsignature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && uldatalen_ != nullptr) {
    delete uldatalen_;
  }
  uldatalen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pulsiglen_ != nullptr) {
    delete pulsiglen_;
  }
  pulsiglen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_RSASignData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_RSASignData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hcontainer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbData = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_uldatalen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbSignature = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbsignature();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulSigLen = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulsiglen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_RSASignData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_RSASignData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hcontainer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uldatalen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbSignature = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbsignature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulSigLen = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulsiglen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_RSASignData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_RSASignData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_RSASignData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_RSASignData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hcontainer(this), output);
  }

  // bytes pbData = 2;
  if (this->pbdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pbdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  if (this->has_uldatalen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::uldatalen(this), output);
  }

  // bytes pbSignature = 4;
  if (this->pbsignature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->pbsignature(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulSigLen = 5;
  if (this->has_pulsiglen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::pulsiglen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_RSASignData)
}

::google::protobuf::uint8* Req_SKF_RSASignData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_RSASignData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hcontainer(this), target);
  }

  // bytes pbData = 2;
  if (this->pbdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pbdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  if (this->has_uldatalen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::uldatalen(this), target);
  }

  // bytes pbSignature = 4;
  if (this->pbsignature().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->pbsignature(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulSigLen = 5;
  if (this->has_pulsiglen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::pulsiglen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_RSASignData)
  return target;
}

size_t Req_SKF_RSASignData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_RSASignData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbData = 2;
  if (this->pbdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbdata());
  }

  // bytes pbSignature = 4;
  if (this->pbsignature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbsignature());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hcontainer_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  if (this->has_uldatalen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *uldatalen_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulSigLen = 5;
  if (this->has_pulsiglen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulsiglen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_RSASignData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_RSASignData)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_RSASignData* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_RSASignData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_RSASignData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_RSASignData)
    MergeFrom(*source);
  }
}

void Req_SKF_RSASignData::MergeFrom(const Req_SKF_RSASignData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_RSASignData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbdata().size() > 0) {

    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.pbsignature().size() > 0) {

    pbsignature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbsignature_);
  }
  if (from.has_hcontainer()) {
    mutable_hcontainer()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hcontainer());
  }
  if (from.has_uldatalen()) {
    mutable_uldatalen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.uldatalen());
  }
  if (from.has_pulsiglen()) {
    mutable_pulsiglen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulsiglen());
  }
}

void Req_SKF_RSASignData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_RSASignData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_RSASignData::CopyFrom(const Req_SKF_RSASignData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_RSASignData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_RSASignData::IsInitialized() const {
  return true;
}

void Req_SKF_RSASignData::Swap(Req_SKF_RSASignData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_RSASignData::InternalSwap(Req_SKF_RSASignData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbdata_.Swap(&other->pbdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pbsignature_.Swap(&other->pbsignature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hcontainer_, other->hcontainer_);
  swap(uldatalen_, other->uldatalen_);
  swap(pulsiglen_, other->pulsiglen_);
}

::google::protobuf::Metadata Req_SKF_RSASignData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_RSASignData::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_RSASignData_default_instance_._instance.get_mutable()->pulsiglen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_RSASignData::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& pulsiglen(const Rsp_SKF_RSASignData* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_RSASignData::HasBitSetters::pulsiglen(const Rsp_SKF_RSASignData* msg) {
  return *msg->pulsiglen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_RSASignData::kPbSignatureFieldNumber;
const int Rsp_SKF_RSASignData::kPulSigLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_RSASignData::Rsp_SKF_RSASignData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_RSASignData)
}
Rsp_SKF_RSASignData::Rsp_SKF_RSASignData(const Rsp_SKF_RSASignData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbsignature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbsignature().size() > 0) {
    pbsignature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbsignature_);
  }
  if (from.has_pulsiglen()) {
    pulsiglen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulsiglen_);
  } else {
    pulsiglen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_RSASignData)
}

void Rsp_SKF_RSASignData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_RSASignData_skf_2eproto.base);
  pbsignature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pulsiglen_ = nullptr;
}

Rsp_SKF_RSASignData::~Rsp_SKF_RSASignData() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_RSASignData)
  SharedDtor();
}

void Rsp_SKF_RSASignData::SharedDtor() {
  pbsignature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pulsiglen_;
}

void Rsp_SKF_RSASignData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_RSASignData& Rsp_SKF_RSASignData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_RSASignData_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_RSASignData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_RSASignData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbsignature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && pulsiglen_ != nullptr) {
    delete pulsiglen_;
  }
  pulsiglen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_RSASignData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_RSASignData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes pbSignature = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbsignature();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulSigLen = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulsiglen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_RSASignData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_RSASignData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes pbSignature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbsignature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulSigLen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulsiglen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_RSASignData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_RSASignData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_RSASignData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_RSASignData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbSignature = 1;
  if (this->pbsignature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pbsignature(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulSigLen = 2;
  if (this->has_pulsiglen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pulsiglen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_RSASignData)
}

::google::protobuf::uint8* Rsp_SKF_RSASignData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_RSASignData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbSignature = 1;
  if (this->pbsignature().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pbsignature(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulSigLen = 2;
  if (this->has_pulsiglen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pulsiglen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_RSASignData)
  return target;
}

size_t Rsp_SKF_RSASignData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_RSASignData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbSignature = 1;
  if (this->pbsignature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbsignature());
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulSigLen = 2;
  if (this->has_pulsiglen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulsiglen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_RSASignData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_RSASignData)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_RSASignData* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_RSASignData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_RSASignData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_RSASignData)
    MergeFrom(*source);
  }
}

void Rsp_SKF_RSASignData::MergeFrom(const Rsp_SKF_RSASignData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_RSASignData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbsignature().size() > 0) {

    pbsignature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbsignature_);
  }
  if (from.has_pulsiglen()) {
    mutable_pulsiglen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulsiglen());
  }
}

void Rsp_SKF_RSASignData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_RSASignData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_RSASignData::CopyFrom(const Rsp_SKF_RSASignData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_RSASignData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_RSASignData::IsInitialized() const {
  return true;
}

void Rsp_SKF_RSASignData::Swap(Rsp_SKF_RSASignData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_RSASignData::InternalSwap(Rsp_SKF_RSASignData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbsignature_.Swap(&other->pbsignature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pulsiglen_, other->pulsiglen_);
}

::google::protobuf::Metadata Rsp_SKF_RSASignData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_RSAVerify::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_RSAVerify_default_instance_._instance.get_mutable()->hdev_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_RSAVerify_default_instance_._instance.get_mutable()->prsapubkeyblob_ = const_cast< ::com::westone::skf::SKF_RSAPUBLICKEYBLOB*>(
      ::com::westone::skf::SKF_RSAPUBLICKEYBLOB::internal_default_instance());
  ::com::westone::skf::_Req_SKF_RSAVerify_default_instance_._instance.get_mutable()->uldatalen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_RSAVerify_default_instance_._instance.get_mutable()->ulsiglen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_RSAVerify::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hdev(const Req_SKF_RSAVerify* msg);
  static const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB& prsapubkeyblob(const Req_SKF_RSAVerify* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& uldatalen(const Req_SKF_RSAVerify* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulsiglen(const Req_SKF_RSAVerify* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_RSAVerify::HasBitSetters::hdev(const Req_SKF_RSAVerify* msg) {
  return *msg->hdev_;
}
const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB&
Req_SKF_RSAVerify::HasBitSetters::prsapubkeyblob(const Req_SKF_RSAVerify* msg) {
  return *msg->prsapubkeyblob_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_RSAVerify::HasBitSetters::uldatalen(const Req_SKF_RSAVerify* msg) {
  return *msg->uldatalen_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_RSAVerify::HasBitSetters::ulsiglen(const Req_SKF_RSAVerify* msg) {
  return *msg->ulsiglen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_RSAVerify::kHDevFieldNumber;
const int Req_SKF_RSAVerify::kPRSAPubKeyBlobFieldNumber;
const int Req_SKF_RSAVerify::kPbDataFieldNumber;
const int Req_SKF_RSAVerify::kUlDataLenFieldNumber;
const int Req_SKF_RSAVerify::kPbSignatureFieldNumber;
const int Req_SKF_RSAVerify::kUlSigLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_RSAVerify::Req_SKF_RSAVerify()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_RSAVerify)
}
Req_SKF_RSAVerify::Req_SKF_RSAVerify(const Req_SKF_RSAVerify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbdata().size() > 0) {
    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  pbsignature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbsignature().size() > 0) {
    pbsignature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbsignature_);
  }
  if (from.has_hdev()) {
    hdev_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hdev_);
  } else {
    hdev_ = nullptr;
  }
  if (from.has_prsapubkeyblob()) {
    prsapubkeyblob_ = new ::com::westone::skf::SKF_RSAPUBLICKEYBLOB(*from.prsapubkeyblob_);
  } else {
    prsapubkeyblob_ = nullptr;
  }
  if (from.has_uldatalen()) {
    uldatalen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.uldatalen_);
  } else {
    uldatalen_ = nullptr;
  }
  if (from.has_ulsiglen()) {
    ulsiglen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulsiglen_);
  } else {
    ulsiglen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_RSAVerify)
}

void Req_SKF_RSAVerify::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_RSAVerify_skf_2eproto.base);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbsignature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hdev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ulsiglen_) -
      reinterpret_cast<char*>(&hdev_)) + sizeof(ulsiglen_));
}

Req_SKF_RSAVerify::~Req_SKF_RSAVerify() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_RSAVerify)
  SharedDtor();
}

void Req_SKF_RSAVerify::SharedDtor() {
  pbdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbsignature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hdev_;
  if (this != internal_default_instance()) delete prsapubkeyblob_;
  if (this != internal_default_instance()) delete uldatalen_;
  if (this != internal_default_instance()) delete ulsiglen_;
}

void Req_SKF_RSAVerify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_RSAVerify& Req_SKF_RSAVerify::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_RSAVerify_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_RSAVerify::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_RSAVerify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbsignature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && prsapubkeyblob_ != nullptr) {
    delete prsapubkeyblob_;
  }
  prsapubkeyblob_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && uldatalen_ != nullptr) {
    delete uldatalen_;
  }
  uldatalen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulsiglen_ != nullptr) {
    delete ulsiglen_;
  }
  ulsiglen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_RSAVerify::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_RSAVerify*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hdev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pRSAPubKeyBlob = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_RSAPUBLICKEYBLOB::_InternalParse;
        object = msg->mutable_prsapubkeyblob();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbData = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_uldatalen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbSignature = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbsignature();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulSigLen = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulsiglen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_RSAVerify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_RSAVerify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hdev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pRSAPubKeyBlob = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_prsapubkeyblob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbData = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uldatalen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbSignature = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbsignature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulSigLen = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulsiglen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_RSAVerify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_RSAVerify)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_RSAVerify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_RSAVerify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hdev(this), output);
  }

  // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pRSAPubKeyBlob = 2;
  if (this->has_prsapubkeyblob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::prsapubkeyblob(this), output);
  }

  // bytes pbData = 3;
  if (this->pbdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->pbdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 4;
  if (this->has_uldatalen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::uldatalen(this), output);
  }

  // bytes pbSignature = 5;
  if (this->pbsignature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->pbsignature(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulSigLen = 6;
  if (this->has_ulsiglen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::ulsiglen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_RSAVerify)
}

::google::protobuf::uint8* Req_SKF_RSAVerify::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_RSAVerify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hdev(this), target);
  }

  // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pRSAPubKeyBlob = 2;
  if (this->has_prsapubkeyblob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::prsapubkeyblob(this), target);
  }

  // bytes pbData = 3;
  if (this->pbdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->pbdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 4;
  if (this->has_uldatalen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::uldatalen(this), target);
  }

  // bytes pbSignature = 5;
  if (this->pbsignature().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->pbsignature(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulSigLen = 6;
  if (this->has_ulsiglen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::ulsiglen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_RSAVerify)
  return target;
}

size_t Req_SKF_RSAVerify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_RSAVerify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbData = 3;
  if (this->pbdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbdata());
  }

  // bytes pbSignature = 5;
  if (this->pbsignature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbsignature());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hdev_);
  }

  // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pRSAPubKeyBlob = 2;
  if (this->has_prsapubkeyblob()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *prsapubkeyblob_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 4;
  if (this->has_uldatalen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *uldatalen_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulSigLen = 6;
  if (this->has_ulsiglen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulsiglen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_RSAVerify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_RSAVerify)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_RSAVerify* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_RSAVerify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_RSAVerify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_RSAVerify)
    MergeFrom(*source);
  }
}

void Req_SKF_RSAVerify::MergeFrom(const Req_SKF_RSAVerify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_RSAVerify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbdata().size() > 0) {

    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.pbsignature().size() > 0) {

    pbsignature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbsignature_);
  }
  if (from.has_hdev()) {
    mutable_hdev()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hdev());
  }
  if (from.has_prsapubkeyblob()) {
    mutable_prsapubkeyblob()->::com::westone::skf::SKF_RSAPUBLICKEYBLOB::MergeFrom(from.prsapubkeyblob());
  }
  if (from.has_uldatalen()) {
    mutable_uldatalen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.uldatalen());
  }
  if (from.has_ulsiglen()) {
    mutable_ulsiglen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulsiglen());
  }
}

void Req_SKF_RSAVerify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_RSAVerify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_RSAVerify::CopyFrom(const Req_SKF_RSAVerify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_RSAVerify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_RSAVerify::IsInitialized() const {
  return true;
}

void Req_SKF_RSAVerify::Swap(Req_SKF_RSAVerify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_RSAVerify::InternalSwap(Req_SKF_RSAVerify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbdata_.Swap(&other->pbdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pbsignature_.Swap(&other->pbsignature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hdev_, other->hdev_);
  swap(prsapubkeyblob_, other->prsapubkeyblob_);
  swap(uldatalen_, other->uldatalen_);
  swap(ulsiglen_, other->ulsiglen_);
}

::google::protobuf::Metadata Req_SKF_RSAVerify::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_RSAVerify::InitAsDefaultInstance() {
}
class Rsp_SKF_RSAVerify::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_RSAVerify::Rsp_SKF_RSAVerify()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_RSAVerify)
}
Rsp_SKF_RSAVerify::Rsp_SKF_RSAVerify(const Rsp_SKF_RSAVerify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_RSAVerify)
}

void Rsp_SKF_RSAVerify::SharedCtor() {
}

Rsp_SKF_RSAVerify::~Rsp_SKF_RSAVerify() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_RSAVerify)
  SharedDtor();
}

void Rsp_SKF_RSAVerify::SharedDtor() {
}

void Rsp_SKF_RSAVerify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_RSAVerify& Rsp_SKF_RSAVerify::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_RSAVerify_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_RSAVerify::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_RSAVerify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_RSAVerify::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_RSAVerify*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_RSAVerify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_RSAVerify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_RSAVerify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_RSAVerify)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_RSAVerify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_RSAVerify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_RSAVerify)
}

::google::protobuf::uint8* Rsp_SKF_RSAVerify::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_RSAVerify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_RSAVerify)
  return target;
}

size_t Rsp_SKF_RSAVerify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_RSAVerify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_RSAVerify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_RSAVerify)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_RSAVerify* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_RSAVerify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_RSAVerify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_RSAVerify)
    MergeFrom(*source);
  }
}

void Rsp_SKF_RSAVerify::MergeFrom(const Rsp_SKF_RSAVerify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_RSAVerify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rsp_SKF_RSAVerify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_RSAVerify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_RSAVerify::CopyFrom(const Rsp_SKF_RSAVerify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_RSAVerify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_RSAVerify::IsInitialized() const {
  return true;
}

void Rsp_SKF_RSAVerify::Swap(Rsp_SKF_RSAVerify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_RSAVerify::InternalSwap(Rsp_SKF_RSAVerify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rsp_SKF_RSAVerify::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_RSAExportSessionKey::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_RSAExportSessionKey_default_instance_._instance.get_mutable()->hcontainer_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_RSAExportSessionKey_default_instance_._instance.get_mutable()->ulalgid_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_RSAExportSessionKey_default_instance_._instance.get_mutable()->ppubkey_ = const_cast< ::com::westone::skf::SKF_RSAPUBLICKEYBLOB*>(
      ::com::westone::skf::SKF_RSAPUBLICKEYBLOB::internal_default_instance());
  ::com::westone::skf::_Req_SKF_RSAExportSessionKey_default_instance_._instance.get_mutable()->puldatalen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_RSAExportSessionKey_default_instance_._instance.get_mutable()->phsessionkey_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_RSAExportSessionKey::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hcontainer(const Req_SKF_RSAExportSessionKey* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulalgid(const Req_SKF_RSAExportSessionKey* msg);
  static const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB& ppubkey(const Req_SKF_RSAExportSessionKey* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& puldatalen(const Req_SKF_RSAExportSessionKey* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& phsessionkey(const Req_SKF_RSAExportSessionKey* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_RSAExportSessionKey::HasBitSetters::hcontainer(const Req_SKF_RSAExportSessionKey* msg) {
  return *msg->hcontainer_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_RSAExportSessionKey::HasBitSetters::ulalgid(const Req_SKF_RSAExportSessionKey* msg) {
  return *msg->ulalgid_;
}
const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB&
Req_SKF_RSAExportSessionKey::HasBitSetters::ppubkey(const Req_SKF_RSAExportSessionKey* msg) {
  return *msg->ppubkey_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_RSAExportSessionKey::HasBitSetters::puldatalen(const Req_SKF_RSAExportSessionKey* msg) {
  return *msg->puldatalen_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_RSAExportSessionKey::HasBitSetters::phsessionkey(const Req_SKF_RSAExportSessionKey* msg) {
  return *msg->phsessionkey_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_RSAExportSessionKey::kHContainerFieldNumber;
const int Req_SKF_RSAExportSessionKey::kUlAlgIDFieldNumber;
const int Req_SKF_RSAExportSessionKey::kPPubKeyFieldNumber;
const int Req_SKF_RSAExportSessionKey::kPbDataFieldNumber;
const int Req_SKF_RSAExportSessionKey::kPulDataLenFieldNumber;
const int Req_SKF_RSAExportSessionKey::kPhSessionKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_RSAExportSessionKey::Req_SKF_RSAExportSessionKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_RSAExportSessionKey)
}
Req_SKF_RSAExportSessionKey::Req_SKF_RSAExportSessionKey(const Req_SKF_RSAExportSessionKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbdata().size() > 0) {
    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.has_hcontainer()) {
    hcontainer_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hcontainer_);
  } else {
    hcontainer_ = nullptr;
  }
  if (from.has_ulalgid()) {
    ulalgid_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulalgid_);
  } else {
    ulalgid_ = nullptr;
  }
  if (from.has_ppubkey()) {
    ppubkey_ = new ::com::westone::skf::SKF_RSAPUBLICKEYBLOB(*from.ppubkey_);
  } else {
    ppubkey_ = nullptr;
  }
  if (from.has_puldatalen()) {
    puldatalen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.puldatalen_);
  } else {
    puldatalen_ = nullptr;
  }
  if (from.has_phsessionkey()) {
    phsessionkey_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.phsessionkey_);
  } else {
    phsessionkey_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_RSAExportSessionKey)
}

void Req_SKF_RSAExportSessionKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_RSAExportSessionKey_skf_2eproto.base);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hcontainer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phsessionkey_) -
      reinterpret_cast<char*>(&hcontainer_)) + sizeof(phsessionkey_));
}

Req_SKF_RSAExportSessionKey::~Req_SKF_RSAExportSessionKey() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_RSAExportSessionKey)
  SharedDtor();
}

void Req_SKF_RSAExportSessionKey::SharedDtor() {
  pbdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hcontainer_;
  if (this != internal_default_instance()) delete ulalgid_;
  if (this != internal_default_instance()) delete ppubkey_;
  if (this != internal_default_instance()) delete puldatalen_;
  if (this != internal_default_instance()) delete phsessionkey_;
}

void Req_SKF_RSAExportSessionKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_RSAExportSessionKey& Req_SKF_RSAExportSessionKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_RSAExportSessionKey_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_RSAExportSessionKey::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_RSAExportSessionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulalgid_ != nullptr) {
    delete ulalgid_;
  }
  ulalgid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ppubkey_ != nullptr) {
    delete ppubkey_;
  }
  ppubkey_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && puldatalen_ != nullptr) {
    delete puldatalen_;
  }
  puldatalen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && phsessionkey_ != nullptr) {
    delete phsessionkey_;
  }
  phsessionkey_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_RSAExportSessionKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_RSAExportSessionKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hcontainer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulalgid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pPubKey = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_RSAPUBLICKEYBLOB::_InternalParse;
        object = msg->mutable_ppubkey();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbData = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_puldatalen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 phSessionKey = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_phsessionkey();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_RSAExportSessionKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_RSAExportSessionKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hcontainer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulalgid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pPubKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ppubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbData = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_puldatalen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 phSessionKey = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phsessionkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_RSAExportSessionKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_RSAExportSessionKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_RSAExportSessionKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_RSAExportSessionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hcontainer(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
  if (this->has_ulalgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::ulalgid(this), output);
  }

  // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pPubKey = 3;
  if (this->has_ppubkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::ppubkey(this), output);
  }

  // bytes pbData = 5;
  if (this->pbdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->pbdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 6;
  if (this->has_puldatalen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::puldatalen(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phSessionKey = 7;
  if (this->has_phsessionkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::phsessionkey(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_RSAExportSessionKey)
}

::google::protobuf::uint8* Req_SKF_RSAExportSessionKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_RSAExportSessionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hcontainer(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
  if (this->has_ulalgid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::ulalgid(this), target);
  }

  // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pPubKey = 3;
  if (this->has_ppubkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::ppubkey(this), target);
  }

  // bytes pbData = 5;
  if (this->pbdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->pbdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 6;
  if (this->has_puldatalen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::puldatalen(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phSessionKey = 7;
  if (this->has_phsessionkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::phsessionkey(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_RSAExportSessionKey)
  return target;
}

size_t Req_SKF_RSAExportSessionKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_RSAExportSessionKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbData = 5;
  if (this->pbdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbdata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hcontainer_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
  if (this->has_ulalgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulalgid_);
  }

  // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pPubKey = 3;
  if (this->has_ppubkey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ppubkey_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 6;
  if (this->has_puldatalen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *puldatalen_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phSessionKey = 7;
  if (this->has_phsessionkey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *phsessionkey_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_RSAExportSessionKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_RSAExportSessionKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_RSAExportSessionKey* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_RSAExportSessionKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_RSAExportSessionKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_RSAExportSessionKey)
    MergeFrom(*source);
  }
}

void Req_SKF_RSAExportSessionKey::MergeFrom(const Req_SKF_RSAExportSessionKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_RSAExportSessionKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbdata().size() > 0) {

    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.has_hcontainer()) {
    mutable_hcontainer()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hcontainer());
  }
  if (from.has_ulalgid()) {
    mutable_ulalgid()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulalgid());
  }
  if (from.has_ppubkey()) {
    mutable_ppubkey()->::com::westone::skf::SKF_RSAPUBLICKEYBLOB::MergeFrom(from.ppubkey());
  }
  if (from.has_puldatalen()) {
    mutable_puldatalen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.puldatalen());
  }
  if (from.has_phsessionkey()) {
    mutable_phsessionkey()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.phsessionkey());
  }
}

void Req_SKF_RSAExportSessionKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_RSAExportSessionKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_RSAExportSessionKey::CopyFrom(const Req_SKF_RSAExportSessionKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_RSAExportSessionKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_RSAExportSessionKey::IsInitialized() const {
  return true;
}

void Req_SKF_RSAExportSessionKey::Swap(Req_SKF_RSAExportSessionKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_RSAExportSessionKey::InternalSwap(Req_SKF_RSAExportSessionKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbdata_.Swap(&other->pbdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hcontainer_, other->hcontainer_);
  swap(ulalgid_, other->ulalgid_);
  swap(ppubkey_, other->ppubkey_);
  swap(puldatalen_, other->puldatalen_);
  swap(phsessionkey_, other->phsessionkey_);
}

::google::protobuf::Metadata Req_SKF_RSAExportSessionKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_RSAExportSessionKey::InitAsDefaultInstance() {
}
class Rsp_SKF_RSAExportSessionKey::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_RSAExportSessionKey::Rsp_SKF_RSAExportSessionKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_RSAExportSessionKey)
}
Rsp_SKF_RSAExportSessionKey::Rsp_SKF_RSAExportSessionKey(const Rsp_SKF_RSAExportSessionKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_RSAExportSessionKey)
}

void Rsp_SKF_RSAExportSessionKey::SharedCtor() {
}

Rsp_SKF_RSAExportSessionKey::~Rsp_SKF_RSAExportSessionKey() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_RSAExportSessionKey)
  SharedDtor();
}

void Rsp_SKF_RSAExportSessionKey::SharedDtor() {
}

void Rsp_SKF_RSAExportSessionKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_RSAExportSessionKey& Rsp_SKF_RSAExportSessionKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_RSAExportSessionKey_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_RSAExportSessionKey::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_RSAExportSessionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_RSAExportSessionKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_RSAExportSessionKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_RSAExportSessionKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_RSAExportSessionKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_RSAExportSessionKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_RSAExportSessionKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_RSAExportSessionKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_RSAExportSessionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_RSAExportSessionKey)
}

::google::protobuf::uint8* Rsp_SKF_RSAExportSessionKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_RSAExportSessionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_RSAExportSessionKey)
  return target;
}

size_t Rsp_SKF_RSAExportSessionKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_RSAExportSessionKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_RSAExportSessionKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_RSAExportSessionKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_RSAExportSessionKey* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_RSAExportSessionKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_RSAExportSessionKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_RSAExportSessionKey)
    MergeFrom(*source);
  }
}

void Rsp_SKF_RSAExportSessionKey::MergeFrom(const Rsp_SKF_RSAExportSessionKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_RSAExportSessionKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rsp_SKF_RSAExportSessionKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_RSAExportSessionKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_RSAExportSessionKey::CopyFrom(const Rsp_SKF_RSAExportSessionKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_RSAExportSessionKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_RSAExportSessionKey::IsInitialized() const {
  return true;
}

void Rsp_SKF_RSAExportSessionKey::Swap(Rsp_SKF_RSAExportSessionKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_RSAExportSessionKey::InternalSwap(Rsp_SKF_RSAExportSessionKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rsp_SKF_RSAExportSessionKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_ExtRSAPubKeyOperation::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_ExtRSAPubKeyOperation_default_instance_._instance.get_mutable()->hdev_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ExtRSAPubKeyOperation_default_instance_._instance.get_mutable()->prsapubkeyblob_ = const_cast< ::com::westone::skf::SKF_RSAPUBLICKEYBLOB*>(
      ::com::westone::skf::SKF_RSAPUBLICKEYBLOB::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ExtRSAPubKeyOperation_default_instance_._instance.get_mutable()->ulinputlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ExtRSAPubKeyOperation_default_instance_._instance.get_mutable()->puloutputlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_ExtRSAPubKeyOperation::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hdev(const Req_SKF_ExtRSAPubKeyOperation* msg);
  static const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB& prsapubkeyblob(const Req_SKF_ExtRSAPubKeyOperation* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulinputlen(const Req_SKF_ExtRSAPubKeyOperation* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& puloutputlen(const Req_SKF_ExtRSAPubKeyOperation* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ExtRSAPubKeyOperation::HasBitSetters::hdev(const Req_SKF_ExtRSAPubKeyOperation* msg) {
  return *msg->hdev_;
}
const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB&
Req_SKF_ExtRSAPubKeyOperation::HasBitSetters::prsapubkeyblob(const Req_SKF_ExtRSAPubKeyOperation* msg) {
  return *msg->prsapubkeyblob_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ExtRSAPubKeyOperation::HasBitSetters::ulinputlen(const Req_SKF_ExtRSAPubKeyOperation* msg) {
  return *msg->ulinputlen_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ExtRSAPubKeyOperation::HasBitSetters::puloutputlen(const Req_SKF_ExtRSAPubKeyOperation* msg) {
  return *msg->puloutputlen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_ExtRSAPubKeyOperation::kHDevFieldNumber;
const int Req_SKF_ExtRSAPubKeyOperation::kPRSAPubKeyBlobFieldNumber;
const int Req_SKF_ExtRSAPubKeyOperation::kPbInputFieldNumber;
const int Req_SKF_ExtRSAPubKeyOperation::kUlInputLenFieldNumber;
const int Req_SKF_ExtRSAPubKeyOperation::kPbOutDataFieldNumber;
const int Req_SKF_ExtRSAPubKeyOperation::kPulOutputLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_ExtRSAPubKeyOperation::Req_SKF_ExtRSAPubKeyOperation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation)
}
Req_SKF_ExtRSAPubKeyOperation::Req_SKF_ExtRSAPubKeyOperation(const Req_SKF_ExtRSAPubKeyOperation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbinput_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbinput().size() > 0) {
    pbinput_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbinput_);
  }
  pboutdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pboutdata().size() > 0) {
    pboutdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pboutdata_);
  }
  if (from.has_hdev()) {
    hdev_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hdev_);
  } else {
    hdev_ = nullptr;
  }
  if (from.has_prsapubkeyblob()) {
    prsapubkeyblob_ = new ::com::westone::skf::SKF_RSAPUBLICKEYBLOB(*from.prsapubkeyblob_);
  } else {
    prsapubkeyblob_ = nullptr;
  }
  if (from.has_ulinputlen()) {
    ulinputlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulinputlen_);
  } else {
    ulinputlen_ = nullptr;
  }
  if (from.has_puloutputlen()) {
    puloutputlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.puloutputlen_);
  } else {
    puloutputlen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation)
}

void Req_SKF_ExtRSAPubKeyOperation::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_ExtRSAPubKeyOperation_skf_2eproto.base);
  pbinput_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pboutdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hdev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&puloutputlen_) -
      reinterpret_cast<char*>(&hdev_)) + sizeof(puloutputlen_));
}

Req_SKF_ExtRSAPubKeyOperation::~Req_SKF_ExtRSAPubKeyOperation() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation)
  SharedDtor();
}

void Req_SKF_ExtRSAPubKeyOperation::SharedDtor() {
  pbinput_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pboutdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hdev_;
  if (this != internal_default_instance()) delete prsapubkeyblob_;
  if (this != internal_default_instance()) delete ulinputlen_;
  if (this != internal_default_instance()) delete puloutputlen_;
}

void Req_SKF_ExtRSAPubKeyOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_ExtRSAPubKeyOperation& Req_SKF_ExtRSAPubKeyOperation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_ExtRSAPubKeyOperation_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_ExtRSAPubKeyOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbinput_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pboutdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && prsapubkeyblob_ != nullptr) {
    delete prsapubkeyblob_;
  }
  prsapubkeyblob_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulinputlen_ != nullptr) {
    delete ulinputlen_;
  }
  ulinputlen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && puloutputlen_ != nullptr) {
    delete puloutputlen_;
  }
  puloutputlen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_ExtRSAPubKeyOperation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_ExtRSAPubKeyOperation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hdev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pRSAPubKeyBlob = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_RSAPUBLICKEYBLOB::_InternalParse;
        object = msg->mutable_prsapubkeyblob();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbInput = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbinput();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulInputLen = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulinputlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbOutData = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pboutdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulOutputLen = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_puloutputlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_ExtRSAPubKeyOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hdev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pRSAPubKeyBlob = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_prsapubkeyblob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbInput = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbinput()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulInputLen = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulinputlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbOutData = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pboutdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulOutputLen = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_puloutputlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_ExtRSAPubKeyOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hdev(this), output);
  }

  // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pRSAPubKeyBlob = 2;
  if (this->has_prsapubkeyblob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::prsapubkeyblob(this), output);
  }

  // bytes pbInput = 3;
  if (this->pbinput().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->pbinput(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulInputLen = 4;
  if (this->has_ulinputlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::ulinputlen(this), output);
  }

  // bytes pbOutData = 5;
  if (this->pboutdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->pboutdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulOutputLen = 6;
  if (this->has_puloutputlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::puloutputlen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation)
}

::google::protobuf::uint8* Req_SKF_ExtRSAPubKeyOperation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hdev(this), target);
  }

  // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pRSAPubKeyBlob = 2;
  if (this->has_prsapubkeyblob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::prsapubkeyblob(this), target);
  }

  // bytes pbInput = 3;
  if (this->pbinput().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->pbinput(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulInputLen = 4;
  if (this->has_ulinputlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::ulinputlen(this), target);
  }

  // bytes pbOutData = 5;
  if (this->pboutdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->pboutdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulOutputLen = 6;
  if (this->has_puloutputlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::puloutputlen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation)
  return target;
}

size_t Req_SKF_ExtRSAPubKeyOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbInput = 3;
  if (this->pbinput().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbinput());
  }

  // bytes pbOutData = 5;
  if (this->pboutdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pboutdata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hdev_);
  }

  // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pRSAPubKeyBlob = 2;
  if (this->has_prsapubkeyblob()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *prsapubkeyblob_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulInputLen = 4;
  if (this->has_ulinputlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulinputlen_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulOutputLen = 6;
  if (this->has_puloutputlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *puloutputlen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_ExtRSAPubKeyOperation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_ExtRSAPubKeyOperation* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_ExtRSAPubKeyOperation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation)
    MergeFrom(*source);
  }
}

void Req_SKF_ExtRSAPubKeyOperation::MergeFrom(const Req_SKF_ExtRSAPubKeyOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbinput().size() > 0) {

    pbinput_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbinput_);
  }
  if (from.pboutdata().size() > 0) {

    pboutdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pboutdata_);
  }
  if (from.has_hdev()) {
    mutable_hdev()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hdev());
  }
  if (from.has_prsapubkeyblob()) {
    mutable_prsapubkeyblob()->::com::westone::skf::SKF_RSAPUBLICKEYBLOB::MergeFrom(from.prsapubkeyblob());
  }
  if (from.has_ulinputlen()) {
    mutable_ulinputlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulinputlen());
  }
  if (from.has_puloutputlen()) {
    mutable_puloutputlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.puloutputlen());
  }
}

void Req_SKF_ExtRSAPubKeyOperation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_ExtRSAPubKeyOperation::CopyFrom(const Req_SKF_ExtRSAPubKeyOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_ExtRSAPubKeyOperation::IsInitialized() const {
  return true;
}

void Req_SKF_ExtRSAPubKeyOperation::Swap(Req_SKF_ExtRSAPubKeyOperation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_ExtRSAPubKeyOperation::InternalSwap(Req_SKF_ExtRSAPubKeyOperation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbinput_.Swap(&other->pbinput_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pboutdata_.Swap(&other->pboutdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hdev_, other->hdev_);
  swap(prsapubkeyblob_, other->prsapubkeyblob_);
  swap(ulinputlen_, other->ulinputlen_);
  swap(puloutputlen_, other->puloutputlen_);
}

::google::protobuf::Metadata Req_SKF_ExtRSAPubKeyOperation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_ExtRSAPubKeyOperation::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_ExtRSAPubKeyOperation_default_instance_._instance.get_mutable()->puloutputlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_ExtRSAPubKeyOperation::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& puloutputlen(const Rsp_SKF_ExtRSAPubKeyOperation* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_ExtRSAPubKeyOperation::HasBitSetters::puloutputlen(const Rsp_SKF_ExtRSAPubKeyOperation* msg) {
  return *msg->puloutputlen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_ExtRSAPubKeyOperation::kPbOutDataFieldNumber;
const int Rsp_SKF_ExtRSAPubKeyOperation::kPulOutputLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_ExtRSAPubKeyOperation::Rsp_SKF_ExtRSAPubKeyOperation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation)
}
Rsp_SKF_ExtRSAPubKeyOperation::Rsp_SKF_ExtRSAPubKeyOperation(const Rsp_SKF_ExtRSAPubKeyOperation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pboutdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pboutdata().size() > 0) {
    pboutdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pboutdata_);
  }
  if (from.has_puloutputlen()) {
    puloutputlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.puloutputlen_);
  } else {
    puloutputlen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation)
}

void Rsp_SKF_ExtRSAPubKeyOperation::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_ExtRSAPubKeyOperation_skf_2eproto.base);
  pboutdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  puloutputlen_ = nullptr;
}

Rsp_SKF_ExtRSAPubKeyOperation::~Rsp_SKF_ExtRSAPubKeyOperation() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation)
  SharedDtor();
}

void Rsp_SKF_ExtRSAPubKeyOperation::SharedDtor() {
  pboutdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete puloutputlen_;
}

void Rsp_SKF_ExtRSAPubKeyOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_ExtRSAPubKeyOperation& Rsp_SKF_ExtRSAPubKeyOperation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_ExtRSAPubKeyOperation_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_ExtRSAPubKeyOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pboutdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && puloutputlen_ != nullptr) {
    delete puloutputlen_;
  }
  puloutputlen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_ExtRSAPubKeyOperation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_ExtRSAPubKeyOperation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes pbOutData = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pboutdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulOutputLen = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_puloutputlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_ExtRSAPubKeyOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes pbOutData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pboutdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulOutputLen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_puloutputlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_ExtRSAPubKeyOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbOutData = 1;
  if (this->pboutdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pboutdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulOutputLen = 2;
  if (this->has_puloutputlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::puloutputlen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation)
}

::google::protobuf::uint8* Rsp_SKF_ExtRSAPubKeyOperation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbOutData = 1;
  if (this->pboutdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pboutdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulOutputLen = 2;
  if (this->has_puloutputlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::puloutputlen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation)
  return target;
}

size_t Rsp_SKF_ExtRSAPubKeyOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbOutData = 1;
  if (this->pboutdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pboutdata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulOutputLen = 2;
  if (this->has_puloutputlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *puloutputlen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_ExtRSAPubKeyOperation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_ExtRSAPubKeyOperation* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_ExtRSAPubKeyOperation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation)
    MergeFrom(*source);
  }
}

void Rsp_SKF_ExtRSAPubKeyOperation::MergeFrom(const Rsp_SKF_ExtRSAPubKeyOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pboutdata().size() > 0) {

    pboutdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pboutdata_);
  }
  if (from.has_puloutputlen()) {
    mutable_puloutputlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.puloutputlen());
  }
}

void Rsp_SKF_ExtRSAPubKeyOperation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_ExtRSAPubKeyOperation::CopyFrom(const Rsp_SKF_ExtRSAPubKeyOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_ExtRSAPubKeyOperation::IsInitialized() const {
  return true;
}

void Rsp_SKF_ExtRSAPubKeyOperation::Swap(Rsp_SKF_ExtRSAPubKeyOperation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_ExtRSAPubKeyOperation::InternalSwap(Rsp_SKF_ExtRSAPubKeyOperation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pboutdata_.Swap(&other->pboutdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(puloutputlen_, other->puloutputlen_);
}

::google::protobuf::Metadata Rsp_SKF_ExtRSAPubKeyOperation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_ExtRSAPriKeyOperation::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_ExtRSAPriKeyOperation_default_instance_._instance.get_mutable()->hdev_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ExtRSAPriKeyOperation_default_instance_._instance.get_mutable()->prsaprikeyblob_ = const_cast< ::com::westone::skf::SKF_RSAPRIVATEKEYBLOB*>(
      ::com::westone::skf::SKF_RSAPRIVATEKEYBLOB::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ExtRSAPriKeyOperation_default_instance_._instance.get_mutable()->ulinputlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ExtRSAPriKeyOperation_default_instance_._instance.get_mutable()->puloutputlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_ExtRSAPriKeyOperation::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hdev(const Req_SKF_ExtRSAPriKeyOperation* msg);
  static const ::com::westone::skf::SKF_RSAPRIVATEKEYBLOB& prsaprikeyblob(const Req_SKF_ExtRSAPriKeyOperation* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulinputlen(const Req_SKF_ExtRSAPriKeyOperation* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& puloutputlen(const Req_SKF_ExtRSAPriKeyOperation* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ExtRSAPriKeyOperation::HasBitSetters::hdev(const Req_SKF_ExtRSAPriKeyOperation* msg) {
  return *msg->hdev_;
}
const ::com::westone::skf::SKF_RSAPRIVATEKEYBLOB&
Req_SKF_ExtRSAPriKeyOperation::HasBitSetters::prsaprikeyblob(const Req_SKF_ExtRSAPriKeyOperation* msg) {
  return *msg->prsaprikeyblob_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ExtRSAPriKeyOperation::HasBitSetters::ulinputlen(const Req_SKF_ExtRSAPriKeyOperation* msg) {
  return *msg->ulinputlen_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ExtRSAPriKeyOperation::HasBitSetters::puloutputlen(const Req_SKF_ExtRSAPriKeyOperation* msg) {
  return *msg->puloutputlen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_ExtRSAPriKeyOperation::kHDevFieldNumber;
const int Req_SKF_ExtRSAPriKeyOperation::kPRSAPriKeyBlobFieldNumber;
const int Req_SKF_ExtRSAPriKeyOperation::kPbInputFieldNumber;
const int Req_SKF_ExtRSAPriKeyOperation::kUlInputLenFieldNumber;
const int Req_SKF_ExtRSAPriKeyOperation::kPbOutDataFieldNumber;
const int Req_SKF_ExtRSAPriKeyOperation::kPulOutputLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_ExtRSAPriKeyOperation::Req_SKF_ExtRSAPriKeyOperation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation)
}
Req_SKF_ExtRSAPriKeyOperation::Req_SKF_ExtRSAPriKeyOperation(const Req_SKF_ExtRSAPriKeyOperation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbinput_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbinput().size() > 0) {
    pbinput_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbinput_);
  }
  pboutdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pboutdata().size() > 0) {
    pboutdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pboutdata_);
  }
  if (from.has_hdev()) {
    hdev_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hdev_);
  } else {
    hdev_ = nullptr;
  }
  if (from.has_prsaprikeyblob()) {
    prsaprikeyblob_ = new ::com::westone::skf::SKF_RSAPRIVATEKEYBLOB(*from.prsaprikeyblob_);
  } else {
    prsaprikeyblob_ = nullptr;
  }
  if (from.has_ulinputlen()) {
    ulinputlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulinputlen_);
  } else {
    ulinputlen_ = nullptr;
  }
  if (from.has_puloutputlen()) {
    puloutputlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.puloutputlen_);
  } else {
    puloutputlen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation)
}

void Req_SKF_ExtRSAPriKeyOperation::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_ExtRSAPriKeyOperation_skf_2eproto.base);
  pbinput_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pboutdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hdev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&puloutputlen_) -
      reinterpret_cast<char*>(&hdev_)) + sizeof(puloutputlen_));
}

Req_SKF_ExtRSAPriKeyOperation::~Req_SKF_ExtRSAPriKeyOperation() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation)
  SharedDtor();
}

void Req_SKF_ExtRSAPriKeyOperation::SharedDtor() {
  pbinput_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pboutdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hdev_;
  if (this != internal_default_instance()) delete prsaprikeyblob_;
  if (this != internal_default_instance()) delete ulinputlen_;
  if (this != internal_default_instance()) delete puloutputlen_;
}

void Req_SKF_ExtRSAPriKeyOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_ExtRSAPriKeyOperation& Req_SKF_ExtRSAPriKeyOperation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_ExtRSAPriKeyOperation_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_ExtRSAPriKeyOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbinput_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pboutdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && prsaprikeyblob_ != nullptr) {
    delete prsaprikeyblob_;
  }
  prsaprikeyblob_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulinputlen_ != nullptr) {
    delete ulinputlen_;
  }
  ulinputlen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && puloutputlen_ != nullptr) {
    delete puloutputlen_;
  }
  puloutputlen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_ExtRSAPriKeyOperation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_ExtRSAPriKeyOperation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hdev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_RSAPRIVATEKEYBLOB pRSAPriKeyBlob = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_RSAPRIVATEKEYBLOB::_InternalParse;
        object = msg->mutable_prsaprikeyblob();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbInput = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbinput();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulInputLen = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulinputlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbOutData = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pboutdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulOutputLen = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_puloutputlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_ExtRSAPriKeyOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hdev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_RSAPRIVATEKEYBLOB pRSAPriKeyBlob = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_prsaprikeyblob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbInput = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbinput()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulInputLen = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulinputlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbOutData = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pboutdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulOutputLen = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_puloutputlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_ExtRSAPriKeyOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hdev(this), output);
  }

  // .com.westone.skf.SKF_RSAPRIVATEKEYBLOB pRSAPriKeyBlob = 2;
  if (this->has_prsaprikeyblob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::prsaprikeyblob(this), output);
  }

  // bytes pbInput = 3;
  if (this->pbinput().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->pbinput(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulInputLen = 4;
  if (this->has_ulinputlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::ulinputlen(this), output);
  }

  // bytes pbOutData = 5;
  if (this->pboutdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->pboutdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulOutputLen = 6;
  if (this->has_puloutputlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::puloutputlen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation)
}

::google::protobuf::uint8* Req_SKF_ExtRSAPriKeyOperation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hdev(this), target);
  }

  // .com.westone.skf.SKF_RSAPRIVATEKEYBLOB pRSAPriKeyBlob = 2;
  if (this->has_prsaprikeyblob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::prsaprikeyblob(this), target);
  }

  // bytes pbInput = 3;
  if (this->pbinput().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->pbinput(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulInputLen = 4;
  if (this->has_ulinputlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::ulinputlen(this), target);
  }

  // bytes pbOutData = 5;
  if (this->pboutdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->pboutdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulOutputLen = 6;
  if (this->has_puloutputlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::puloutputlen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation)
  return target;
}

size_t Req_SKF_ExtRSAPriKeyOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbInput = 3;
  if (this->pbinput().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbinput());
  }

  // bytes pbOutData = 5;
  if (this->pboutdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pboutdata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hdev_);
  }

  // .com.westone.skf.SKF_RSAPRIVATEKEYBLOB pRSAPriKeyBlob = 2;
  if (this->has_prsaprikeyblob()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *prsaprikeyblob_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulInputLen = 4;
  if (this->has_ulinputlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulinputlen_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulOutputLen = 6;
  if (this->has_puloutputlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *puloutputlen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_ExtRSAPriKeyOperation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_ExtRSAPriKeyOperation* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_ExtRSAPriKeyOperation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation)
    MergeFrom(*source);
  }
}

void Req_SKF_ExtRSAPriKeyOperation::MergeFrom(const Req_SKF_ExtRSAPriKeyOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbinput().size() > 0) {

    pbinput_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbinput_);
  }
  if (from.pboutdata().size() > 0) {

    pboutdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pboutdata_);
  }
  if (from.has_hdev()) {
    mutable_hdev()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hdev());
  }
  if (from.has_prsaprikeyblob()) {
    mutable_prsaprikeyblob()->::com::westone::skf::SKF_RSAPRIVATEKEYBLOB::MergeFrom(from.prsaprikeyblob());
  }
  if (from.has_ulinputlen()) {
    mutable_ulinputlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulinputlen());
  }
  if (from.has_puloutputlen()) {
    mutable_puloutputlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.puloutputlen());
  }
}

void Req_SKF_ExtRSAPriKeyOperation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_ExtRSAPriKeyOperation::CopyFrom(const Req_SKF_ExtRSAPriKeyOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_ExtRSAPriKeyOperation::IsInitialized() const {
  return true;
}

void Req_SKF_ExtRSAPriKeyOperation::Swap(Req_SKF_ExtRSAPriKeyOperation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_ExtRSAPriKeyOperation::InternalSwap(Req_SKF_ExtRSAPriKeyOperation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbinput_.Swap(&other->pbinput_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pboutdata_.Swap(&other->pboutdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hdev_, other->hdev_);
  swap(prsaprikeyblob_, other->prsaprikeyblob_);
  swap(ulinputlen_, other->ulinputlen_);
  swap(puloutputlen_, other->puloutputlen_);
}

::google::protobuf::Metadata Req_SKF_ExtRSAPriKeyOperation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_ExtRSAPriKeyOperation::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_ExtRSAPriKeyOperation_default_instance_._instance.get_mutable()->puloutputlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_ExtRSAPriKeyOperation::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& puloutputlen(const Rsp_SKF_ExtRSAPriKeyOperation* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_ExtRSAPriKeyOperation::HasBitSetters::puloutputlen(const Rsp_SKF_ExtRSAPriKeyOperation* msg) {
  return *msg->puloutputlen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_ExtRSAPriKeyOperation::kPbOutDataFieldNumber;
const int Rsp_SKF_ExtRSAPriKeyOperation::kPulOutputLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_ExtRSAPriKeyOperation::Rsp_SKF_ExtRSAPriKeyOperation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation)
}
Rsp_SKF_ExtRSAPriKeyOperation::Rsp_SKF_ExtRSAPriKeyOperation(const Rsp_SKF_ExtRSAPriKeyOperation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pboutdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pboutdata().size() > 0) {
    pboutdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pboutdata_);
  }
  if (from.has_puloutputlen()) {
    puloutputlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.puloutputlen_);
  } else {
    puloutputlen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation)
}

void Rsp_SKF_ExtRSAPriKeyOperation::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_ExtRSAPriKeyOperation_skf_2eproto.base);
  pboutdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  puloutputlen_ = nullptr;
}

Rsp_SKF_ExtRSAPriKeyOperation::~Rsp_SKF_ExtRSAPriKeyOperation() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation)
  SharedDtor();
}

void Rsp_SKF_ExtRSAPriKeyOperation::SharedDtor() {
  pboutdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete puloutputlen_;
}

void Rsp_SKF_ExtRSAPriKeyOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_ExtRSAPriKeyOperation& Rsp_SKF_ExtRSAPriKeyOperation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_ExtRSAPriKeyOperation_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_ExtRSAPriKeyOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pboutdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && puloutputlen_ != nullptr) {
    delete puloutputlen_;
  }
  puloutputlen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_ExtRSAPriKeyOperation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_ExtRSAPriKeyOperation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes pbOutData = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pboutdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulOutputLen = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_puloutputlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_ExtRSAPriKeyOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes pbOutData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pboutdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulOutputLen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_puloutputlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_ExtRSAPriKeyOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbOutData = 1;
  if (this->pboutdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pboutdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulOutputLen = 2;
  if (this->has_puloutputlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::puloutputlen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation)
}

::google::protobuf::uint8* Rsp_SKF_ExtRSAPriKeyOperation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbOutData = 1;
  if (this->pboutdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pboutdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulOutputLen = 2;
  if (this->has_puloutputlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::puloutputlen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation)
  return target;
}

size_t Rsp_SKF_ExtRSAPriKeyOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbOutData = 1;
  if (this->pboutdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pboutdata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulOutputLen = 2;
  if (this->has_puloutputlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *puloutputlen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_ExtRSAPriKeyOperation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_ExtRSAPriKeyOperation* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_ExtRSAPriKeyOperation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation)
    MergeFrom(*source);
  }
}

void Rsp_SKF_ExtRSAPriKeyOperation::MergeFrom(const Rsp_SKF_ExtRSAPriKeyOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pboutdata().size() > 0) {

    pboutdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pboutdata_);
  }
  if (from.has_puloutputlen()) {
    mutable_puloutputlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.puloutputlen());
  }
}

void Rsp_SKF_ExtRSAPriKeyOperation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_ExtRSAPriKeyOperation::CopyFrom(const Rsp_SKF_ExtRSAPriKeyOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_ExtRSAPriKeyOperation::IsInitialized() const {
  return true;
}

void Rsp_SKF_ExtRSAPriKeyOperation::Swap(Rsp_SKF_ExtRSAPriKeyOperation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_ExtRSAPriKeyOperation::InternalSwap(Rsp_SKF_ExtRSAPriKeyOperation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pboutdata_.Swap(&other->pboutdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(puloutputlen_, other->puloutputlen_);
}

::google::protobuf::Metadata Rsp_SKF_ExtRSAPriKeyOperation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_GenECCKeyPair::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_GenECCKeyPair_default_instance_._instance.get_mutable()->hcontainer_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_GenECCKeyPair_default_instance_._instance.get_mutable()->ulalgid_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_GenECCKeyPair_default_instance_._instance.get_mutable()->pblob_ = const_cast< ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::internal_default_instance());
}
class Req_SKF_GenECCKeyPair::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hcontainer(const Req_SKF_GenECCKeyPair* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulalgid(const Req_SKF_GenECCKeyPair* msg);
  static const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& pblob(const Req_SKF_GenECCKeyPair* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GenECCKeyPair::HasBitSetters::hcontainer(const Req_SKF_GenECCKeyPair* msg) {
  return *msg->hcontainer_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GenECCKeyPair::HasBitSetters::ulalgid(const Req_SKF_GenECCKeyPair* msg) {
  return *msg->ulalgid_;
}
const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB&
Req_SKF_GenECCKeyPair::HasBitSetters::pblob(const Req_SKF_GenECCKeyPair* msg) {
  return *msg->pblob_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_GenECCKeyPair::kHContainerFieldNumber;
const int Req_SKF_GenECCKeyPair::kUlAlgIDFieldNumber;
const int Req_SKF_GenECCKeyPair::kPBlobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_GenECCKeyPair::Req_SKF_GenECCKeyPair()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_GenECCKeyPair)
}
Req_SKF_GenECCKeyPair::Req_SKF_GenECCKeyPair(const Req_SKF_GenECCKeyPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hcontainer()) {
    hcontainer_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hcontainer_);
  } else {
    hcontainer_ = nullptr;
  }
  if (from.has_ulalgid()) {
    ulalgid_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulalgid_);
  } else {
    ulalgid_ = nullptr;
  }
  if (from.has_pblob()) {
    pblob_ = new ::com::westone::skf::SKF_ECCPUBLICKEYBLOB(*from.pblob_);
  } else {
    pblob_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_GenECCKeyPair)
}

void Req_SKF_GenECCKeyPair::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_GenECCKeyPair_skf_2eproto.base);
  ::memset(&hcontainer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pblob_) -
      reinterpret_cast<char*>(&hcontainer_)) + sizeof(pblob_));
}

Req_SKF_GenECCKeyPair::~Req_SKF_GenECCKeyPair() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_GenECCKeyPair)
  SharedDtor();
}

void Req_SKF_GenECCKeyPair::SharedDtor() {
  if (this != internal_default_instance()) delete hcontainer_;
  if (this != internal_default_instance()) delete ulalgid_;
  if (this != internal_default_instance()) delete pblob_;
}

void Req_SKF_GenECCKeyPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_GenECCKeyPair& Req_SKF_GenECCKeyPair::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_GenECCKeyPair_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_GenECCKeyPair::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_GenECCKeyPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulalgid_ != nullptr) {
    delete ulalgid_;
  }
  ulalgid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pblob_ != nullptr) {
    delete pblob_;
  }
  pblob_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_GenECCKeyPair::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_GenECCKeyPair*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hcontainer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulalgid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pBlob = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::_InternalParse;
        object = msg->mutable_pblob();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_GenECCKeyPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_GenECCKeyPair)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hcontainer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulalgid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pBlob = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pblob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_GenECCKeyPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_GenECCKeyPair)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_GenECCKeyPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_GenECCKeyPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hcontainer(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
  if (this->has_ulalgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::ulalgid(this), output);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pBlob = 3;
  if (this->has_pblob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::pblob(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_GenECCKeyPair)
}

::google::protobuf::uint8* Req_SKF_GenECCKeyPair::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_GenECCKeyPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hcontainer(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
  if (this->has_ulalgid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::ulalgid(this), target);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pBlob = 3;
  if (this->has_pblob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::pblob(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_GenECCKeyPair)
  return target;
}

size_t Req_SKF_GenECCKeyPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_GenECCKeyPair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hcontainer_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
  if (this->has_ulalgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulalgid_);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pBlob = 3;
  if (this->has_pblob()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pblob_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_GenECCKeyPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_GenECCKeyPair)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_GenECCKeyPair* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_GenECCKeyPair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_GenECCKeyPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_GenECCKeyPair)
    MergeFrom(*source);
  }
}

void Req_SKF_GenECCKeyPair::MergeFrom(const Req_SKF_GenECCKeyPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_GenECCKeyPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hcontainer()) {
    mutable_hcontainer()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hcontainer());
  }
  if (from.has_ulalgid()) {
    mutable_ulalgid()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulalgid());
  }
  if (from.has_pblob()) {
    mutable_pblob()->::com::westone::skf::SKF_ECCPUBLICKEYBLOB::MergeFrom(from.pblob());
  }
}

void Req_SKF_GenECCKeyPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_GenECCKeyPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_GenECCKeyPair::CopyFrom(const Req_SKF_GenECCKeyPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_GenECCKeyPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_GenECCKeyPair::IsInitialized() const {
  return true;
}

void Req_SKF_GenECCKeyPair::Swap(Req_SKF_GenECCKeyPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_GenECCKeyPair::InternalSwap(Req_SKF_GenECCKeyPair* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(hcontainer_, other->hcontainer_);
  swap(ulalgid_, other->ulalgid_);
  swap(pblob_, other->pblob_);
}

::google::protobuf::Metadata Req_SKF_GenECCKeyPair::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_GenECCKeyPair::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_GenECCKeyPair_default_instance_._instance.get_mutable()->pblob_ = const_cast< ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::internal_default_instance());
}
class Rsp_SKF_GenECCKeyPair::HasBitSetters {
 public:
  static const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& pblob(const Rsp_SKF_GenECCKeyPair* msg);
};

const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB&
Rsp_SKF_GenECCKeyPair::HasBitSetters::pblob(const Rsp_SKF_GenECCKeyPair* msg) {
  return *msg->pblob_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_GenECCKeyPair::kPBlobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_GenECCKeyPair::Rsp_SKF_GenECCKeyPair()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_GenECCKeyPair)
}
Rsp_SKF_GenECCKeyPair::Rsp_SKF_GenECCKeyPair(const Rsp_SKF_GenECCKeyPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pblob()) {
    pblob_ = new ::com::westone::skf::SKF_ECCPUBLICKEYBLOB(*from.pblob_);
  } else {
    pblob_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_GenECCKeyPair)
}

void Rsp_SKF_GenECCKeyPair::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_GenECCKeyPair_skf_2eproto.base);
  pblob_ = nullptr;
}

Rsp_SKF_GenECCKeyPair::~Rsp_SKF_GenECCKeyPair() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_GenECCKeyPair)
  SharedDtor();
}

void Rsp_SKF_GenECCKeyPair::SharedDtor() {
  if (this != internal_default_instance()) delete pblob_;
}

void Rsp_SKF_GenECCKeyPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_GenECCKeyPair& Rsp_SKF_GenECCKeyPair::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_GenECCKeyPair_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_GenECCKeyPair::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_GenECCKeyPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pblob_ != nullptr) {
    delete pblob_;
  }
  pblob_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_GenECCKeyPair::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_GenECCKeyPair*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pBlob = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::_InternalParse;
        object = msg->mutable_pblob();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_GenECCKeyPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_GenECCKeyPair)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pBlob = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pblob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_GenECCKeyPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_GenECCKeyPair)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_GenECCKeyPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_GenECCKeyPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pBlob = 1;
  if (this->has_pblob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::pblob(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_GenECCKeyPair)
}

::google::protobuf::uint8* Rsp_SKF_GenECCKeyPair::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_GenECCKeyPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pBlob = 1;
  if (this->has_pblob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::pblob(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_GenECCKeyPair)
  return target;
}

size_t Rsp_SKF_GenECCKeyPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_GenECCKeyPair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pBlob = 1;
  if (this->has_pblob()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pblob_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_GenECCKeyPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_GenECCKeyPair)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_GenECCKeyPair* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_GenECCKeyPair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_GenECCKeyPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_GenECCKeyPair)
    MergeFrom(*source);
  }
}

void Rsp_SKF_GenECCKeyPair::MergeFrom(const Rsp_SKF_GenECCKeyPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_GenECCKeyPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pblob()) {
    mutable_pblob()->::com::westone::skf::SKF_ECCPUBLICKEYBLOB::MergeFrom(from.pblob());
  }
}

void Rsp_SKF_GenECCKeyPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_GenECCKeyPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_GenECCKeyPair::CopyFrom(const Rsp_SKF_GenECCKeyPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_GenECCKeyPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_GenECCKeyPair::IsInitialized() const {
  return true;
}

void Rsp_SKF_GenECCKeyPair::Swap(Rsp_SKF_GenECCKeyPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_GenECCKeyPair::InternalSwap(Rsp_SKF_GenECCKeyPair* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pblob_, other->pblob_);
}

::google::protobuf::Metadata Rsp_SKF_GenECCKeyPair::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_ImportECCKeyPair::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_ImportECCKeyPair_default_instance_._instance.get_mutable()->hcontainer_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ImportECCKeyPair_default_instance_._instance.get_mutable()->penvelopedkeyblob_ = const_cast< ::com::westone::skf::SKF_ENVELOPEDKEYBLOB*>(
      ::com::westone::skf::SKF_ENVELOPEDKEYBLOB::internal_default_instance());
}
class Req_SKF_ImportECCKeyPair::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hcontainer(const Req_SKF_ImportECCKeyPair* msg);
  static const ::com::westone::skf::SKF_ENVELOPEDKEYBLOB& penvelopedkeyblob(const Req_SKF_ImportECCKeyPair* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ImportECCKeyPair::HasBitSetters::hcontainer(const Req_SKF_ImportECCKeyPair* msg) {
  return *msg->hcontainer_;
}
const ::com::westone::skf::SKF_ENVELOPEDKEYBLOB&
Req_SKF_ImportECCKeyPair::HasBitSetters::penvelopedkeyblob(const Req_SKF_ImportECCKeyPair* msg) {
  return *msg->penvelopedkeyblob_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_ImportECCKeyPair::kHContainerFieldNumber;
const int Req_SKF_ImportECCKeyPair::kPEnvelopedKeyBlobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_ImportECCKeyPair::Req_SKF_ImportECCKeyPair()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_ImportECCKeyPair)
}
Req_SKF_ImportECCKeyPair::Req_SKF_ImportECCKeyPair(const Req_SKF_ImportECCKeyPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hcontainer()) {
    hcontainer_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hcontainer_);
  } else {
    hcontainer_ = nullptr;
  }
  if (from.has_penvelopedkeyblob()) {
    penvelopedkeyblob_ = new ::com::westone::skf::SKF_ENVELOPEDKEYBLOB(*from.penvelopedkeyblob_);
  } else {
    penvelopedkeyblob_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_ImportECCKeyPair)
}

void Req_SKF_ImportECCKeyPair::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_ImportECCKeyPair_skf_2eproto.base);
  ::memset(&hcontainer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&penvelopedkeyblob_) -
      reinterpret_cast<char*>(&hcontainer_)) + sizeof(penvelopedkeyblob_));
}

Req_SKF_ImportECCKeyPair::~Req_SKF_ImportECCKeyPair() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_ImportECCKeyPair)
  SharedDtor();
}

void Req_SKF_ImportECCKeyPair::SharedDtor() {
  if (this != internal_default_instance()) delete hcontainer_;
  if (this != internal_default_instance()) delete penvelopedkeyblob_;
}

void Req_SKF_ImportECCKeyPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_ImportECCKeyPair& Req_SKF_ImportECCKeyPair::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_ImportECCKeyPair_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_ImportECCKeyPair::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_ImportECCKeyPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && penvelopedkeyblob_ != nullptr) {
    delete penvelopedkeyblob_;
  }
  penvelopedkeyblob_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_ImportECCKeyPair::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_ImportECCKeyPair*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hcontainer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_ENVELOPEDKEYBLOB pEnvelopedKeyBlob = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ENVELOPEDKEYBLOB::_InternalParse;
        object = msg->mutable_penvelopedkeyblob();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_ImportECCKeyPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_ImportECCKeyPair)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hcontainer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_ENVELOPEDKEYBLOB pEnvelopedKeyBlob = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_penvelopedkeyblob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_ImportECCKeyPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_ImportECCKeyPair)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_ImportECCKeyPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_ImportECCKeyPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hcontainer(this), output);
  }

  // .com.westone.skf.SKF_ENVELOPEDKEYBLOB pEnvelopedKeyBlob = 2;
  if (this->has_penvelopedkeyblob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::penvelopedkeyblob(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_ImportECCKeyPair)
}

::google::protobuf::uint8* Req_SKF_ImportECCKeyPair::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_ImportECCKeyPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hcontainer(this), target);
  }

  // .com.westone.skf.SKF_ENVELOPEDKEYBLOB pEnvelopedKeyBlob = 2;
  if (this->has_penvelopedkeyblob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::penvelopedkeyblob(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_ImportECCKeyPair)
  return target;
}

size_t Req_SKF_ImportECCKeyPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_ImportECCKeyPair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hcontainer_);
  }

  // .com.westone.skf.SKF_ENVELOPEDKEYBLOB pEnvelopedKeyBlob = 2;
  if (this->has_penvelopedkeyblob()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *penvelopedkeyblob_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_ImportECCKeyPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_ImportECCKeyPair)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_ImportECCKeyPair* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_ImportECCKeyPair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_ImportECCKeyPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_ImportECCKeyPair)
    MergeFrom(*source);
  }
}

void Req_SKF_ImportECCKeyPair::MergeFrom(const Req_SKF_ImportECCKeyPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_ImportECCKeyPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hcontainer()) {
    mutable_hcontainer()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hcontainer());
  }
  if (from.has_penvelopedkeyblob()) {
    mutable_penvelopedkeyblob()->::com::westone::skf::SKF_ENVELOPEDKEYBLOB::MergeFrom(from.penvelopedkeyblob());
  }
}

void Req_SKF_ImportECCKeyPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_ImportECCKeyPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_ImportECCKeyPair::CopyFrom(const Req_SKF_ImportECCKeyPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_ImportECCKeyPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_ImportECCKeyPair::IsInitialized() const {
  return true;
}

void Req_SKF_ImportECCKeyPair::Swap(Req_SKF_ImportECCKeyPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_ImportECCKeyPair::InternalSwap(Req_SKF_ImportECCKeyPair* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(hcontainer_, other->hcontainer_);
  swap(penvelopedkeyblob_, other->penvelopedkeyblob_);
}

::google::protobuf::Metadata Req_SKF_ImportECCKeyPair::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_ImportECCKeyPair::InitAsDefaultInstance() {
}
class Rsp_SKF_ImportECCKeyPair::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_ImportECCKeyPair::Rsp_SKF_ImportECCKeyPair()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_ImportECCKeyPair)
}
Rsp_SKF_ImportECCKeyPair::Rsp_SKF_ImportECCKeyPair(const Rsp_SKF_ImportECCKeyPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_ImportECCKeyPair)
}

void Rsp_SKF_ImportECCKeyPair::SharedCtor() {
}

Rsp_SKF_ImportECCKeyPair::~Rsp_SKF_ImportECCKeyPair() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_ImportECCKeyPair)
  SharedDtor();
}

void Rsp_SKF_ImportECCKeyPair::SharedDtor() {
}

void Rsp_SKF_ImportECCKeyPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_ImportECCKeyPair& Rsp_SKF_ImportECCKeyPair::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_ImportECCKeyPair_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_ImportECCKeyPair::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_ImportECCKeyPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_ImportECCKeyPair::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_ImportECCKeyPair*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_ImportECCKeyPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_ImportECCKeyPair)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_ImportECCKeyPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_ImportECCKeyPair)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_ImportECCKeyPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_ImportECCKeyPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_ImportECCKeyPair)
}

::google::protobuf::uint8* Rsp_SKF_ImportECCKeyPair::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_ImportECCKeyPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_ImportECCKeyPair)
  return target;
}

size_t Rsp_SKF_ImportECCKeyPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_ImportECCKeyPair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_ImportECCKeyPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_ImportECCKeyPair)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_ImportECCKeyPair* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_ImportECCKeyPair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_ImportECCKeyPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_ImportECCKeyPair)
    MergeFrom(*source);
  }
}

void Rsp_SKF_ImportECCKeyPair::MergeFrom(const Rsp_SKF_ImportECCKeyPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_ImportECCKeyPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rsp_SKF_ImportECCKeyPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_ImportECCKeyPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_ImportECCKeyPair::CopyFrom(const Rsp_SKF_ImportECCKeyPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_ImportECCKeyPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_ImportECCKeyPair::IsInitialized() const {
  return true;
}

void Rsp_SKF_ImportECCKeyPair::Swap(Rsp_SKF_ImportECCKeyPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_ImportECCKeyPair::InternalSwap(Rsp_SKF_ImportECCKeyPair* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rsp_SKF_ImportECCKeyPair::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_ECCSignData::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_ECCSignData_default_instance_._instance.get_mutable()->hcontainer_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ECCSignData_default_instance_._instance.get_mutable()->uldatalen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ECCSignData_default_instance_._instance.get_mutable()->psignature_ = const_cast< ::com::westone::skf::SKF_ECCSIGNATUREBLOB*>(
      ::com::westone::skf::SKF_ECCSIGNATUREBLOB::internal_default_instance());
}
class Req_SKF_ECCSignData::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hcontainer(const Req_SKF_ECCSignData* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& uldatalen(const Req_SKF_ECCSignData* msg);
  static const ::com::westone::skf::SKF_ECCSIGNATUREBLOB& psignature(const Req_SKF_ECCSignData* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ECCSignData::HasBitSetters::hcontainer(const Req_SKF_ECCSignData* msg) {
  return *msg->hcontainer_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ECCSignData::HasBitSetters::uldatalen(const Req_SKF_ECCSignData* msg) {
  return *msg->uldatalen_;
}
const ::com::westone::skf::SKF_ECCSIGNATUREBLOB&
Req_SKF_ECCSignData::HasBitSetters::psignature(const Req_SKF_ECCSignData* msg) {
  return *msg->psignature_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_ECCSignData::kHContainerFieldNumber;
const int Req_SKF_ECCSignData::kPbDataFieldNumber;
const int Req_SKF_ECCSignData::kUlDataLenFieldNumber;
const int Req_SKF_ECCSignData::kPSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_ECCSignData::Req_SKF_ECCSignData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_ECCSignData)
}
Req_SKF_ECCSignData::Req_SKF_ECCSignData(const Req_SKF_ECCSignData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbdata().size() > 0) {
    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.has_hcontainer()) {
    hcontainer_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hcontainer_);
  } else {
    hcontainer_ = nullptr;
  }
  if (from.has_uldatalen()) {
    uldatalen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.uldatalen_);
  } else {
    uldatalen_ = nullptr;
  }
  if (from.has_psignature()) {
    psignature_ = new ::com::westone::skf::SKF_ECCSIGNATUREBLOB(*from.psignature_);
  } else {
    psignature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_ECCSignData)
}

void Req_SKF_ECCSignData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_ECCSignData_skf_2eproto.base);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hcontainer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&psignature_) -
      reinterpret_cast<char*>(&hcontainer_)) + sizeof(psignature_));
}

Req_SKF_ECCSignData::~Req_SKF_ECCSignData() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_ECCSignData)
  SharedDtor();
}

void Req_SKF_ECCSignData::SharedDtor() {
  pbdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hcontainer_;
  if (this != internal_default_instance()) delete uldatalen_;
  if (this != internal_default_instance()) delete psignature_;
}

void Req_SKF_ECCSignData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_ECCSignData& Req_SKF_ECCSignData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_ECCSignData_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_ECCSignData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_ECCSignData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && uldatalen_ != nullptr) {
    delete uldatalen_;
  }
  uldatalen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && psignature_ != nullptr) {
    delete psignature_;
  }
  psignature_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_ECCSignData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_ECCSignData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hcontainer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbData = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_uldatalen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ECCSIGNATUREBLOB::_InternalParse;
        object = msg->mutable_psignature();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_ECCSignData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_ECCSignData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hcontainer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uldatalen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_psignature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_ECCSignData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_ECCSignData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_ECCSignData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_ECCSignData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hcontainer(this), output);
  }

  // bytes pbData = 2;
  if (this->pbdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pbdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  if (this->has_uldatalen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::uldatalen(this), output);
  }

  // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 4;
  if (this->has_psignature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::psignature(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_ECCSignData)
}

::google::protobuf::uint8* Req_SKF_ECCSignData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_ECCSignData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hcontainer(this), target);
  }

  // bytes pbData = 2;
  if (this->pbdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pbdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  if (this->has_uldatalen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::uldatalen(this), target);
  }

  // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 4;
  if (this->has_psignature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::psignature(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_ECCSignData)
  return target;
}

size_t Req_SKF_ECCSignData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_ECCSignData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbData = 2;
  if (this->pbdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbdata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hcontainer_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  if (this->has_uldatalen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *uldatalen_);
  }

  // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 4;
  if (this->has_psignature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *psignature_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_ECCSignData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_ECCSignData)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_ECCSignData* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_ECCSignData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_ECCSignData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_ECCSignData)
    MergeFrom(*source);
  }
}

void Req_SKF_ECCSignData::MergeFrom(const Req_SKF_ECCSignData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_ECCSignData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbdata().size() > 0) {

    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.has_hcontainer()) {
    mutable_hcontainer()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hcontainer());
  }
  if (from.has_uldatalen()) {
    mutable_uldatalen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.uldatalen());
  }
  if (from.has_psignature()) {
    mutable_psignature()->::com::westone::skf::SKF_ECCSIGNATUREBLOB::MergeFrom(from.psignature());
  }
}

void Req_SKF_ECCSignData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_ECCSignData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_ECCSignData::CopyFrom(const Req_SKF_ECCSignData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_ECCSignData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_ECCSignData::IsInitialized() const {
  return true;
}

void Req_SKF_ECCSignData::Swap(Req_SKF_ECCSignData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_ECCSignData::InternalSwap(Req_SKF_ECCSignData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbdata_.Swap(&other->pbdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hcontainer_, other->hcontainer_);
  swap(uldatalen_, other->uldatalen_);
  swap(psignature_, other->psignature_);
}

::google::protobuf::Metadata Req_SKF_ECCSignData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_ECCSignData::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_ECCSignData_default_instance_._instance.get_mutable()->psignature_ = const_cast< ::com::westone::skf::SKF_ECCSIGNATUREBLOB*>(
      ::com::westone::skf::SKF_ECCSIGNATUREBLOB::internal_default_instance());
}
class Rsp_SKF_ECCSignData::HasBitSetters {
 public:
  static const ::com::westone::skf::SKF_ECCSIGNATUREBLOB& psignature(const Rsp_SKF_ECCSignData* msg);
};

const ::com::westone::skf::SKF_ECCSIGNATUREBLOB&
Rsp_SKF_ECCSignData::HasBitSetters::psignature(const Rsp_SKF_ECCSignData* msg) {
  return *msg->psignature_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_ECCSignData::kPSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_ECCSignData::Rsp_SKF_ECCSignData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_ECCSignData)
}
Rsp_SKF_ECCSignData::Rsp_SKF_ECCSignData(const Rsp_SKF_ECCSignData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_psignature()) {
    psignature_ = new ::com::westone::skf::SKF_ECCSIGNATUREBLOB(*from.psignature_);
  } else {
    psignature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_ECCSignData)
}

void Rsp_SKF_ECCSignData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_ECCSignData_skf_2eproto.base);
  psignature_ = nullptr;
}

Rsp_SKF_ECCSignData::~Rsp_SKF_ECCSignData() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_ECCSignData)
  SharedDtor();
}

void Rsp_SKF_ECCSignData::SharedDtor() {
  if (this != internal_default_instance()) delete psignature_;
}

void Rsp_SKF_ECCSignData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_ECCSignData& Rsp_SKF_ECCSignData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_ECCSignData_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_ECCSignData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_ECCSignData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && psignature_ != nullptr) {
    delete psignature_;
  }
  psignature_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_ECCSignData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_ECCSignData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ECCSIGNATUREBLOB::_InternalParse;
        object = msg->mutable_psignature();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_ECCSignData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_ECCSignData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_psignature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_ECCSignData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_ECCSignData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_ECCSignData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_ECCSignData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 1;
  if (this->has_psignature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::psignature(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_ECCSignData)
}

::google::protobuf::uint8* Rsp_SKF_ECCSignData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_ECCSignData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 1;
  if (this->has_psignature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::psignature(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_ECCSignData)
  return target;
}

size_t Rsp_SKF_ECCSignData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_ECCSignData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 1;
  if (this->has_psignature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *psignature_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_ECCSignData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_ECCSignData)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_ECCSignData* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_ECCSignData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_ECCSignData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_ECCSignData)
    MergeFrom(*source);
  }
}

void Rsp_SKF_ECCSignData::MergeFrom(const Rsp_SKF_ECCSignData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_ECCSignData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_psignature()) {
    mutable_psignature()->::com::westone::skf::SKF_ECCSIGNATUREBLOB::MergeFrom(from.psignature());
  }
}

void Rsp_SKF_ECCSignData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_ECCSignData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_ECCSignData::CopyFrom(const Rsp_SKF_ECCSignData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_ECCSignData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_ECCSignData::IsInitialized() const {
  return true;
}

void Rsp_SKF_ECCSignData::Swap(Rsp_SKF_ECCSignData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_ECCSignData::InternalSwap(Rsp_SKF_ECCSignData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(psignature_, other->psignature_);
}

::google::protobuf::Metadata Rsp_SKF_ECCSignData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_ECCVerify::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_ECCVerify_default_instance_._instance.get_mutable()->hdev_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ECCVerify_default_instance_._instance.get_mutable()->peccpubkeyblob_ = const_cast< ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ECCVerify_default_instance_._instance.get_mutable()->uldatalen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ECCVerify_default_instance_._instance.get_mutable()->psignature_ = const_cast< ::com::westone::skf::SKF_ECCSIGNATUREBLOB*>(
      ::com::westone::skf::SKF_ECCSIGNATUREBLOB::internal_default_instance());
}
class Req_SKF_ECCVerify::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hdev(const Req_SKF_ECCVerify* msg);
  static const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& peccpubkeyblob(const Req_SKF_ECCVerify* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& uldatalen(const Req_SKF_ECCVerify* msg);
  static const ::com::westone::skf::SKF_ECCSIGNATUREBLOB& psignature(const Req_SKF_ECCVerify* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ECCVerify::HasBitSetters::hdev(const Req_SKF_ECCVerify* msg) {
  return *msg->hdev_;
}
const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB&
Req_SKF_ECCVerify::HasBitSetters::peccpubkeyblob(const Req_SKF_ECCVerify* msg) {
  return *msg->peccpubkeyblob_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ECCVerify::HasBitSetters::uldatalen(const Req_SKF_ECCVerify* msg) {
  return *msg->uldatalen_;
}
const ::com::westone::skf::SKF_ECCSIGNATUREBLOB&
Req_SKF_ECCVerify::HasBitSetters::psignature(const Req_SKF_ECCVerify* msg) {
  return *msg->psignature_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_ECCVerify::kHDevFieldNumber;
const int Req_SKF_ECCVerify::kPECCPubKeyBlobFieldNumber;
const int Req_SKF_ECCVerify::kPbDataFieldNumber;
const int Req_SKF_ECCVerify::kUlDataLenFieldNumber;
const int Req_SKF_ECCVerify::kPSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_ECCVerify::Req_SKF_ECCVerify()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_ECCVerify)
}
Req_SKF_ECCVerify::Req_SKF_ECCVerify(const Req_SKF_ECCVerify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbdata().size() > 0) {
    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.has_hdev()) {
    hdev_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hdev_);
  } else {
    hdev_ = nullptr;
  }
  if (from.has_peccpubkeyblob()) {
    peccpubkeyblob_ = new ::com::westone::skf::SKF_ECCPUBLICKEYBLOB(*from.peccpubkeyblob_);
  } else {
    peccpubkeyblob_ = nullptr;
  }
  if (from.has_uldatalen()) {
    uldatalen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.uldatalen_);
  } else {
    uldatalen_ = nullptr;
  }
  if (from.has_psignature()) {
    psignature_ = new ::com::westone::skf::SKF_ECCSIGNATUREBLOB(*from.psignature_);
  } else {
    psignature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_ECCVerify)
}

void Req_SKF_ECCVerify::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_ECCVerify_skf_2eproto.base);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hdev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&psignature_) -
      reinterpret_cast<char*>(&hdev_)) + sizeof(psignature_));
}

Req_SKF_ECCVerify::~Req_SKF_ECCVerify() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_ECCVerify)
  SharedDtor();
}

void Req_SKF_ECCVerify::SharedDtor() {
  pbdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hdev_;
  if (this != internal_default_instance()) delete peccpubkeyblob_;
  if (this != internal_default_instance()) delete uldatalen_;
  if (this != internal_default_instance()) delete psignature_;
}

void Req_SKF_ECCVerify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_ECCVerify& Req_SKF_ECCVerify::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_ECCVerify_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_ECCVerify::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_ECCVerify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && peccpubkeyblob_ != nullptr) {
    delete peccpubkeyblob_;
  }
  peccpubkeyblob_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && uldatalen_ != nullptr) {
    delete uldatalen_;
  }
  uldatalen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && psignature_ != nullptr) {
    delete psignature_;
  }
  psignature_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_ECCVerify::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_ECCVerify*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hdev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pECCPubKeyBlob = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::_InternalParse;
        object = msg->mutable_peccpubkeyblob();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbData = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_uldatalen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ECCSIGNATUREBLOB::_InternalParse;
        object = msg->mutable_psignature();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_ECCVerify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_ECCVerify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hdev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pECCPubKeyBlob = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peccpubkeyblob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbData = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uldatalen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_psignature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_ECCVerify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_ECCVerify)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_ECCVerify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_ECCVerify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hdev(this), output);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pECCPubKeyBlob = 2;
  if (this->has_peccpubkeyblob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::peccpubkeyblob(this), output);
  }

  // bytes pbData = 3;
  if (this->pbdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->pbdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 4;
  if (this->has_uldatalen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::uldatalen(this), output);
  }

  // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 5;
  if (this->has_psignature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::psignature(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_ECCVerify)
}

::google::protobuf::uint8* Req_SKF_ECCVerify::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_ECCVerify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hdev(this), target);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pECCPubKeyBlob = 2;
  if (this->has_peccpubkeyblob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::peccpubkeyblob(this), target);
  }

  // bytes pbData = 3;
  if (this->pbdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->pbdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 4;
  if (this->has_uldatalen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::uldatalen(this), target);
  }

  // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 5;
  if (this->has_psignature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::psignature(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_ECCVerify)
  return target;
}

size_t Req_SKF_ECCVerify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_ECCVerify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbData = 3;
  if (this->pbdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbdata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hdev_);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pECCPubKeyBlob = 2;
  if (this->has_peccpubkeyblob()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *peccpubkeyblob_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 4;
  if (this->has_uldatalen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *uldatalen_);
  }

  // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 5;
  if (this->has_psignature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *psignature_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_ECCVerify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_ECCVerify)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_ECCVerify* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_ECCVerify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_ECCVerify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_ECCVerify)
    MergeFrom(*source);
  }
}

void Req_SKF_ECCVerify::MergeFrom(const Req_SKF_ECCVerify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_ECCVerify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbdata().size() > 0) {

    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.has_hdev()) {
    mutable_hdev()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hdev());
  }
  if (from.has_peccpubkeyblob()) {
    mutable_peccpubkeyblob()->::com::westone::skf::SKF_ECCPUBLICKEYBLOB::MergeFrom(from.peccpubkeyblob());
  }
  if (from.has_uldatalen()) {
    mutable_uldatalen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.uldatalen());
  }
  if (from.has_psignature()) {
    mutable_psignature()->::com::westone::skf::SKF_ECCSIGNATUREBLOB::MergeFrom(from.psignature());
  }
}

void Req_SKF_ECCVerify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_ECCVerify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_ECCVerify::CopyFrom(const Req_SKF_ECCVerify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_ECCVerify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_ECCVerify::IsInitialized() const {
  return true;
}

void Req_SKF_ECCVerify::Swap(Req_SKF_ECCVerify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_ECCVerify::InternalSwap(Req_SKF_ECCVerify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbdata_.Swap(&other->pbdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hdev_, other->hdev_);
  swap(peccpubkeyblob_, other->peccpubkeyblob_);
  swap(uldatalen_, other->uldatalen_);
  swap(psignature_, other->psignature_);
}

::google::protobuf::Metadata Req_SKF_ECCVerify::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_ECCVerify::InitAsDefaultInstance() {
}
class Rsp_SKF_ECCVerify::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_ECCVerify::Rsp_SKF_ECCVerify()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_ECCVerify)
}
Rsp_SKF_ECCVerify::Rsp_SKF_ECCVerify(const Rsp_SKF_ECCVerify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_ECCVerify)
}

void Rsp_SKF_ECCVerify::SharedCtor() {
}

Rsp_SKF_ECCVerify::~Rsp_SKF_ECCVerify() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_ECCVerify)
  SharedDtor();
}

void Rsp_SKF_ECCVerify::SharedDtor() {
}

void Rsp_SKF_ECCVerify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_ECCVerify& Rsp_SKF_ECCVerify::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_ECCVerify_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_ECCVerify::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_ECCVerify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_ECCVerify::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_ECCVerify*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_ECCVerify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_ECCVerify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_ECCVerify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_ECCVerify)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_ECCVerify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_ECCVerify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_ECCVerify)
}

::google::protobuf::uint8* Rsp_SKF_ECCVerify::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_ECCVerify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_ECCVerify)
  return target;
}

size_t Rsp_SKF_ECCVerify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_ECCVerify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_ECCVerify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_ECCVerify)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_ECCVerify* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_ECCVerify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_ECCVerify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_ECCVerify)
    MergeFrom(*source);
  }
}

void Rsp_SKF_ECCVerify::MergeFrom(const Rsp_SKF_ECCVerify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_ECCVerify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rsp_SKF_ECCVerify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_ECCVerify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_ECCVerify::CopyFrom(const Rsp_SKF_ECCVerify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_ECCVerify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_ECCVerify::IsInitialized() const {
  return true;
}

void Rsp_SKF_ECCVerify::Swap(Rsp_SKF_ECCVerify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_ECCVerify::InternalSwap(Rsp_SKF_ECCVerify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rsp_SKF_ECCVerify::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_ECCExportSessionKey::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_ECCExportSessionKey_default_instance_._instance.get_mutable()->hcontainer_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ECCExportSessionKey_default_instance_._instance.get_mutable()->ulalgid_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ECCExportSessionKey_default_instance_._instance.get_mutable()->ppubkey_ = const_cast< ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ECCExportSessionKey_default_instance_._instance.get_mutable()->pdata_ = const_cast< ::com::westone::skf::SKF_ECCCIPHERBLOB*>(
      ::com::westone::skf::SKF_ECCCIPHERBLOB::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ECCExportSessionKey_default_instance_._instance.get_mutable()->phsessionkey_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_ECCExportSessionKey::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hcontainer(const Req_SKF_ECCExportSessionKey* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulalgid(const Req_SKF_ECCExportSessionKey* msg);
  static const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& ppubkey(const Req_SKF_ECCExportSessionKey* msg);
  static const ::com::westone::skf::SKF_ECCCIPHERBLOB& pdata(const Req_SKF_ECCExportSessionKey* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& phsessionkey(const Req_SKF_ECCExportSessionKey* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ECCExportSessionKey::HasBitSetters::hcontainer(const Req_SKF_ECCExportSessionKey* msg) {
  return *msg->hcontainer_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ECCExportSessionKey::HasBitSetters::ulalgid(const Req_SKF_ECCExportSessionKey* msg) {
  return *msg->ulalgid_;
}
const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB&
Req_SKF_ECCExportSessionKey::HasBitSetters::ppubkey(const Req_SKF_ECCExportSessionKey* msg) {
  return *msg->ppubkey_;
}
const ::com::westone::skf::SKF_ECCCIPHERBLOB&
Req_SKF_ECCExportSessionKey::HasBitSetters::pdata(const Req_SKF_ECCExportSessionKey* msg) {
  return *msg->pdata_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ECCExportSessionKey::HasBitSetters::phsessionkey(const Req_SKF_ECCExportSessionKey* msg) {
  return *msg->phsessionkey_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_ECCExportSessionKey::kHContainerFieldNumber;
const int Req_SKF_ECCExportSessionKey::kUlAlgIDFieldNumber;
const int Req_SKF_ECCExportSessionKey::kPPubKeyFieldNumber;
const int Req_SKF_ECCExportSessionKey::kPDataFieldNumber;
const int Req_SKF_ECCExportSessionKey::kPhSessionKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_ECCExportSessionKey::Req_SKF_ECCExportSessionKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_ECCExportSessionKey)
}
Req_SKF_ECCExportSessionKey::Req_SKF_ECCExportSessionKey(const Req_SKF_ECCExportSessionKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hcontainer()) {
    hcontainer_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hcontainer_);
  } else {
    hcontainer_ = nullptr;
  }
  if (from.has_ulalgid()) {
    ulalgid_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulalgid_);
  } else {
    ulalgid_ = nullptr;
  }
  if (from.has_ppubkey()) {
    ppubkey_ = new ::com::westone::skf::SKF_ECCPUBLICKEYBLOB(*from.ppubkey_);
  } else {
    ppubkey_ = nullptr;
  }
  if (from.has_pdata()) {
    pdata_ = new ::com::westone::skf::SKF_ECCCIPHERBLOB(*from.pdata_);
  } else {
    pdata_ = nullptr;
  }
  if (from.has_phsessionkey()) {
    phsessionkey_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.phsessionkey_);
  } else {
    phsessionkey_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_ECCExportSessionKey)
}

void Req_SKF_ECCExportSessionKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_ECCExportSessionKey_skf_2eproto.base);
  ::memset(&hcontainer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phsessionkey_) -
      reinterpret_cast<char*>(&hcontainer_)) + sizeof(phsessionkey_));
}

Req_SKF_ECCExportSessionKey::~Req_SKF_ECCExportSessionKey() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_ECCExportSessionKey)
  SharedDtor();
}

void Req_SKF_ECCExportSessionKey::SharedDtor() {
  if (this != internal_default_instance()) delete hcontainer_;
  if (this != internal_default_instance()) delete ulalgid_;
  if (this != internal_default_instance()) delete ppubkey_;
  if (this != internal_default_instance()) delete pdata_;
  if (this != internal_default_instance()) delete phsessionkey_;
}

void Req_SKF_ECCExportSessionKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_ECCExportSessionKey& Req_SKF_ECCExportSessionKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_ECCExportSessionKey_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_ECCExportSessionKey::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_ECCExportSessionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulalgid_ != nullptr) {
    delete ulalgid_;
  }
  ulalgid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ppubkey_ != nullptr) {
    delete ppubkey_;
  }
  ppubkey_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pdata_ != nullptr) {
    delete pdata_;
  }
  pdata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && phsessionkey_ != nullptr) {
    delete phsessionkey_;
  }
  phsessionkey_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_ECCExportSessionKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_ECCExportSessionKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hcontainer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulalgid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pPubKey = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::_InternalParse;
        object = msg->mutable_ppubkey();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_ECCCIPHERBLOB pData = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ECCCIPHERBLOB::_InternalParse;
        object = msg->mutable_pdata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 phSessionKey = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_phsessionkey();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_ECCExportSessionKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_ECCExportSessionKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hcontainer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulalgid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pPubKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ppubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_ECCCIPHERBLOB pData = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 phSessionKey = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phsessionkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_ECCExportSessionKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_ECCExportSessionKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_ECCExportSessionKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_ECCExportSessionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hcontainer(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
  if (this->has_ulalgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::ulalgid(this), output);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pPubKey = 3;
  if (this->has_ppubkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::ppubkey(this), output);
  }

  // .com.westone.skf.SKF_ECCCIPHERBLOB pData = 4;
  if (this->has_pdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::pdata(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phSessionKey = 5;
  if (this->has_phsessionkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::phsessionkey(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_ECCExportSessionKey)
}

::google::protobuf::uint8* Req_SKF_ECCExportSessionKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_ECCExportSessionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hcontainer(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
  if (this->has_ulalgid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::ulalgid(this), target);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pPubKey = 3;
  if (this->has_ppubkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::ppubkey(this), target);
  }

  // .com.westone.skf.SKF_ECCCIPHERBLOB pData = 4;
  if (this->has_pdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::pdata(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phSessionKey = 5;
  if (this->has_phsessionkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::phsessionkey(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_ECCExportSessionKey)
  return target;
}

size_t Req_SKF_ECCExportSessionKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_ECCExportSessionKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hcontainer_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
  if (this->has_ulalgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulalgid_);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pPubKey = 3;
  if (this->has_ppubkey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ppubkey_);
  }

  // .com.westone.skf.SKF_ECCCIPHERBLOB pData = 4;
  if (this->has_pdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pdata_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phSessionKey = 5;
  if (this->has_phsessionkey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *phsessionkey_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_ECCExportSessionKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_ECCExportSessionKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_ECCExportSessionKey* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_ECCExportSessionKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_ECCExportSessionKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_ECCExportSessionKey)
    MergeFrom(*source);
  }
}

void Req_SKF_ECCExportSessionKey::MergeFrom(const Req_SKF_ECCExportSessionKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_ECCExportSessionKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hcontainer()) {
    mutable_hcontainer()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hcontainer());
  }
  if (from.has_ulalgid()) {
    mutable_ulalgid()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulalgid());
  }
  if (from.has_ppubkey()) {
    mutable_ppubkey()->::com::westone::skf::SKF_ECCPUBLICKEYBLOB::MergeFrom(from.ppubkey());
  }
  if (from.has_pdata()) {
    mutable_pdata()->::com::westone::skf::SKF_ECCCIPHERBLOB::MergeFrom(from.pdata());
  }
  if (from.has_phsessionkey()) {
    mutable_phsessionkey()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.phsessionkey());
  }
}

void Req_SKF_ECCExportSessionKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_ECCExportSessionKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_ECCExportSessionKey::CopyFrom(const Req_SKF_ECCExportSessionKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_ECCExportSessionKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_ECCExportSessionKey::IsInitialized() const {
  return true;
}

void Req_SKF_ECCExportSessionKey::Swap(Req_SKF_ECCExportSessionKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_ECCExportSessionKey::InternalSwap(Req_SKF_ECCExportSessionKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(hcontainer_, other->hcontainer_);
  swap(ulalgid_, other->ulalgid_);
  swap(ppubkey_, other->ppubkey_);
  swap(pdata_, other->pdata_);
  swap(phsessionkey_, other->phsessionkey_);
}

::google::protobuf::Metadata Req_SKF_ECCExportSessionKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_ECCExportSessionKey::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_ECCExportSessionKey_default_instance_._instance.get_mutable()->pdata_ = const_cast< ::com::westone::skf::SKF_ECCCIPHERBLOB*>(
      ::com::westone::skf::SKF_ECCCIPHERBLOB::internal_default_instance());
  ::com::westone::skf::_Rsp_SKF_ECCExportSessionKey_default_instance_._instance.get_mutable()->phsessionkey_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_ECCExportSessionKey::HasBitSetters {
 public:
  static const ::com::westone::skf::SKF_ECCCIPHERBLOB& pdata(const Rsp_SKF_ECCExportSessionKey* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& phsessionkey(const Rsp_SKF_ECCExportSessionKey* msg);
};

const ::com::westone::skf::SKF_ECCCIPHERBLOB&
Rsp_SKF_ECCExportSessionKey::HasBitSetters::pdata(const Rsp_SKF_ECCExportSessionKey* msg) {
  return *msg->pdata_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_ECCExportSessionKey::HasBitSetters::phsessionkey(const Rsp_SKF_ECCExportSessionKey* msg) {
  return *msg->phsessionkey_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_ECCExportSessionKey::kPDataFieldNumber;
const int Rsp_SKF_ECCExportSessionKey::kPhSessionKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_ECCExportSessionKey::Rsp_SKF_ECCExportSessionKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_ECCExportSessionKey)
}
Rsp_SKF_ECCExportSessionKey::Rsp_SKF_ECCExportSessionKey(const Rsp_SKF_ECCExportSessionKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pdata()) {
    pdata_ = new ::com::westone::skf::SKF_ECCCIPHERBLOB(*from.pdata_);
  } else {
    pdata_ = nullptr;
  }
  if (from.has_phsessionkey()) {
    phsessionkey_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.phsessionkey_);
  } else {
    phsessionkey_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_ECCExportSessionKey)
}

void Rsp_SKF_ECCExportSessionKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_ECCExportSessionKey_skf_2eproto.base);
  ::memset(&pdata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phsessionkey_) -
      reinterpret_cast<char*>(&pdata_)) + sizeof(phsessionkey_));
}

Rsp_SKF_ECCExportSessionKey::~Rsp_SKF_ECCExportSessionKey() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_ECCExportSessionKey)
  SharedDtor();
}

void Rsp_SKF_ECCExportSessionKey::SharedDtor() {
  if (this != internal_default_instance()) delete pdata_;
  if (this != internal_default_instance()) delete phsessionkey_;
}

void Rsp_SKF_ECCExportSessionKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_ECCExportSessionKey& Rsp_SKF_ECCExportSessionKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_ECCExportSessionKey_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_ECCExportSessionKey::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_ECCExportSessionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pdata_ != nullptr) {
    delete pdata_;
  }
  pdata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && phsessionkey_ != nullptr) {
    delete phsessionkey_;
  }
  phsessionkey_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_ECCExportSessionKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_ECCExportSessionKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.SKF_ECCCIPHERBLOB pData = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ECCCIPHERBLOB::_InternalParse;
        object = msg->mutable_pdata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 phSessionKey = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_phsessionkey();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_ECCExportSessionKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_ECCExportSessionKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.SKF_ECCCIPHERBLOB pData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 phSessionKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phsessionkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_ECCExportSessionKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_ECCExportSessionKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_ECCExportSessionKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_ECCExportSessionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.SKF_ECCCIPHERBLOB pData = 1;
  if (this->has_pdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::pdata(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phSessionKey = 2;
  if (this->has_phsessionkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::phsessionkey(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_ECCExportSessionKey)
}

::google::protobuf::uint8* Rsp_SKF_ECCExportSessionKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_ECCExportSessionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.SKF_ECCCIPHERBLOB pData = 1;
  if (this->has_pdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::pdata(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phSessionKey = 2;
  if (this->has_phsessionkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::phsessionkey(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_ECCExportSessionKey)
  return target;
}

size_t Rsp_SKF_ECCExportSessionKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_ECCExportSessionKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.SKF_ECCCIPHERBLOB pData = 1;
  if (this->has_pdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pdata_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phSessionKey = 2;
  if (this->has_phsessionkey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *phsessionkey_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_ECCExportSessionKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_ECCExportSessionKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_ECCExportSessionKey* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_ECCExportSessionKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_ECCExportSessionKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_ECCExportSessionKey)
    MergeFrom(*source);
  }
}

void Rsp_SKF_ECCExportSessionKey::MergeFrom(const Rsp_SKF_ECCExportSessionKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_ECCExportSessionKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pdata()) {
    mutable_pdata()->::com::westone::skf::SKF_ECCCIPHERBLOB::MergeFrom(from.pdata());
  }
  if (from.has_phsessionkey()) {
    mutable_phsessionkey()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.phsessionkey());
  }
}

void Rsp_SKF_ECCExportSessionKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_ECCExportSessionKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_ECCExportSessionKey::CopyFrom(const Rsp_SKF_ECCExportSessionKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_ECCExportSessionKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_ECCExportSessionKey::IsInitialized() const {
  return true;
}

void Rsp_SKF_ECCExportSessionKey::Swap(Rsp_SKF_ECCExportSessionKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_ECCExportSessionKey::InternalSwap(Rsp_SKF_ECCExportSessionKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pdata_, other->pdata_);
  swap(phsessionkey_, other->phsessionkey_);
}

::google::protobuf::Metadata Rsp_SKF_ECCExportSessionKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_ExtECCEncrypt::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_ExtECCEncrypt_default_instance_._instance.get_mutable()->hdev_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ExtECCEncrypt_default_instance_._instance.get_mutable()->peccpubkeyblob_ = const_cast< ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ExtECCEncrypt_default_instance_._instance.get_mutable()->ulplaintextlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ExtECCEncrypt_default_instance_._instance.get_mutable()->pbciphertext_ = const_cast< ::com::westone::skf::SKF_ECCCIPHERBLOB*>(
      ::com::westone::skf::SKF_ECCCIPHERBLOB::internal_default_instance());
}
class Req_SKF_ExtECCEncrypt::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hdev(const Req_SKF_ExtECCEncrypt* msg);
  static const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& peccpubkeyblob(const Req_SKF_ExtECCEncrypt* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulplaintextlen(const Req_SKF_ExtECCEncrypt* msg);
  static const ::com::westone::skf::SKF_ECCCIPHERBLOB& pbciphertext(const Req_SKF_ExtECCEncrypt* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ExtECCEncrypt::HasBitSetters::hdev(const Req_SKF_ExtECCEncrypt* msg) {
  return *msg->hdev_;
}
const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB&
Req_SKF_ExtECCEncrypt::HasBitSetters::peccpubkeyblob(const Req_SKF_ExtECCEncrypt* msg) {
  return *msg->peccpubkeyblob_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ExtECCEncrypt::HasBitSetters::ulplaintextlen(const Req_SKF_ExtECCEncrypt* msg) {
  return *msg->ulplaintextlen_;
}
const ::com::westone::skf::SKF_ECCCIPHERBLOB&
Req_SKF_ExtECCEncrypt::HasBitSetters::pbciphertext(const Req_SKF_ExtECCEncrypt* msg) {
  return *msg->pbciphertext_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_ExtECCEncrypt::kHDevFieldNumber;
const int Req_SKF_ExtECCEncrypt::kPECCPubKeyBlobFieldNumber;
const int Req_SKF_ExtECCEncrypt::kPbPlainTextFieldNumber;
const int Req_SKF_ExtECCEncrypt::kUlPlainTextLenFieldNumber;
const int Req_SKF_ExtECCEncrypt::kPbCipherTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_ExtECCEncrypt::Req_SKF_ExtECCEncrypt()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_ExtECCEncrypt)
}
Req_SKF_ExtECCEncrypt::Req_SKF_ExtECCEncrypt(const Req_SKF_ExtECCEncrypt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbplaintext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbplaintext().size() > 0) {
    pbplaintext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbplaintext_);
  }
  if (from.has_hdev()) {
    hdev_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hdev_);
  } else {
    hdev_ = nullptr;
  }
  if (from.has_peccpubkeyblob()) {
    peccpubkeyblob_ = new ::com::westone::skf::SKF_ECCPUBLICKEYBLOB(*from.peccpubkeyblob_);
  } else {
    peccpubkeyblob_ = nullptr;
  }
  if (from.has_ulplaintextlen()) {
    ulplaintextlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulplaintextlen_);
  } else {
    ulplaintextlen_ = nullptr;
  }
  if (from.has_pbciphertext()) {
    pbciphertext_ = new ::com::westone::skf::SKF_ECCCIPHERBLOB(*from.pbciphertext_);
  } else {
    pbciphertext_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_ExtECCEncrypt)
}

void Req_SKF_ExtECCEncrypt::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_ExtECCEncrypt_skf_2eproto.base);
  pbplaintext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hdev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pbciphertext_) -
      reinterpret_cast<char*>(&hdev_)) + sizeof(pbciphertext_));
}

Req_SKF_ExtECCEncrypt::~Req_SKF_ExtECCEncrypt() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_ExtECCEncrypt)
  SharedDtor();
}

void Req_SKF_ExtECCEncrypt::SharedDtor() {
  pbplaintext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hdev_;
  if (this != internal_default_instance()) delete peccpubkeyblob_;
  if (this != internal_default_instance()) delete ulplaintextlen_;
  if (this != internal_default_instance()) delete pbciphertext_;
}

void Req_SKF_ExtECCEncrypt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_ExtECCEncrypt& Req_SKF_ExtECCEncrypt::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_ExtECCEncrypt_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_ExtECCEncrypt::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_ExtECCEncrypt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbplaintext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && peccpubkeyblob_ != nullptr) {
    delete peccpubkeyblob_;
  }
  peccpubkeyblob_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulplaintextlen_ != nullptr) {
    delete ulplaintextlen_;
  }
  ulplaintextlen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pbciphertext_ != nullptr) {
    delete pbciphertext_;
  }
  pbciphertext_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_ExtECCEncrypt::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_ExtECCEncrypt*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hdev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pECCPubKeyBlob = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::_InternalParse;
        object = msg->mutable_peccpubkeyblob();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbPlainText = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbplaintext();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulPlainTextLen = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulplaintextlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_ECCCIPHERBLOB pbCipherText = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ECCCIPHERBLOB::_InternalParse;
        object = msg->mutable_pbciphertext();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_ExtECCEncrypt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_ExtECCEncrypt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hdev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pECCPubKeyBlob = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peccpubkeyblob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbPlainText = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbplaintext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulPlainTextLen = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulplaintextlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_ECCCIPHERBLOB pbCipherText = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pbciphertext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_ExtECCEncrypt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_ExtECCEncrypt)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_ExtECCEncrypt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_ExtECCEncrypt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hdev(this), output);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pECCPubKeyBlob = 2;
  if (this->has_peccpubkeyblob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::peccpubkeyblob(this), output);
  }

  // bytes pbPlainText = 3;
  if (this->pbplaintext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->pbplaintext(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulPlainTextLen = 4;
  if (this->has_ulplaintextlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::ulplaintextlen(this), output);
  }

  // .com.westone.skf.SKF_ECCCIPHERBLOB pbCipherText = 5;
  if (this->has_pbciphertext()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::pbciphertext(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_ExtECCEncrypt)
}

::google::protobuf::uint8* Req_SKF_ExtECCEncrypt::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_ExtECCEncrypt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hdev(this), target);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pECCPubKeyBlob = 2;
  if (this->has_peccpubkeyblob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::peccpubkeyblob(this), target);
  }

  // bytes pbPlainText = 3;
  if (this->pbplaintext().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->pbplaintext(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulPlainTextLen = 4;
  if (this->has_ulplaintextlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::ulplaintextlen(this), target);
  }

  // .com.westone.skf.SKF_ECCCIPHERBLOB pbCipherText = 5;
  if (this->has_pbciphertext()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::pbciphertext(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_ExtECCEncrypt)
  return target;
}

size_t Req_SKF_ExtECCEncrypt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_ExtECCEncrypt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbPlainText = 3;
  if (this->pbplaintext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbplaintext());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hdev_);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pECCPubKeyBlob = 2;
  if (this->has_peccpubkeyblob()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *peccpubkeyblob_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulPlainTextLen = 4;
  if (this->has_ulplaintextlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulplaintextlen_);
  }

  // .com.westone.skf.SKF_ECCCIPHERBLOB pbCipherText = 5;
  if (this->has_pbciphertext()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pbciphertext_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_ExtECCEncrypt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_ExtECCEncrypt)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_ExtECCEncrypt* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_ExtECCEncrypt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_ExtECCEncrypt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_ExtECCEncrypt)
    MergeFrom(*source);
  }
}

void Req_SKF_ExtECCEncrypt::MergeFrom(const Req_SKF_ExtECCEncrypt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_ExtECCEncrypt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbplaintext().size() > 0) {

    pbplaintext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbplaintext_);
  }
  if (from.has_hdev()) {
    mutable_hdev()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hdev());
  }
  if (from.has_peccpubkeyblob()) {
    mutable_peccpubkeyblob()->::com::westone::skf::SKF_ECCPUBLICKEYBLOB::MergeFrom(from.peccpubkeyblob());
  }
  if (from.has_ulplaintextlen()) {
    mutable_ulplaintextlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulplaintextlen());
  }
  if (from.has_pbciphertext()) {
    mutable_pbciphertext()->::com::westone::skf::SKF_ECCCIPHERBLOB::MergeFrom(from.pbciphertext());
  }
}

void Req_SKF_ExtECCEncrypt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_ExtECCEncrypt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_ExtECCEncrypt::CopyFrom(const Req_SKF_ExtECCEncrypt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_ExtECCEncrypt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_ExtECCEncrypt::IsInitialized() const {
  return true;
}

void Req_SKF_ExtECCEncrypt::Swap(Req_SKF_ExtECCEncrypt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_ExtECCEncrypt::InternalSwap(Req_SKF_ExtECCEncrypt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbplaintext_.Swap(&other->pbplaintext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hdev_, other->hdev_);
  swap(peccpubkeyblob_, other->peccpubkeyblob_);
  swap(ulplaintextlen_, other->ulplaintextlen_);
  swap(pbciphertext_, other->pbciphertext_);
}

::google::protobuf::Metadata Req_SKF_ExtECCEncrypt::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_ExtECCEncrypt::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_ExtECCEncrypt_default_instance_._instance.get_mutable()->pbciphertext_ = const_cast< ::com::westone::skf::SKF_ECCCIPHERBLOB*>(
      ::com::westone::skf::SKF_ECCCIPHERBLOB::internal_default_instance());
}
class Rsp_SKF_ExtECCEncrypt::HasBitSetters {
 public:
  static const ::com::westone::skf::SKF_ECCCIPHERBLOB& pbciphertext(const Rsp_SKF_ExtECCEncrypt* msg);
};

const ::com::westone::skf::SKF_ECCCIPHERBLOB&
Rsp_SKF_ExtECCEncrypt::HasBitSetters::pbciphertext(const Rsp_SKF_ExtECCEncrypt* msg) {
  return *msg->pbciphertext_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_ExtECCEncrypt::kPbCipherTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_ExtECCEncrypt::Rsp_SKF_ExtECCEncrypt()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_ExtECCEncrypt)
}
Rsp_SKF_ExtECCEncrypt::Rsp_SKF_ExtECCEncrypt(const Rsp_SKF_ExtECCEncrypt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pbciphertext()) {
    pbciphertext_ = new ::com::westone::skf::SKF_ECCCIPHERBLOB(*from.pbciphertext_);
  } else {
    pbciphertext_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_ExtECCEncrypt)
}

void Rsp_SKF_ExtECCEncrypt::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_ExtECCEncrypt_skf_2eproto.base);
  pbciphertext_ = nullptr;
}

Rsp_SKF_ExtECCEncrypt::~Rsp_SKF_ExtECCEncrypt() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_ExtECCEncrypt)
  SharedDtor();
}

void Rsp_SKF_ExtECCEncrypt::SharedDtor() {
  if (this != internal_default_instance()) delete pbciphertext_;
}

void Rsp_SKF_ExtECCEncrypt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_ExtECCEncrypt& Rsp_SKF_ExtECCEncrypt::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_ExtECCEncrypt_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_ExtECCEncrypt::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_ExtECCEncrypt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pbciphertext_ != nullptr) {
    delete pbciphertext_;
  }
  pbciphertext_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_ExtECCEncrypt::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_ExtECCEncrypt*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.SKF_ECCCIPHERBLOB pbCipherText = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ECCCIPHERBLOB::_InternalParse;
        object = msg->mutable_pbciphertext();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_ExtECCEncrypt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_ExtECCEncrypt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.SKF_ECCCIPHERBLOB pbCipherText = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pbciphertext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_ExtECCEncrypt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_ExtECCEncrypt)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_ExtECCEncrypt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_ExtECCEncrypt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.SKF_ECCCIPHERBLOB pbCipherText = 1;
  if (this->has_pbciphertext()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::pbciphertext(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_ExtECCEncrypt)
}

::google::protobuf::uint8* Rsp_SKF_ExtECCEncrypt::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_ExtECCEncrypt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.SKF_ECCCIPHERBLOB pbCipherText = 1;
  if (this->has_pbciphertext()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::pbciphertext(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_ExtECCEncrypt)
  return target;
}

size_t Rsp_SKF_ExtECCEncrypt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_ExtECCEncrypt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.SKF_ECCCIPHERBLOB pbCipherText = 1;
  if (this->has_pbciphertext()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pbciphertext_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_ExtECCEncrypt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_ExtECCEncrypt)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_ExtECCEncrypt* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_ExtECCEncrypt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_ExtECCEncrypt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_ExtECCEncrypt)
    MergeFrom(*source);
  }
}

void Rsp_SKF_ExtECCEncrypt::MergeFrom(const Rsp_SKF_ExtECCEncrypt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_ExtECCEncrypt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pbciphertext()) {
    mutable_pbciphertext()->::com::westone::skf::SKF_ECCCIPHERBLOB::MergeFrom(from.pbciphertext());
  }
}

void Rsp_SKF_ExtECCEncrypt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_ExtECCEncrypt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_ExtECCEncrypt::CopyFrom(const Rsp_SKF_ExtECCEncrypt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_ExtECCEncrypt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_ExtECCEncrypt::IsInitialized() const {
  return true;
}

void Rsp_SKF_ExtECCEncrypt::Swap(Rsp_SKF_ExtECCEncrypt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_ExtECCEncrypt::InternalSwap(Rsp_SKF_ExtECCEncrypt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pbciphertext_, other->pbciphertext_);
}

::google::protobuf::Metadata Rsp_SKF_ExtECCEncrypt::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_ExtECCDecrypt::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_ExtECCDecrypt_default_instance_._instance.get_mutable()->hdev_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ExtECCDecrypt_default_instance_._instance.get_mutable()->peccprikeyblob_ = const_cast< ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB*>(
      ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ExtECCDecrypt_default_instance_._instance.get_mutable()->pbciphertext_ = const_cast< ::com::westone::skf::SKF_ECCCIPHERBLOB*>(
      ::com::westone::skf::SKF_ECCCIPHERBLOB::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ExtECCDecrypt_default_instance_._instance.get_mutable()->pulplaintextlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_ExtECCDecrypt::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hdev(const Req_SKF_ExtECCDecrypt* msg);
  static const ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB& peccprikeyblob(const Req_SKF_ExtECCDecrypt* msg);
  static const ::com::westone::skf::SKF_ECCCIPHERBLOB& pbciphertext(const Req_SKF_ExtECCDecrypt* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& pulplaintextlen(const Req_SKF_ExtECCDecrypt* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ExtECCDecrypt::HasBitSetters::hdev(const Req_SKF_ExtECCDecrypt* msg) {
  return *msg->hdev_;
}
const ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB&
Req_SKF_ExtECCDecrypt::HasBitSetters::peccprikeyblob(const Req_SKF_ExtECCDecrypt* msg) {
  return *msg->peccprikeyblob_;
}
const ::com::westone::skf::SKF_ECCCIPHERBLOB&
Req_SKF_ExtECCDecrypt::HasBitSetters::pbciphertext(const Req_SKF_ExtECCDecrypt* msg) {
  return *msg->pbciphertext_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ExtECCDecrypt::HasBitSetters::pulplaintextlen(const Req_SKF_ExtECCDecrypt* msg) {
  return *msg->pulplaintextlen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_ExtECCDecrypt::kHDevFieldNumber;
const int Req_SKF_ExtECCDecrypt::kPECCPriKeyBlobFieldNumber;
const int Req_SKF_ExtECCDecrypt::kPbCipherTextFieldNumber;
const int Req_SKF_ExtECCDecrypt::kPbPlainTextFieldNumber;
const int Req_SKF_ExtECCDecrypt::kPulPlainTextLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_ExtECCDecrypt::Req_SKF_ExtECCDecrypt()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_ExtECCDecrypt)
}
Req_SKF_ExtECCDecrypt::Req_SKF_ExtECCDecrypt(const Req_SKF_ExtECCDecrypt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbplaintext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbplaintext().size() > 0) {
    pbplaintext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbplaintext_);
  }
  if (from.has_hdev()) {
    hdev_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hdev_);
  } else {
    hdev_ = nullptr;
  }
  if (from.has_peccprikeyblob()) {
    peccprikeyblob_ = new ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB(*from.peccprikeyblob_);
  } else {
    peccprikeyblob_ = nullptr;
  }
  if (from.has_pbciphertext()) {
    pbciphertext_ = new ::com::westone::skf::SKF_ECCCIPHERBLOB(*from.pbciphertext_);
  } else {
    pbciphertext_ = nullptr;
  }
  if (from.has_pulplaintextlen()) {
    pulplaintextlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulplaintextlen_);
  } else {
    pulplaintextlen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_ExtECCDecrypt)
}

void Req_SKF_ExtECCDecrypt::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_ExtECCDecrypt_skf_2eproto.base);
  pbplaintext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hdev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pulplaintextlen_) -
      reinterpret_cast<char*>(&hdev_)) + sizeof(pulplaintextlen_));
}

Req_SKF_ExtECCDecrypt::~Req_SKF_ExtECCDecrypt() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_ExtECCDecrypt)
  SharedDtor();
}

void Req_SKF_ExtECCDecrypt::SharedDtor() {
  pbplaintext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hdev_;
  if (this != internal_default_instance()) delete peccprikeyblob_;
  if (this != internal_default_instance()) delete pbciphertext_;
  if (this != internal_default_instance()) delete pulplaintextlen_;
}

void Req_SKF_ExtECCDecrypt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_ExtECCDecrypt& Req_SKF_ExtECCDecrypt::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_ExtECCDecrypt_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_ExtECCDecrypt::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_ExtECCDecrypt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbplaintext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && peccprikeyblob_ != nullptr) {
    delete peccprikeyblob_;
  }
  peccprikeyblob_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pbciphertext_ != nullptr) {
    delete pbciphertext_;
  }
  pbciphertext_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pulplaintextlen_ != nullptr) {
    delete pulplaintextlen_;
  }
  pulplaintextlen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_ExtECCDecrypt::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_ExtECCDecrypt*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hdev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_ECCPRIVATEKEYBLOB pECCPriKeyBlob = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB::_InternalParse;
        object = msg->mutable_peccprikeyblob();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_ECCCIPHERBLOB pbCipherText = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ECCCIPHERBLOB::_InternalParse;
        object = msg->mutable_pbciphertext();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbPlainText = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbplaintext();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulPlainTextLen = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulplaintextlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_ExtECCDecrypt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_ExtECCDecrypt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hdev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_ECCPRIVATEKEYBLOB pECCPriKeyBlob = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peccprikeyblob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_ECCCIPHERBLOB pbCipherText = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pbciphertext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbPlainText = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbplaintext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulPlainTextLen = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulplaintextlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_ExtECCDecrypt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_ExtECCDecrypt)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_ExtECCDecrypt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_ExtECCDecrypt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hdev(this), output);
  }

  // .com.westone.skf.SKF_ECCPRIVATEKEYBLOB pECCPriKeyBlob = 2;
  if (this->has_peccprikeyblob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::peccprikeyblob(this), output);
  }

  // .com.westone.skf.SKF_ECCCIPHERBLOB pbCipherText = 3;
  if (this->has_pbciphertext()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::pbciphertext(this), output);
  }

  // bytes pbPlainText = 4;
  if (this->pbplaintext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->pbplaintext(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulPlainTextLen = 5;
  if (this->has_pulplaintextlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::pulplaintextlen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_ExtECCDecrypt)
}

::google::protobuf::uint8* Req_SKF_ExtECCDecrypt::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_ExtECCDecrypt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hdev(this), target);
  }

  // .com.westone.skf.SKF_ECCPRIVATEKEYBLOB pECCPriKeyBlob = 2;
  if (this->has_peccprikeyblob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::peccprikeyblob(this), target);
  }

  // .com.westone.skf.SKF_ECCCIPHERBLOB pbCipherText = 3;
  if (this->has_pbciphertext()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::pbciphertext(this), target);
  }

  // bytes pbPlainText = 4;
  if (this->pbplaintext().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->pbplaintext(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulPlainTextLen = 5;
  if (this->has_pulplaintextlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::pulplaintextlen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_ExtECCDecrypt)
  return target;
}

size_t Req_SKF_ExtECCDecrypt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_ExtECCDecrypt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbPlainText = 4;
  if (this->pbplaintext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbplaintext());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hdev_);
  }

  // .com.westone.skf.SKF_ECCPRIVATEKEYBLOB pECCPriKeyBlob = 2;
  if (this->has_peccprikeyblob()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *peccprikeyblob_);
  }

  // .com.westone.skf.SKF_ECCCIPHERBLOB pbCipherText = 3;
  if (this->has_pbciphertext()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pbciphertext_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulPlainTextLen = 5;
  if (this->has_pulplaintextlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulplaintextlen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_ExtECCDecrypt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_ExtECCDecrypt)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_ExtECCDecrypt* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_ExtECCDecrypt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_ExtECCDecrypt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_ExtECCDecrypt)
    MergeFrom(*source);
  }
}

void Req_SKF_ExtECCDecrypt::MergeFrom(const Req_SKF_ExtECCDecrypt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_ExtECCDecrypt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbplaintext().size() > 0) {

    pbplaintext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbplaintext_);
  }
  if (from.has_hdev()) {
    mutable_hdev()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hdev());
  }
  if (from.has_peccprikeyblob()) {
    mutable_peccprikeyblob()->::com::westone::skf::SKF_ECCPRIVATEKEYBLOB::MergeFrom(from.peccprikeyblob());
  }
  if (from.has_pbciphertext()) {
    mutable_pbciphertext()->::com::westone::skf::SKF_ECCCIPHERBLOB::MergeFrom(from.pbciphertext());
  }
  if (from.has_pulplaintextlen()) {
    mutable_pulplaintextlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulplaintextlen());
  }
}

void Req_SKF_ExtECCDecrypt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_ExtECCDecrypt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_ExtECCDecrypt::CopyFrom(const Req_SKF_ExtECCDecrypt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_ExtECCDecrypt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_ExtECCDecrypt::IsInitialized() const {
  return true;
}

void Req_SKF_ExtECCDecrypt::Swap(Req_SKF_ExtECCDecrypt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_ExtECCDecrypt::InternalSwap(Req_SKF_ExtECCDecrypt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbplaintext_.Swap(&other->pbplaintext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hdev_, other->hdev_);
  swap(peccprikeyblob_, other->peccprikeyblob_);
  swap(pbciphertext_, other->pbciphertext_);
  swap(pulplaintextlen_, other->pulplaintextlen_);
}

::google::protobuf::Metadata Req_SKF_ExtECCDecrypt::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_ExtECCDecrypt::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_ExtECCDecrypt_default_instance_._instance.get_mutable()->pulplaintextlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_ExtECCDecrypt::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& pulplaintextlen(const Rsp_SKF_ExtECCDecrypt* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_ExtECCDecrypt::HasBitSetters::pulplaintextlen(const Rsp_SKF_ExtECCDecrypt* msg) {
  return *msg->pulplaintextlen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_ExtECCDecrypt::kPbPlainTextFieldNumber;
const int Rsp_SKF_ExtECCDecrypt::kPulPlainTextLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_ExtECCDecrypt::Rsp_SKF_ExtECCDecrypt()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_ExtECCDecrypt)
}
Rsp_SKF_ExtECCDecrypt::Rsp_SKF_ExtECCDecrypt(const Rsp_SKF_ExtECCDecrypt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbplaintext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbplaintext().size() > 0) {
    pbplaintext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbplaintext_);
  }
  if (from.has_pulplaintextlen()) {
    pulplaintextlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulplaintextlen_);
  } else {
    pulplaintextlen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_ExtECCDecrypt)
}

void Rsp_SKF_ExtECCDecrypt::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_ExtECCDecrypt_skf_2eproto.base);
  pbplaintext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pulplaintextlen_ = nullptr;
}

Rsp_SKF_ExtECCDecrypt::~Rsp_SKF_ExtECCDecrypt() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_ExtECCDecrypt)
  SharedDtor();
}

void Rsp_SKF_ExtECCDecrypt::SharedDtor() {
  pbplaintext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pulplaintextlen_;
}

void Rsp_SKF_ExtECCDecrypt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_ExtECCDecrypt& Rsp_SKF_ExtECCDecrypt::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_ExtECCDecrypt_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_ExtECCDecrypt::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_ExtECCDecrypt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbplaintext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && pulplaintextlen_ != nullptr) {
    delete pulplaintextlen_;
  }
  pulplaintextlen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_ExtECCDecrypt::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_ExtECCDecrypt*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes pbPlainText = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbplaintext();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulPlainTextLen = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulplaintextlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_ExtECCDecrypt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_ExtECCDecrypt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes pbPlainText = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbplaintext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulPlainTextLen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulplaintextlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_ExtECCDecrypt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_ExtECCDecrypt)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_ExtECCDecrypt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_ExtECCDecrypt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbPlainText = 1;
  if (this->pbplaintext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pbplaintext(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulPlainTextLen = 2;
  if (this->has_pulplaintextlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pulplaintextlen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_ExtECCDecrypt)
}

::google::protobuf::uint8* Rsp_SKF_ExtECCDecrypt::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_ExtECCDecrypt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbPlainText = 1;
  if (this->pbplaintext().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pbplaintext(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulPlainTextLen = 2;
  if (this->has_pulplaintextlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pulplaintextlen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_ExtECCDecrypt)
  return target;
}

size_t Rsp_SKF_ExtECCDecrypt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_ExtECCDecrypt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbPlainText = 1;
  if (this->pbplaintext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbplaintext());
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulPlainTextLen = 2;
  if (this->has_pulplaintextlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulplaintextlen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_ExtECCDecrypt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_ExtECCDecrypt)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_ExtECCDecrypt* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_ExtECCDecrypt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_ExtECCDecrypt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_ExtECCDecrypt)
    MergeFrom(*source);
  }
}

void Rsp_SKF_ExtECCDecrypt::MergeFrom(const Rsp_SKF_ExtECCDecrypt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_ExtECCDecrypt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbplaintext().size() > 0) {

    pbplaintext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbplaintext_);
  }
  if (from.has_pulplaintextlen()) {
    mutable_pulplaintextlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulplaintextlen());
  }
}

void Rsp_SKF_ExtECCDecrypt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_ExtECCDecrypt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_ExtECCDecrypt::CopyFrom(const Rsp_SKF_ExtECCDecrypt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_ExtECCDecrypt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_ExtECCDecrypt::IsInitialized() const {
  return true;
}

void Rsp_SKF_ExtECCDecrypt::Swap(Rsp_SKF_ExtECCDecrypt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_ExtECCDecrypt::InternalSwap(Rsp_SKF_ExtECCDecrypt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbplaintext_.Swap(&other->pbplaintext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pulplaintextlen_, other->pulplaintextlen_);
}

::google::protobuf::Metadata Rsp_SKF_ExtECCDecrypt::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_ExtECCSign::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_ExtECCSign_default_instance_._instance.get_mutable()->hdev_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ExtECCSign_default_instance_._instance.get_mutable()->peccprikeyblob_ = const_cast< ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB*>(
      ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ExtECCSign_default_instance_._instance.get_mutable()->uldatalen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ExtECCSign_default_instance_._instance.get_mutable()->psignature_ = const_cast< ::com::westone::skf::SKF_ECCSIGNATUREBLOB*>(
      ::com::westone::skf::SKF_ECCSIGNATUREBLOB::internal_default_instance());
}
class Req_SKF_ExtECCSign::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hdev(const Req_SKF_ExtECCSign* msg);
  static const ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB& peccprikeyblob(const Req_SKF_ExtECCSign* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& uldatalen(const Req_SKF_ExtECCSign* msg);
  static const ::com::westone::skf::SKF_ECCSIGNATUREBLOB& psignature(const Req_SKF_ExtECCSign* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ExtECCSign::HasBitSetters::hdev(const Req_SKF_ExtECCSign* msg) {
  return *msg->hdev_;
}
const ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB&
Req_SKF_ExtECCSign::HasBitSetters::peccprikeyblob(const Req_SKF_ExtECCSign* msg) {
  return *msg->peccprikeyblob_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ExtECCSign::HasBitSetters::uldatalen(const Req_SKF_ExtECCSign* msg) {
  return *msg->uldatalen_;
}
const ::com::westone::skf::SKF_ECCSIGNATUREBLOB&
Req_SKF_ExtECCSign::HasBitSetters::psignature(const Req_SKF_ExtECCSign* msg) {
  return *msg->psignature_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_ExtECCSign::kHDevFieldNumber;
const int Req_SKF_ExtECCSign::kPECCPriKeyBlobFieldNumber;
const int Req_SKF_ExtECCSign::kPbDataFieldNumber;
const int Req_SKF_ExtECCSign::kUlDataLenFieldNumber;
const int Req_SKF_ExtECCSign::kPSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_ExtECCSign::Req_SKF_ExtECCSign()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_ExtECCSign)
}
Req_SKF_ExtECCSign::Req_SKF_ExtECCSign(const Req_SKF_ExtECCSign& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbdata().size() > 0) {
    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.has_hdev()) {
    hdev_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hdev_);
  } else {
    hdev_ = nullptr;
  }
  if (from.has_peccprikeyblob()) {
    peccprikeyblob_ = new ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB(*from.peccprikeyblob_);
  } else {
    peccprikeyblob_ = nullptr;
  }
  if (from.has_uldatalen()) {
    uldatalen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.uldatalen_);
  } else {
    uldatalen_ = nullptr;
  }
  if (from.has_psignature()) {
    psignature_ = new ::com::westone::skf::SKF_ECCSIGNATUREBLOB(*from.psignature_);
  } else {
    psignature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_ExtECCSign)
}

void Req_SKF_ExtECCSign::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_ExtECCSign_skf_2eproto.base);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hdev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&psignature_) -
      reinterpret_cast<char*>(&hdev_)) + sizeof(psignature_));
}

Req_SKF_ExtECCSign::~Req_SKF_ExtECCSign() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_ExtECCSign)
  SharedDtor();
}

void Req_SKF_ExtECCSign::SharedDtor() {
  pbdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hdev_;
  if (this != internal_default_instance()) delete peccprikeyblob_;
  if (this != internal_default_instance()) delete uldatalen_;
  if (this != internal_default_instance()) delete psignature_;
}

void Req_SKF_ExtECCSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_ExtECCSign& Req_SKF_ExtECCSign::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_ExtECCSign_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_ExtECCSign::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_ExtECCSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && peccprikeyblob_ != nullptr) {
    delete peccprikeyblob_;
  }
  peccprikeyblob_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && uldatalen_ != nullptr) {
    delete uldatalen_;
  }
  uldatalen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && psignature_ != nullptr) {
    delete psignature_;
  }
  psignature_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_ExtECCSign::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_ExtECCSign*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hdev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_ECCPRIVATEKEYBLOB pECCPriKeyBlob = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB::_InternalParse;
        object = msg->mutable_peccprikeyblob();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbData = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_uldatalen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ECCSIGNATUREBLOB::_InternalParse;
        object = msg->mutable_psignature();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_ExtECCSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_ExtECCSign)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hdev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_ECCPRIVATEKEYBLOB pECCPriKeyBlob = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peccprikeyblob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbData = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uldatalen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_psignature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_ExtECCSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_ExtECCSign)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_ExtECCSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_ExtECCSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hdev(this), output);
  }

  // .com.westone.skf.SKF_ECCPRIVATEKEYBLOB pECCPriKeyBlob = 2;
  if (this->has_peccprikeyblob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::peccprikeyblob(this), output);
  }

  // bytes pbData = 3;
  if (this->pbdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->pbdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 4;
  if (this->has_uldatalen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::uldatalen(this), output);
  }

  // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 5;
  if (this->has_psignature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::psignature(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_ExtECCSign)
}

::google::protobuf::uint8* Req_SKF_ExtECCSign::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_ExtECCSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hdev(this), target);
  }

  // .com.westone.skf.SKF_ECCPRIVATEKEYBLOB pECCPriKeyBlob = 2;
  if (this->has_peccprikeyblob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::peccprikeyblob(this), target);
  }

  // bytes pbData = 3;
  if (this->pbdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->pbdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 4;
  if (this->has_uldatalen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::uldatalen(this), target);
  }

  // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 5;
  if (this->has_psignature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::psignature(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_ExtECCSign)
  return target;
}

size_t Req_SKF_ExtECCSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_ExtECCSign)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbData = 3;
  if (this->pbdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbdata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hdev_);
  }

  // .com.westone.skf.SKF_ECCPRIVATEKEYBLOB pECCPriKeyBlob = 2;
  if (this->has_peccprikeyblob()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *peccprikeyblob_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 4;
  if (this->has_uldatalen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *uldatalen_);
  }

  // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 5;
  if (this->has_psignature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *psignature_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_ExtECCSign::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_ExtECCSign)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_ExtECCSign* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_ExtECCSign>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_ExtECCSign)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_ExtECCSign)
    MergeFrom(*source);
  }
}

void Req_SKF_ExtECCSign::MergeFrom(const Req_SKF_ExtECCSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_ExtECCSign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbdata().size() > 0) {

    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.has_hdev()) {
    mutable_hdev()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hdev());
  }
  if (from.has_peccprikeyblob()) {
    mutable_peccprikeyblob()->::com::westone::skf::SKF_ECCPRIVATEKEYBLOB::MergeFrom(from.peccprikeyblob());
  }
  if (from.has_uldatalen()) {
    mutable_uldatalen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.uldatalen());
  }
  if (from.has_psignature()) {
    mutable_psignature()->::com::westone::skf::SKF_ECCSIGNATUREBLOB::MergeFrom(from.psignature());
  }
}

void Req_SKF_ExtECCSign::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_ExtECCSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_ExtECCSign::CopyFrom(const Req_SKF_ExtECCSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_ExtECCSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_ExtECCSign::IsInitialized() const {
  return true;
}

void Req_SKF_ExtECCSign::Swap(Req_SKF_ExtECCSign* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_ExtECCSign::InternalSwap(Req_SKF_ExtECCSign* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbdata_.Swap(&other->pbdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hdev_, other->hdev_);
  swap(peccprikeyblob_, other->peccprikeyblob_);
  swap(uldatalen_, other->uldatalen_);
  swap(psignature_, other->psignature_);
}

::google::protobuf::Metadata Req_SKF_ExtECCSign::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_ExtECCSign::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_ExtECCSign_default_instance_._instance.get_mutable()->psignature_ = const_cast< ::com::westone::skf::SKF_ECCSIGNATUREBLOB*>(
      ::com::westone::skf::SKF_ECCSIGNATUREBLOB::internal_default_instance());
}
class Rsp_SKF_ExtECCSign::HasBitSetters {
 public:
  static const ::com::westone::skf::SKF_ECCSIGNATUREBLOB& psignature(const Rsp_SKF_ExtECCSign* msg);
};

const ::com::westone::skf::SKF_ECCSIGNATUREBLOB&
Rsp_SKF_ExtECCSign::HasBitSetters::psignature(const Rsp_SKF_ExtECCSign* msg) {
  return *msg->psignature_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_ExtECCSign::kPSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_ExtECCSign::Rsp_SKF_ExtECCSign()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_ExtECCSign)
}
Rsp_SKF_ExtECCSign::Rsp_SKF_ExtECCSign(const Rsp_SKF_ExtECCSign& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_psignature()) {
    psignature_ = new ::com::westone::skf::SKF_ECCSIGNATUREBLOB(*from.psignature_);
  } else {
    psignature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_ExtECCSign)
}

void Rsp_SKF_ExtECCSign::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_ExtECCSign_skf_2eproto.base);
  psignature_ = nullptr;
}

Rsp_SKF_ExtECCSign::~Rsp_SKF_ExtECCSign() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_ExtECCSign)
  SharedDtor();
}

void Rsp_SKF_ExtECCSign::SharedDtor() {
  if (this != internal_default_instance()) delete psignature_;
}

void Rsp_SKF_ExtECCSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_ExtECCSign& Rsp_SKF_ExtECCSign::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_ExtECCSign_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_ExtECCSign::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_ExtECCSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && psignature_ != nullptr) {
    delete psignature_;
  }
  psignature_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_ExtECCSign::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_ExtECCSign*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ECCSIGNATUREBLOB::_InternalParse;
        object = msg->mutable_psignature();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_ExtECCSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_ExtECCSign)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_psignature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_ExtECCSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_ExtECCSign)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_ExtECCSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_ExtECCSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 1;
  if (this->has_psignature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::psignature(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_ExtECCSign)
}

::google::protobuf::uint8* Rsp_SKF_ExtECCSign::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_ExtECCSign)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 1;
  if (this->has_psignature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::psignature(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_ExtECCSign)
  return target;
}

size_t Rsp_SKF_ExtECCSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_ExtECCSign)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 1;
  if (this->has_psignature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *psignature_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_ExtECCSign::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_ExtECCSign)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_ExtECCSign* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_ExtECCSign>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_ExtECCSign)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_ExtECCSign)
    MergeFrom(*source);
  }
}

void Rsp_SKF_ExtECCSign::MergeFrom(const Rsp_SKF_ExtECCSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_ExtECCSign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_psignature()) {
    mutable_psignature()->::com::westone::skf::SKF_ECCSIGNATUREBLOB::MergeFrom(from.psignature());
  }
}

void Rsp_SKF_ExtECCSign::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_ExtECCSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_ExtECCSign::CopyFrom(const Rsp_SKF_ExtECCSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_ExtECCSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_ExtECCSign::IsInitialized() const {
  return true;
}

void Rsp_SKF_ExtECCSign::Swap(Rsp_SKF_ExtECCSign* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_ExtECCSign::InternalSwap(Rsp_SKF_ExtECCSign* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(psignature_, other->psignature_);
}

::google::protobuf::Metadata Rsp_SKF_ExtECCSign::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_ExtECCVerify::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_ExtECCVerify_default_instance_._instance.get_mutable()->hdev_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ExtECCVerify_default_instance_._instance.get_mutable()->peccpubkeyblob_ = const_cast< ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ExtECCVerify_default_instance_._instance.get_mutable()->uldatalen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ExtECCVerify_default_instance_._instance.get_mutable()->psignature_ = const_cast< ::com::westone::skf::SKF_ECCSIGNATUREBLOB*>(
      ::com::westone::skf::SKF_ECCSIGNATUREBLOB::internal_default_instance());
}
class Req_SKF_ExtECCVerify::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hdev(const Req_SKF_ExtECCVerify* msg);
  static const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& peccpubkeyblob(const Req_SKF_ExtECCVerify* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& uldatalen(const Req_SKF_ExtECCVerify* msg);
  static const ::com::westone::skf::SKF_ECCSIGNATUREBLOB& psignature(const Req_SKF_ExtECCVerify* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ExtECCVerify::HasBitSetters::hdev(const Req_SKF_ExtECCVerify* msg) {
  return *msg->hdev_;
}
const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB&
Req_SKF_ExtECCVerify::HasBitSetters::peccpubkeyblob(const Req_SKF_ExtECCVerify* msg) {
  return *msg->peccpubkeyblob_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ExtECCVerify::HasBitSetters::uldatalen(const Req_SKF_ExtECCVerify* msg) {
  return *msg->uldatalen_;
}
const ::com::westone::skf::SKF_ECCSIGNATUREBLOB&
Req_SKF_ExtECCVerify::HasBitSetters::psignature(const Req_SKF_ExtECCVerify* msg) {
  return *msg->psignature_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_ExtECCVerify::kHDevFieldNumber;
const int Req_SKF_ExtECCVerify::kPECCPubKeyBlobFieldNumber;
const int Req_SKF_ExtECCVerify::kPbDataFieldNumber;
const int Req_SKF_ExtECCVerify::kUlDataLenFieldNumber;
const int Req_SKF_ExtECCVerify::kPSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_ExtECCVerify::Req_SKF_ExtECCVerify()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_ExtECCVerify)
}
Req_SKF_ExtECCVerify::Req_SKF_ExtECCVerify(const Req_SKF_ExtECCVerify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbdata().size() > 0) {
    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.has_hdev()) {
    hdev_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hdev_);
  } else {
    hdev_ = nullptr;
  }
  if (from.has_peccpubkeyblob()) {
    peccpubkeyblob_ = new ::com::westone::skf::SKF_ECCPUBLICKEYBLOB(*from.peccpubkeyblob_);
  } else {
    peccpubkeyblob_ = nullptr;
  }
  if (from.has_uldatalen()) {
    uldatalen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.uldatalen_);
  } else {
    uldatalen_ = nullptr;
  }
  if (from.has_psignature()) {
    psignature_ = new ::com::westone::skf::SKF_ECCSIGNATUREBLOB(*from.psignature_);
  } else {
    psignature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_ExtECCVerify)
}

void Req_SKF_ExtECCVerify::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_ExtECCVerify_skf_2eproto.base);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hdev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&psignature_) -
      reinterpret_cast<char*>(&hdev_)) + sizeof(psignature_));
}

Req_SKF_ExtECCVerify::~Req_SKF_ExtECCVerify() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_ExtECCVerify)
  SharedDtor();
}

void Req_SKF_ExtECCVerify::SharedDtor() {
  pbdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hdev_;
  if (this != internal_default_instance()) delete peccpubkeyblob_;
  if (this != internal_default_instance()) delete uldatalen_;
  if (this != internal_default_instance()) delete psignature_;
}

void Req_SKF_ExtECCVerify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_ExtECCVerify& Req_SKF_ExtECCVerify::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_ExtECCVerify_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_ExtECCVerify::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_ExtECCVerify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && peccpubkeyblob_ != nullptr) {
    delete peccpubkeyblob_;
  }
  peccpubkeyblob_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && uldatalen_ != nullptr) {
    delete uldatalen_;
  }
  uldatalen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && psignature_ != nullptr) {
    delete psignature_;
  }
  psignature_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_ExtECCVerify::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_ExtECCVerify*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hdev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pECCPubKeyBlob = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::_InternalParse;
        object = msg->mutable_peccpubkeyblob();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbData = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_uldatalen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ECCSIGNATUREBLOB::_InternalParse;
        object = msg->mutable_psignature();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_ExtECCVerify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_ExtECCVerify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hdev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pECCPubKeyBlob = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peccpubkeyblob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbData = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uldatalen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_psignature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_ExtECCVerify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_ExtECCVerify)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_ExtECCVerify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_ExtECCVerify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hdev(this), output);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pECCPubKeyBlob = 2;
  if (this->has_peccpubkeyblob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::peccpubkeyblob(this), output);
  }

  // bytes pbData = 3;
  if (this->pbdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->pbdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 4;
  if (this->has_uldatalen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::uldatalen(this), output);
  }

  // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 5;
  if (this->has_psignature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::psignature(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_ExtECCVerify)
}

::google::protobuf::uint8* Req_SKF_ExtECCVerify::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_ExtECCVerify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hdev(this), target);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pECCPubKeyBlob = 2;
  if (this->has_peccpubkeyblob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::peccpubkeyblob(this), target);
  }

  // bytes pbData = 3;
  if (this->pbdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->pbdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 4;
  if (this->has_uldatalen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::uldatalen(this), target);
  }

  // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 5;
  if (this->has_psignature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::psignature(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_ExtECCVerify)
  return target;
}

size_t Req_SKF_ExtECCVerify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_ExtECCVerify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbData = 3;
  if (this->pbdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbdata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hdev_);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pECCPubKeyBlob = 2;
  if (this->has_peccpubkeyblob()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *peccpubkeyblob_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 4;
  if (this->has_uldatalen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *uldatalen_);
  }

  // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 5;
  if (this->has_psignature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *psignature_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_ExtECCVerify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_ExtECCVerify)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_ExtECCVerify* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_ExtECCVerify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_ExtECCVerify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_ExtECCVerify)
    MergeFrom(*source);
  }
}

void Req_SKF_ExtECCVerify::MergeFrom(const Req_SKF_ExtECCVerify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_ExtECCVerify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbdata().size() > 0) {

    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.has_hdev()) {
    mutable_hdev()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hdev());
  }
  if (from.has_peccpubkeyblob()) {
    mutable_peccpubkeyblob()->::com::westone::skf::SKF_ECCPUBLICKEYBLOB::MergeFrom(from.peccpubkeyblob());
  }
  if (from.has_uldatalen()) {
    mutable_uldatalen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.uldatalen());
  }
  if (from.has_psignature()) {
    mutable_psignature()->::com::westone::skf::SKF_ECCSIGNATUREBLOB::MergeFrom(from.psignature());
  }
}

void Req_SKF_ExtECCVerify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_ExtECCVerify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_ExtECCVerify::CopyFrom(const Req_SKF_ExtECCVerify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_ExtECCVerify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_ExtECCVerify::IsInitialized() const {
  return true;
}

void Req_SKF_ExtECCVerify::Swap(Req_SKF_ExtECCVerify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_ExtECCVerify::InternalSwap(Req_SKF_ExtECCVerify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbdata_.Swap(&other->pbdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hdev_, other->hdev_);
  swap(peccpubkeyblob_, other->peccpubkeyblob_);
  swap(uldatalen_, other->uldatalen_);
  swap(psignature_, other->psignature_);
}

::google::protobuf::Metadata Req_SKF_ExtECCVerify::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_ExtECCVerify::InitAsDefaultInstance() {
}
class Rsp_SKF_ExtECCVerify::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_ExtECCVerify::Rsp_SKF_ExtECCVerify()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_ExtECCVerify)
}
Rsp_SKF_ExtECCVerify::Rsp_SKF_ExtECCVerify(const Rsp_SKF_ExtECCVerify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_ExtECCVerify)
}

void Rsp_SKF_ExtECCVerify::SharedCtor() {
}

Rsp_SKF_ExtECCVerify::~Rsp_SKF_ExtECCVerify() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_ExtECCVerify)
  SharedDtor();
}

void Rsp_SKF_ExtECCVerify::SharedDtor() {
}

void Rsp_SKF_ExtECCVerify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_ExtECCVerify& Rsp_SKF_ExtECCVerify::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_ExtECCVerify_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_ExtECCVerify::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_ExtECCVerify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_ExtECCVerify::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_ExtECCVerify*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_ExtECCVerify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_ExtECCVerify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_ExtECCVerify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_ExtECCVerify)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_ExtECCVerify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_ExtECCVerify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_ExtECCVerify)
}

::google::protobuf::uint8* Rsp_SKF_ExtECCVerify::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_ExtECCVerify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_ExtECCVerify)
  return target;
}

size_t Rsp_SKF_ExtECCVerify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_ExtECCVerify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_ExtECCVerify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_ExtECCVerify)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_ExtECCVerify* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_ExtECCVerify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_ExtECCVerify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_ExtECCVerify)
    MergeFrom(*source);
  }
}

void Rsp_SKF_ExtECCVerify::MergeFrom(const Rsp_SKF_ExtECCVerify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_ExtECCVerify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rsp_SKF_ExtECCVerify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_ExtECCVerify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_ExtECCVerify::CopyFrom(const Rsp_SKF_ExtECCVerify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_ExtECCVerify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_ExtECCVerify::IsInitialized() const {
  return true;
}

void Rsp_SKF_ExtECCVerify::Swap(Rsp_SKF_ExtECCVerify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_ExtECCVerify::InternalSwap(Rsp_SKF_ExtECCVerify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rsp_SKF_ExtECCVerify::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_GenerateAgreementDataWithECC::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_GenerateAgreementDataWithECC_default_instance_._instance.get_mutable()->hcontainer_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_GenerateAgreementDataWithECC_default_instance_._instance.get_mutable()->ulalgid_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_GenerateAgreementDataWithECC_default_instance_._instance.get_mutable()->ptempeccpubkeyblob_ = const_cast< ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::internal_default_instance());
  ::com::westone::skf::_Req_SKF_GenerateAgreementDataWithECC_default_instance_._instance.get_mutable()->ulidlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_GenerateAgreementDataWithECC_default_instance_._instance.get_mutable()->phagreementhandle_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_GenerateAgreementDataWithECC::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hcontainer(const Req_SKF_GenerateAgreementDataWithECC* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulalgid(const Req_SKF_GenerateAgreementDataWithECC* msg);
  static const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& ptempeccpubkeyblob(const Req_SKF_GenerateAgreementDataWithECC* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulidlen(const Req_SKF_GenerateAgreementDataWithECC* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& phagreementhandle(const Req_SKF_GenerateAgreementDataWithECC* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GenerateAgreementDataWithECC::HasBitSetters::hcontainer(const Req_SKF_GenerateAgreementDataWithECC* msg) {
  return *msg->hcontainer_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GenerateAgreementDataWithECC::HasBitSetters::ulalgid(const Req_SKF_GenerateAgreementDataWithECC* msg) {
  return *msg->ulalgid_;
}
const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB&
Req_SKF_GenerateAgreementDataWithECC::HasBitSetters::ptempeccpubkeyblob(const Req_SKF_GenerateAgreementDataWithECC* msg) {
  return *msg->ptempeccpubkeyblob_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GenerateAgreementDataWithECC::HasBitSetters::ulidlen(const Req_SKF_GenerateAgreementDataWithECC* msg) {
  return *msg->ulidlen_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GenerateAgreementDataWithECC::HasBitSetters::phagreementhandle(const Req_SKF_GenerateAgreementDataWithECC* msg) {
  return *msg->phagreementhandle_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_GenerateAgreementDataWithECC::kHContainerFieldNumber;
const int Req_SKF_GenerateAgreementDataWithECC::kUlAlgIDFieldNumber;
const int Req_SKF_GenerateAgreementDataWithECC::kPTempECCPubKeyBlobFieldNumber;
const int Req_SKF_GenerateAgreementDataWithECC::kPbIDFieldNumber;
const int Req_SKF_GenerateAgreementDataWithECC::kUlIDLenFieldNumber;
const int Req_SKF_GenerateAgreementDataWithECC::kPhAgreementHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_GenerateAgreementDataWithECC::Req_SKF_GenerateAgreementDataWithECC()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC)
}
Req_SKF_GenerateAgreementDataWithECC::Req_SKF_GenerateAgreementDataWithECC(const Req_SKF_GenerateAgreementDataWithECC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbid().size() > 0) {
    pbid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbid_);
  }
  if (from.has_hcontainer()) {
    hcontainer_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hcontainer_);
  } else {
    hcontainer_ = nullptr;
  }
  if (from.has_ulalgid()) {
    ulalgid_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulalgid_);
  } else {
    ulalgid_ = nullptr;
  }
  if (from.has_ptempeccpubkeyblob()) {
    ptempeccpubkeyblob_ = new ::com::westone::skf::SKF_ECCPUBLICKEYBLOB(*from.ptempeccpubkeyblob_);
  } else {
    ptempeccpubkeyblob_ = nullptr;
  }
  if (from.has_ulidlen()) {
    ulidlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulidlen_);
  } else {
    ulidlen_ = nullptr;
  }
  if (from.has_phagreementhandle()) {
    phagreementhandle_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.phagreementhandle_);
  } else {
    phagreementhandle_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC)
}

void Req_SKF_GenerateAgreementDataWithECC::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_GenerateAgreementDataWithECC_skf_2eproto.base);
  pbid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hcontainer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phagreementhandle_) -
      reinterpret_cast<char*>(&hcontainer_)) + sizeof(phagreementhandle_));
}

Req_SKF_GenerateAgreementDataWithECC::~Req_SKF_GenerateAgreementDataWithECC() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC)
  SharedDtor();
}

void Req_SKF_GenerateAgreementDataWithECC::SharedDtor() {
  pbid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hcontainer_;
  if (this != internal_default_instance()) delete ulalgid_;
  if (this != internal_default_instance()) delete ptempeccpubkeyblob_;
  if (this != internal_default_instance()) delete ulidlen_;
  if (this != internal_default_instance()) delete phagreementhandle_;
}

void Req_SKF_GenerateAgreementDataWithECC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_GenerateAgreementDataWithECC& Req_SKF_GenerateAgreementDataWithECC::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_GenerateAgreementDataWithECC_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_GenerateAgreementDataWithECC::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulalgid_ != nullptr) {
    delete ulalgid_;
  }
  ulalgid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ptempeccpubkeyblob_ != nullptr) {
    delete ptempeccpubkeyblob_;
  }
  ptempeccpubkeyblob_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulidlen_ != nullptr) {
    delete ulidlen_;
  }
  ulidlen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && phagreementhandle_ != nullptr) {
    delete phagreementhandle_;
  }
  phagreementhandle_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_GenerateAgreementDataWithECC::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_GenerateAgreementDataWithECC*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hcontainer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulalgid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::_InternalParse;
        object = msg->mutable_ptempeccpubkeyblob();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbID = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulIDLen = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulidlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 phAgreementHandle = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_phagreementhandle();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_GenerateAgreementDataWithECC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hcontainer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulalgid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ptempeccpubkeyblob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulIDLen = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulidlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 phAgreementHandle = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phagreementhandle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_GenerateAgreementDataWithECC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hcontainer(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
  if (this->has_ulalgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::ulalgid(this), output);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 3;
  if (this->has_ptempeccpubkeyblob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::ptempeccpubkeyblob(this), output);
  }

  // bytes pbID = 4;
  if (this->pbid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->pbid(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulIDLen = 5;
  if (this->has_ulidlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::ulidlen(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phAgreementHandle = 6;
  if (this->has_phagreementhandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::phagreementhandle(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC)
}

::google::protobuf::uint8* Req_SKF_GenerateAgreementDataWithECC::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hcontainer(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
  if (this->has_ulalgid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::ulalgid(this), target);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 3;
  if (this->has_ptempeccpubkeyblob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::ptempeccpubkeyblob(this), target);
  }

  // bytes pbID = 4;
  if (this->pbid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->pbid(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulIDLen = 5;
  if (this->has_ulidlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::ulidlen(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phAgreementHandle = 6;
  if (this->has_phagreementhandle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::phagreementhandle(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC)
  return target;
}

size_t Req_SKF_GenerateAgreementDataWithECC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbID = 4;
  if (this->pbid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbid());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hcontainer_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
  if (this->has_ulalgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulalgid_);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 3;
  if (this->has_ptempeccpubkeyblob()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ptempeccpubkeyblob_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulIDLen = 5;
  if (this->has_ulidlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulidlen_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phAgreementHandle = 6;
  if (this->has_phagreementhandle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *phagreementhandle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_GenerateAgreementDataWithECC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_GenerateAgreementDataWithECC* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_GenerateAgreementDataWithECC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC)
    MergeFrom(*source);
  }
}

void Req_SKF_GenerateAgreementDataWithECC::MergeFrom(const Req_SKF_GenerateAgreementDataWithECC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbid().size() > 0) {

    pbid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbid_);
  }
  if (from.has_hcontainer()) {
    mutable_hcontainer()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hcontainer());
  }
  if (from.has_ulalgid()) {
    mutable_ulalgid()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulalgid());
  }
  if (from.has_ptempeccpubkeyblob()) {
    mutable_ptempeccpubkeyblob()->::com::westone::skf::SKF_ECCPUBLICKEYBLOB::MergeFrom(from.ptempeccpubkeyblob());
  }
  if (from.has_ulidlen()) {
    mutable_ulidlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulidlen());
  }
  if (from.has_phagreementhandle()) {
    mutable_phagreementhandle()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.phagreementhandle());
  }
}

void Req_SKF_GenerateAgreementDataWithECC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_GenerateAgreementDataWithECC::CopyFrom(const Req_SKF_GenerateAgreementDataWithECC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_GenerateAgreementDataWithECC::IsInitialized() const {
  return true;
}

void Req_SKF_GenerateAgreementDataWithECC::Swap(Req_SKF_GenerateAgreementDataWithECC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_GenerateAgreementDataWithECC::InternalSwap(Req_SKF_GenerateAgreementDataWithECC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbid_.Swap(&other->pbid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hcontainer_, other->hcontainer_);
  swap(ulalgid_, other->ulalgid_);
  swap(ptempeccpubkeyblob_, other->ptempeccpubkeyblob_);
  swap(ulidlen_, other->ulidlen_);
  swap(phagreementhandle_, other->phagreementhandle_);
}

::google::protobuf::Metadata Req_SKF_GenerateAgreementDataWithECC::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_GenerateAgreementDataWithECC::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_GenerateAgreementDataWithECC_default_instance_._instance.get_mutable()->ptempeccpubkeyblob_ = const_cast< ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::internal_default_instance());
  ::com::westone::skf::_Rsp_SKF_GenerateAgreementDataWithECC_default_instance_._instance.get_mutable()->phagreementhandle_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_GenerateAgreementDataWithECC::HasBitSetters {
 public:
  static const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& ptempeccpubkeyblob(const Rsp_SKF_GenerateAgreementDataWithECC* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& phagreementhandle(const Rsp_SKF_GenerateAgreementDataWithECC* msg);
};

const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB&
Rsp_SKF_GenerateAgreementDataWithECC::HasBitSetters::ptempeccpubkeyblob(const Rsp_SKF_GenerateAgreementDataWithECC* msg) {
  return *msg->ptempeccpubkeyblob_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_GenerateAgreementDataWithECC::HasBitSetters::phagreementhandle(const Rsp_SKF_GenerateAgreementDataWithECC* msg) {
  return *msg->phagreementhandle_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_GenerateAgreementDataWithECC::kPTempECCPubKeyBlobFieldNumber;
const int Rsp_SKF_GenerateAgreementDataWithECC::kPhAgreementHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_GenerateAgreementDataWithECC::Rsp_SKF_GenerateAgreementDataWithECC()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_GenerateAgreementDataWithECC)
}
Rsp_SKF_GenerateAgreementDataWithECC::Rsp_SKF_GenerateAgreementDataWithECC(const Rsp_SKF_GenerateAgreementDataWithECC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ptempeccpubkeyblob()) {
    ptempeccpubkeyblob_ = new ::com::westone::skf::SKF_ECCPUBLICKEYBLOB(*from.ptempeccpubkeyblob_);
  } else {
    ptempeccpubkeyblob_ = nullptr;
  }
  if (from.has_phagreementhandle()) {
    phagreementhandle_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.phagreementhandle_);
  } else {
    phagreementhandle_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_GenerateAgreementDataWithECC)
}

void Rsp_SKF_GenerateAgreementDataWithECC::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_GenerateAgreementDataWithECC_skf_2eproto.base);
  ::memset(&ptempeccpubkeyblob_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phagreementhandle_) -
      reinterpret_cast<char*>(&ptempeccpubkeyblob_)) + sizeof(phagreementhandle_));
}

Rsp_SKF_GenerateAgreementDataWithECC::~Rsp_SKF_GenerateAgreementDataWithECC() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_GenerateAgreementDataWithECC)
  SharedDtor();
}

void Rsp_SKF_GenerateAgreementDataWithECC::SharedDtor() {
  if (this != internal_default_instance()) delete ptempeccpubkeyblob_;
  if (this != internal_default_instance()) delete phagreementhandle_;
}

void Rsp_SKF_GenerateAgreementDataWithECC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_GenerateAgreementDataWithECC& Rsp_SKF_GenerateAgreementDataWithECC::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_GenerateAgreementDataWithECC_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_GenerateAgreementDataWithECC::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_GenerateAgreementDataWithECC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ptempeccpubkeyblob_ != nullptr) {
    delete ptempeccpubkeyblob_;
  }
  ptempeccpubkeyblob_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && phagreementhandle_ != nullptr) {
    delete phagreementhandle_;
  }
  phagreementhandle_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_GenerateAgreementDataWithECC::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_GenerateAgreementDataWithECC*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::_InternalParse;
        object = msg->mutable_ptempeccpubkeyblob();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 phAgreementHandle = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_phagreementhandle();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_GenerateAgreementDataWithECC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_GenerateAgreementDataWithECC)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ptempeccpubkeyblob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 phAgreementHandle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phagreementhandle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_GenerateAgreementDataWithECC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_GenerateAgreementDataWithECC)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_GenerateAgreementDataWithECC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_GenerateAgreementDataWithECC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 1;
  if (this->has_ptempeccpubkeyblob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ptempeccpubkeyblob(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phAgreementHandle = 2;
  if (this->has_phagreementhandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::phagreementhandle(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_GenerateAgreementDataWithECC)
}

::google::protobuf::uint8* Rsp_SKF_GenerateAgreementDataWithECC::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_GenerateAgreementDataWithECC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 1;
  if (this->has_ptempeccpubkeyblob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ptempeccpubkeyblob(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phAgreementHandle = 2;
  if (this->has_phagreementhandle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::phagreementhandle(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_GenerateAgreementDataWithECC)
  return target;
}

size_t Rsp_SKF_GenerateAgreementDataWithECC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_GenerateAgreementDataWithECC)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 1;
  if (this->has_ptempeccpubkeyblob()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ptempeccpubkeyblob_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phAgreementHandle = 2;
  if (this->has_phagreementhandle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *phagreementhandle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_GenerateAgreementDataWithECC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_GenerateAgreementDataWithECC)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_GenerateAgreementDataWithECC* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_GenerateAgreementDataWithECC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_GenerateAgreementDataWithECC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_GenerateAgreementDataWithECC)
    MergeFrom(*source);
  }
}

void Rsp_SKF_GenerateAgreementDataWithECC::MergeFrom(const Rsp_SKF_GenerateAgreementDataWithECC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_GenerateAgreementDataWithECC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ptempeccpubkeyblob()) {
    mutable_ptempeccpubkeyblob()->::com::westone::skf::SKF_ECCPUBLICKEYBLOB::MergeFrom(from.ptempeccpubkeyblob());
  }
  if (from.has_phagreementhandle()) {
    mutable_phagreementhandle()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.phagreementhandle());
  }
}

void Rsp_SKF_GenerateAgreementDataWithECC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_GenerateAgreementDataWithECC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_GenerateAgreementDataWithECC::CopyFrom(const Rsp_SKF_GenerateAgreementDataWithECC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_GenerateAgreementDataWithECC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_GenerateAgreementDataWithECC::IsInitialized() const {
  return true;
}

void Rsp_SKF_GenerateAgreementDataWithECC::Swap(Rsp_SKF_GenerateAgreementDataWithECC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_GenerateAgreementDataWithECC::InternalSwap(Rsp_SKF_GenerateAgreementDataWithECC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ptempeccpubkeyblob_, other->ptempeccpubkeyblob_);
  swap(phagreementhandle_, other->phagreementhandle_);
}

::google::protobuf::Metadata Rsp_SKF_GenerateAgreementDataWithECC::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_GenerateAgreementDataAndKeyWithECC::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_GenerateAgreementDataAndKeyWithECC_default_instance_._instance.get_mutable()->hcontainer_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_GenerateAgreementDataAndKeyWithECC_default_instance_._instance.get_mutable()->ulalgid_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_GenerateAgreementDataAndKeyWithECC_default_instance_._instance.get_mutable()->psponsoreccpubkeyblob_ = const_cast< ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::internal_default_instance());
  ::com::westone::skf::_Req_SKF_GenerateAgreementDataAndKeyWithECC_default_instance_._instance.get_mutable()->psponsortempeccpubkeyblob_ = const_cast< ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::internal_default_instance());
  ::com::westone::skf::_Req_SKF_GenerateAgreementDataAndKeyWithECC_default_instance_._instance.get_mutable()->ptempeccpubkeyblob_ = const_cast< ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::internal_default_instance());
  ::com::westone::skf::_Req_SKF_GenerateAgreementDataAndKeyWithECC_default_instance_._instance.get_mutable()->ulidlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_GenerateAgreementDataAndKeyWithECC_default_instance_._instance.get_mutable()->ulsponsoridlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_GenerateAgreementDataAndKeyWithECC_default_instance_._instance.get_mutable()->phkeyhandle_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_GenerateAgreementDataAndKeyWithECC::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hcontainer(const Req_SKF_GenerateAgreementDataAndKeyWithECC* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulalgid(const Req_SKF_GenerateAgreementDataAndKeyWithECC* msg);
  static const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& psponsoreccpubkeyblob(const Req_SKF_GenerateAgreementDataAndKeyWithECC* msg);
  static const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& psponsortempeccpubkeyblob(const Req_SKF_GenerateAgreementDataAndKeyWithECC* msg);
  static const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& ptempeccpubkeyblob(const Req_SKF_GenerateAgreementDataAndKeyWithECC* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulidlen(const Req_SKF_GenerateAgreementDataAndKeyWithECC* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulsponsoridlen(const Req_SKF_GenerateAgreementDataAndKeyWithECC* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& phkeyhandle(const Req_SKF_GenerateAgreementDataAndKeyWithECC* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GenerateAgreementDataAndKeyWithECC::HasBitSetters::hcontainer(const Req_SKF_GenerateAgreementDataAndKeyWithECC* msg) {
  return *msg->hcontainer_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GenerateAgreementDataAndKeyWithECC::HasBitSetters::ulalgid(const Req_SKF_GenerateAgreementDataAndKeyWithECC* msg) {
  return *msg->ulalgid_;
}
const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB&
Req_SKF_GenerateAgreementDataAndKeyWithECC::HasBitSetters::psponsoreccpubkeyblob(const Req_SKF_GenerateAgreementDataAndKeyWithECC* msg) {
  return *msg->psponsoreccpubkeyblob_;
}
const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB&
Req_SKF_GenerateAgreementDataAndKeyWithECC::HasBitSetters::psponsortempeccpubkeyblob(const Req_SKF_GenerateAgreementDataAndKeyWithECC* msg) {
  return *msg->psponsortempeccpubkeyblob_;
}
const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB&
Req_SKF_GenerateAgreementDataAndKeyWithECC::HasBitSetters::ptempeccpubkeyblob(const Req_SKF_GenerateAgreementDataAndKeyWithECC* msg) {
  return *msg->ptempeccpubkeyblob_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GenerateAgreementDataAndKeyWithECC::HasBitSetters::ulidlen(const Req_SKF_GenerateAgreementDataAndKeyWithECC* msg) {
  return *msg->ulidlen_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GenerateAgreementDataAndKeyWithECC::HasBitSetters::ulsponsoridlen(const Req_SKF_GenerateAgreementDataAndKeyWithECC* msg) {
  return *msg->ulsponsoridlen_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GenerateAgreementDataAndKeyWithECC::HasBitSetters::phkeyhandle(const Req_SKF_GenerateAgreementDataAndKeyWithECC* msg) {
  return *msg->phkeyhandle_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_GenerateAgreementDataAndKeyWithECC::kHContainerFieldNumber;
const int Req_SKF_GenerateAgreementDataAndKeyWithECC::kUlAlgIDFieldNumber;
const int Req_SKF_GenerateAgreementDataAndKeyWithECC::kPSponsorECCPubKeyBlobFieldNumber;
const int Req_SKF_GenerateAgreementDataAndKeyWithECC::kPSponsorTempECCPubKeyBlobFieldNumber;
const int Req_SKF_GenerateAgreementDataAndKeyWithECC::kPTempECCPubKeyBlobFieldNumber;
const int Req_SKF_GenerateAgreementDataAndKeyWithECC::kPbIDFieldNumber;
const int Req_SKF_GenerateAgreementDataAndKeyWithECC::kUlIDLenFieldNumber;
const int Req_SKF_GenerateAgreementDataAndKeyWithECC::kPbSponsorIDFieldNumber;
const int Req_SKF_GenerateAgreementDataAndKeyWithECC::kUlSponsorIDLenFieldNumber;
const int Req_SKF_GenerateAgreementDataAndKeyWithECC::kPhKeyHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_GenerateAgreementDataAndKeyWithECC::Req_SKF_GenerateAgreementDataAndKeyWithECC()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC)
}
Req_SKF_GenerateAgreementDataAndKeyWithECC::Req_SKF_GenerateAgreementDataAndKeyWithECC(const Req_SKF_GenerateAgreementDataAndKeyWithECC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbid().size() > 0) {
    pbid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbid_);
  }
  pbsponsorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbsponsorid().size() > 0) {
    pbsponsorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbsponsorid_);
  }
  if (from.has_hcontainer()) {
    hcontainer_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hcontainer_);
  } else {
    hcontainer_ = nullptr;
  }
  if (from.has_ulalgid()) {
    ulalgid_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulalgid_);
  } else {
    ulalgid_ = nullptr;
  }
  if (from.has_psponsoreccpubkeyblob()) {
    psponsoreccpubkeyblob_ = new ::com::westone::skf::SKF_ECCPUBLICKEYBLOB(*from.psponsoreccpubkeyblob_);
  } else {
    psponsoreccpubkeyblob_ = nullptr;
  }
  if (from.has_psponsortempeccpubkeyblob()) {
    psponsortempeccpubkeyblob_ = new ::com::westone::skf::SKF_ECCPUBLICKEYBLOB(*from.psponsortempeccpubkeyblob_);
  } else {
    psponsortempeccpubkeyblob_ = nullptr;
  }
  if (from.has_ptempeccpubkeyblob()) {
    ptempeccpubkeyblob_ = new ::com::westone::skf::SKF_ECCPUBLICKEYBLOB(*from.ptempeccpubkeyblob_);
  } else {
    ptempeccpubkeyblob_ = nullptr;
  }
  if (from.has_ulidlen()) {
    ulidlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulidlen_);
  } else {
    ulidlen_ = nullptr;
  }
  if (from.has_ulsponsoridlen()) {
    ulsponsoridlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulsponsoridlen_);
  } else {
    ulsponsoridlen_ = nullptr;
  }
  if (from.has_phkeyhandle()) {
    phkeyhandle_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.phkeyhandle_);
  } else {
    phkeyhandle_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC)
}

void Req_SKF_GenerateAgreementDataAndKeyWithECC::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_GenerateAgreementDataAndKeyWithECC_skf_2eproto.base);
  pbid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbsponsorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hcontainer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phkeyhandle_) -
      reinterpret_cast<char*>(&hcontainer_)) + sizeof(phkeyhandle_));
}

Req_SKF_GenerateAgreementDataAndKeyWithECC::~Req_SKF_GenerateAgreementDataAndKeyWithECC() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC)
  SharedDtor();
}

void Req_SKF_GenerateAgreementDataAndKeyWithECC::SharedDtor() {
  pbid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbsponsorid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hcontainer_;
  if (this != internal_default_instance()) delete ulalgid_;
  if (this != internal_default_instance()) delete psponsoreccpubkeyblob_;
  if (this != internal_default_instance()) delete psponsortempeccpubkeyblob_;
  if (this != internal_default_instance()) delete ptempeccpubkeyblob_;
  if (this != internal_default_instance()) delete ulidlen_;
  if (this != internal_default_instance()) delete ulsponsoridlen_;
  if (this != internal_default_instance()) delete phkeyhandle_;
}

void Req_SKF_GenerateAgreementDataAndKeyWithECC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_GenerateAgreementDataAndKeyWithECC& Req_SKF_GenerateAgreementDataAndKeyWithECC::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_GenerateAgreementDataAndKeyWithECC_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_GenerateAgreementDataAndKeyWithECC::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbsponsorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulalgid_ != nullptr) {
    delete ulalgid_;
  }
  ulalgid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && psponsoreccpubkeyblob_ != nullptr) {
    delete psponsoreccpubkeyblob_;
  }
  psponsoreccpubkeyblob_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && psponsortempeccpubkeyblob_ != nullptr) {
    delete psponsortempeccpubkeyblob_;
  }
  psponsortempeccpubkeyblob_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ptempeccpubkeyblob_ != nullptr) {
    delete ptempeccpubkeyblob_;
  }
  ptempeccpubkeyblob_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulidlen_ != nullptr) {
    delete ulidlen_;
  }
  ulidlen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulsponsoridlen_ != nullptr) {
    delete ulsponsoridlen_;
  }
  ulsponsoridlen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && phkeyhandle_ != nullptr) {
    delete phkeyhandle_;
  }
  phkeyhandle_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_GenerateAgreementDataAndKeyWithECC::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_GenerateAgreementDataAndKeyWithECC*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hcontainer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulalgid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pSponsorECCPubKeyBlob = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::_InternalParse;
        object = msg->mutable_psponsoreccpubkeyblob();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pSponsorTempECCPubKeyBlob = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::_InternalParse;
        object = msg->mutable_psponsortempeccpubkeyblob();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::_InternalParse;
        object = msg->mutable_ptempeccpubkeyblob();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbID = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulIDLen = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulidlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbSponsorID = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbsponsorid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulSponsorIDLen = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulsponsoridlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 phKeyHandle = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_phkeyhandle();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_GenerateAgreementDataAndKeyWithECC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hcontainer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulalgid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pSponsorECCPubKeyBlob = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_psponsoreccpubkeyblob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pSponsorTempECCPubKeyBlob = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_psponsortempeccpubkeyblob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ptempeccpubkeyblob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbID = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulIDLen = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulidlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbSponsorID = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbsponsorid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulSponsorIDLen = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulsponsoridlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 phKeyHandle = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phkeyhandle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_GenerateAgreementDataAndKeyWithECC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hcontainer(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
  if (this->has_ulalgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::ulalgid(this), output);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pSponsorECCPubKeyBlob = 3;
  if (this->has_psponsoreccpubkeyblob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::psponsoreccpubkeyblob(this), output);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pSponsorTempECCPubKeyBlob = 4;
  if (this->has_psponsortempeccpubkeyblob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::psponsortempeccpubkeyblob(this), output);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 5;
  if (this->has_ptempeccpubkeyblob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::ptempeccpubkeyblob(this), output);
  }

  // bytes pbID = 6;
  if (this->pbid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->pbid(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulIDLen = 7;
  if (this->has_ulidlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::ulidlen(this), output);
  }

  // bytes pbSponsorID = 8;
  if (this->pbsponsorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->pbsponsorid(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulSponsorIDLen = 9;
  if (this->has_ulsponsoridlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::ulsponsoridlen(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phKeyHandle = 10;
  if (this->has_phkeyhandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::phkeyhandle(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC)
}

::google::protobuf::uint8* Req_SKF_GenerateAgreementDataAndKeyWithECC::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hcontainer(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
  if (this->has_ulalgid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::ulalgid(this), target);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pSponsorECCPubKeyBlob = 3;
  if (this->has_psponsoreccpubkeyblob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::psponsoreccpubkeyblob(this), target);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pSponsorTempECCPubKeyBlob = 4;
  if (this->has_psponsortempeccpubkeyblob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::psponsortempeccpubkeyblob(this), target);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 5;
  if (this->has_ptempeccpubkeyblob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::ptempeccpubkeyblob(this), target);
  }

  // bytes pbID = 6;
  if (this->pbid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->pbid(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulIDLen = 7;
  if (this->has_ulidlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::ulidlen(this), target);
  }

  // bytes pbSponsorID = 8;
  if (this->pbsponsorid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->pbsponsorid(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulSponsorIDLen = 9;
  if (this->has_ulsponsoridlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::ulsponsoridlen(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phKeyHandle = 10;
  if (this->has_phkeyhandle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::phkeyhandle(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC)
  return target;
}

size_t Req_SKF_GenerateAgreementDataAndKeyWithECC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbID = 6;
  if (this->pbid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbid());
  }

  // bytes pbSponsorID = 8;
  if (this->pbsponsorid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbsponsorid());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hcontainer_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
  if (this->has_ulalgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulalgid_);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pSponsorECCPubKeyBlob = 3;
  if (this->has_psponsoreccpubkeyblob()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *psponsoreccpubkeyblob_);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pSponsorTempECCPubKeyBlob = 4;
  if (this->has_psponsortempeccpubkeyblob()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *psponsortempeccpubkeyblob_);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 5;
  if (this->has_ptempeccpubkeyblob()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ptempeccpubkeyblob_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulIDLen = 7;
  if (this->has_ulidlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulidlen_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulSponsorIDLen = 9;
  if (this->has_ulsponsoridlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulsponsoridlen_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phKeyHandle = 10;
  if (this->has_phkeyhandle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *phkeyhandle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_GenerateAgreementDataAndKeyWithECC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_GenerateAgreementDataAndKeyWithECC* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_GenerateAgreementDataAndKeyWithECC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC)
    MergeFrom(*source);
  }
}

void Req_SKF_GenerateAgreementDataAndKeyWithECC::MergeFrom(const Req_SKF_GenerateAgreementDataAndKeyWithECC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbid().size() > 0) {

    pbid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbid_);
  }
  if (from.pbsponsorid().size() > 0) {

    pbsponsorid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbsponsorid_);
  }
  if (from.has_hcontainer()) {
    mutable_hcontainer()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hcontainer());
  }
  if (from.has_ulalgid()) {
    mutable_ulalgid()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulalgid());
  }
  if (from.has_psponsoreccpubkeyblob()) {
    mutable_psponsoreccpubkeyblob()->::com::westone::skf::SKF_ECCPUBLICKEYBLOB::MergeFrom(from.psponsoreccpubkeyblob());
  }
  if (from.has_psponsortempeccpubkeyblob()) {
    mutable_psponsortempeccpubkeyblob()->::com::westone::skf::SKF_ECCPUBLICKEYBLOB::MergeFrom(from.psponsortempeccpubkeyblob());
  }
  if (from.has_ptempeccpubkeyblob()) {
    mutable_ptempeccpubkeyblob()->::com::westone::skf::SKF_ECCPUBLICKEYBLOB::MergeFrom(from.ptempeccpubkeyblob());
  }
  if (from.has_ulidlen()) {
    mutable_ulidlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulidlen());
  }
  if (from.has_ulsponsoridlen()) {
    mutable_ulsponsoridlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulsponsoridlen());
  }
  if (from.has_phkeyhandle()) {
    mutable_phkeyhandle()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.phkeyhandle());
  }
}

void Req_SKF_GenerateAgreementDataAndKeyWithECC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_GenerateAgreementDataAndKeyWithECC::CopyFrom(const Req_SKF_GenerateAgreementDataAndKeyWithECC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_GenerateAgreementDataAndKeyWithECC::IsInitialized() const {
  return true;
}

void Req_SKF_GenerateAgreementDataAndKeyWithECC::Swap(Req_SKF_GenerateAgreementDataAndKeyWithECC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_GenerateAgreementDataAndKeyWithECC::InternalSwap(Req_SKF_GenerateAgreementDataAndKeyWithECC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbid_.Swap(&other->pbid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pbsponsorid_.Swap(&other->pbsponsorid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hcontainer_, other->hcontainer_);
  swap(ulalgid_, other->ulalgid_);
  swap(psponsoreccpubkeyblob_, other->psponsoreccpubkeyblob_);
  swap(psponsortempeccpubkeyblob_, other->psponsortempeccpubkeyblob_);
  swap(ptempeccpubkeyblob_, other->ptempeccpubkeyblob_);
  swap(ulidlen_, other->ulidlen_);
  swap(ulsponsoridlen_, other->ulsponsoridlen_);
  swap(phkeyhandle_, other->phkeyhandle_);
}

::google::protobuf::Metadata Req_SKF_GenerateAgreementDataAndKeyWithECC::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_GenerateAgreementDataAndKeyWithECC::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_GenerateAgreementDataAndKeyWithECC_default_instance_._instance.get_mutable()->ptempeccpubkeyblob_ = const_cast< ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::internal_default_instance());
  ::com::westone::skf::_Rsp_SKF_GenerateAgreementDataAndKeyWithECC_default_instance_._instance.get_mutable()->phagreementhandle_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_GenerateAgreementDataAndKeyWithECC::HasBitSetters {
 public:
  static const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& ptempeccpubkeyblob(const Rsp_SKF_GenerateAgreementDataAndKeyWithECC* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& phagreementhandle(const Rsp_SKF_GenerateAgreementDataAndKeyWithECC* msg);
};

const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB&
Rsp_SKF_GenerateAgreementDataAndKeyWithECC::HasBitSetters::ptempeccpubkeyblob(const Rsp_SKF_GenerateAgreementDataAndKeyWithECC* msg) {
  return *msg->ptempeccpubkeyblob_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_GenerateAgreementDataAndKeyWithECC::HasBitSetters::phagreementhandle(const Rsp_SKF_GenerateAgreementDataAndKeyWithECC* msg) {
  return *msg->phagreementhandle_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_GenerateAgreementDataAndKeyWithECC::kPTempECCPubKeyBlobFieldNumber;
const int Rsp_SKF_GenerateAgreementDataAndKeyWithECC::kPhAgreementHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_GenerateAgreementDataAndKeyWithECC::Rsp_SKF_GenerateAgreementDataAndKeyWithECC()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_GenerateAgreementDataAndKeyWithECC)
}
Rsp_SKF_GenerateAgreementDataAndKeyWithECC::Rsp_SKF_GenerateAgreementDataAndKeyWithECC(const Rsp_SKF_GenerateAgreementDataAndKeyWithECC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ptempeccpubkeyblob()) {
    ptempeccpubkeyblob_ = new ::com::westone::skf::SKF_ECCPUBLICKEYBLOB(*from.ptempeccpubkeyblob_);
  } else {
    ptempeccpubkeyblob_ = nullptr;
  }
  if (from.has_phagreementhandle()) {
    phagreementhandle_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.phagreementhandle_);
  } else {
    phagreementhandle_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_GenerateAgreementDataAndKeyWithECC)
}

void Rsp_SKF_GenerateAgreementDataAndKeyWithECC::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_GenerateAgreementDataAndKeyWithECC_skf_2eproto.base);
  ::memset(&ptempeccpubkeyblob_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phagreementhandle_) -
      reinterpret_cast<char*>(&ptempeccpubkeyblob_)) + sizeof(phagreementhandle_));
}

Rsp_SKF_GenerateAgreementDataAndKeyWithECC::~Rsp_SKF_GenerateAgreementDataAndKeyWithECC() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_GenerateAgreementDataAndKeyWithECC)
  SharedDtor();
}

void Rsp_SKF_GenerateAgreementDataAndKeyWithECC::SharedDtor() {
  if (this != internal_default_instance()) delete ptempeccpubkeyblob_;
  if (this != internal_default_instance()) delete phagreementhandle_;
}

void Rsp_SKF_GenerateAgreementDataAndKeyWithECC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_GenerateAgreementDataAndKeyWithECC& Rsp_SKF_GenerateAgreementDataAndKeyWithECC::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_GenerateAgreementDataAndKeyWithECC_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_GenerateAgreementDataAndKeyWithECC::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_GenerateAgreementDataAndKeyWithECC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ptempeccpubkeyblob_ != nullptr) {
    delete ptempeccpubkeyblob_;
  }
  ptempeccpubkeyblob_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && phagreementhandle_ != nullptr) {
    delete phagreementhandle_;
  }
  phagreementhandle_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_GenerateAgreementDataAndKeyWithECC::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_GenerateAgreementDataAndKeyWithECC*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::_InternalParse;
        object = msg->mutable_ptempeccpubkeyblob();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 phAgreementHandle = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_phagreementhandle();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_GenerateAgreementDataAndKeyWithECC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_GenerateAgreementDataAndKeyWithECC)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ptempeccpubkeyblob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 phAgreementHandle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phagreementhandle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_GenerateAgreementDataAndKeyWithECC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_GenerateAgreementDataAndKeyWithECC)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_GenerateAgreementDataAndKeyWithECC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_GenerateAgreementDataAndKeyWithECC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 1;
  if (this->has_ptempeccpubkeyblob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::ptempeccpubkeyblob(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phAgreementHandle = 2;
  if (this->has_phagreementhandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::phagreementhandle(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_GenerateAgreementDataAndKeyWithECC)
}

::google::protobuf::uint8* Rsp_SKF_GenerateAgreementDataAndKeyWithECC::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_GenerateAgreementDataAndKeyWithECC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 1;
  if (this->has_ptempeccpubkeyblob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::ptempeccpubkeyblob(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phAgreementHandle = 2;
  if (this->has_phagreementhandle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::phagreementhandle(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_GenerateAgreementDataAndKeyWithECC)
  return target;
}

size_t Rsp_SKF_GenerateAgreementDataAndKeyWithECC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_GenerateAgreementDataAndKeyWithECC)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 1;
  if (this->has_ptempeccpubkeyblob()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ptempeccpubkeyblob_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phAgreementHandle = 2;
  if (this->has_phagreementhandle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *phagreementhandle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_GenerateAgreementDataAndKeyWithECC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_GenerateAgreementDataAndKeyWithECC)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_GenerateAgreementDataAndKeyWithECC* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_GenerateAgreementDataAndKeyWithECC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_GenerateAgreementDataAndKeyWithECC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_GenerateAgreementDataAndKeyWithECC)
    MergeFrom(*source);
  }
}

void Rsp_SKF_GenerateAgreementDataAndKeyWithECC::MergeFrom(const Rsp_SKF_GenerateAgreementDataAndKeyWithECC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_GenerateAgreementDataAndKeyWithECC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ptempeccpubkeyblob()) {
    mutable_ptempeccpubkeyblob()->::com::westone::skf::SKF_ECCPUBLICKEYBLOB::MergeFrom(from.ptempeccpubkeyblob());
  }
  if (from.has_phagreementhandle()) {
    mutable_phagreementhandle()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.phagreementhandle());
  }
}

void Rsp_SKF_GenerateAgreementDataAndKeyWithECC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_GenerateAgreementDataAndKeyWithECC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_GenerateAgreementDataAndKeyWithECC::CopyFrom(const Rsp_SKF_GenerateAgreementDataAndKeyWithECC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_GenerateAgreementDataAndKeyWithECC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_GenerateAgreementDataAndKeyWithECC::IsInitialized() const {
  return true;
}

void Rsp_SKF_GenerateAgreementDataAndKeyWithECC::Swap(Rsp_SKF_GenerateAgreementDataAndKeyWithECC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_GenerateAgreementDataAndKeyWithECC::InternalSwap(Rsp_SKF_GenerateAgreementDataAndKeyWithECC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ptempeccpubkeyblob_, other->ptempeccpubkeyblob_);
  swap(phagreementhandle_, other->phagreementhandle_);
}

::google::protobuf::Metadata Rsp_SKF_GenerateAgreementDataAndKeyWithECC::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_GenerateKeyWithECC::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_GenerateKeyWithECC_default_instance_._instance.get_mutable()->hagreementhandle_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_GenerateKeyWithECC_default_instance_._instance.get_mutable()->peccpubkeyblob_ = const_cast< ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::internal_default_instance());
  ::com::westone::skf::_Req_SKF_GenerateKeyWithECC_default_instance_._instance.get_mutable()->ptempeccpubkeyblob_ = const_cast< ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::internal_default_instance());
  ::com::westone::skf::_Req_SKF_GenerateKeyWithECC_default_instance_._instance.get_mutable()->ulidlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_GenerateKeyWithECC_default_instance_._instance.get_mutable()->phkeyhandle_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_GenerateKeyWithECC::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hagreementhandle(const Req_SKF_GenerateKeyWithECC* msg);
  static const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& peccpubkeyblob(const Req_SKF_GenerateKeyWithECC* msg);
  static const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& ptempeccpubkeyblob(const Req_SKF_GenerateKeyWithECC* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulidlen(const Req_SKF_GenerateKeyWithECC* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& phkeyhandle(const Req_SKF_GenerateKeyWithECC* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GenerateKeyWithECC::HasBitSetters::hagreementhandle(const Req_SKF_GenerateKeyWithECC* msg) {
  return *msg->hagreementhandle_;
}
const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB&
Req_SKF_GenerateKeyWithECC::HasBitSetters::peccpubkeyblob(const Req_SKF_GenerateKeyWithECC* msg) {
  return *msg->peccpubkeyblob_;
}
const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB&
Req_SKF_GenerateKeyWithECC::HasBitSetters::ptempeccpubkeyblob(const Req_SKF_GenerateKeyWithECC* msg) {
  return *msg->ptempeccpubkeyblob_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GenerateKeyWithECC::HasBitSetters::ulidlen(const Req_SKF_GenerateKeyWithECC* msg) {
  return *msg->ulidlen_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GenerateKeyWithECC::HasBitSetters::phkeyhandle(const Req_SKF_GenerateKeyWithECC* msg) {
  return *msg->phkeyhandle_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_GenerateKeyWithECC::kHAgreementHandleFieldNumber;
const int Req_SKF_GenerateKeyWithECC::kPECCPubKeyBlobFieldNumber;
const int Req_SKF_GenerateKeyWithECC::kPTempECCPubKeyBlobFieldNumber;
const int Req_SKF_GenerateKeyWithECC::kPbIDFieldNumber;
const int Req_SKF_GenerateKeyWithECC::kUlIDLenFieldNumber;
const int Req_SKF_GenerateKeyWithECC::kPhKeyHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_GenerateKeyWithECC::Req_SKF_GenerateKeyWithECC()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_GenerateKeyWithECC)
}
Req_SKF_GenerateKeyWithECC::Req_SKF_GenerateKeyWithECC(const Req_SKF_GenerateKeyWithECC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbid().size() > 0) {
    pbid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbid_);
  }
  if (from.has_hagreementhandle()) {
    hagreementhandle_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hagreementhandle_);
  } else {
    hagreementhandle_ = nullptr;
  }
  if (from.has_peccpubkeyblob()) {
    peccpubkeyblob_ = new ::com::westone::skf::SKF_ECCPUBLICKEYBLOB(*from.peccpubkeyblob_);
  } else {
    peccpubkeyblob_ = nullptr;
  }
  if (from.has_ptempeccpubkeyblob()) {
    ptempeccpubkeyblob_ = new ::com::westone::skf::SKF_ECCPUBLICKEYBLOB(*from.ptempeccpubkeyblob_);
  } else {
    ptempeccpubkeyblob_ = nullptr;
  }
  if (from.has_ulidlen()) {
    ulidlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulidlen_);
  } else {
    ulidlen_ = nullptr;
  }
  if (from.has_phkeyhandle()) {
    phkeyhandle_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.phkeyhandle_);
  } else {
    phkeyhandle_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_GenerateKeyWithECC)
}

void Req_SKF_GenerateKeyWithECC::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_GenerateKeyWithECC_skf_2eproto.base);
  pbid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hagreementhandle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phkeyhandle_) -
      reinterpret_cast<char*>(&hagreementhandle_)) + sizeof(phkeyhandle_));
}

Req_SKF_GenerateKeyWithECC::~Req_SKF_GenerateKeyWithECC() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_GenerateKeyWithECC)
  SharedDtor();
}

void Req_SKF_GenerateKeyWithECC::SharedDtor() {
  pbid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hagreementhandle_;
  if (this != internal_default_instance()) delete peccpubkeyblob_;
  if (this != internal_default_instance()) delete ptempeccpubkeyblob_;
  if (this != internal_default_instance()) delete ulidlen_;
  if (this != internal_default_instance()) delete phkeyhandle_;
}

void Req_SKF_GenerateKeyWithECC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_GenerateKeyWithECC& Req_SKF_GenerateKeyWithECC::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_GenerateKeyWithECC_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_GenerateKeyWithECC::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_GenerateKeyWithECC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hagreementhandle_ != nullptr) {
    delete hagreementhandle_;
  }
  hagreementhandle_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && peccpubkeyblob_ != nullptr) {
    delete peccpubkeyblob_;
  }
  peccpubkeyblob_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ptempeccpubkeyblob_ != nullptr) {
    delete ptempeccpubkeyblob_;
  }
  ptempeccpubkeyblob_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulidlen_ != nullptr) {
    delete ulidlen_;
  }
  ulidlen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && phkeyhandle_ != nullptr) {
    delete phkeyhandle_;
  }
  phkeyhandle_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_GenerateKeyWithECC::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_GenerateKeyWithECC*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hAgreementHandle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hagreementhandle();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pECCPubKeyBlob = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::_InternalParse;
        object = msg->mutable_peccpubkeyblob();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::_InternalParse;
        object = msg->mutable_ptempeccpubkeyblob();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbID = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulIDLen = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulidlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 phKeyHandle = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_phkeyhandle();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_GenerateKeyWithECC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_GenerateKeyWithECC)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hAgreementHandle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hagreementhandle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pECCPubKeyBlob = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peccpubkeyblob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ptempeccpubkeyblob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulIDLen = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulidlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 phKeyHandle = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phkeyhandle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_GenerateKeyWithECC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_GenerateKeyWithECC)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_GenerateKeyWithECC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_GenerateKeyWithECC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hAgreementHandle = 1;
  if (this->has_hagreementhandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hagreementhandle(this), output);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pECCPubKeyBlob = 2;
  if (this->has_peccpubkeyblob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::peccpubkeyblob(this), output);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 3;
  if (this->has_ptempeccpubkeyblob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::ptempeccpubkeyblob(this), output);
  }

  // bytes pbID = 4;
  if (this->pbid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->pbid(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulIDLen = 5;
  if (this->has_ulidlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::ulidlen(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phKeyHandle = 6;
  if (this->has_phkeyhandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::phkeyhandle(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_GenerateKeyWithECC)
}

::google::protobuf::uint8* Req_SKF_GenerateKeyWithECC::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_GenerateKeyWithECC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hAgreementHandle = 1;
  if (this->has_hagreementhandle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hagreementhandle(this), target);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pECCPubKeyBlob = 2;
  if (this->has_peccpubkeyblob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::peccpubkeyblob(this), target);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 3;
  if (this->has_ptempeccpubkeyblob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::ptempeccpubkeyblob(this), target);
  }

  // bytes pbID = 4;
  if (this->pbid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->pbid(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulIDLen = 5;
  if (this->has_ulidlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::ulidlen(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phKeyHandle = 6;
  if (this->has_phkeyhandle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::phkeyhandle(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_GenerateKeyWithECC)
  return target;
}

size_t Req_SKF_GenerateKeyWithECC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_GenerateKeyWithECC)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbID = 4;
  if (this->pbid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbid());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hAgreementHandle = 1;
  if (this->has_hagreementhandle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hagreementhandle_);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pECCPubKeyBlob = 2;
  if (this->has_peccpubkeyblob()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *peccpubkeyblob_);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 3;
  if (this->has_ptempeccpubkeyblob()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ptempeccpubkeyblob_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulIDLen = 5;
  if (this->has_ulidlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulidlen_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phKeyHandle = 6;
  if (this->has_phkeyhandle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *phkeyhandle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_GenerateKeyWithECC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_GenerateKeyWithECC)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_GenerateKeyWithECC* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_GenerateKeyWithECC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_GenerateKeyWithECC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_GenerateKeyWithECC)
    MergeFrom(*source);
  }
}

void Req_SKF_GenerateKeyWithECC::MergeFrom(const Req_SKF_GenerateKeyWithECC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_GenerateKeyWithECC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbid().size() > 0) {

    pbid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbid_);
  }
  if (from.has_hagreementhandle()) {
    mutable_hagreementhandle()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hagreementhandle());
  }
  if (from.has_peccpubkeyblob()) {
    mutable_peccpubkeyblob()->::com::westone::skf::SKF_ECCPUBLICKEYBLOB::MergeFrom(from.peccpubkeyblob());
  }
  if (from.has_ptempeccpubkeyblob()) {
    mutable_ptempeccpubkeyblob()->::com::westone::skf::SKF_ECCPUBLICKEYBLOB::MergeFrom(from.ptempeccpubkeyblob());
  }
  if (from.has_ulidlen()) {
    mutable_ulidlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulidlen());
  }
  if (from.has_phkeyhandle()) {
    mutable_phkeyhandle()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.phkeyhandle());
  }
}

void Req_SKF_GenerateKeyWithECC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_GenerateKeyWithECC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_GenerateKeyWithECC::CopyFrom(const Req_SKF_GenerateKeyWithECC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_GenerateKeyWithECC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_GenerateKeyWithECC::IsInitialized() const {
  return true;
}

void Req_SKF_GenerateKeyWithECC::Swap(Req_SKF_GenerateKeyWithECC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_GenerateKeyWithECC::InternalSwap(Req_SKF_GenerateKeyWithECC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbid_.Swap(&other->pbid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hagreementhandle_, other->hagreementhandle_);
  swap(peccpubkeyblob_, other->peccpubkeyblob_);
  swap(ptempeccpubkeyblob_, other->ptempeccpubkeyblob_);
  swap(ulidlen_, other->ulidlen_);
  swap(phkeyhandle_, other->phkeyhandle_);
}

::google::protobuf::Metadata Req_SKF_GenerateKeyWithECC::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_GenerateKeyWithECC::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_GenerateKeyWithECC_default_instance_._instance.get_mutable()->phkeyhandle_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_GenerateKeyWithECC::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& phkeyhandle(const Rsp_SKF_GenerateKeyWithECC* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_GenerateKeyWithECC::HasBitSetters::phkeyhandle(const Rsp_SKF_GenerateKeyWithECC* msg) {
  return *msg->phkeyhandle_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_GenerateKeyWithECC::kPhKeyHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_GenerateKeyWithECC::Rsp_SKF_GenerateKeyWithECC()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_GenerateKeyWithECC)
}
Rsp_SKF_GenerateKeyWithECC::Rsp_SKF_GenerateKeyWithECC(const Rsp_SKF_GenerateKeyWithECC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_phkeyhandle()) {
    phkeyhandle_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.phkeyhandle_);
  } else {
    phkeyhandle_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_GenerateKeyWithECC)
}

void Rsp_SKF_GenerateKeyWithECC::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_GenerateKeyWithECC_skf_2eproto.base);
  phkeyhandle_ = nullptr;
}

Rsp_SKF_GenerateKeyWithECC::~Rsp_SKF_GenerateKeyWithECC() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_GenerateKeyWithECC)
  SharedDtor();
}

void Rsp_SKF_GenerateKeyWithECC::SharedDtor() {
  if (this != internal_default_instance()) delete phkeyhandle_;
}

void Rsp_SKF_GenerateKeyWithECC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_GenerateKeyWithECC& Rsp_SKF_GenerateKeyWithECC::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_GenerateKeyWithECC_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_GenerateKeyWithECC::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_GenerateKeyWithECC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && phkeyhandle_ != nullptr) {
    delete phkeyhandle_;
  }
  phkeyhandle_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_GenerateKeyWithECC::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_GenerateKeyWithECC*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 phKeyHandle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_phkeyhandle();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_GenerateKeyWithECC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_GenerateKeyWithECC)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 phKeyHandle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phkeyhandle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_GenerateKeyWithECC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_GenerateKeyWithECC)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_GenerateKeyWithECC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_GenerateKeyWithECC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 phKeyHandle = 1;
  if (this->has_phkeyhandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::phkeyhandle(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_GenerateKeyWithECC)
}

::google::protobuf::uint8* Rsp_SKF_GenerateKeyWithECC::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_GenerateKeyWithECC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 phKeyHandle = 1;
  if (this->has_phkeyhandle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::phkeyhandle(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_GenerateKeyWithECC)
  return target;
}

size_t Rsp_SKF_GenerateKeyWithECC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_GenerateKeyWithECC)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 phKeyHandle = 1;
  if (this->has_phkeyhandle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *phkeyhandle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_GenerateKeyWithECC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_GenerateKeyWithECC)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_GenerateKeyWithECC* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_GenerateKeyWithECC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_GenerateKeyWithECC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_GenerateKeyWithECC)
    MergeFrom(*source);
  }
}

void Rsp_SKF_GenerateKeyWithECC::MergeFrom(const Rsp_SKF_GenerateKeyWithECC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_GenerateKeyWithECC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_phkeyhandle()) {
    mutable_phkeyhandle()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.phkeyhandle());
  }
}

void Rsp_SKF_GenerateKeyWithECC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_GenerateKeyWithECC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_GenerateKeyWithECC::CopyFrom(const Rsp_SKF_GenerateKeyWithECC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_GenerateKeyWithECC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_GenerateKeyWithECC::IsInitialized() const {
  return true;
}

void Rsp_SKF_GenerateKeyWithECC::Swap(Rsp_SKF_GenerateKeyWithECC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_GenerateKeyWithECC::InternalSwap(Rsp_SKF_GenerateKeyWithECC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(phkeyhandle_, other->phkeyhandle_);
}

::google::protobuf::Metadata Rsp_SKF_GenerateKeyWithECC::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_ExportPublicKey::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_ExportPublicKey_default_instance_._instance.get_mutable()->hcontainer_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ExportPublicKey_default_instance_._instance.get_mutable()->bsignflag_ = const_cast< ::com::westone::skf::WST_PROTO_BOOL*>(
      ::com::westone::skf::WST_PROTO_BOOL::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ExportPublicKey_default_instance_._instance.get_mutable()->pulbloblen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_ExportPublicKey::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hcontainer(const Req_SKF_ExportPublicKey* msg);
  static const ::com::westone::skf::WST_PROTO_BOOL& bsignflag(const Req_SKF_ExportPublicKey* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& pulbloblen(const Req_SKF_ExportPublicKey* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ExportPublicKey::HasBitSetters::hcontainer(const Req_SKF_ExportPublicKey* msg) {
  return *msg->hcontainer_;
}
const ::com::westone::skf::WST_PROTO_BOOL&
Req_SKF_ExportPublicKey::HasBitSetters::bsignflag(const Req_SKF_ExportPublicKey* msg) {
  return *msg->bsignflag_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ExportPublicKey::HasBitSetters::pulbloblen(const Req_SKF_ExportPublicKey* msg) {
  return *msg->pulbloblen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_ExportPublicKey::kHContainerFieldNumber;
const int Req_SKF_ExportPublicKey::kBSignFlagFieldNumber;
const int Req_SKF_ExportPublicKey::kPbBlobFieldNumber;
const int Req_SKF_ExportPublicKey::kPulBlobLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_ExportPublicKey::Req_SKF_ExportPublicKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_ExportPublicKey)
}
Req_SKF_ExportPublicKey::Req_SKF_ExportPublicKey(const Req_SKF_ExportPublicKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbblob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbblob().size() > 0) {
    pbblob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbblob_);
  }
  if (from.has_hcontainer()) {
    hcontainer_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hcontainer_);
  } else {
    hcontainer_ = nullptr;
  }
  if (from.has_bsignflag()) {
    bsignflag_ = new ::com::westone::skf::WST_PROTO_BOOL(*from.bsignflag_);
  } else {
    bsignflag_ = nullptr;
  }
  if (from.has_pulbloblen()) {
    pulbloblen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulbloblen_);
  } else {
    pulbloblen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_ExportPublicKey)
}

void Req_SKF_ExportPublicKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_ExportPublicKey_skf_2eproto.base);
  pbblob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hcontainer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pulbloblen_) -
      reinterpret_cast<char*>(&hcontainer_)) + sizeof(pulbloblen_));
}

Req_SKF_ExportPublicKey::~Req_SKF_ExportPublicKey() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_ExportPublicKey)
  SharedDtor();
}

void Req_SKF_ExportPublicKey::SharedDtor() {
  pbblob_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hcontainer_;
  if (this != internal_default_instance()) delete bsignflag_;
  if (this != internal_default_instance()) delete pulbloblen_;
}

void Req_SKF_ExportPublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_ExportPublicKey& Req_SKF_ExportPublicKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_ExportPublicKey_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_ExportPublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_ExportPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbblob_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bsignflag_ != nullptr) {
    delete bsignflag_;
  }
  bsignflag_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pulbloblen_ != nullptr) {
    delete pulbloblen_;
  }
  pulbloblen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_ExportPublicKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_ExportPublicKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hcontainer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_BOOL bSignFlag = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_BOOL::_InternalParse;
        object = msg->mutable_bsignflag();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbBlob = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbblob();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulBlobLen = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulbloblen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_ExportPublicKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_ExportPublicKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hcontainer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_BOOL bSignFlag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bsignflag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbBlob = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbblob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulBlobLen = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulbloblen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_ExportPublicKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_ExportPublicKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_ExportPublicKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_ExportPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hcontainer(this), output);
  }

  // .com.westone.skf.WST_PROTO_BOOL bSignFlag = 2;
  if (this->has_bsignflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::bsignflag(this), output);
  }

  // bytes pbBlob = 3;
  if (this->pbblob().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->pbblob(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulBlobLen = 4;
  if (this->has_pulbloblen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::pulbloblen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_ExportPublicKey)
}

::google::protobuf::uint8* Req_SKF_ExportPublicKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_ExportPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hcontainer(this), target);
  }

  // .com.westone.skf.WST_PROTO_BOOL bSignFlag = 2;
  if (this->has_bsignflag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::bsignflag(this), target);
  }

  // bytes pbBlob = 3;
  if (this->pbblob().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->pbblob(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulBlobLen = 4;
  if (this->has_pulbloblen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::pulbloblen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_ExportPublicKey)
  return target;
}

size_t Req_SKF_ExportPublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_ExportPublicKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbBlob = 3;
  if (this->pbblob().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbblob());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hcontainer_);
  }

  // .com.westone.skf.WST_PROTO_BOOL bSignFlag = 2;
  if (this->has_bsignflag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bsignflag_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulBlobLen = 4;
  if (this->has_pulbloblen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulbloblen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_ExportPublicKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_ExportPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_ExportPublicKey* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_ExportPublicKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_ExportPublicKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_ExportPublicKey)
    MergeFrom(*source);
  }
}

void Req_SKF_ExportPublicKey::MergeFrom(const Req_SKF_ExportPublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_ExportPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbblob().size() > 0) {

    pbblob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbblob_);
  }
  if (from.has_hcontainer()) {
    mutable_hcontainer()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hcontainer());
  }
  if (from.has_bsignflag()) {
    mutable_bsignflag()->::com::westone::skf::WST_PROTO_BOOL::MergeFrom(from.bsignflag());
  }
  if (from.has_pulbloblen()) {
    mutable_pulbloblen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulbloblen());
  }
}

void Req_SKF_ExportPublicKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_ExportPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_ExportPublicKey::CopyFrom(const Req_SKF_ExportPublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_ExportPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_ExportPublicKey::IsInitialized() const {
  return true;
}

void Req_SKF_ExportPublicKey::Swap(Req_SKF_ExportPublicKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_ExportPublicKey::InternalSwap(Req_SKF_ExportPublicKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbblob_.Swap(&other->pbblob_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hcontainer_, other->hcontainer_);
  swap(bsignflag_, other->bsignflag_);
  swap(pulbloblen_, other->pulbloblen_);
}

::google::protobuf::Metadata Req_SKF_ExportPublicKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_ExportPublicKey::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_ExportPublicKey_default_instance_._instance.get_mutable()->pulbloblen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_ExportPublicKey::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& pulbloblen(const Rsp_SKF_ExportPublicKey* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_ExportPublicKey::HasBitSetters::pulbloblen(const Rsp_SKF_ExportPublicKey* msg) {
  return *msg->pulbloblen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_ExportPublicKey::kPbBlobFieldNumber;
const int Rsp_SKF_ExportPublicKey::kPulBlobLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_ExportPublicKey::Rsp_SKF_ExportPublicKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_ExportPublicKey)
}
Rsp_SKF_ExportPublicKey::Rsp_SKF_ExportPublicKey(const Rsp_SKF_ExportPublicKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbblob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbblob().size() > 0) {
    pbblob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbblob_);
  }
  if (from.has_pulbloblen()) {
    pulbloblen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulbloblen_);
  } else {
    pulbloblen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_ExportPublicKey)
}

void Rsp_SKF_ExportPublicKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_ExportPublicKey_skf_2eproto.base);
  pbblob_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pulbloblen_ = nullptr;
}

Rsp_SKF_ExportPublicKey::~Rsp_SKF_ExportPublicKey() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_ExportPublicKey)
  SharedDtor();
}

void Rsp_SKF_ExportPublicKey::SharedDtor() {
  pbblob_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pulbloblen_;
}

void Rsp_SKF_ExportPublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_ExportPublicKey& Rsp_SKF_ExportPublicKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_ExportPublicKey_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_ExportPublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_ExportPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbblob_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && pulbloblen_ != nullptr) {
    delete pulbloblen_;
  }
  pulbloblen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_ExportPublicKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_ExportPublicKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes pbBlob = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbblob();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulBlobLen = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulbloblen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_ExportPublicKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_ExportPublicKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes pbBlob = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbblob()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulBlobLen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulbloblen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_ExportPublicKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_ExportPublicKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_ExportPublicKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_ExportPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbBlob = 1;
  if (this->pbblob().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pbblob(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulBlobLen = 2;
  if (this->has_pulbloblen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pulbloblen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_ExportPublicKey)
}

::google::protobuf::uint8* Rsp_SKF_ExportPublicKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_ExportPublicKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbBlob = 1;
  if (this->pbblob().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pbblob(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulBlobLen = 2;
  if (this->has_pulbloblen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pulbloblen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_ExportPublicKey)
  return target;
}

size_t Rsp_SKF_ExportPublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_ExportPublicKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbBlob = 1;
  if (this->pbblob().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbblob());
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulBlobLen = 2;
  if (this->has_pulbloblen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulbloblen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_ExportPublicKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_ExportPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_ExportPublicKey* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_ExportPublicKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_ExportPublicKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_ExportPublicKey)
    MergeFrom(*source);
  }
}

void Rsp_SKF_ExportPublicKey::MergeFrom(const Rsp_SKF_ExportPublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_ExportPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbblob().size() > 0) {

    pbblob_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbblob_);
  }
  if (from.has_pulbloblen()) {
    mutable_pulbloblen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulbloblen());
  }
}

void Rsp_SKF_ExportPublicKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_ExportPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_ExportPublicKey::CopyFrom(const Rsp_SKF_ExportPublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_ExportPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_ExportPublicKey::IsInitialized() const {
  return true;
}

void Rsp_SKF_ExportPublicKey::Swap(Rsp_SKF_ExportPublicKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_ExportPublicKey::InternalSwap(Rsp_SKF_ExportPublicKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbblob_.Swap(&other->pbblob_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pulbloblen_, other->pulbloblen_);
}

::google::protobuf::Metadata Rsp_SKF_ExportPublicKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_ImportSessionKey::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_ImportSessionKey_default_instance_._instance.get_mutable()->hcontainer_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ImportSessionKey_default_instance_._instance.get_mutable()->ulalgid_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ImportSessionKey_default_instance_._instance.get_mutable()->ulwrappedlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ImportSessionKey_default_instance_._instance.get_mutable()->phkey_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_ImportSessionKey::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hcontainer(const Req_SKF_ImportSessionKey* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulalgid(const Req_SKF_ImportSessionKey* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulwrappedlen(const Req_SKF_ImportSessionKey* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& phkey(const Req_SKF_ImportSessionKey* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ImportSessionKey::HasBitSetters::hcontainer(const Req_SKF_ImportSessionKey* msg) {
  return *msg->hcontainer_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ImportSessionKey::HasBitSetters::ulalgid(const Req_SKF_ImportSessionKey* msg) {
  return *msg->ulalgid_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ImportSessionKey::HasBitSetters::ulwrappedlen(const Req_SKF_ImportSessionKey* msg) {
  return *msg->ulwrappedlen_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ImportSessionKey::HasBitSetters::phkey(const Req_SKF_ImportSessionKey* msg) {
  return *msg->phkey_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_ImportSessionKey::kHContainerFieldNumber;
const int Req_SKF_ImportSessionKey::kUlAlgIDFieldNumber;
const int Req_SKF_ImportSessionKey::kPbWrappedDataFieldNumber;
const int Req_SKF_ImportSessionKey::kUlWrappedLenFieldNumber;
const int Req_SKF_ImportSessionKey::kPhKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_ImportSessionKey::Req_SKF_ImportSessionKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_ImportSessionKey)
}
Req_SKF_ImportSessionKey::Req_SKF_ImportSessionKey(const Req_SKF_ImportSessionKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbwrappeddata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbwrappeddata().size() > 0) {
    pbwrappeddata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbwrappeddata_);
  }
  if (from.has_hcontainer()) {
    hcontainer_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hcontainer_);
  } else {
    hcontainer_ = nullptr;
  }
  if (from.has_ulalgid()) {
    ulalgid_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulalgid_);
  } else {
    ulalgid_ = nullptr;
  }
  if (from.has_ulwrappedlen()) {
    ulwrappedlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulwrappedlen_);
  } else {
    ulwrappedlen_ = nullptr;
  }
  if (from.has_phkey()) {
    phkey_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.phkey_);
  } else {
    phkey_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_ImportSessionKey)
}

void Req_SKF_ImportSessionKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_ImportSessionKey_skf_2eproto.base);
  pbwrappeddata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hcontainer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phkey_) -
      reinterpret_cast<char*>(&hcontainer_)) + sizeof(phkey_));
}

Req_SKF_ImportSessionKey::~Req_SKF_ImportSessionKey() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_ImportSessionKey)
  SharedDtor();
}

void Req_SKF_ImportSessionKey::SharedDtor() {
  pbwrappeddata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hcontainer_;
  if (this != internal_default_instance()) delete ulalgid_;
  if (this != internal_default_instance()) delete ulwrappedlen_;
  if (this != internal_default_instance()) delete phkey_;
}

void Req_SKF_ImportSessionKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_ImportSessionKey& Req_SKF_ImportSessionKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_ImportSessionKey_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_ImportSessionKey::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_ImportSessionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbwrappeddata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulalgid_ != nullptr) {
    delete ulalgid_;
  }
  ulalgid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulwrappedlen_ != nullptr) {
    delete ulwrappedlen_;
  }
  ulwrappedlen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && phkey_ != nullptr) {
    delete phkey_;
  }
  phkey_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_ImportSessionKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_ImportSessionKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hcontainer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulalgid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbWrappedData = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbwrappeddata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulWrappedLen = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulwrappedlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 phKey = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_phkey();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_ImportSessionKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_ImportSessionKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hcontainer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulalgid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbWrappedData = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbwrappeddata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulWrappedLen = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulwrappedlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 phKey = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_ImportSessionKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_ImportSessionKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_ImportSessionKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_ImportSessionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hcontainer(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
  if (this->has_ulalgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::ulalgid(this), output);
  }

  // bytes pbWrappedData = 3;
  if (this->pbwrappeddata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->pbwrappeddata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulWrappedLen = 4;
  if (this->has_ulwrappedlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::ulwrappedlen(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phKey = 5;
  if (this->has_phkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::phkey(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_ImportSessionKey)
}

::google::protobuf::uint8* Req_SKF_ImportSessionKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_ImportSessionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hcontainer(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
  if (this->has_ulalgid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::ulalgid(this), target);
  }

  // bytes pbWrappedData = 3;
  if (this->pbwrappeddata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->pbwrappeddata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulWrappedLen = 4;
  if (this->has_ulwrappedlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::ulwrappedlen(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phKey = 5;
  if (this->has_phkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::phkey(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_ImportSessionKey)
  return target;
}

size_t Req_SKF_ImportSessionKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_ImportSessionKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbWrappedData = 3;
  if (this->pbwrappeddata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbwrappeddata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hcontainer_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
  if (this->has_ulalgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulalgid_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulWrappedLen = 4;
  if (this->has_ulwrappedlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulwrappedlen_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phKey = 5;
  if (this->has_phkey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *phkey_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_ImportSessionKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_ImportSessionKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_ImportSessionKey* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_ImportSessionKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_ImportSessionKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_ImportSessionKey)
    MergeFrom(*source);
  }
}

void Req_SKF_ImportSessionKey::MergeFrom(const Req_SKF_ImportSessionKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_ImportSessionKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbwrappeddata().size() > 0) {

    pbwrappeddata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbwrappeddata_);
  }
  if (from.has_hcontainer()) {
    mutable_hcontainer()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hcontainer());
  }
  if (from.has_ulalgid()) {
    mutable_ulalgid()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulalgid());
  }
  if (from.has_ulwrappedlen()) {
    mutable_ulwrappedlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulwrappedlen());
  }
  if (from.has_phkey()) {
    mutable_phkey()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.phkey());
  }
}

void Req_SKF_ImportSessionKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_ImportSessionKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_ImportSessionKey::CopyFrom(const Req_SKF_ImportSessionKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_ImportSessionKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_ImportSessionKey::IsInitialized() const {
  return true;
}

void Req_SKF_ImportSessionKey::Swap(Req_SKF_ImportSessionKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_ImportSessionKey::InternalSwap(Req_SKF_ImportSessionKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbwrappeddata_.Swap(&other->pbwrappeddata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hcontainer_, other->hcontainer_);
  swap(ulalgid_, other->ulalgid_);
  swap(ulwrappedlen_, other->ulwrappedlen_);
  swap(phkey_, other->phkey_);
}

::google::protobuf::Metadata Req_SKF_ImportSessionKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_ImportSessionKey::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_ImportSessionKey_default_instance_._instance.get_mutable()->phkey_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_ImportSessionKey::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& phkey(const Rsp_SKF_ImportSessionKey* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_ImportSessionKey::HasBitSetters::phkey(const Rsp_SKF_ImportSessionKey* msg) {
  return *msg->phkey_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_ImportSessionKey::kPhKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_ImportSessionKey::Rsp_SKF_ImportSessionKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_ImportSessionKey)
}
Rsp_SKF_ImportSessionKey::Rsp_SKF_ImportSessionKey(const Rsp_SKF_ImportSessionKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_phkey()) {
    phkey_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.phkey_);
  } else {
    phkey_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_ImportSessionKey)
}

void Rsp_SKF_ImportSessionKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_ImportSessionKey_skf_2eproto.base);
  phkey_ = nullptr;
}

Rsp_SKF_ImportSessionKey::~Rsp_SKF_ImportSessionKey() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_ImportSessionKey)
  SharedDtor();
}

void Rsp_SKF_ImportSessionKey::SharedDtor() {
  if (this != internal_default_instance()) delete phkey_;
}

void Rsp_SKF_ImportSessionKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_ImportSessionKey& Rsp_SKF_ImportSessionKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_ImportSessionKey_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_ImportSessionKey::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_ImportSessionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && phkey_ != nullptr) {
    delete phkey_;
  }
  phkey_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_ImportSessionKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_ImportSessionKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 phKey = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_phkey();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_ImportSessionKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_ImportSessionKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 phKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_ImportSessionKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_ImportSessionKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_ImportSessionKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_ImportSessionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 phKey = 1;
  if (this->has_phkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::phkey(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_ImportSessionKey)
}

::google::protobuf::uint8* Rsp_SKF_ImportSessionKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_ImportSessionKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 phKey = 1;
  if (this->has_phkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::phkey(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_ImportSessionKey)
  return target;
}

size_t Rsp_SKF_ImportSessionKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_ImportSessionKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 phKey = 1;
  if (this->has_phkey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *phkey_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_ImportSessionKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_ImportSessionKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_ImportSessionKey* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_ImportSessionKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_ImportSessionKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_ImportSessionKey)
    MergeFrom(*source);
  }
}

void Rsp_SKF_ImportSessionKey::MergeFrom(const Rsp_SKF_ImportSessionKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_ImportSessionKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_phkey()) {
    mutable_phkey()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.phkey());
  }
}

void Rsp_SKF_ImportSessionKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_ImportSessionKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_ImportSessionKey::CopyFrom(const Rsp_SKF_ImportSessionKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_ImportSessionKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_ImportSessionKey::IsInitialized() const {
  return true;
}

void Rsp_SKF_ImportSessionKey::Swap(Rsp_SKF_ImportSessionKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_ImportSessionKey::InternalSwap(Rsp_SKF_ImportSessionKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(phkey_, other->phkey_);
}

::google::protobuf::Metadata Rsp_SKF_ImportSessionKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_SetSymmKey::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_SetSymmKey_default_instance_._instance.get_mutable()->hdev_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_SetSymmKey_default_instance_._instance.get_mutable()->ulalgid_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_SetSymmKey_default_instance_._instance.get_mutable()->phkey_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_SetSymmKey::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hdev(const Req_SKF_SetSymmKey* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulalgid(const Req_SKF_SetSymmKey* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& phkey(const Req_SKF_SetSymmKey* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_SetSymmKey::HasBitSetters::hdev(const Req_SKF_SetSymmKey* msg) {
  return *msg->hdev_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_SetSymmKey::HasBitSetters::ulalgid(const Req_SKF_SetSymmKey* msg) {
  return *msg->ulalgid_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_SetSymmKey::HasBitSetters::phkey(const Req_SKF_SetSymmKey* msg) {
  return *msg->phkey_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_SetSymmKey::kHDevFieldNumber;
const int Req_SKF_SetSymmKey::kPbKeyFieldNumber;
const int Req_SKF_SetSymmKey::kUlAlgIDFieldNumber;
const int Req_SKF_SetSymmKey::kPhKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_SetSymmKey::Req_SKF_SetSymmKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_SetSymmKey)
}
Req_SKF_SetSymmKey::Req_SKF_SetSymmKey(const Req_SKF_SetSymmKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbkey().size() > 0) {
    pbkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbkey_);
  }
  if (from.has_hdev()) {
    hdev_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hdev_);
  } else {
    hdev_ = nullptr;
  }
  if (from.has_ulalgid()) {
    ulalgid_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulalgid_);
  } else {
    ulalgid_ = nullptr;
  }
  if (from.has_phkey()) {
    phkey_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.phkey_);
  } else {
    phkey_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_SetSymmKey)
}

void Req_SKF_SetSymmKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_SetSymmKey_skf_2eproto.base);
  pbkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hdev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phkey_) -
      reinterpret_cast<char*>(&hdev_)) + sizeof(phkey_));
}

Req_SKF_SetSymmKey::~Req_SKF_SetSymmKey() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_SetSymmKey)
  SharedDtor();
}

void Req_SKF_SetSymmKey::SharedDtor() {
  pbkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hdev_;
  if (this != internal_default_instance()) delete ulalgid_;
  if (this != internal_default_instance()) delete phkey_;
}

void Req_SKF_SetSymmKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_SetSymmKey& Req_SKF_SetSymmKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_SetSymmKey_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_SetSymmKey::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_SetSymmKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulalgid_ != nullptr) {
    delete ulalgid_;
  }
  ulalgid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && phkey_ != nullptr) {
    delete phkey_;
  }
  phkey_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_SetSymmKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_SetSymmKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hdev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbKey = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbkey();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulalgid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 phKey = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_phkey();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_SetSymmKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_SetSymmKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hdev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulalgid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 phKey = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_SetSymmKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_SetSymmKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_SetSymmKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_SetSymmKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hdev(this), output);
  }

  // bytes pbKey = 2;
  if (this->pbkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pbkey(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 3;
  if (this->has_ulalgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::ulalgid(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phKey = 4;
  if (this->has_phkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::phkey(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_SetSymmKey)
}

::google::protobuf::uint8* Req_SKF_SetSymmKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_SetSymmKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hdev(this), target);
  }

  // bytes pbKey = 2;
  if (this->pbkey().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pbkey(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 3;
  if (this->has_ulalgid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::ulalgid(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phKey = 4;
  if (this->has_phkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::phkey(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_SetSymmKey)
  return target;
}

size_t Req_SKF_SetSymmKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_SetSymmKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbKey = 2;
  if (this->pbkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbkey());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hdev_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 3;
  if (this->has_ulalgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulalgid_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phKey = 4;
  if (this->has_phkey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *phkey_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_SetSymmKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_SetSymmKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_SetSymmKey* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_SetSymmKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_SetSymmKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_SetSymmKey)
    MergeFrom(*source);
  }
}

void Req_SKF_SetSymmKey::MergeFrom(const Req_SKF_SetSymmKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_SetSymmKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbkey().size() > 0) {

    pbkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbkey_);
  }
  if (from.has_hdev()) {
    mutable_hdev()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hdev());
  }
  if (from.has_ulalgid()) {
    mutable_ulalgid()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulalgid());
  }
  if (from.has_phkey()) {
    mutable_phkey()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.phkey());
  }
}

void Req_SKF_SetSymmKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_SetSymmKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_SetSymmKey::CopyFrom(const Req_SKF_SetSymmKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_SetSymmKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_SetSymmKey::IsInitialized() const {
  return true;
}

void Req_SKF_SetSymmKey::Swap(Req_SKF_SetSymmKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_SetSymmKey::InternalSwap(Req_SKF_SetSymmKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbkey_.Swap(&other->pbkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hdev_, other->hdev_);
  swap(ulalgid_, other->ulalgid_);
  swap(phkey_, other->phkey_);
}

::google::protobuf::Metadata Req_SKF_SetSymmKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_SetSymmKey::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_SetSymmKey_default_instance_._instance.get_mutable()->phkey_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_SetSymmKey::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& phkey(const Rsp_SKF_SetSymmKey* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_SetSymmKey::HasBitSetters::phkey(const Rsp_SKF_SetSymmKey* msg) {
  return *msg->phkey_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_SetSymmKey::kPhKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_SetSymmKey::Rsp_SKF_SetSymmKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_SetSymmKey)
}
Rsp_SKF_SetSymmKey::Rsp_SKF_SetSymmKey(const Rsp_SKF_SetSymmKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_phkey()) {
    phkey_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.phkey_);
  } else {
    phkey_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_SetSymmKey)
}

void Rsp_SKF_SetSymmKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_SetSymmKey_skf_2eproto.base);
  phkey_ = nullptr;
}

Rsp_SKF_SetSymmKey::~Rsp_SKF_SetSymmKey() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_SetSymmKey)
  SharedDtor();
}

void Rsp_SKF_SetSymmKey::SharedDtor() {
  if (this != internal_default_instance()) delete phkey_;
}

void Rsp_SKF_SetSymmKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_SetSymmKey& Rsp_SKF_SetSymmKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_SetSymmKey_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_SetSymmKey::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_SetSymmKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && phkey_ != nullptr) {
    delete phkey_;
  }
  phkey_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_SetSymmKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_SetSymmKey*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 phKey = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_phkey();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_SetSymmKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_SetSymmKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 phKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_SetSymmKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_SetSymmKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_SetSymmKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_SetSymmKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 phKey = 1;
  if (this->has_phkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::phkey(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_SetSymmKey)
}

::google::protobuf::uint8* Rsp_SKF_SetSymmKey::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_SetSymmKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 phKey = 1;
  if (this->has_phkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::phkey(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_SetSymmKey)
  return target;
}

size_t Rsp_SKF_SetSymmKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_SetSymmKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 phKey = 1;
  if (this->has_phkey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *phkey_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_SetSymmKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_SetSymmKey)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_SetSymmKey* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_SetSymmKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_SetSymmKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_SetSymmKey)
    MergeFrom(*source);
  }
}

void Rsp_SKF_SetSymmKey::MergeFrom(const Rsp_SKF_SetSymmKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_SetSymmKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_phkey()) {
    mutable_phkey()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.phkey());
  }
}

void Rsp_SKF_SetSymmKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_SetSymmKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_SetSymmKey::CopyFrom(const Rsp_SKF_SetSymmKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_SetSymmKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_SetSymmKey::IsInitialized() const {
  return true;
}

void Rsp_SKF_SetSymmKey::Swap(Rsp_SKF_SetSymmKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_SetSymmKey::InternalSwap(Rsp_SKF_SetSymmKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(phkey_, other->phkey_);
}

::google::protobuf::Metadata Rsp_SKF_SetSymmKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_EncryptInit::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_EncryptInit_default_instance_._instance.get_mutable()->hkey_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_EncryptInit_default_instance_._instance.get_mutable()->encryptparam_ = const_cast< ::com::westone::skf::SKF_BLOCKCIPHERPARAM*>(
      ::com::westone::skf::SKF_BLOCKCIPHERPARAM::internal_default_instance());
}
class Req_SKF_EncryptInit::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hkey(const Req_SKF_EncryptInit* msg);
  static const ::com::westone::skf::SKF_BLOCKCIPHERPARAM& encryptparam(const Req_SKF_EncryptInit* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_EncryptInit::HasBitSetters::hkey(const Req_SKF_EncryptInit* msg) {
  return *msg->hkey_;
}
const ::com::westone::skf::SKF_BLOCKCIPHERPARAM&
Req_SKF_EncryptInit::HasBitSetters::encryptparam(const Req_SKF_EncryptInit* msg) {
  return *msg->encryptparam_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_EncryptInit::kHKeyFieldNumber;
const int Req_SKF_EncryptInit::kEncryptParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_EncryptInit::Req_SKF_EncryptInit()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_EncryptInit)
}
Req_SKF_EncryptInit::Req_SKF_EncryptInit(const Req_SKF_EncryptInit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hkey()) {
    hkey_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hkey_);
  } else {
    hkey_ = nullptr;
  }
  if (from.has_encryptparam()) {
    encryptparam_ = new ::com::westone::skf::SKF_BLOCKCIPHERPARAM(*from.encryptparam_);
  } else {
    encryptparam_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_EncryptInit)
}

void Req_SKF_EncryptInit::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_EncryptInit_skf_2eproto.base);
  ::memset(&hkey_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encryptparam_) -
      reinterpret_cast<char*>(&hkey_)) + sizeof(encryptparam_));
}

Req_SKF_EncryptInit::~Req_SKF_EncryptInit() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_EncryptInit)
  SharedDtor();
}

void Req_SKF_EncryptInit::SharedDtor() {
  if (this != internal_default_instance()) delete hkey_;
  if (this != internal_default_instance()) delete encryptparam_;
}

void Req_SKF_EncryptInit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_EncryptInit& Req_SKF_EncryptInit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_EncryptInit_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_EncryptInit::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_EncryptInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && hkey_ != nullptr) {
    delete hkey_;
  }
  hkey_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && encryptparam_ != nullptr) {
    delete encryptparam_;
  }
  encryptparam_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_EncryptInit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_EncryptInit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hkey();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_BLOCKCIPHERPARAM EncryptParam = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_BLOCKCIPHERPARAM::_InternalParse;
        object = msg->mutable_encryptparam();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_EncryptInit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_EncryptInit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_BLOCKCIPHERPARAM EncryptParam = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_encryptparam()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_EncryptInit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_EncryptInit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_EncryptInit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_EncryptInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  if (this->has_hkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hkey(this), output);
  }

  // .com.westone.skf.SKF_BLOCKCIPHERPARAM EncryptParam = 2;
  if (this->has_encryptparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::encryptparam(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_EncryptInit)
}

::google::protobuf::uint8* Req_SKF_EncryptInit::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_EncryptInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  if (this->has_hkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hkey(this), target);
  }

  // .com.westone.skf.SKF_BLOCKCIPHERPARAM EncryptParam = 2;
  if (this->has_encryptparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::encryptparam(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_EncryptInit)
  return target;
}

size_t Req_SKF_EncryptInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_EncryptInit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  if (this->has_hkey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hkey_);
  }

  // .com.westone.skf.SKF_BLOCKCIPHERPARAM EncryptParam = 2;
  if (this->has_encryptparam()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *encryptparam_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_EncryptInit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_EncryptInit)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_EncryptInit* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_EncryptInit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_EncryptInit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_EncryptInit)
    MergeFrom(*source);
  }
}

void Req_SKF_EncryptInit::MergeFrom(const Req_SKF_EncryptInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_EncryptInit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hkey()) {
    mutable_hkey()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hkey());
  }
  if (from.has_encryptparam()) {
    mutable_encryptparam()->::com::westone::skf::SKF_BLOCKCIPHERPARAM::MergeFrom(from.encryptparam());
  }
}

void Req_SKF_EncryptInit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_EncryptInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_EncryptInit::CopyFrom(const Req_SKF_EncryptInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_EncryptInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_EncryptInit::IsInitialized() const {
  return true;
}

void Req_SKF_EncryptInit::Swap(Req_SKF_EncryptInit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_EncryptInit::InternalSwap(Req_SKF_EncryptInit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(hkey_, other->hkey_);
  swap(encryptparam_, other->encryptparam_);
}

::google::protobuf::Metadata Req_SKF_EncryptInit::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_EncryptInit::InitAsDefaultInstance() {
}
class Rsp_SKF_EncryptInit::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_EncryptInit::Rsp_SKF_EncryptInit()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_EncryptInit)
}
Rsp_SKF_EncryptInit::Rsp_SKF_EncryptInit(const Rsp_SKF_EncryptInit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_EncryptInit)
}

void Rsp_SKF_EncryptInit::SharedCtor() {
}

Rsp_SKF_EncryptInit::~Rsp_SKF_EncryptInit() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_EncryptInit)
  SharedDtor();
}

void Rsp_SKF_EncryptInit::SharedDtor() {
}

void Rsp_SKF_EncryptInit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_EncryptInit& Rsp_SKF_EncryptInit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_EncryptInit_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_EncryptInit::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_EncryptInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_EncryptInit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_EncryptInit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_EncryptInit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_EncryptInit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_EncryptInit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_EncryptInit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_EncryptInit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_EncryptInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_EncryptInit)
}

::google::protobuf::uint8* Rsp_SKF_EncryptInit::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_EncryptInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_EncryptInit)
  return target;
}

size_t Rsp_SKF_EncryptInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_EncryptInit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_EncryptInit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_EncryptInit)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_EncryptInit* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_EncryptInit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_EncryptInit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_EncryptInit)
    MergeFrom(*source);
  }
}

void Rsp_SKF_EncryptInit::MergeFrom(const Rsp_SKF_EncryptInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_EncryptInit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rsp_SKF_EncryptInit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_EncryptInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_EncryptInit::CopyFrom(const Rsp_SKF_EncryptInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_EncryptInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_EncryptInit::IsInitialized() const {
  return true;
}

void Rsp_SKF_EncryptInit::Swap(Rsp_SKF_EncryptInit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_EncryptInit::InternalSwap(Rsp_SKF_EncryptInit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rsp_SKF_EncryptInit::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_Encrypt::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_Encrypt_default_instance_._instance.get_mutable()->hkey_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_Encrypt_default_instance_._instance.get_mutable()->uldatalen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_Encrypt_default_instance_._instance.get_mutable()->pulencryptedlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_Encrypt::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hkey(const Req_SKF_Encrypt* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& uldatalen(const Req_SKF_Encrypt* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& pulencryptedlen(const Req_SKF_Encrypt* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_Encrypt::HasBitSetters::hkey(const Req_SKF_Encrypt* msg) {
  return *msg->hkey_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_Encrypt::HasBitSetters::uldatalen(const Req_SKF_Encrypt* msg) {
  return *msg->uldatalen_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_Encrypt::HasBitSetters::pulencryptedlen(const Req_SKF_Encrypt* msg) {
  return *msg->pulencryptedlen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_Encrypt::kHKeyFieldNumber;
const int Req_SKF_Encrypt::kPbDataFieldNumber;
const int Req_SKF_Encrypt::kUlDataLenFieldNumber;
const int Req_SKF_Encrypt::kPbEncryptedDataFieldNumber;
const int Req_SKF_Encrypt::kPulEncryptedLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_Encrypt::Req_SKF_Encrypt()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_Encrypt)
}
Req_SKF_Encrypt::Req_SKF_Encrypt(const Req_SKF_Encrypt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbdata().size() > 0) {
    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  pbencrypteddata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbencrypteddata().size() > 0) {
    pbencrypteddata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbencrypteddata_);
  }
  if (from.has_hkey()) {
    hkey_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hkey_);
  } else {
    hkey_ = nullptr;
  }
  if (from.has_uldatalen()) {
    uldatalen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.uldatalen_);
  } else {
    uldatalen_ = nullptr;
  }
  if (from.has_pulencryptedlen()) {
    pulencryptedlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulencryptedlen_);
  } else {
    pulencryptedlen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_Encrypt)
}

void Req_SKF_Encrypt::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_Encrypt_skf_2eproto.base);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbencrypteddata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hkey_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pulencryptedlen_) -
      reinterpret_cast<char*>(&hkey_)) + sizeof(pulencryptedlen_));
}

Req_SKF_Encrypt::~Req_SKF_Encrypt() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_Encrypt)
  SharedDtor();
}

void Req_SKF_Encrypt::SharedDtor() {
  pbdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbencrypteddata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hkey_;
  if (this != internal_default_instance()) delete uldatalen_;
  if (this != internal_default_instance()) delete pulencryptedlen_;
}

void Req_SKF_Encrypt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_Encrypt& Req_SKF_Encrypt::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_Encrypt_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_Encrypt::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_Encrypt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbencrypteddata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hkey_ != nullptr) {
    delete hkey_;
  }
  hkey_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && uldatalen_ != nullptr) {
    delete uldatalen_;
  }
  uldatalen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pulencryptedlen_ != nullptr) {
    delete pulencryptedlen_;
  }
  pulencryptedlen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_Encrypt::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_Encrypt*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hkey();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbData = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_uldatalen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbEncryptedData = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbencrypteddata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedLen = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulencryptedlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_Encrypt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_Encrypt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uldatalen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbEncryptedData = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbencrypteddata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedLen = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulencryptedlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_Encrypt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_Encrypt)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_Encrypt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_Encrypt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  if (this->has_hkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hkey(this), output);
  }

  // bytes pbData = 2;
  if (this->pbdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pbdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  if (this->has_uldatalen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::uldatalen(this), output);
  }

  // bytes pbEncryptedData = 4;
  if (this->pbencrypteddata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->pbencrypteddata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedLen = 5;
  if (this->has_pulencryptedlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::pulencryptedlen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_Encrypt)
}

::google::protobuf::uint8* Req_SKF_Encrypt::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_Encrypt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  if (this->has_hkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hkey(this), target);
  }

  // bytes pbData = 2;
  if (this->pbdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pbdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  if (this->has_uldatalen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::uldatalen(this), target);
  }

  // bytes pbEncryptedData = 4;
  if (this->pbencrypteddata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->pbencrypteddata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedLen = 5;
  if (this->has_pulencryptedlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::pulencryptedlen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_Encrypt)
  return target;
}

size_t Req_SKF_Encrypt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_Encrypt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbData = 2;
  if (this->pbdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbdata());
  }

  // bytes pbEncryptedData = 4;
  if (this->pbencrypteddata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbencrypteddata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  if (this->has_hkey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hkey_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  if (this->has_uldatalen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *uldatalen_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedLen = 5;
  if (this->has_pulencryptedlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulencryptedlen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_Encrypt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_Encrypt)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_Encrypt* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_Encrypt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_Encrypt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_Encrypt)
    MergeFrom(*source);
  }
}

void Req_SKF_Encrypt::MergeFrom(const Req_SKF_Encrypt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_Encrypt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbdata().size() > 0) {

    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.pbencrypteddata().size() > 0) {

    pbencrypteddata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbencrypteddata_);
  }
  if (from.has_hkey()) {
    mutable_hkey()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hkey());
  }
  if (from.has_uldatalen()) {
    mutable_uldatalen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.uldatalen());
  }
  if (from.has_pulencryptedlen()) {
    mutable_pulencryptedlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulencryptedlen());
  }
}

void Req_SKF_Encrypt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_Encrypt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_Encrypt::CopyFrom(const Req_SKF_Encrypt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_Encrypt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_Encrypt::IsInitialized() const {
  return true;
}

void Req_SKF_Encrypt::Swap(Req_SKF_Encrypt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_Encrypt::InternalSwap(Req_SKF_Encrypt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbdata_.Swap(&other->pbdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pbencrypteddata_.Swap(&other->pbencrypteddata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hkey_, other->hkey_);
  swap(uldatalen_, other->uldatalen_);
  swap(pulencryptedlen_, other->pulencryptedlen_);
}

::google::protobuf::Metadata Req_SKF_Encrypt::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_Encrypt::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_Encrypt_default_instance_._instance.get_mutable()->pulencryptedlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_Encrypt::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& pulencryptedlen(const Rsp_SKF_Encrypt* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_Encrypt::HasBitSetters::pulencryptedlen(const Rsp_SKF_Encrypt* msg) {
  return *msg->pulencryptedlen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_Encrypt::kPbEncryptedDataFieldNumber;
const int Rsp_SKF_Encrypt::kPulEncryptedLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_Encrypt::Rsp_SKF_Encrypt()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_Encrypt)
}
Rsp_SKF_Encrypt::Rsp_SKF_Encrypt(const Rsp_SKF_Encrypt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbencrypteddata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbencrypteddata().size() > 0) {
    pbencrypteddata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbencrypteddata_);
  }
  if (from.has_pulencryptedlen()) {
    pulencryptedlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulencryptedlen_);
  } else {
    pulencryptedlen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_Encrypt)
}

void Rsp_SKF_Encrypt::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_Encrypt_skf_2eproto.base);
  pbencrypteddata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pulencryptedlen_ = nullptr;
}

Rsp_SKF_Encrypt::~Rsp_SKF_Encrypt() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_Encrypt)
  SharedDtor();
}

void Rsp_SKF_Encrypt::SharedDtor() {
  pbencrypteddata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pulencryptedlen_;
}

void Rsp_SKF_Encrypt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_Encrypt& Rsp_SKF_Encrypt::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_Encrypt_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_Encrypt::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_Encrypt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbencrypteddata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && pulencryptedlen_ != nullptr) {
    delete pulencryptedlen_;
  }
  pulencryptedlen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_Encrypt::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_Encrypt*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes pbEncryptedData = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbencrypteddata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedLen = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulencryptedlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_Encrypt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_Encrypt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes pbEncryptedData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbencrypteddata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedLen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulencryptedlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_Encrypt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_Encrypt)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_Encrypt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_Encrypt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbEncryptedData = 1;
  if (this->pbencrypteddata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pbencrypteddata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedLen = 2;
  if (this->has_pulencryptedlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pulencryptedlen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_Encrypt)
}

::google::protobuf::uint8* Rsp_SKF_Encrypt::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_Encrypt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbEncryptedData = 1;
  if (this->pbencrypteddata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pbencrypteddata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedLen = 2;
  if (this->has_pulencryptedlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pulencryptedlen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_Encrypt)
  return target;
}

size_t Rsp_SKF_Encrypt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_Encrypt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbEncryptedData = 1;
  if (this->pbencrypteddata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbencrypteddata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedLen = 2;
  if (this->has_pulencryptedlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulencryptedlen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_Encrypt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_Encrypt)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_Encrypt* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_Encrypt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_Encrypt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_Encrypt)
    MergeFrom(*source);
  }
}

void Rsp_SKF_Encrypt::MergeFrom(const Rsp_SKF_Encrypt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_Encrypt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbencrypteddata().size() > 0) {

    pbencrypteddata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbencrypteddata_);
  }
  if (from.has_pulencryptedlen()) {
    mutable_pulencryptedlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulencryptedlen());
  }
}

void Rsp_SKF_Encrypt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_Encrypt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_Encrypt::CopyFrom(const Rsp_SKF_Encrypt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_Encrypt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_Encrypt::IsInitialized() const {
  return true;
}

void Rsp_SKF_Encrypt::Swap(Rsp_SKF_Encrypt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_Encrypt::InternalSwap(Rsp_SKF_Encrypt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbencrypteddata_.Swap(&other->pbencrypteddata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pulencryptedlen_, other->pulencryptedlen_);
}

::google::protobuf::Metadata Rsp_SKF_Encrypt::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_EncryptUpdate::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_EncryptUpdate_default_instance_._instance.get_mutable()->hkey_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_EncryptUpdate_default_instance_._instance.get_mutable()->uldatalen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_EncryptUpdate_default_instance_._instance.get_mutable()->pulencryptedlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_EncryptUpdate::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hkey(const Req_SKF_EncryptUpdate* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& uldatalen(const Req_SKF_EncryptUpdate* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& pulencryptedlen(const Req_SKF_EncryptUpdate* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_EncryptUpdate::HasBitSetters::hkey(const Req_SKF_EncryptUpdate* msg) {
  return *msg->hkey_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_EncryptUpdate::HasBitSetters::uldatalen(const Req_SKF_EncryptUpdate* msg) {
  return *msg->uldatalen_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_EncryptUpdate::HasBitSetters::pulencryptedlen(const Req_SKF_EncryptUpdate* msg) {
  return *msg->pulencryptedlen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_EncryptUpdate::kHKeyFieldNumber;
const int Req_SKF_EncryptUpdate::kPbDataFieldNumber;
const int Req_SKF_EncryptUpdate::kUlDataLenFieldNumber;
const int Req_SKF_EncryptUpdate::kPbEncryptedDataFieldNumber;
const int Req_SKF_EncryptUpdate::kPulEncryptedLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_EncryptUpdate::Req_SKF_EncryptUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_EncryptUpdate)
}
Req_SKF_EncryptUpdate::Req_SKF_EncryptUpdate(const Req_SKF_EncryptUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbdata().size() > 0) {
    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  pbencrypteddata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbencrypteddata().size() > 0) {
    pbencrypteddata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbencrypteddata_);
  }
  if (from.has_hkey()) {
    hkey_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hkey_);
  } else {
    hkey_ = nullptr;
  }
  if (from.has_uldatalen()) {
    uldatalen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.uldatalen_);
  } else {
    uldatalen_ = nullptr;
  }
  if (from.has_pulencryptedlen()) {
    pulencryptedlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulencryptedlen_);
  } else {
    pulencryptedlen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_EncryptUpdate)
}

void Req_SKF_EncryptUpdate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_EncryptUpdate_skf_2eproto.base);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbencrypteddata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hkey_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pulencryptedlen_) -
      reinterpret_cast<char*>(&hkey_)) + sizeof(pulencryptedlen_));
}

Req_SKF_EncryptUpdate::~Req_SKF_EncryptUpdate() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_EncryptUpdate)
  SharedDtor();
}

void Req_SKF_EncryptUpdate::SharedDtor() {
  pbdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbencrypteddata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hkey_;
  if (this != internal_default_instance()) delete uldatalen_;
  if (this != internal_default_instance()) delete pulencryptedlen_;
}

void Req_SKF_EncryptUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_EncryptUpdate& Req_SKF_EncryptUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_EncryptUpdate_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_EncryptUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_EncryptUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbencrypteddata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hkey_ != nullptr) {
    delete hkey_;
  }
  hkey_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && uldatalen_ != nullptr) {
    delete uldatalen_;
  }
  uldatalen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pulencryptedlen_ != nullptr) {
    delete pulencryptedlen_;
  }
  pulencryptedlen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_EncryptUpdate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_EncryptUpdate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hkey();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbData = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_uldatalen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbEncryptedData = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbencrypteddata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedLen = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulencryptedlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_EncryptUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_EncryptUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uldatalen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbEncryptedData = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbencrypteddata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedLen = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulencryptedlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_EncryptUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_EncryptUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_EncryptUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_EncryptUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  if (this->has_hkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hkey(this), output);
  }

  // bytes pbData = 2;
  if (this->pbdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pbdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  if (this->has_uldatalen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::uldatalen(this), output);
  }

  // bytes pbEncryptedData = 4;
  if (this->pbencrypteddata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->pbencrypteddata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedLen = 5;
  if (this->has_pulencryptedlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::pulencryptedlen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_EncryptUpdate)
}

::google::protobuf::uint8* Req_SKF_EncryptUpdate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_EncryptUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  if (this->has_hkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hkey(this), target);
  }

  // bytes pbData = 2;
  if (this->pbdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pbdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  if (this->has_uldatalen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::uldatalen(this), target);
  }

  // bytes pbEncryptedData = 4;
  if (this->pbencrypteddata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->pbencrypteddata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedLen = 5;
  if (this->has_pulencryptedlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::pulencryptedlen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_EncryptUpdate)
  return target;
}

size_t Req_SKF_EncryptUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_EncryptUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbData = 2;
  if (this->pbdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbdata());
  }

  // bytes pbEncryptedData = 4;
  if (this->pbencrypteddata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbencrypteddata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  if (this->has_hkey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hkey_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  if (this->has_uldatalen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *uldatalen_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedLen = 5;
  if (this->has_pulencryptedlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulencryptedlen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_EncryptUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_EncryptUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_EncryptUpdate* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_EncryptUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_EncryptUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_EncryptUpdate)
    MergeFrom(*source);
  }
}

void Req_SKF_EncryptUpdate::MergeFrom(const Req_SKF_EncryptUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_EncryptUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbdata().size() > 0) {

    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.pbencrypteddata().size() > 0) {

    pbencrypteddata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbencrypteddata_);
  }
  if (from.has_hkey()) {
    mutable_hkey()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hkey());
  }
  if (from.has_uldatalen()) {
    mutable_uldatalen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.uldatalen());
  }
  if (from.has_pulencryptedlen()) {
    mutable_pulencryptedlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulencryptedlen());
  }
}

void Req_SKF_EncryptUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_EncryptUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_EncryptUpdate::CopyFrom(const Req_SKF_EncryptUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_EncryptUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_EncryptUpdate::IsInitialized() const {
  return true;
}

void Req_SKF_EncryptUpdate::Swap(Req_SKF_EncryptUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_EncryptUpdate::InternalSwap(Req_SKF_EncryptUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbdata_.Swap(&other->pbdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pbencrypteddata_.Swap(&other->pbencrypteddata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hkey_, other->hkey_);
  swap(uldatalen_, other->uldatalen_);
  swap(pulencryptedlen_, other->pulencryptedlen_);
}

::google::protobuf::Metadata Req_SKF_EncryptUpdate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_EncryptUpdate::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_EncryptUpdate_default_instance_._instance.get_mutable()->pulencryptedlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_EncryptUpdate::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& pulencryptedlen(const Rsp_SKF_EncryptUpdate* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_EncryptUpdate::HasBitSetters::pulencryptedlen(const Rsp_SKF_EncryptUpdate* msg) {
  return *msg->pulencryptedlen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_EncryptUpdate::kPbEncryptedDataFieldNumber;
const int Rsp_SKF_EncryptUpdate::kPulEncryptedLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_EncryptUpdate::Rsp_SKF_EncryptUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_EncryptUpdate)
}
Rsp_SKF_EncryptUpdate::Rsp_SKF_EncryptUpdate(const Rsp_SKF_EncryptUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbencrypteddata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbencrypteddata().size() > 0) {
    pbencrypteddata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbencrypteddata_);
  }
  if (from.has_pulencryptedlen()) {
    pulencryptedlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulencryptedlen_);
  } else {
    pulencryptedlen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_EncryptUpdate)
}

void Rsp_SKF_EncryptUpdate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_EncryptUpdate_skf_2eproto.base);
  pbencrypteddata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pulencryptedlen_ = nullptr;
}

Rsp_SKF_EncryptUpdate::~Rsp_SKF_EncryptUpdate() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_EncryptUpdate)
  SharedDtor();
}

void Rsp_SKF_EncryptUpdate::SharedDtor() {
  pbencrypteddata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pulencryptedlen_;
}

void Rsp_SKF_EncryptUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_EncryptUpdate& Rsp_SKF_EncryptUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_EncryptUpdate_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_EncryptUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_EncryptUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbencrypteddata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && pulencryptedlen_ != nullptr) {
    delete pulencryptedlen_;
  }
  pulencryptedlen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_EncryptUpdate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_EncryptUpdate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes pbEncryptedData = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbencrypteddata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedLen = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulencryptedlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_EncryptUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_EncryptUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes pbEncryptedData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbencrypteddata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedLen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulencryptedlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_EncryptUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_EncryptUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_EncryptUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_EncryptUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbEncryptedData = 1;
  if (this->pbencrypteddata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pbencrypteddata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedLen = 2;
  if (this->has_pulencryptedlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pulencryptedlen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_EncryptUpdate)
}

::google::protobuf::uint8* Rsp_SKF_EncryptUpdate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_EncryptUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbEncryptedData = 1;
  if (this->pbencrypteddata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pbencrypteddata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedLen = 2;
  if (this->has_pulencryptedlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pulencryptedlen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_EncryptUpdate)
  return target;
}

size_t Rsp_SKF_EncryptUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_EncryptUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbEncryptedData = 1;
  if (this->pbencrypteddata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbencrypteddata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedLen = 2;
  if (this->has_pulencryptedlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulencryptedlen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_EncryptUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_EncryptUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_EncryptUpdate* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_EncryptUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_EncryptUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_EncryptUpdate)
    MergeFrom(*source);
  }
}

void Rsp_SKF_EncryptUpdate::MergeFrom(const Rsp_SKF_EncryptUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_EncryptUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbencrypteddata().size() > 0) {

    pbencrypteddata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbencrypteddata_);
  }
  if (from.has_pulencryptedlen()) {
    mutable_pulencryptedlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulencryptedlen());
  }
}

void Rsp_SKF_EncryptUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_EncryptUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_EncryptUpdate::CopyFrom(const Rsp_SKF_EncryptUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_EncryptUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_EncryptUpdate::IsInitialized() const {
  return true;
}

void Rsp_SKF_EncryptUpdate::Swap(Rsp_SKF_EncryptUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_EncryptUpdate::InternalSwap(Rsp_SKF_EncryptUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbencrypteddata_.Swap(&other->pbencrypteddata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pulencryptedlen_, other->pulencryptedlen_);
}

::google::protobuf::Metadata Rsp_SKF_EncryptUpdate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_EncryptFinal::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_EncryptFinal_default_instance_._instance.get_mutable()->hkey_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_EncryptFinal_default_instance_._instance.get_mutable()->pulencrypteddatalen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_EncryptFinal::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hkey(const Req_SKF_EncryptFinal* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& pulencrypteddatalen(const Req_SKF_EncryptFinal* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_EncryptFinal::HasBitSetters::hkey(const Req_SKF_EncryptFinal* msg) {
  return *msg->hkey_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_EncryptFinal::HasBitSetters::pulencrypteddatalen(const Req_SKF_EncryptFinal* msg) {
  return *msg->pulencrypteddatalen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_EncryptFinal::kHKeyFieldNumber;
const int Req_SKF_EncryptFinal::kPbEncryptedDataFieldNumber;
const int Req_SKF_EncryptFinal::kPulEncryptedDataLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_EncryptFinal::Req_SKF_EncryptFinal()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_EncryptFinal)
}
Req_SKF_EncryptFinal::Req_SKF_EncryptFinal(const Req_SKF_EncryptFinal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbencrypteddata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbencrypteddata().size() > 0) {
    pbencrypteddata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbencrypteddata_);
  }
  if (from.has_hkey()) {
    hkey_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hkey_);
  } else {
    hkey_ = nullptr;
  }
  if (from.has_pulencrypteddatalen()) {
    pulencrypteddatalen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulencrypteddatalen_);
  } else {
    pulencrypteddatalen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_EncryptFinal)
}

void Req_SKF_EncryptFinal::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_EncryptFinal_skf_2eproto.base);
  pbencrypteddata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hkey_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pulencrypteddatalen_) -
      reinterpret_cast<char*>(&hkey_)) + sizeof(pulencrypteddatalen_));
}

Req_SKF_EncryptFinal::~Req_SKF_EncryptFinal() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_EncryptFinal)
  SharedDtor();
}

void Req_SKF_EncryptFinal::SharedDtor() {
  pbencrypteddata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hkey_;
  if (this != internal_default_instance()) delete pulencrypteddatalen_;
}

void Req_SKF_EncryptFinal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_EncryptFinal& Req_SKF_EncryptFinal::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_EncryptFinal_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_EncryptFinal::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_EncryptFinal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbencrypteddata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hkey_ != nullptr) {
    delete hkey_;
  }
  hkey_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pulencrypteddatalen_ != nullptr) {
    delete pulencrypteddatalen_;
  }
  pulencrypteddatalen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_EncryptFinal::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_EncryptFinal*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hkey();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbEncryptedData = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbencrypteddata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedDataLen = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulencrypteddatalen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_EncryptFinal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_EncryptFinal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbEncryptedData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbencrypteddata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedDataLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulencrypteddatalen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_EncryptFinal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_EncryptFinal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_EncryptFinal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_EncryptFinal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  if (this->has_hkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hkey(this), output);
  }

  // bytes pbEncryptedData = 2;
  if (this->pbencrypteddata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pbencrypteddata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedDataLen = 3;
  if (this->has_pulencrypteddatalen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::pulencrypteddatalen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_EncryptFinal)
}

::google::protobuf::uint8* Req_SKF_EncryptFinal::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_EncryptFinal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  if (this->has_hkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hkey(this), target);
  }

  // bytes pbEncryptedData = 2;
  if (this->pbencrypteddata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pbencrypteddata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedDataLen = 3;
  if (this->has_pulencrypteddatalen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::pulencrypteddatalen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_EncryptFinal)
  return target;
}

size_t Req_SKF_EncryptFinal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_EncryptFinal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbEncryptedData = 2;
  if (this->pbencrypteddata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbencrypteddata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  if (this->has_hkey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hkey_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedDataLen = 3;
  if (this->has_pulencrypteddatalen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulencrypteddatalen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_EncryptFinal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_EncryptFinal)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_EncryptFinal* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_EncryptFinal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_EncryptFinal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_EncryptFinal)
    MergeFrom(*source);
  }
}

void Req_SKF_EncryptFinal::MergeFrom(const Req_SKF_EncryptFinal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_EncryptFinal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbencrypteddata().size() > 0) {

    pbencrypteddata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbencrypteddata_);
  }
  if (from.has_hkey()) {
    mutable_hkey()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hkey());
  }
  if (from.has_pulencrypteddatalen()) {
    mutable_pulencrypteddatalen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulencrypteddatalen());
  }
}

void Req_SKF_EncryptFinal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_EncryptFinal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_EncryptFinal::CopyFrom(const Req_SKF_EncryptFinal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_EncryptFinal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_EncryptFinal::IsInitialized() const {
  return true;
}

void Req_SKF_EncryptFinal::Swap(Req_SKF_EncryptFinal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_EncryptFinal::InternalSwap(Req_SKF_EncryptFinal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbencrypteddata_.Swap(&other->pbencrypteddata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hkey_, other->hkey_);
  swap(pulencrypteddatalen_, other->pulencrypteddatalen_);
}

::google::protobuf::Metadata Req_SKF_EncryptFinal::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_EncryptFinal::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_EncryptFinal_default_instance_._instance.get_mutable()->pulencrypteddatalen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_EncryptFinal::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& pulencrypteddatalen(const Rsp_SKF_EncryptFinal* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_EncryptFinal::HasBitSetters::pulencrypteddatalen(const Rsp_SKF_EncryptFinal* msg) {
  return *msg->pulencrypteddatalen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_EncryptFinal::kPbEncryptedDataFieldNumber;
const int Rsp_SKF_EncryptFinal::kPulEncryptedDataLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_EncryptFinal::Rsp_SKF_EncryptFinal()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_EncryptFinal)
}
Rsp_SKF_EncryptFinal::Rsp_SKF_EncryptFinal(const Rsp_SKF_EncryptFinal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbencrypteddata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbencrypteddata().size() > 0) {
    pbencrypteddata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbencrypteddata_);
  }
  if (from.has_pulencrypteddatalen()) {
    pulencrypteddatalen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulencrypteddatalen_);
  } else {
    pulencrypteddatalen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_EncryptFinal)
}

void Rsp_SKF_EncryptFinal::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_EncryptFinal_skf_2eproto.base);
  pbencrypteddata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pulencrypteddatalen_ = nullptr;
}

Rsp_SKF_EncryptFinal::~Rsp_SKF_EncryptFinal() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_EncryptFinal)
  SharedDtor();
}

void Rsp_SKF_EncryptFinal::SharedDtor() {
  pbencrypteddata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pulencrypteddatalen_;
}

void Rsp_SKF_EncryptFinal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_EncryptFinal& Rsp_SKF_EncryptFinal::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_EncryptFinal_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_EncryptFinal::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_EncryptFinal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbencrypteddata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && pulencrypteddatalen_ != nullptr) {
    delete pulencrypteddatalen_;
  }
  pulencrypteddatalen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_EncryptFinal::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_EncryptFinal*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes pbEncryptedData = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbencrypteddata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedDataLen = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulencrypteddatalen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_EncryptFinal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_EncryptFinal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes pbEncryptedData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbencrypteddata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedDataLen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulencrypteddatalen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_EncryptFinal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_EncryptFinal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_EncryptFinal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_EncryptFinal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbEncryptedData = 1;
  if (this->pbencrypteddata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pbencrypteddata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedDataLen = 2;
  if (this->has_pulencrypteddatalen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pulencrypteddatalen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_EncryptFinal)
}

::google::protobuf::uint8* Rsp_SKF_EncryptFinal::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_EncryptFinal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbEncryptedData = 1;
  if (this->pbencrypteddata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pbencrypteddata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedDataLen = 2;
  if (this->has_pulencrypteddatalen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pulencrypteddatalen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_EncryptFinal)
  return target;
}

size_t Rsp_SKF_EncryptFinal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_EncryptFinal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbEncryptedData = 1;
  if (this->pbencrypteddata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbencrypteddata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedDataLen = 2;
  if (this->has_pulencrypteddatalen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulencrypteddatalen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_EncryptFinal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_EncryptFinal)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_EncryptFinal* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_EncryptFinal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_EncryptFinal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_EncryptFinal)
    MergeFrom(*source);
  }
}

void Rsp_SKF_EncryptFinal::MergeFrom(const Rsp_SKF_EncryptFinal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_EncryptFinal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbencrypteddata().size() > 0) {

    pbencrypteddata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbencrypteddata_);
  }
  if (from.has_pulencrypteddatalen()) {
    mutable_pulencrypteddatalen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulencrypteddatalen());
  }
}

void Rsp_SKF_EncryptFinal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_EncryptFinal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_EncryptFinal::CopyFrom(const Rsp_SKF_EncryptFinal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_EncryptFinal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_EncryptFinal::IsInitialized() const {
  return true;
}

void Rsp_SKF_EncryptFinal::Swap(Rsp_SKF_EncryptFinal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_EncryptFinal::InternalSwap(Rsp_SKF_EncryptFinal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbencrypteddata_.Swap(&other->pbencrypteddata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pulencrypteddatalen_, other->pulencrypteddatalen_);
}

::google::protobuf::Metadata Rsp_SKF_EncryptFinal::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_DecryptInit::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_DecryptInit_default_instance_._instance.get_mutable()->hkey_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_DecryptInit_default_instance_._instance.get_mutable()->decryptparam_ = const_cast< ::com::westone::skf::SKF_BLOCKCIPHERPARAM*>(
      ::com::westone::skf::SKF_BLOCKCIPHERPARAM::internal_default_instance());
}
class Req_SKF_DecryptInit::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hkey(const Req_SKF_DecryptInit* msg);
  static const ::com::westone::skf::SKF_BLOCKCIPHERPARAM& decryptparam(const Req_SKF_DecryptInit* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_DecryptInit::HasBitSetters::hkey(const Req_SKF_DecryptInit* msg) {
  return *msg->hkey_;
}
const ::com::westone::skf::SKF_BLOCKCIPHERPARAM&
Req_SKF_DecryptInit::HasBitSetters::decryptparam(const Req_SKF_DecryptInit* msg) {
  return *msg->decryptparam_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_DecryptInit::kHKeyFieldNumber;
const int Req_SKF_DecryptInit::kDecryptParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_DecryptInit::Req_SKF_DecryptInit()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_DecryptInit)
}
Req_SKF_DecryptInit::Req_SKF_DecryptInit(const Req_SKF_DecryptInit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hkey()) {
    hkey_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hkey_);
  } else {
    hkey_ = nullptr;
  }
  if (from.has_decryptparam()) {
    decryptparam_ = new ::com::westone::skf::SKF_BLOCKCIPHERPARAM(*from.decryptparam_);
  } else {
    decryptparam_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_DecryptInit)
}

void Req_SKF_DecryptInit::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_DecryptInit_skf_2eproto.base);
  ::memset(&hkey_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&decryptparam_) -
      reinterpret_cast<char*>(&hkey_)) + sizeof(decryptparam_));
}

Req_SKF_DecryptInit::~Req_SKF_DecryptInit() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_DecryptInit)
  SharedDtor();
}

void Req_SKF_DecryptInit::SharedDtor() {
  if (this != internal_default_instance()) delete hkey_;
  if (this != internal_default_instance()) delete decryptparam_;
}

void Req_SKF_DecryptInit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_DecryptInit& Req_SKF_DecryptInit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_DecryptInit_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_DecryptInit::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_DecryptInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && hkey_ != nullptr) {
    delete hkey_;
  }
  hkey_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && decryptparam_ != nullptr) {
    delete decryptparam_;
  }
  decryptparam_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_DecryptInit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_DecryptInit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hkey();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_BLOCKCIPHERPARAM DecryptParam = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_BLOCKCIPHERPARAM::_InternalParse;
        object = msg->mutable_decryptparam();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_DecryptInit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_DecryptInit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_BLOCKCIPHERPARAM DecryptParam = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_decryptparam()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_DecryptInit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_DecryptInit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_DecryptInit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_DecryptInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  if (this->has_hkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hkey(this), output);
  }

  // .com.westone.skf.SKF_BLOCKCIPHERPARAM DecryptParam = 2;
  if (this->has_decryptparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::decryptparam(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_DecryptInit)
}

::google::protobuf::uint8* Req_SKF_DecryptInit::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_DecryptInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  if (this->has_hkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hkey(this), target);
  }

  // .com.westone.skf.SKF_BLOCKCIPHERPARAM DecryptParam = 2;
  if (this->has_decryptparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::decryptparam(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_DecryptInit)
  return target;
}

size_t Req_SKF_DecryptInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_DecryptInit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  if (this->has_hkey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hkey_);
  }

  // .com.westone.skf.SKF_BLOCKCIPHERPARAM DecryptParam = 2;
  if (this->has_decryptparam()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *decryptparam_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_DecryptInit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_DecryptInit)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_DecryptInit* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_DecryptInit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_DecryptInit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_DecryptInit)
    MergeFrom(*source);
  }
}

void Req_SKF_DecryptInit::MergeFrom(const Req_SKF_DecryptInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_DecryptInit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hkey()) {
    mutable_hkey()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hkey());
  }
  if (from.has_decryptparam()) {
    mutable_decryptparam()->::com::westone::skf::SKF_BLOCKCIPHERPARAM::MergeFrom(from.decryptparam());
  }
}

void Req_SKF_DecryptInit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_DecryptInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_DecryptInit::CopyFrom(const Req_SKF_DecryptInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_DecryptInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_DecryptInit::IsInitialized() const {
  return true;
}

void Req_SKF_DecryptInit::Swap(Req_SKF_DecryptInit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_DecryptInit::InternalSwap(Req_SKF_DecryptInit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(hkey_, other->hkey_);
  swap(decryptparam_, other->decryptparam_);
}

::google::protobuf::Metadata Req_SKF_DecryptInit::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_DecryptInit::InitAsDefaultInstance() {
}
class Rsp_SKF_DecryptInit::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_DecryptInit::Rsp_SKF_DecryptInit()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_DecryptInit)
}
Rsp_SKF_DecryptInit::Rsp_SKF_DecryptInit(const Rsp_SKF_DecryptInit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_DecryptInit)
}

void Rsp_SKF_DecryptInit::SharedCtor() {
}

Rsp_SKF_DecryptInit::~Rsp_SKF_DecryptInit() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_DecryptInit)
  SharedDtor();
}

void Rsp_SKF_DecryptInit::SharedDtor() {
}

void Rsp_SKF_DecryptInit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_DecryptInit& Rsp_SKF_DecryptInit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_DecryptInit_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_DecryptInit::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_DecryptInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_DecryptInit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_DecryptInit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_DecryptInit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_DecryptInit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_DecryptInit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_DecryptInit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_DecryptInit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_DecryptInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_DecryptInit)
}

::google::protobuf::uint8* Rsp_SKF_DecryptInit::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_DecryptInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_DecryptInit)
  return target;
}

size_t Rsp_SKF_DecryptInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_DecryptInit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_DecryptInit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_DecryptInit)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_DecryptInit* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_DecryptInit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_DecryptInit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_DecryptInit)
    MergeFrom(*source);
  }
}

void Rsp_SKF_DecryptInit::MergeFrom(const Rsp_SKF_DecryptInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_DecryptInit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rsp_SKF_DecryptInit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_DecryptInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_DecryptInit::CopyFrom(const Rsp_SKF_DecryptInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_DecryptInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_DecryptInit::IsInitialized() const {
  return true;
}

void Rsp_SKF_DecryptInit::Swap(Rsp_SKF_DecryptInit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_DecryptInit::InternalSwap(Rsp_SKF_DecryptInit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rsp_SKF_DecryptInit::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_Decrypt::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_Decrypt_default_instance_._instance.get_mutable()->hkey_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_Decrypt_default_instance_._instance.get_mutable()->ulencryptedlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_Decrypt_default_instance_._instance.get_mutable()->puldatalen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_Decrypt::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hkey(const Req_SKF_Decrypt* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulencryptedlen(const Req_SKF_Decrypt* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& puldatalen(const Req_SKF_Decrypt* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_Decrypt::HasBitSetters::hkey(const Req_SKF_Decrypt* msg) {
  return *msg->hkey_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_Decrypt::HasBitSetters::ulencryptedlen(const Req_SKF_Decrypt* msg) {
  return *msg->ulencryptedlen_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_Decrypt::HasBitSetters::puldatalen(const Req_SKF_Decrypt* msg) {
  return *msg->puldatalen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_Decrypt::kHKeyFieldNumber;
const int Req_SKF_Decrypt::kPbEncryptedDataFieldNumber;
const int Req_SKF_Decrypt::kUlEncryptedLenFieldNumber;
const int Req_SKF_Decrypt::kPbDataFieldNumber;
const int Req_SKF_Decrypt::kPulDataLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_Decrypt::Req_SKF_Decrypt()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_Decrypt)
}
Req_SKF_Decrypt::Req_SKF_Decrypt(const Req_SKF_Decrypt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbencrypteddata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbencrypteddata().size() > 0) {
    pbencrypteddata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbencrypteddata_);
  }
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbdata().size() > 0) {
    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.has_hkey()) {
    hkey_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hkey_);
  } else {
    hkey_ = nullptr;
  }
  if (from.has_ulencryptedlen()) {
    ulencryptedlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulencryptedlen_);
  } else {
    ulencryptedlen_ = nullptr;
  }
  if (from.has_puldatalen()) {
    puldatalen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.puldatalen_);
  } else {
    puldatalen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_Decrypt)
}

void Req_SKF_Decrypt::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_Decrypt_skf_2eproto.base);
  pbencrypteddata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hkey_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&puldatalen_) -
      reinterpret_cast<char*>(&hkey_)) + sizeof(puldatalen_));
}

Req_SKF_Decrypt::~Req_SKF_Decrypt() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_Decrypt)
  SharedDtor();
}

void Req_SKF_Decrypt::SharedDtor() {
  pbencrypteddata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hkey_;
  if (this != internal_default_instance()) delete ulencryptedlen_;
  if (this != internal_default_instance()) delete puldatalen_;
}

void Req_SKF_Decrypt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_Decrypt& Req_SKF_Decrypt::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_Decrypt_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_Decrypt::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_Decrypt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbencrypteddata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hkey_ != nullptr) {
    delete hkey_;
  }
  hkey_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulencryptedlen_ != nullptr) {
    delete ulencryptedlen_;
  }
  ulencryptedlen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && puldatalen_ != nullptr) {
    delete puldatalen_;
  }
  puldatalen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_Decrypt::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_Decrypt*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hkey();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbEncryptedData = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbencrypteddata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulEncryptedLen = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulencryptedlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbData = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_puldatalen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_Decrypt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_Decrypt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbEncryptedData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbencrypteddata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulEncryptedLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulencryptedlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbData = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_puldatalen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_Decrypt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_Decrypt)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_Decrypt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_Decrypt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  if (this->has_hkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hkey(this), output);
  }

  // bytes pbEncryptedData = 2;
  if (this->pbencrypteddata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pbencrypteddata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulEncryptedLen = 3;
  if (this->has_ulencryptedlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::ulencryptedlen(this), output);
  }

  // bytes pbData = 4;
  if (this->pbdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->pbdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 5;
  if (this->has_puldatalen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::puldatalen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_Decrypt)
}

::google::protobuf::uint8* Req_SKF_Decrypt::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_Decrypt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  if (this->has_hkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hkey(this), target);
  }

  // bytes pbEncryptedData = 2;
  if (this->pbencrypteddata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pbencrypteddata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulEncryptedLen = 3;
  if (this->has_ulencryptedlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::ulencryptedlen(this), target);
  }

  // bytes pbData = 4;
  if (this->pbdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->pbdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 5;
  if (this->has_puldatalen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::puldatalen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_Decrypt)
  return target;
}

size_t Req_SKF_Decrypt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_Decrypt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbEncryptedData = 2;
  if (this->pbencrypteddata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbencrypteddata());
  }

  // bytes pbData = 4;
  if (this->pbdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbdata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  if (this->has_hkey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hkey_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulEncryptedLen = 3;
  if (this->has_ulencryptedlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulencryptedlen_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 5;
  if (this->has_puldatalen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *puldatalen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_Decrypt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_Decrypt)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_Decrypt* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_Decrypt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_Decrypt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_Decrypt)
    MergeFrom(*source);
  }
}

void Req_SKF_Decrypt::MergeFrom(const Req_SKF_Decrypt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_Decrypt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbencrypteddata().size() > 0) {

    pbencrypteddata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbencrypteddata_);
  }
  if (from.pbdata().size() > 0) {

    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.has_hkey()) {
    mutable_hkey()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hkey());
  }
  if (from.has_ulencryptedlen()) {
    mutable_ulencryptedlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulencryptedlen());
  }
  if (from.has_puldatalen()) {
    mutable_puldatalen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.puldatalen());
  }
}

void Req_SKF_Decrypt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_Decrypt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_Decrypt::CopyFrom(const Req_SKF_Decrypt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_Decrypt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_Decrypt::IsInitialized() const {
  return true;
}

void Req_SKF_Decrypt::Swap(Req_SKF_Decrypt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_Decrypt::InternalSwap(Req_SKF_Decrypt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbencrypteddata_.Swap(&other->pbencrypteddata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pbdata_.Swap(&other->pbdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hkey_, other->hkey_);
  swap(ulencryptedlen_, other->ulencryptedlen_);
  swap(puldatalen_, other->puldatalen_);
}

::google::protobuf::Metadata Req_SKF_Decrypt::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_Decrypt::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_Decrypt_default_instance_._instance.get_mutable()->puldatalen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_Decrypt::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& puldatalen(const Rsp_SKF_Decrypt* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_Decrypt::HasBitSetters::puldatalen(const Rsp_SKF_Decrypt* msg) {
  return *msg->puldatalen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_Decrypt::kPbDataFieldNumber;
const int Rsp_SKF_Decrypt::kPulDataLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_Decrypt::Rsp_SKF_Decrypt()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_Decrypt)
}
Rsp_SKF_Decrypt::Rsp_SKF_Decrypt(const Rsp_SKF_Decrypt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbdata().size() > 0) {
    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.has_puldatalen()) {
    puldatalen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.puldatalen_);
  } else {
    puldatalen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_Decrypt)
}

void Rsp_SKF_Decrypt::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_Decrypt_skf_2eproto.base);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  puldatalen_ = nullptr;
}

Rsp_SKF_Decrypt::~Rsp_SKF_Decrypt() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_Decrypt)
  SharedDtor();
}

void Rsp_SKF_Decrypt::SharedDtor() {
  pbdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete puldatalen_;
}

void Rsp_SKF_Decrypt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_Decrypt& Rsp_SKF_Decrypt::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_Decrypt_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_Decrypt::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_Decrypt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && puldatalen_ != nullptr) {
    delete puldatalen_;
  }
  puldatalen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_Decrypt::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_Decrypt*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes pbData = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_puldatalen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_Decrypt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_Decrypt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes pbData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_puldatalen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_Decrypt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_Decrypt)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_Decrypt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_Decrypt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbData = 1;
  if (this->pbdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pbdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 2;
  if (this->has_puldatalen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::puldatalen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_Decrypt)
}

::google::protobuf::uint8* Rsp_SKF_Decrypt::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_Decrypt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbData = 1;
  if (this->pbdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pbdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 2;
  if (this->has_puldatalen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::puldatalen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_Decrypt)
  return target;
}

size_t Rsp_SKF_Decrypt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_Decrypt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbData = 1;
  if (this->pbdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbdata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 2;
  if (this->has_puldatalen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *puldatalen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_Decrypt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_Decrypt)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_Decrypt* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_Decrypt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_Decrypt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_Decrypt)
    MergeFrom(*source);
  }
}

void Rsp_SKF_Decrypt::MergeFrom(const Rsp_SKF_Decrypt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_Decrypt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbdata().size() > 0) {

    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.has_puldatalen()) {
    mutable_puldatalen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.puldatalen());
  }
}

void Rsp_SKF_Decrypt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_Decrypt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_Decrypt::CopyFrom(const Rsp_SKF_Decrypt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_Decrypt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_Decrypt::IsInitialized() const {
  return true;
}

void Rsp_SKF_Decrypt::Swap(Rsp_SKF_Decrypt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_Decrypt::InternalSwap(Rsp_SKF_Decrypt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbdata_.Swap(&other->pbdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(puldatalen_, other->puldatalen_);
}

::google::protobuf::Metadata Rsp_SKF_Decrypt::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_DecryptUpdate::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_DecryptUpdate_default_instance_._instance.get_mutable()->hkey_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_DecryptUpdate_default_instance_._instance.get_mutable()->ulencryptedlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_DecryptUpdate_default_instance_._instance.get_mutable()->puldatalen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_DecryptUpdate::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hkey(const Req_SKF_DecryptUpdate* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulencryptedlen(const Req_SKF_DecryptUpdate* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& puldatalen(const Req_SKF_DecryptUpdate* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_DecryptUpdate::HasBitSetters::hkey(const Req_SKF_DecryptUpdate* msg) {
  return *msg->hkey_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_DecryptUpdate::HasBitSetters::ulencryptedlen(const Req_SKF_DecryptUpdate* msg) {
  return *msg->ulencryptedlen_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_DecryptUpdate::HasBitSetters::puldatalen(const Req_SKF_DecryptUpdate* msg) {
  return *msg->puldatalen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_DecryptUpdate::kHKeyFieldNumber;
const int Req_SKF_DecryptUpdate::kPbEncryptedDataFieldNumber;
const int Req_SKF_DecryptUpdate::kUlEncryptedLenFieldNumber;
const int Req_SKF_DecryptUpdate::kPbDataFieldNumber;
const int Req_SKF_DecryptUpdate::kPulDataLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_DecryptUpdate::Req_SKF_DecryptUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_DecryptUpdate)
}
Req_SKF_DecryptUpdate::Req_SKF_DecryptUpdate(const Req_SKF_DecryptUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbencrypteddata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbencrypteddata().size() > 0) {
    pbencrypteddata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbencrypteddata_);
  }
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbdata().size() > 0) {
    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.has_hkey()) {
    hkey_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hkey_);
  } else {
    hkey_ = nullptr;
  }
  if (from.has_ulencryptedlen()) {
    ulencryptedlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulencryptedlen_);
  } else {
    ulencryptedlen_ = nullptr;
  }
  if (from.has_puldatalen()) {
    puldatalen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.puldatalen_);
  } else {
    puldatalen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_DecryptUpdate)
}

void Req_SKF_DecryptUpdate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_DecryptUpdate_skf_2eproto.base);
  pbencrypteddata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hkey_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&puldatalen_) -
      reinterpret_cast<char*>(&hkey_)) + sizeof(puldatalen_));
}

Req_SKF_DecryptUpdate::~Req_SKF_DecryptUpdate() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_DecryptUpdate)
  SharedDtor();
}

void Req_SKF_DecryptUpdate::SharedDtor() {
  pbencrypteddata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hkey_;
  if (this != internal_default_instance()) delete ulencryptedlen_;
  if (this != internal_default_instance()) delete puldatalen_;
}

void Req_SKF_DecryptUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_DecryptUpdate& Req_SKF_DecryptUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_DecryptUpdate_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_DecryptUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_DecryptUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbencrypteddata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hkey_ != nullptr) {
    delete hkey_;
  }
  hkey_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulencryptedlen_ != nullptr) {
    delete ulencryptedlen_;
  }
  ulencryptedlen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && puldatalen_ != nullptr) {
    delete puldatalen_;
  }
  puldatalen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_DecryptUpdate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_DecryptUpdate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hkey();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbEncryptedData = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbencrypteddata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulEncryptedLen = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulencryptedlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbData = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_puldatalen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_DecryptUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_DecryptUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbEncryptedData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbencrypteddata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulEncryptedLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulencryptedlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbData = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_puldatalen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_DecryptUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_DecryptUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_DecryptUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_DecryptUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  if (this->has_hkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hkey(this), output);
  }

  // bytes pbEncryptedData = 2;
  if (this->pbencrypteddata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pbencrypteddata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulEncryptedLen = 3;
  if (this->has_ulencryptedlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::ulencryptedlen(this), output);
  }

  // bytes pbData = 4;
  if (this->pbdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->pbdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 5;
  if (this->has_puldatalen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::puldatalen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_DecryptUpdate)
}

::google::protobuf::uint8* Req_SKF_DecryptUpdate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_DecryptUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  if (this->has_hkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hkey(this), target);
  }

  // bytes pbEncryptedData = 2;
  if (this->pbencrypteddata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pbencrypteddata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulEncryptedLen = 3;
  if (this->has_ulencryptedlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::ulencryptedlen(this), target);
  }

  // bytes pbData = 4;
  if (this->pbdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->pbdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 5;
  if (this->has_puldatalen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::puldatalen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_DecryptUpdate)
  return target;
}

size_t Req_SKF_DecryptUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_DecryptUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbEncryptedData = 2;
  if (this->pbencrypteddata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbencrypteddata());
  }

  // bytes pbData = 4;
  if (this->pbdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbdata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  if (this->has_hkey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hkey_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulEncryptedLen = 3;
  if (this->has_ulencryptedlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulencryptedlen_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 5;
  if (this->has_puldatalen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *puldatalen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_DecryptUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_DecryptUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_DecryptUpdate* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_DecryptUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_DecryptUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_DecryptUpdate)
    MergeFrom(*source);
  }
}

void Req_SKF_DecryptUpdate::MergeFrom(const Req_SKF_DecryptUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_DecryptUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbencrypteddata().size() > 0) {

    pbencrypteddata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbencrypteddata_);
  }
  if (from.pbdata().size() > 0) {

    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.has_hkey()) {
    mutable_hkey()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hkey());
  }
  if (from.has_ulencryptedlen()) {
    mutable_ulencryptedlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulencryptedlen());
  }
  if (from.has_puldatalen()) {
    mutable_puldatalen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.puldatalen());
  }
}

void Req_SKF_DecryptUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_DecryptUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_DecryptUpdate::CopyFrom(const Req_SKF_DecryptUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_DecryptUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_DecryptUpdate::IsInitialized() const {
  return true;
}

void Req_SKF_DecryptUpdate::Swap(Req_SKF_DecryptUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_DecryptUpdate::InternalSwap(Req_SKF_DecryptUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbencrypteddata_.Swap(&other->pbencrypteddata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pbdata_.Swap(&other->pbdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hkey_, other->hkey_);
  swap(ulencryptedlen_, other->ulencryptedlen_);
  swap(puldatalen_, other->puldatalen_);
}

::google::protobuf::Metadata Req_SKF_DecryptUpdate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_DecryptUpdate::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_DecryptUpdate_default_instance_._instance.get_mutable()->puldatalen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_DecryptUpdate::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& puldatalen(const Rsp_SKF_DecryptUpdate* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_DecryptUpdate::HasBitSetters::puldatalen(const Rsp_SKF_DecryptUpdate* msg) {
  return *msg->puldatalen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_DecryptUpdate::kPbDataFieldNumber;
const int Rsp_SKF_DecryptUpdate::kPulDataLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_DecryptUpdate::Rsp_SKF_DecryptUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_DecryptUpdate)
}
Rsp_SKF_DecryptUpdate::Rsp_SKF_DecryptUpdate(const Rsp_SKF_DecryptUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbdata().size() > 0) {
    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.has_puldatalen()) {
    puldatalen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.puldatalen_);
  } else {
    puldatalen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_DecryptUpdate)
}

void Rsp_SKF_DecryptUpdate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_DecryptUpdate_skf_2eproto.base);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  puldatalen_ = nullptr;
}

Rsp_SKF_DecryptUpdate::~Rsp_SKF_DecryptUpdate() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_DecryptUpdate)
  SharedDtor();
}

void Rsp_SKF_DecryptUpdate::SharedDtor() {
  pbdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete puldatalen_;
}

void Rsp_SKF_DecryptUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_DecryptUpdate& Rsp_SKF_DecryptUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_DecryptUpdate_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_DecryptUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_DecryptUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && puldatalen_ != nullptr) {
    delete puldatalen_;
  }
  puldatalen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_DecryptUpdate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_DecryptUpdate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes pbData = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_puldatalen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_DecryptUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_DecryptUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes pbData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_puldatalen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_DecryptUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_DecryptUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_DecryptUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_DecryptUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbData = 1;
  if (this->pbdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pbdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 2;
  if (this->has_puldatalen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::puldatalen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_DecryptUpdate)
}

::google::protobuf::uint8* Rsp_SKF_DecryptUpdate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_DecryptUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbData = 1;
  if (this->pbdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pbdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 2;
  if (this->has_puldatalen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::puldatalen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_DecryptUpdate)
  return target;
}

size_t Rsp_SKF_DecryptUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_DecryptUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbData = 1;
  if (this->pbdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbdata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 2;
  if (this->has_puldatalen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *puldatalen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_DecryptUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_DecryptUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_DecryptUpdate* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_DecryptUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_DecryptUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_DecryptUpdate)
    MergeFrom(*source);
  }
}

void Rsp_SKF_DecryptUpdate::MergeFrom(const Rsp_SKF_DecryptUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_DecryptUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbdata().size() > 0) {

    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.has_puldatalen()) {
    mutable_puldatalen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.puldatalen());
  }
}

void Rsp_SKF_DecryptUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_DecryptUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_DecryptUpdate::CopyFrom(const Rsp_SKF_DecryptUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_DecryptUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_DecryptUpdate::IsInitialized() const {
  return true;
}

void Rsp_SKF_DecryptUpdate::Swap(Rsp_SKF_DecryptUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_DecryptUpdate::InternalSwap(Rsp_SKF_DecryptUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbdata_.Swap(&other->pbdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(puldatalen_, other->puldatalen_);
}

::google::protobuf::Metadata Rsp_SKF_DecryptUpdate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_DecryptFinal::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_DecryptFinal_default_instance_._instance.get_mutable()->hkey_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_DecryptFinal_default_instance_._instance.get_mutable()->pulplaintextlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_DecryptFinal::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hkey(const Req_SKF_DecryptFinal* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& pulplaintextlen(const Req_SKF_DecryptFinal* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_DecryptFinal::HasBitSetters::hkey(const Req_SKF_DecryptFinal* msg) {
  return *msg->hkey_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_DecryptFinal::HasBitSetters::pulplaintextlen(const Req_SKF_DecryptFinal* msg) {
  return *msg->pulplaintextlen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_DecryptFinal::kHKeyFieldNumber;
const int Req_SKF_DecryptFinal::kPbPlainTextFieldNumber;
const int Req_SKF_DecryptFinal::kPulPlainTextLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_DecryptFinal::Req_SKF_DecryptFinal()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_DecryptFinal)
}
Req_SKF_DecryptFinal::Req_SKF_DecryptFinal(const Req_SKF_DecryptFinal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbplaintext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbplaintext().size() > 0) {
    pbplaintext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbplaintext_);
  }
  if (from.has_hkey()) {
    hkey_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hkey_);
  } else {
    hkey_ = nullptr;
  }
  if (from.has_pulplaintextlen()) {
    pulplaintextlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulplaintextlen_);
  } else {
    pulplaintextlen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_DecryptFinal)
}

void Req_SKF_DecryptFinal::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_DecryptFinal_skf_2eproto.base);
  pbplaintext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hkey_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pulplaintextlen_) -
      reinterpret_cast<char*>(&hkey_)) + sizeof(pulplaintextlen_));
}

Req_SKF_DecryptFinal::~Req_SKF_DecryptFinal() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_DecryptFinal)
  SharedDtor();
}

void Req_SKF_DecryptFinal::SharedDtor() {
  pbplaintext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hkey_;
  if (this != internal_default_instance()) delete pulplaintextlen_;
}

void Req_SKF_DecryptFinal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_DecryptFinal& Req_SKF_DecryptFinal::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_DecryptFinal_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_DecryptFinal::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_DecryptFinal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbplaintext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hkey_ != nullptr) {
    delete hkey_;
  }
  hkey_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pulplaintextlen_ != nullptr) {
    delete pulplaintextlen_;
  }
  pulplaintextlen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_DecryptFinal::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_DecryptFinal*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hkey();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbPlainText = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbplaintext();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulPlainTextLen = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulplaintextlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_DecryptFinal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_DecryptFinal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbPlainText = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbplaintext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulPlainTextLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulplaintextlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_DecryptFinal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_DecryptFinal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_DecryptFinal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_DecryptFinal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  if (this->has_hkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hkey(this), output);
  }

  // bytes pbPlainText = 2;
  if (this->pbplaintext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pbplaintext(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulPlainTextLen = 3;
  if (this->has_pulplaintextlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::pulplaintextlen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_DecryptFinal)
}

::google::protobuf::uint8* Req_SKF_DecryptFinal::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_DecryptFinal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  if (this->has_hkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hkey(this), target);
  }

  // bytes pbPlainText = 2;
  if (this->pbplaintext().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pbplaintext(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulPlainTextLen = 3;
  if (this->has_pulplaintextlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::pulplaintextlen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_DecryptFinal)
  return target;
}

size_t Req_SKF_DecryptFinal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_DecryptFinal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbPlainText = 2;
  if (this->pbplaintext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbplaintext());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  if (this->has_hkey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hkey_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulPlainTextLen = 3;
  if (this->has_pulplaintextlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulplaintextlen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_DecryptFinal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_DecryptFinal)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_DecryptFinal* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_DecryptFinal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_DecryptFinal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_DecryptFinal)
    MergeFrom(*source);
  }
}

void Req_SKF_DecryptFinal::MergeFrom(const Req_SKF_DecryptFinal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_DecryptFinal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbplaintext().size() > 0) {

    pbplaintext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbplaintext_);
  }
  if (from.has_hkey()) {
    mutable_hkey()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hkey());
  }
  if (from.has_pulplaintextlen()) {
    mutable_pulplaintextlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulplaintextlen());
  }
}

void Req_SKF_DecryptFinal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_DecryptFinal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_DecryptFinal::CopyFrom(const Req_SKF_DecryptFinal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_DecryptFinal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_DecryptFinal::IsInitialized() const {
  return true;
}

void Req_SKF_DecryptFinal::Swap(Req_SKF_DecryptFinal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_DecryptFinal::InternalSwap(Req_SKF_DecryptFinal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbplaintext_.Swap(&other->pbplaintext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hkey_, other->hkey_);
  swap(pulplaintextlen_, other->pulplaintextlen_);
}

::google::protobuf::Metadata Req_SKF_DecryptFinal::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_DecryptFinal::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_DecryptFinal_default_instance_._instance.get_mutable()->pulplaintextlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_DecryptFinal::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& pulplaintextlen(const Rsp_SKF_DecryptFinal* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_DecryptFinal::HasBitSetters::pulplaintextlen(const Rsp_SKF_DecryptFinal* msg) {
  return *msg->pulplaintextlen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_DecryptFinal::kPbPlainTextFieldNumber;
const int Rsp_SKF_DecryptFinal::kPulPlainTextLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_DecryptFinal::Rsp_SKF_DecryptFinal()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_DecryptFinal)
}
Rsp_SKF_DecryptFinal::Rsp_SKF_DecryptFinal(const Rsp_SKF_DecryptFinal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbplaintext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbplaintext().size() > 0) {
    pbplaintext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbplaintext_);
  }
  if (from.has_pulplaintextlen()) {
    pulplaintextlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulplaintextlen_);
  } else {
    pulplaintextlen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_DecryptFinal)
}

void Rsp_SKF_DecryptFinal::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_DecryptFinal_skf_2eproto.base);
  pbplaintext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pulplaintextlen_ = nullptr;
}

Rsp_SKF_DecryptFinal::~Rsp_SKF_DecryptFinal() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_DecryptFinal)
  SharedDtor();
}

void Rsp_SKF_DecryptFinal::SharedDtor() {
  pbplaintext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pulplaintextlen_;
}

void Rsp_SKF_DecryptFinal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_DecryptFinal& Rsp_SKF_DecryptFinal::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_DecryptFinal_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_DecryptFinal::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_DecryptFinal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbplaintext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && pulplaintextlen_ != nullptr) {
    delete pulplaintextlen_;
  }
  pulplaintextlen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_DecryptFinal::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_DecryptFinal*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes pbPlainText = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbplaintext();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulPlainTextLen = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulplaintextlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_DecryptFinal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_DecryptFinal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes pbPlainText = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbplaintext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulPlainTextLen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulplaintextlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_DecryptFinal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_DecryptFinal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_DecryptFinal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_DecryptFinal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbPlainText = 1;
  if (this->pbplaintext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pbplaintext(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulPlainTextLen = 2;
  if (this->has_pulplaintextlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pulplaintextlen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_DecryptFinal)
}

::google::protobuf::uint8* Rsp_SKF_DecryptFinal::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_DecryptFinal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbPlainText = 1;
  if (this->pbplaintext().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pbplaintext(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulPlainTextLen = 2;
  if (this->has_pulplaintextlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pulplaintextlen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_DecryptFinal)
  return target;
}

size_t Rsp_SKF_DecryptFinal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_DecryptFinal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbPlainText = 1;
  if (this->pbplaintext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbplaintext());
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulPlainTextLen = 2;
  if (this->has_pulplaintextlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulplaintextlen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_DecryptFinal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_DecryptFinal)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_DecryptFinal* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_DecryptFinal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_DecryptFinal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_DecryptFinal)
    MergeFrom(*source);
  }
}

void Rsp_SKF_DecryptFinal::MergeFrom(const Rsp_SKF_DecryptFinal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_DecryptFinal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbplaintext().size() > 0) {

    pbplaintext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbplaintext_);
  }
  if (from.has_pulplaintextlen()) {
    mutable_pulplaintextlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulplaintextlen());
  }
}

void Rsp_SKF_DecryptFinal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_DecryptFinal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_DecryptFinal::CopyFrom(const Rsp_SKF_DecryptFinal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_DecryptFinal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_DecryptFinal::IsInitialized() const {
  return true;
}

void Rsp_SKF_DecryptFinal::Swap(Rsp_SKF_DecryptFinal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_DecryptFinal::InternalSwap(Rsp_SKF_DecryptFinal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbplaintext_.Swap(&other->pbplaintext_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pulplaintextlen_, other->pulplaintextlen_);
}

::google::protobuf::Metadata Rsp_SKF_DecryptFinal::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_DigestInit::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_DigestInit_default_instance_._instance.get_mutable()->hdev_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_DigestInit_default_instance_._instance.get_mutable()->ulalgid_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_DigestInit_default_instance_._instance.get_mutable()->ppubkey_ = const_cast< ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::internal_default_instance());
  ::com::westone::skf::_Req_SKF_DigestInit_default_instance_._instance.get_mutable()->ulidlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_DigestInit_default_instance_._instance.get_mutable()->phhash_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_DigestInit::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hdev(const Req_SKF_DigestInit* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulalgid(const Req_SKF_DigestInit* msg);
  static const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& ppubkey(const Req_SKF_DigestInit* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulidlen(const Req_SKF_DigestInit* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& phhash(const Req_SKF_DigestInit* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_DigestInit::HasBitSetters::hdev(const Req_SKF_DigestInit* msg) {
  return *msg->hdev_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_DigestInit::HasBitSetters::ulalgid(const Req_SKF_DigestInit* msg) {
  return *msg->ulalgid_;
}
const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB&
Req_SKF_DigestInit::HasBitSetters::ppubkey(const Req_SKF_DigestInit* msg) {
  return *msg->ppubkey_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_DigestInit::HasBitSetters::ulidlen(const Req_SKF_DigestInit* msg) {
  return *msg->ulidlen_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_DigestInit::HasBitSetters::phhash(const Req_SKF_DigestInit* msg) {
  return *msg->phhash_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_DigestInit::kHDevFieldNumber;
const int Req_SKF_DigestInit::kUlAlgIDFieldNumber;
const int Req_SKF_DigestInit::kPPubKeyFieldNumber;
const int Req_SKF_DigestInit::kPucIDFieldNumber;
const int Req_SKF_DigestInit::kUlIDLenFieldNumber;
const int Req_SKF_DigestInit::kPhHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_DigestInit::Req_SKF_DigestInit()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_DigestInit)
}
Req_SKF_DigestInit::Req_SKF_DigestInit(const Req_SKF_DigestInit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pucid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pucid().size() > 0) {
    pucid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pucid_);
  }
  if (from.has_hdev()) {
    hdev_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hdev_);
  } else {
    hdev_ = nullptr;
  }
  if (from.has_ulalgid()) {
    ulalgid_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulalgid_);
  } else {
    ulalgid_ = nullptr;
  }
  if (from.has_ppubkey()) {
    ppubkey_ = new ::com::westone::skf::SKF_ECCPUBLICKEYBLOB(*from.ppubkey_);
  } else {
    ppubkey_ = nullptr;
  }
  if (from.has_ulidlen()) {
    ulidlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulidlen_);
  } else {
    ulidlen_ = nullptr;
  }
  if (from.has_phhash()) {
    phhash_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.phhash_);
  } else {
    phhash_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_DigestInit)
}

void Req_SKF_DigestInit::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_DigestInit_skf_2eproto.base);
  pucid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hdev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phhash_) -
      reinterpret_cast<char*>(&hdev_)) + sizeof(phhash_));
}

Req_SKF_DigestInit::~Req_SKF_DigestInit() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_DigestInit)
  SharedDtor();
}

void Req_SKF_DigestInit::SharedDtor() {
  pucid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hdev_;
  if (this != internal_default_instance()) delete ulalgid_;
  if (this != internal_default_instance()) delete ppubkey_;
  if (this != internal_default_instance()) delete ulidlen_;
  if (this != internal_default_instance()) delete phhash_;
}

void Req_SKF_DigestInit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_DigestInit& Req_SKF_DigestInit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_DigestInit_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_DigestInit::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_DigestInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pucid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulalgid_ != nullptr) {
    delete ulalgid_;
  }
  ulalgid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ppubkey_ != nullptr) {
    delete ppubkey_;
  }
  ppubkey_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulidlen_ != nullptr) {
    delete ulidlen_;
  }
  ulidlen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && phhash_ != nullptr) {
    delete phhash_;
  }
  phhash_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_DigestInit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_DigestInit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hdev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulalgid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pPubKey = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_ECCPUBLICKEYBLOB::_InternalParse;
        object = msg->mutable_ppubkey();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pucID = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pucid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulIDLen = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulidlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 phHash = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_phhash();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_DigestInit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_DigestInit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hdev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulalgid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pPubKey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ppubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pucID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pucid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulIDLen = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulidlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 phHash = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phhash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_DigestInit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_DigestInit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_DigestInit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_DigestInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hdev(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
  if (this->has_ulalgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::ulalgid(this), output);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pPubKey = 3;
  if (this->has_ppubkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::ppubkey(this), output);
  }

  // bytes pucID = 4;
  if (this->pucid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->pucid(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulIDLen = 5;
  if (this->has_ulidlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::ulidlen(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phHash = 6;
  if (this->has_phhash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::phhash(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_DigestInit)
}

::google::protobuf::uint8* Req_SKF_DigestInit::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_DigestInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hdev(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
  if (this->has_ulalgid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::ulalgid(this), target);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pPubKey = 3;
  if (this->has_ppubkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::ppubkey(this), target);
  }

  // bytes pucID = 4;
  if (this->pucid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->pucid(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulIDLen = 5;
  if (this->has_ulidlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::ulidlen(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phHash = 6;
  if (this->has_phhash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::phhash(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_DigestInit)
  return target;
}

size_t Req_SKF_DigestInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_DigestInit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pucID = 4;
  if (this->pucid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pucid());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hdev_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
  if (this->has_ulalgid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulalgid_);
  }

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pPubKey = 3;
  if (this->has_ppubkey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ppubkey_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulIDLen = 5;
  if (this->has_ulidlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulidlen_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phHash = 6;
  if (this->has_phhash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *phhash_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_DigestInit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_DigestInit)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_DigestInit* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_DigestInit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_DigestInit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_DigestInit)
    MergeFrom(*source);
  }
}

void Req_SKF_DigestInit::MergeFrom(const Req_SKF_DigestInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_DigestInit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pucid().size() > 0) {

    pucid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pucid_);
  }
  if (from.has_hdev()) {
    mutable_hdev()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hdev());
  }
  if (from.has_ulalgid()) {
    mutable_ulalgid()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulalgid());
  }
  if (from.has_ppubkey()) {
    mutable_ppubkey()->::com::westone::skf::SKF_ECCPUBLICKEYBLOB::MergeFrom(from.ppubkey());
  }
  if (from.has_ulidlen()) {
    mutable_ulidlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulidlen());
  }
  if (from.has_phhash()) {
    mutable_phhash()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.phhash());
  }
}

void Req_SKF_DigestInit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_DigestInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_DigestInit::CopyFrom(const Req_SKF_DigestInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_DigestInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_DigestInit::IsInitialized() const {
  return true;
}

void Req_SKF_DigestInit::Swap(Req_SKF_DigestInit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_DigestInit::InternalSwap(Req_SKF_DigestInit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pucid_.Swap(&other->pucid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hdev_, other->hdev_);
  swap(ulalgid_, other->ulalgid_);
  swap(ppubkey_, other->ppubkey_);
  swap(ulidlen_, other->ulidlen_);
  swap(phhash_, other->phhash_);
}

::google::protobuf::Metadata Req_SKF_DigestInit::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_DigestInit::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_DigestInit_default_instance_._instance.get_mutable()->phhash_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_DigestInit::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& phhash(const Rsp_SKF_DigestInit* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_DigestInit::HasBitSetters::phhash(const Rsp_SKF_DigestInit* msg) {
  return *msg->phhash_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_DigestInit::kPhHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_DigestInit::Rsp_SKF_DigestInit()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_DigestInit)
}
Rsp_SKF_DigestInit::Rsp_SKF_DigestInit(const Rsp_SKF_DigestInit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_phhash()) {
    phhash_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.phhash_);
  } else {
    phhash_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_DigestInit)
}

void Rsp_SKF_DigestInit::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_DigestInit_skf_2eproto.base);
  phhash_ = nullptr;
}

Rsp_SKF_DigestInit::~Rsp_SKF_DigestInit() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_DigestInit)
  SharedDtor();
}

void Rsp_SKF_DigestInit::SharedDtor() {
  if (this != internal_default_instance()) delete phhash_;
}

void Rsp_SKF_DigestInit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_DigestInit& Rsp_SKF_DigestInit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_DigestInit_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_DigestInit::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_DigestInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && phhash_ != nullptr) {
    delete phhash_;
  }
  phhash_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_DigestInit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_DigestInit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 phHash = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_phhash();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_DigestInit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_DigestInit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 phHash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phhash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_DigestInit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_DigestInit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_DigestInit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_DigestInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 phHash = 1;
  if (this->has_phhash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::phhash(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_DigestInit)
}

::google::protobuf::uint8* Rsp_SKF_DigestInit::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_DigestInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 phHash = 1;
  if (this->has_phhash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::phhash(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_DigestInit)
  return target;
}

size_t Rsp_SKF_DigestInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_DigestInit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 phHash = 1;
  if (this->has_phhash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *phhash_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_DigestInit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_DigestInit)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_DigestInit* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_DigestInit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_DigestInit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_DigestInit)
    MergeFrom(*source);
  }
}

void Rsp_SKF_DigestInit::MergeFrom(const Rsp_SKF_DigestInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_DigestInit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_phhash()) {
    mutable_phhash()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.phhash());
  }
}

void Rsp_SKF_DigestInit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_DigestInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_DigestInit::CopyFrom(const Rsp_SKF_DigestInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_DigestInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_DigestInit::IsInitialized() const {
  return true;
}

void Rsp_SKF_DigestInit::Swap(Rsp_SKF_DigestInit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_DigestInit::InternalSwap(Rsp_SKF_DigestInit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(phhash_, other->phhash_);
}

::google::protobuf::Metadata Rsp_SKF_DigestInit::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_Digest::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_Digest_default_instance_._instance.get_mutable()->hhash_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_Digest_default_instance_._instance.get_mutable()->uldatalen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_Digest_default_instance_._instance.get_mutable()->pulhashlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_Digest::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hhash(const Req_SKF_Digest* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& uldatalen(const Req_SKF_Digest* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& pulhashlen(const Req_SKF_Digest* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_Digest::HasBitSetters::hhash(const Req_SKF_Digest* msg) {
  return *msg->hhash_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_Digest::HasBitSetters::uldatalen(const Req_SKF_Digest* msg) {
  return *msg->uldatalen_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_Digest::HasBitSetters::pulhashlen(const Req_SKF_Digest* msg) {
  return *msg->pulhashlen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_Digest::kHHashFieldNumber;
const int Req_SKF_Digest::kPbDataFieldNumber;
const int Req_SKF_Digest::kUlDataLenFieldNumber;
const int Req_SKF_Digest::kPbHashDataFieldNumber;
const int Req_SKF_Digest::kPulHashLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_Digest::Req_SKF_Digest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_Digest)
}
Req_SKF_Digest::Req_SKF_Digest(const Req_SKF_Digest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbdata().size() > 0) {
    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  pbhashdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbhashdata().size() > 0) {
    pbhashdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbhashdata_);
  }
  if (from.has_hhash()) {
    hhash_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hhash_);
  } else {
    hhash_ = nullptr;
  }
  if (from.has_uldatalen()) {
    uldatalen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.uldatalen_);
  } else {
    uldatalen_ = nullptr;
  }
  if (from.has_pulhashlen()) {
    pulhashlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulhashlen_);
  } else {
    pulhashlen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_Digest)
}

void Req_SKF_Digest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_Digest_skf_2eproto.base);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbhashdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hhash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pulhashlen_) -
      reinterpret_cast<char*>(&hhash_)) + sizeof(pulhashlen_));
}

Req_SKF_Digest::~Req_SKF_Digest() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_Digest)
  SharedDtor();
}

void Req_SKF_Digest::SharedDtor() {
  pbdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbhashdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hhash_;
  if (this != internal_default_instance()) delete uldatalen_;
  if (this != internal_default_instance()) delete pulhashlen_;
}

void Req_SKF_Digest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_Digest& Req_SKF_Digest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_Digest_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_Digest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_Digest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbhashdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hhash_ != nullptr) {
    delete hhash_;
  }
  hhash_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && uldatalen_ != nullptr) {
    delete uldatalen_;
  }
  uldatalen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pulhashlen_ != nullptr) {
    delete pulhashlen_;
  }
  pulhashlen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_Digest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_Digest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hHash = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hhash();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbData = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_uldatalen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbHashData = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbhashdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulHashLen = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulhashlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_Digest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_Digest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hHash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hhash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uldatalen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbHashData = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbhashdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulHashLen = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulhashlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_Digest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_Digest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_Digest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_Digest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hHash = 1;
  if (this->has_hhash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hhash(this), output);
  }

  // bytes pbData = 2;
  if (this->pbdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pbdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  if (this->has_uldatalen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::uldatalen(this), output);
  }

  // bytes pbHashData = 4;
  if (this->pbhashdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->pbhashdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulHashLen = 5;
  if (this->has_pulhashlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::pulhashlen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_Digest)
}

::google::protobuf::uint8* Req_SKF_Digest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_Digest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hHash = 1;
  if (this->has_hhash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hhash(this), target);
  }

  // bytes pbData = 2;
  if (this->pbdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pbdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  if (this->has_uldatalen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::uldatalen(this), target);
  }

  // bytes pbHashData = 4;
  if (this->pbhashdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->pbhashdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulHashLen = 5;
  if (this->has_pulhashlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::pulhashlen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_Digest)
  return target;
}

size_t Req_SKF_Digest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_Digest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbData = 2;
  if (this->pbdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbdata());
  }

  // bytes pbHashData = 4;
  if (this->pbhashdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbhashdata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hHash = 1;
  if (this->has_hhash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hhash_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  if (this->has_uldatalen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *uldatalen_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulHashLen = 5;
  if (this->has_pulhashlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulhashlen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_Digest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_Digest)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_Digest* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_Digest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_Digest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_Digest)
    MergeFrom(*source);
  }
}

void Req_SKF_Digest::MergeFrom(const Req_SKF_Digest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_Digest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbdata().size() > 0) {

    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.pbhashdata().size() > 0) {

    pbhashdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbhashdata_);
  }
  if (from.has_hhash()) {
    mutable_hhash()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hhash());
  }
  if (from.has_uldatalen()) {
    mutable_uldatalen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.uldatalen());
  }
  if (from.has_pulhashlen()) {
    mutable_pulhashlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulhashlen());
  }
}

void Req_SKF_Digest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_Digest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_Digest::CopyFrom(const Req_SKF_Digest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_Digest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_Digest::IsInitialized() const {
  return true;
}

void Req_SKF_Digest::Swap(Req_SKF_Digest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_Digest::InternalSwap(Req_SKF_Digest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbdata_.Swap(&other->pbdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pbhashdata_.Swap(&other->pbhashdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hhash_, other->hhash_);
  swap(uldatalen_, other->uldatalen_);
  swap(pulhashlen_, other->pulhashlen_);
}

::google::protobuf::Metadata Req_SKF_Digest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_Digest::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_Digest_default_instance_._instance.get_mutable()->pulhashlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_Digest::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& pulhashlen(const Rsp_SKF_Digest* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_Digest::HasBitSetters::pulhashlen(const Rsp_SKF_Digest* msg) {
  return *msg->pulhashlen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_Digest::kPbHashDataFieldNumber;
const int Rsp_SKF_Digest::kPulHashLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_Digest::Rsp_SKF_Digest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_Digest)
}
Rsp_SKF_Digest::Rsp_SKF_Digest(const Rsp_SKF_Digest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbhashdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbhashdata().size() > 0) {
    pbhashdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbhashdata_);
  }
  if (from.has_pulhashlen()) {
    pulhashlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulhashlen_);
  } else {
    pulhashlen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_Digest)
}

void Rsp_SKF_Digest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_Digest_skf_2eproto.base);
  pbhashdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pulhashlen_ = nullptr;
}

Rsp_SKF_Digest::~Rsp_SKF_Digest() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_Digest)
  SharedDtor();
}

void Rsp_SKF_Digest::SharedDtor() {
  pbhashdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pulhashlen_;
}

void Rsp_SKF_Digest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_Digest& Rsp_SKF_Digest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_Digest_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_Digest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_Digest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbhashdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && pulhashlen_ != nullptr) {
    delete pulhashlen_;
  }
  pulhashlen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_Digest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_Digest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes pbHashData = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbhashdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulHashLen = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulhashlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_Digest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_Digest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes pbHashData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbhashdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulHashLen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulhashlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_Digest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_Digest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_Digest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_Digest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbHashData = 1;
  if (this->pbhashdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pbhashdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulHashLen = 2;
  if (this->has_pulhashlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pulhashlen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_Digest)
}

::google::protobuf::uint8* Rsp_SKF_Digest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_Digest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbHashData = 1;
  if (this->pbhashdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pbhashdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulHashLen = 2;
  if (this->has_pulhashlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pulhashlen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_Digest)
  return target;
}

size_t Rsp_SKF_Digest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_Digest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbHashData = 1;
  if (this->pbhashdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbhashdata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulHashLen = 2;
  if (this->has_pulhashlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulhashlen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_Digest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_Digest)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_Digest* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_Digest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_Digest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_Digest)
    MergeFrom(*source);
  }
}

void Rsp_SKF_Digest::MergeFrom(const Rsp_SKF_Digest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_Digest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbhashdata().size() > 0) {

    pbhashdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbhashdata_);
  }
  if (from.has_pulhashlen()) {
    mutable_pulhashlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulhashlen());
  }
}

void Rsp_SKF_Digest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_Digest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_Digest::CopyFrom(const Rsp_SKF_Digest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_Digest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_Digest::IsInitialized() const {
  return true;
}

void Rsp_SKF_Digest::Swap(Rsp_SKF_Digest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_Digest::InternalSwap(Rsp_SKF_Digest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbhashdata_.Swap(&other->pbhashdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pulhashlen_, other->pulhashlen_);
}

::google::protobuf::Metadata Rsp_SKF_Digest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_DigestUpdate::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_DigestUpdate_default_instance_._instance.get_mutable()->hhash_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_DigestUpdate_default_instance_._instance.get_mutable()->uldatalen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_DigestUpdate::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hhash(const Req_SKF_DigestUpdate* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& uldatalen(const Req_SKF_DigestUpdate* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_DigestUpdate::HasBitSetters::hhash(const Req_SKF_DigestUpdate* msg) {
  return *msg->hhash_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_DigestUpdate::HasBitSetters::uldatalen(const Req_SKF_DigestUpdate* msg) {
  return *msg->uldatalen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_DigestUpdate::kHHashFieldNumber;
const int Req_SKF_DigestUpdate::kPbDataFieldNumber;
const int Req_SKF_DigestUpdate::kUlDataLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_DigestUpdate::Req_SKF_DigestUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_DigestUpdate)
}
Req_SKF_DigestUpdate::Req_SKF_DigestUpdate(const Req_SKF_DigestUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbdata().size() > 0) {
    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.has_hhash()) {
    hhash_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hhash_);
  } else {
    hhash_ = nullptr;
  }
  if (from.has_uldatalen()) {
    uldatalen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.uldatalen_);
  } else {
    uldatalen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_DigestUpdate)
}

void Req_SKF_DigestUpdate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_DigestUpdate_skf_2eproto.base);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hhash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uldatalen_) -
      reinterpret_cast<char*>(&hhash_)) + sizeof(uldatalen_));
}

Req_SKF_DigestUpdate::~Req_SKF_DigestUpdate() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_DigestUpdate)
  SharedDtor();
}

void Req_SKF_DigestUpdate::SharedDtor() {
  pbdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hhash_;
  if (this != internal_default_instance()) delete uldatalen_;
}

void Req_SKF_DigestUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_DigestUpdate& Req_SKF_DigestUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_DigestUpdate_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_DigestUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_DigestUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hhash_ != nullptr) {
    delete hhash_;
  }
  hhash_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && uldatalen_ != nullptr) {
    delete uldatalen_;
  }
  uldatalen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_DigestUpdate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_DigestUpdate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hHash = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hhash();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbData = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_uldatalen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_DigestUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_DigestUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hHash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hhash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uldatalen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_DigestUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_DigestUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_DigestUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_DigestUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hHash = 1;
  if (this->has_hhash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hhash(this), output);
  }

  // bytes pbData = 2;
  if (this->pbdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pbdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  if (this->has_uldatalen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::uldatalen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_DigestUpdate)
}

::google::protobuf::uint8* Req_SKF_DigestUpdate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_DigestUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hHash = 1;
  if (this->has_hhash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hhash(this), target);
  }

  // bytes pbData = 2;
  if (this->pbdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pbdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  if (this->has_uldatalen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::uldatalen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_DigestUpdate)
  return target;
}

size_t Req_SKF_DigestUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_DigestUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbData = 2;
  if (this->pbdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbdata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hHash = 1;
  if (this->has_hhash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hhash_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  if (this->has_uldatalen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *uldatalen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_DigestUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_DigestUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_DigestUpdate* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_DigestUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_DigestUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_DigestUpdate)
    MergeFrom(*source);
  }
}

void Req_SKF_DigestUpdate::MergeFrom(const Req_SKF_DigestUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_DigestUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbdata().size() > 0) {

    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.has_hhash()) {
    mutable_hhash()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hhash());
  }
  if (from.has_uldatalen()) {
    mutable_uldatalen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.uldatalen());
  }
}

void Req_SKF_DigestUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_DigestUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_DigestUpdate::CopyFrom(const Req_SKF_DigestUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_DigestUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_DigestUpdate::IsInitialized() const {
  return true;
}

void Req_SKF_DigestUpdate::Swap(Req_SKF_DigestUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_DigestUpdate::InternalSwap(Req_SKF_DigestUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbdata_.Swap(&other->pbdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hhash_, other->hhash_);
  swap(uldatalen_, other->uldatalen_);
}

::google::protobuf::Metadata Req_SKF_DigestUpdate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_DigestUpdate::InitAsDefaultInstance() {
}
class Rsp_SKF_DigestUpdate::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_DigestUpdate::Rsp_SKF_DigestUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_DigestUpdate)
}
Rsp_SKF_DigestUpdate::Rsp_SKF_DigestUpdate(const Rsp_SKF_DigestUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_DigestUpdate)
}

void Rsp_SKF_DigestUpdate::SharedCtor() {
}

Rsp_SKF_DigestUpdate::~Rsp_SKF_DigestUpdate() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_DigestUpdate)
  SharedDtor();
}

void Rsp_SKF_DigestUpdate::SharedDtor() {
}

void Rsp_SKF_DigestUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_DigestUpdate& Rsp_SKF_DigestUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_DigestUpdate_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_DigestUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_DigestUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_DigestUpdate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_DigestUpdate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_DigestUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_DigestUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_DigestUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_DigestUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_DigestUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_DigestUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_DigestUpdate)
}

::google::protobuf::uint8* Rsp_SKF_DigestUpdate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_DigestUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_DigestUpdate)
  return target;
}

size_t Rsp_SKF_DigestUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_DigestUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_DigestUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_DigestUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_DigestUpdate* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_DigestUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_DigestUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_DigestUpdate)
    MergeFrom(*source);
  }
}

void Rsp_SKF_DigestUpdate::MergeFrom(const Rsp_SKF_DigestUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_DigestUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rsp_SKF_DigestUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_DigestUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_DigestUpdate::CopyFrom(const Rsp_SKF_DigestUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_DigestUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_DigestUpdate::IsInitialized() const {
  return true;
}

void Rsp_SKF_DigestUpdate::Swap(Rsp_SKF_DigestUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_DigestUpdate::InternalSwap(Rsp_SKF_DigestUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rsp_SKF_DigestUpdate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_DigestFinal::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_DigestFinal_default_instance_._instance.get_mutable()->hhash_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_DigestFinal_default_instance_._instance.get_mutable()->pulhashlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_DigestFinal::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hhash(const Req_SKF_DigestFinal* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& pulhashlen(const Req_SKF_DigestFinal* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_DigestFinal::HasBitSetters::hhash(const Req_SKF_DigestFinal* msg) {
  return *msg->hhash_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_DigestFinal::HasBitSetters::pulhashlen(const Req_SKF_DigestFinal* msg) {
  return *msg->pulhashlen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_DigestFinal::kHHashFieldNumber;
const int Req_SKF_DigestFinal::kPHashDataFieldNumber;
const int Req_SKF_DigestFinal::kPulHashLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_DigestFinal::Req_SKF_DigestFinal()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_DigestFinal)
}
Req_SKF_DigestFinal::Req_SKF_DigestFinal(const Req_SKF_DigestFinal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  phashdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.phashdata().size() > 0) {
    phashdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phashdata_);
  }
  if (from.has_hhash()) {
    hhash_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hhash_);
  } else {
    hhash_ = nullptr;
  }
  if (from.has_pulhashlen()) {
    pulhashlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulhashlen_);
  } else {
    pulhashlen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_DigestFinal)
}

void Req_SKF_DigestFinal::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_DigestFinal_skf_2eproto.base);
  phashdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hhash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pulhashlen_) -
      reinterpret_cast<char*>(&hhash_)) + sizeof(pulhashlen_));
}

Req_SKF_DigestFinal::~Req_SKF_DigestFinal() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_DigestFinal)
  SharedDtor();
}

void Req_SKF_DigestFinal::SharedDtor() {
  phashdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hhash_;
  if (this != internal_default_instance()) delete pulhashlen_;
}

void Req_SKF_DigestFinal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_DigestFinal& Req_SKF_DigestFinal::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_DigestFinal_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_DigestFinal::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_DigestFinal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phashdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hhash_ != nullptr) {
    delete hhash_;
  }
  hhash_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pulhashlen_ != nullptr) {
    delete pulhashlen_;
  }
  pulhashlen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_DigestFinal::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_DigestFinal*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hHash = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hhash();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pHashData = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_phashdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulHashLen = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulhashlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_DigestFinal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_DigestFinal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hHash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hhash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pHashData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_phashdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulHashLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulhashlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_DigestFinal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_DigestFinal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_DigestFinal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_DigestFinal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hHash = 1;
  if (this->has_hhash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hhash(this), output);
  }

  // bytes pHashData = 2;
  if (this->phashdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->phashdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulHashLen = 3;
  if (this->has_pulhashlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::pulhashlen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_DigestFinal)
}

::google::protobuf::uint8* Req_SKF_DigestFinal::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_DigestFinal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hHash = 1;
  if (this->has_hhash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hhash(this), target);
  }

  // bytes pHashData = 2;
  if (this->phashdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->phashdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulHashLen = 3;
  if (this->has_pulhashlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::pulhashlen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_DigestFinal)
  return target;
}

size_t Req_SKF_DigestFinal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_DigestFinal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pHashData = 2;
  if (this->phashdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->phashdata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hHash = 1;
  if (this->has_hhash()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hhash_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulHashLen = 3;
  if (this->has_pulhashlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulhashlen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_DigestFinal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_DigestFinal)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_DigestFinal* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_DigestFinal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_DigestFinal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_DigestFinal)
    MergeFrom(*source);
  }
}

void Req_SKF_DigestFinal::MergeFrom(const Req_SKF_DigestFinal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_DigestFinal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phashdata().size() > 0) {

    phashdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phashdata_);
  }
  if (from.has_hhash()) {
    mutable_hhash()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hhash());
  }
  if (from.has_pulhashlen()) {
    mutable_pulhashlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulhashlen());
  }
}

void Req_SKF_DigestFinal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_DigestFinal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_DigestFinal::CopyFrom(const Req_SKF_DigestFinal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_DigestFinal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_DigestFinal::IsInitialized() const {
  return true;
}

void Req_SKF_DigestFinal::Swap(Req_SKF_DigestFinal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_DigestFinal::InternalSwap(Req_SKF_DigestFinal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  phashdata_.Swap(&other->phashdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hhash_, other->hhash_);
  swap(pulhashlen_, other->pulhashlen_);
}

::google::protobuf::Metadata Req_SKF_DigestFinal::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_DigestFinal::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_DigestFinal_default_instance_._instance.get_mutable()->pulhashlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_DigestFinal::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& pulhashlen(const Rsp_SKF_DigestFinal* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_DigestFinal::HasBitSetters::pulhashlen(const Rsp_SKF_DigestFinal* msg) {
  return *msg->pulhashlen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_DigestFinal::kPHashDataFieldNumber;
const int Rsp_SKF_DigestFinal::kPulHashLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_DigestFinal::Rsp_SKF_DigestFinal()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_DigestFinal)
}
Rsp_SKF_DigestFinal::Rsp_SKF_DigestFinal(const Rsp_SKF_DigestFinal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  phashdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.phashdata().size() > 0) {
    phashdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phashdata_);
  }
  if (from.has_pulhashlen()) {
    pulhashlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulhashlen_);
  } else {
    pulhashlen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_DigestFinal)
}

void Rsp_SKF_DigestFinal::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_DigestFinal_skf_2eproto.base);
  phashdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pulhashlen_ = nullptr;
}

Rsp_SKF_DigestFinal::~Rsp_SKF_DigestFinal() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_DigestFinal)
  SharedDtor();
}

void Rsp_SKF_DigestFinal::SharedDtor() {
  phashdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pulhashlen_;
}

void Rsp_SKF_DigestFinal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_DigestFinal& Rsp_SKF_DigestFinal::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_DigestFinal_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_DigestFinal::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_DigestFinal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phashdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && pulhashlen_ != nullptr) {
    delete pulhashlen_;
  }
  pulhashlen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_DigestFinal::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_DigestFinal*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes pHashData = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_phashdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulHashLen = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulhashlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_DigestFinal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_DigestFinal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes pHashData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_phashdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulHashLen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulhashlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_DigestFinal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_DigestFinal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_DigestFinal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_DigestFinal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pHashData = 1;
  if (this->phashdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->phashdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulHashLen = 2;
  if (this->has_pulhashlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pulhashlen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_DigestFinal)
}

::google::protobuf::uint8* Rsp_SKF_DigestFinal::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_DigestFinal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pHashData = 1;
  if (this->phashdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->phashdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulHashLen = 2;
  if (this->has_pulhashlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pulhashlen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_DigestFinal)
  return target;
}

size_t Rsp_SKF_DigestFinal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_DigestFinal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pHashData = 1;
  if (this->phashdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->phashdata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulHashLen = 2;
  if (this->has_pulhashlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulhashlen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_DigestFinal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_DigestFinal)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_DigestFinal* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_DigestFinal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_DigestFinal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_DigestFinal)
    MergeFrom(*source);
  }
}

void Rsp_SKF_DigestFinal::MergeFrom(const Rsp_SKF_DigestFinal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_DigestFinal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phashdata().size() > 0) {

    phashdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phashdata_);
  }
  if (from.has_pulhashlen()) {
    mutable_pulhashlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulhashlen());
  }
}

void Rsp_SKF_DigestFinal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_DigestFinal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_DigestFinal::CopyFrom(const Rsp_SKF_DigestFinal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_DigestFinal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_DigestFinal::IsInitialized() const {
  return true;
}

void Rsp_SKF_DigestFinal::Swap(Rsp_SKF_DigestFinal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_DigestFinal::InternalSwap(Rsp_SKF_DigestFinal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  phashdata_.Swap(&other->phashdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pulhashlen_, other->pulhashlen_);
}

::google::protobuf::Metadata Rsp_SKF_DigestFinal::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_MacInit::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_MacInit_default_instance_._instance.get_mutable()->hkey_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_MacInit_default_instance_._instance.get_mutable()->macparam_ = const_cast< ::com::westone::skf::SKF_BLOCKCIPHERPARAM*>(
      ::com::westone::skf::SKF_BLOCKCIPHERPARAM::internal_default_instance());
  ::com::westone::skf::_Req_SKF_MacInit_default_instance_._instance.get_mutable()->phmac_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_MacInit::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hkey(const Req_SKF_MacInit* msg);
  static const ::com::westone::skf::SKF_BLOCKCIPHERPARAM& macparam(const Req_SKF_MacInit* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& phmac(const Req_SKF_MacInit* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_MacInit::HasBitSetters::hkey(const Req_SKF_MacInit* msg) {
  return *msg->hkey_;
}
const ::com::westone::skf::SKF_BLOCKCIPHERPARAM&
Req_SKF_MacInit::HasBitSetters::macparam(const Req_SKF_MacInit* msg) {
  return *msg->macparam_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_MacInit::HasBitSetters::phmac(const Req_SKF_MacInit* msg) {
  return *msg->phmac_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_MacInit::kHKeyFieldNumber;
const int Req_SKF_MacInit::kMacParamFieldNumber;
const int Req_SKF_MacInit::kPhMacFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_MacInit::Req_SKF_MacInit()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_MacInit)
}
Req_SKF_MacInit::Req_SKF_MacInit(const Req_SKF_MacInit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hkey()) {
    hkey_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hkey_);
  } else {
    hkey_ = nullptr;
  }
  if (from.has_macparam()) {
    macparam_ = new ::com::westone::skf::SKF_BLOCKCIPHERPARAM(*from.macparam_);
  } else {
    macparam_ = nullptr;
  }
  if (from.has_phmac()) {
    phmac_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.phmac_);
  } else {
    phmac_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_MacInit)
}

void Req_SKF_MacInit::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_MacInit_skf_2eproto.base);
  ::memset(&hkey_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phmac_) -
      reinterpret_cast<char*>(&hkey_)) + sizeof(phmac_));
}

Req_SKF_MacInit::~Req_SKF_MacInit() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_MacInit)
  SharedDtor();
}

void Req_SKF_MacInit::SharedDtor() {
  if (this != internal_default_instance()) delete hkey_;
  if (this != internal_default_instance()) delete macparam_;
  if (this != internal_default_instance()) delete phmac_;
}

void Req_SKF_MacInit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_MacInit& Req_SKF_MacInit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_MacInit_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_MacInit::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_MacInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && hkey_ != nullptr) {
    delete hkey_;
  }
  hkey_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && macparam_ != nullptr) {
    delete macparam_;
  }
  macparam_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && phmac_ != nullptr) {
    delete phmac_;
  }
  phmac_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_MacInit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_MacInit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hkey();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.SKF_BLOCKCIPHERPARAM MacParam = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::SKF_BLOCKCIPHERPARAM::_InternalParse;
        object = msg->mutable_macparam();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 phMac = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_phmac();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_MacInit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_MacInit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.SKF_BLOCKCIPHERPARAM MacParam = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_macparam()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 phMac = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phmac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_MacInit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_MacInit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_MacInit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_MacInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  if (this->has_hkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hkey(this), output);
  }

  // .com.westone.skf.SKF_BLOCKCIPHERPARAM MacParam = 2;
  if (this->has_macparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::macparam(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phMac = 3;
  if (this->has_phmac()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::phmac(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_MacInit)
}

::google::protobuf::uint8* Req_SKF_MacInit::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_MacInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  if (this->has_hkey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hkey(this), target);
  }

  // .com.westone.skf.SKF_BLOCKCIPHERPARAM MacParam = 2;
  if (this->has_macparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::macparam(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phMac = 3;
  if (this->has_phmac()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::phmac(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_MacInit)
  return target;
}

size_t Req_SKF_MacInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_MacInit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  if (this->has_hkey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hkey_);
  }

  // .com.westone.skf.SKF_BLOCKCIPHERPARAM MacParam = 2;
  if (this->has_macparam()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *macparam_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 phMac = 3;
  if (this->has_phmac()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *phmac_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_MacInit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_MacInit)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_MacInit* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_MacInit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_MacInit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_MacInit)
    MergeFrom(*source);
  }
}

void Req_SKF_MacInit::MergeFrom(const Req_SKF_MacInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_MacInit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hkey()) {
    mutable_hkey()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hkey());
  }
  if (from.has_macparam()) {
    mutable_macparam()->::com::westone::skf::SKF_BLOCKCIPHERPARAM::MergeFrom(from.macparam());
  }
  if (from.has_phmac()) {
    mutable_phmac()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.phmac());
  }
}

void Req_SKF_MacInit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_MacInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_MacInit::CopyFrom(const Req_SKF_MacInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_MacInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_MacInit::IsInitialized() const {
  return true;
}

void Req_SKF_MacInit::Swap(Req_SKF_MacInit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_MacInit::InternalSwap(Req_SKF_MacInit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(hkey_, other->hkey_);
  swap(macparam_, other->macparam_);
  swap(phmac_, other->phmac_);
}

::google::protobuf::Metadata Req_SKF_MacInit::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_MacInit::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_MacInit_default_instance_._instance.get_mutable()->phmac_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_MacInit::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& phmac(const Rsp_SKF_MacInit* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_MacInit::HasBitSetters::phmac(const Rsp_SKF_MacInit* msg) {
  return *msg->phmac_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_MacInit::kPhMacFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_MacInit::Rsp_SKF_MacInit()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_MacInit)
}
Rsp_SKF_MacInit::Rsp_SKF_MacInit(const Rsp_SKF_MacInit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_phmac()) {
    phmac_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.phmac_);
  } else {
    phmac_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_MacInit)
}

void Rsp_SKF_MacInit::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_MacInit_skf_2eproto.base);
  phmac_ = nullptr;
}

Rsp_SKF_MacInit::~Rsp_SKF_MacInit() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_MacInit)
  SharedDtor();
}

void Rsp_SKF_MacInit::SharedDtor() {
  if (this != internal_default_instance()) delete phmac_;
}

void Rsp_SKF_MacInit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_MacInit& Rsp_SKF_MacInit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_MacInit_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_MacInit::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_MacInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && phmac_ != nullptr) {
    delete phmac_;
  }
  phmac_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_MacInit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_MacInit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 phMac = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_phmac();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_MacInit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_MacInit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 phMac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_phmac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_MacInit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_MacInit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_MacInit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_MacInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 phMac = 1;
  if (this->has_phmac()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::phmac(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_MacInit)
}

::google::protobuf::uint8* Rsp_SKF_MacInit::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_MacInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 phMac = 1;
  if (this->has_phmac()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::phmac(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_MacInit)
  return target;
}

size_t Rsp_SKF_MacInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_MacInit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 phMac = 1;
  if (this->has_phmac()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *phmac_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_MacInit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_MacInit)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_MacInit* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_MacInit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_MacInit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_MacInit)
    MergeFrom(*source);
  }
}

void Rsp_SKF_MacInit::MergeFrom(const Rsp_SKF_MacInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_MacInit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_phmac()) {
    mutable_phmac()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.phmac());
  }
}

void Rsp_SKF_MacInit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_MacInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_MacInit::CopyFrom(const Rsp_SKF_MacInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_MacInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_MacInit::IsInitialized() const {
  return true;
}

void Rsp_SKF_MacInit::Swap(Rsp_SKF_MacInit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_MacInit::InternalSwap(Rsp_SKF_MacInit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(phmac_, other->phmac_);
}

::google::protobuf::Metadata Rsp_SKF_MacInit::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_Mac::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_Mac_default_instance_._instance.get_mutable()->hmac_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_Mac_default_instance_._instance.get_mutable()->uldatalen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_Mac_default_instance_._instance.get_mutable()->pulmaclen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_Mac::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hmac(const Req_SKF_Mac* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& uldatalen(const Req_SKF_Mac* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& pulmaclen(const Req_SKF_Mac* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_Mac::HasBitSetters::hmac(const Req_SKF_Mac* msg) {
  return *msg->hmac_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_Mac::HasBitSetters::uldatalen(const Req_SKF_Mac* msg) {
  return *msg->uldatalen_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_Mac::HasBitSetters::pulmaclen(const Req_SKF_Mac* msg) {
  return *msg->pulmaclen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_Mac::kHMacFieldNumber;
const int Req_SKF_Mac::kPbDataFieldNumber;
const int Req_SKF_Mac::kUlDataLenFieldNumber;
const int Req_SKF_Mac::kPbMacDataFieldNumber;
const int Req_SKF_Mac::kPulMacLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_Mac::Req_SKF_Mac()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_Mac)
}
Req_SKF_Mac::Req_SKF_Mac(const Req_SKF_Mac& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbdata().size() > 0) {
    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  pbmacdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbmacdata().size() > 0) {
    pbmacdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbmacdata_);
  }
  if (from.has_hmac()) {
    hmac_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hmac_);
  } else {
    hmac_ = nullptr;
  }
  if (from.has_uldatalen()) {
    uldatalen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.uldatalen_);
  } else {
    uldatalen_ = nullptr;
  }
  if (from.has_pulmaclen()) {
    pulmaclen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulmaclen_);
  } else {
    pulmaclen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_Mac)
}

void Req_SKF_Mac::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_Mac_skf_2eproto.base);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbmacdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hmac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pulmaclen_) -
      reinterpret_cast<char*>(&hmac_)) + sizeof(pulmaclen_));
}

Req_SKF_Mac::~Req_SKF_Mac() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_Mac)
  SharedDtor();
}

void Req_SKF_Mac::SharedDtor() {
  pbdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbmacdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hmac_;
  if (this != internal_default_instance()) delete uldatalen_;
  if (this != internal_default_instance()) delete pulmaclen_;
}

void Req_SKF_Mac::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_Mac& Req_SKF_Mac::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_Mac_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_Mac::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_Mac)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbmacdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hmac_ != nullptr) {
    delete hmac_;
  }
  hmac_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && uldatalen_ != nullptr) {
    delete uldatalen_;
  }
  uldatalen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pulmaclen_ != nullptr) {
    delete pulmaclen_;
  }
  pulmaclen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_Mac::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_Mac*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hMac = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hmac();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbData = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_uldatalen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbMacData = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbmacdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulMacLen = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulmaclen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_Mac::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_Mac)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hMac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hmac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uldatalen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbMacData = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbmacdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulMacLen = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulmaclen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_Mac)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_Mac)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_Mac::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_Mac)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hMac = 1;
  if (this->has_hmac()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hmac(this), output);
  }

  // bytes pbData = 2;
  if (this->pbdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pbdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  if (this->has_uldatalen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::uldatalen(this), output);
  }

  // bytes pbMacData = 4;
  if (this->pbmacdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->pbmacdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulMacLen = 5;
  if (this->has_pulmaclen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::pulmaclen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_Mac)
}

::google::protobuf::uint8* Req_SKF_Mac::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_Mac)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hMac = 1;
  if (this->has_hmac()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hmac(this), target);
  }

  // bytes pbData = 2;
  if (this->pbdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pbdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  if (this->has_uldatalen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::uldatalen(this), target);
  }

  // bytes pbMacData = 4;
  if (this->pbmacdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->pbmacdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulMacLen = 5;
  if (this->has_pulmaclen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::pulmaclen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_Mac)
  return target;
}

size_t Req_SKF_Mac::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_Mac)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbData = 2;
  if (this->pbdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbdata());
  }

  // bytes pbMacData = 4;
  if (this->pbmacdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbmacdata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hMac = 1;
  if (this->has_hmac()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hmac_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  if (this->has_uldatalen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *uldatalen_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulMacLen = 5;
  if (this->has_pulmaclen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulmaclen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_Mac::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_Mac)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_Mac* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_Mac>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_Mac)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_Mac)
    MergeFrom(*source);
  }
}

void Req_SKF_Mac::MergeFrom(const Req_SKF_Mac& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_Mac)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbdata().size() > 0) {

    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.pbmacdata().size() > 0) {

    pbmacdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbmacdata_);
  }
  if (from.has_hmac()) {
    mutable_hmac()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hmac());
  }
  if (from.has_uldatalen()) {
    mutable_uldatalen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.uldatalen());
  }
  if (from.has_pulmaclen()) {
    mutable_pulmaclen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulmaclen());
  }
}

void Req_SKF_Mac::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_Mac)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_Mac::CopyFrom(const Req_SKF_Mac& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_Mac)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_Mac::IsInitialized() const {
  return true;
}

void Req_SKF_Mac::Swap(Req_SKF_Mac* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_Mac::InternalSwap(Req_SKF_Mac* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbdata_.Swap(&other->pbdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pbmacdata_.Swap(&other->pbmacdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hmac_, other->hmac_);
  swap(uldatalen_, other->uldatalen_);
  swap(pulmaclen_, other->pulmaclen_);
}

::google::protobuf::Metadata Req_SKF_Mac::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_Mac::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_Mac_default_instance_._instance.get_mutable()->pulmaclen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_Mac::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& pulmaclen(const Rsp_SKF_Mac* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_Mac::HasBitSetters::pulmaclen(const Rsp_SKF_Mac* msg) {
  return *msg->pulmaclen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_Mac::kPbMacDataFieldNumber;
const int Rsp_SKF_Mac::kPulMacLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_Mac::Rsp_SKF_Mac()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_Mac)
}
Rsp_SKF_Mac::Rsp_SKF_Mac(const Rsp_SKF_Mac& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbmacdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbmacdata().size() > 0) {
    pbmacdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbmacdata_);
  }
  if (from.has_pulmaclen()) {
    pulmaclen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulmaclen_);
  } else {
    pulmaclen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_Mac)
}

void Rsp_SKF_Mac::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_Mac_skf_2eproto.base);
  pbmacdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pulmaclen_ = nullptr;
}

Rsp_SKF_Mac::~Rsp_SKF_Mac() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_Mac)
  SharedDtor();
}

void Rsp_SKF_Mac::SharedDtor() {
  pbmacdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pulmaclen_;
}

void Rsp_SKF_Mac::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_Mac& Rsp_SKF_Mac::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_Mac_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_Mac::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_Mac)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbmacdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && pulmaclen_ != nullptr) {
    delete pulmaclen_;
  }
  pulmaclen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_Mac::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_Mac*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes pbMacData = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbmacdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulMacLen = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulmaclen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_Mac::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_Mac)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes pbMacData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbmacdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulMacLen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulmaclen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_Mac)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_Mac)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_Mac::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_Mac)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbMacData = 1;
  if (this->pbmacdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pbmacdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulMacLen = 2;
  if (this->has_pulmaclen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pulmaclen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_Mac)
}

::google::protobuf::uint8* Rsp_SKF_Mac::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_Mac)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbMacData = 1;
  if (this->pbmacdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pbmacdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulMacLen = 2;
  if (this->has_pulmaclen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pulmaclen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_Mac)
  return target;
}

size_t Rsp_SKF_Mac::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_Mac)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbMacData = 1;
  if (this->pbmacdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbmacdata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulMacLen = 2;
  if (this->has_pulmaclen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulmaclen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_Mac::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_Mac)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_Mac* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_Mac>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_Mac)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_Mac)
    MergeFrom(*source);
  }
}

void Rsp_SKF_Mac::MergeFrom(const Rsp_SKF_Mac& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_Mac)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbmacdata().size() > 0) {

    pbmacdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbmacdata_);
  }
  if (from.has_pulmaclen()) {
    mutable_pulmaclen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulmaclen());
  }
}

void Rsp_SKF_Mac::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_Mac)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_Mac::CopyFrom(const Rsp_SKF_Mac& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_Mac)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_Mac::IsInitialized() const {
  return true;
}

void Rsp_SKF_Mac::Swap(Rsp_SKF_Mac* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_Mac::InternalSwap(Rsp_SKF_Mac* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbmacdata_.Swap(&other->pbmacdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pulmaclen_, other->pulmaclen_);
}

::google::protobuf::Metadata Rsp_SKF_Mac::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_MacUpdate::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_MacUpdate_default_instance_._instance.get_mutable()->hmac_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_MacUpdate_default_instance_._instance.get_mutable()->uldatalen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_MacUpdate::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hmac(const Req_SKF_MacUpdate* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& uldatalen(const Req_SKF_MacUpdate* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_MacUpdate::HasBitSetters::hmac(const Req_SKF_MacUpdate* msg) {
  return *msg->hmac_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_MacUpdate::HasBitSetters::uldatalen(const Req_SKF_MacUpdate* msg) {
  return *msg->uldatalen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_MacUpdate::kHMacFieldNumber;
const int Req_SKF_MacUpdate::kPbDataFieldNumber;
const int Req_SKF_MacUpdate::kUlDataLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_MacUpdate::Req_SKF_MacUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_MacUpdate)
}
Req_SKF_MacUpdate::Req_SKF_MacUpdate(const Req_SKF_MacUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbdata().size() > 0) {
    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.has_hmac()) {
    hmac_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hmac_);
  } else {
    hmac_ = nullptr;
  }
  if (from.has_uldatalen()) {
    uldatalen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.uldatalen_);
  } else {
    uldatalen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_MacUpdate)
}

void Req_SKF_MacUpdate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_MacUpdate_skf_2eproto.base);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hmac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uldatalen_) -
      reinterpret_cast<char*>(&hmac_)) + sizeof(uldatalen_));
}

Req_SKF_MacUpdate::~Req_SKF_MacUpdate() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_MacUpdate)
  SharedDtor();
}

void Req_SKF_MacUpdate::SharedDtor() {
  pbdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hmac_;
  if (this != internal_default_instance()) delete uldatalen_;
}

void Req_SKF_MacUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_MacUpdate& Req_SKF_MacUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_MacUpdate_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_MacUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_MacUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hmac_ != nullptr) {
    delete hmac_;
  }
  hmac_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && uldatalen_ != nullptr) {
    delete uldatalen_;
  }
  uldatalen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_MacUpdate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_MacUpdate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hMac = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hmac();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbData = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_uldatalen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_MacUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_MacUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hMac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hmac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uldatalen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_MacUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_MacUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_MacUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_MacUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hMac = 1;
  if (this->has_hmac()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hmac(this), output);
  }

  // bytes pbData = 2;
  if (this->pbdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pbdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  if (this->has_uldatalen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::uldatalen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_MacUpdate)
}

::google::protobuf::uint8* Req_SKF_MacUpdate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_MacUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hMac = 1;
  if (this->has_hmac()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hmac(this), target);
  }

  // bytes pbData = 2;
  if (this->pbdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pbdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  if (this->has_uldatalen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::uldatalen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_MacUpdate)
  return target;
}

size_t Req_SKF_MacUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_MacUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbData = 2;
  if (this->pbdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbdata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hMac = 1;
  if (this->has_hmac()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hmac_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  if (this->has_uldatalen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *uldatalen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_MacUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_MacUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_MacUpdate* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_MacUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_MacUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_MacUpdate)
    MergeFrom(*source);
  }
}

void Req_SKF_MacUpdate::MergeFrom(const Req_SKF_MacUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_MacUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbdata().size() > 0) {

    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.has_hmac()) {
    mutable_hmac()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hmac());
  }
  if (from.has_uldatalen()) {
    mutable_uldatalen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.uldatalen());
  }
}

void Req_SKF_MacUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_MacUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_MacUpdate::CopyFrom(const Req_SKF_MacUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_MacUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_MacUpdate::IsInitialized() const {
  return true;
}

void Req_SKF_MacUpdate::Swap(Req_SKF_MacUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_MacUpdate::InternalSwap(Req_SKF_MacUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbdata_.Swap(&other->pbdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hmac_, other->hmac_);
  swap(uldatalen_, other->uldatalen_);
}

::google::protobuf::Metadata Req_SKF_MacUpdate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_MacUpdate::InitAsDefaultInstance() {
}
class Rsp_SKF_MacUpdate::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_MacUpdate::Rsp_SKF_MacUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_MacUpdate)
}
Rsp_SKF_MacUpdate::Rsp_SKF_MacUpdate(const Rsp_SKF_MacUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_MacUpdate)
}

void Rsp_SKF_MacUpdate::SharedCtor() {
}

Rsp_SKF_MacUpdate::~Rsp_SKF_MacUpdate() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_MacUpdate)
  SharedDtor();
}

void Rsp_SKF_MacUpdate::SharedDtor() {
}

void Rsp_SKF_MacUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_MacUpdate& Rsp_SKF_MacUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_MacUpdate_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_MacUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_MacUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_MacUpdate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_MacUpdate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_MacUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_MacUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_MacUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_MacUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_MacUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_MacUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_MacUpdate)
}

::google::protobuf::uint8* Rsp_SKF_MacUpdate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_MacUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_MacUpdate)
  return target;
}

size_t Rsp_SKF_MacUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_MacUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_MacUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_MacUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_MacUpdate* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_MacUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_MacUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_MacUpdate)
    MergeFrom(*source);
  }
}

void Rsp_SKF_MacUpdate::MergeFrom(const Rsp_SKF_MacUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_MacUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rsp_SKF_MacUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_MacUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_MacUpdate::CopyFrom(const Rsp_SKF_MacUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_MacUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_MacUpdate::IsInitialized() const {
  return true;
}

void Rsp_SKF_MacUpdate::Swap(Rsp_SKF_MacUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_MacUpdate::InternalSwap(Rsp_SKF_MacUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rsp_SKF_MacUpdate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_MacFinal::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_MacFinal_default_instance_._instance.get_mutable()->hmac_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_MacFinal_default_instance_._instance.get_mutable()->pulmacdatalen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_MacFinal::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hmac(const Req_SKF_MacFinal* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& pulmacdatalen(const Req_SKF_MacFinal* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_MacFinal::HasBitSetters::hmac(const Req_SKF_MacFinal* msg) {
  return *msg->hmac_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_MacFinal::HasBitSetters::pulmacdatalen(const Req_SKF_MacFinal* msg) {
  return *msg->pulmacdatalen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_MacFinal::kHMacFieldNumber;
const int Req_SKF_MacFinal::kPbMacDataFieldNumber;
const int Req_SKF_MacFinal::kPulMacDataLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_MacFinal::Req_SKF_MacFinal()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_MacFinal)
}
Req_SKF_MacFinal::Req_SKF_MacFinal(const Req_SKF_MacFinal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbmacdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbmacdata().size() > 0) {
    pbmacdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbmacdata_);
  }
  if (from.has_hmac()) {
    hmac_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hmac_);
  } else {
    hmac_ = nullptr;
  }
  if (from.has_pulmacdatalen()) {
    pulmacdatalen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulmacdatalen_);
  } else {
    pulmacdatalen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_MacFinal)
}

void Req_SKF_MacFinal::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_MacFinal_skf_2eproto.base);
  pbmacdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hmac_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pulmacdatalen_) -
      reinterpret_cast<char*>(&hmac_)) + sizeof(pulmacdatalen_));
}

Req_SKF_MacFinal::~Req_SKF_MacFinal() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_MacFinal)
  SharedDtor();
}

void Req_SKF_MacFinal::SharedDtor() {
  pbmacdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hmac_;
  if (this != internal_default_instance()) delete pulmacdatalen_;
}

void Req_SKF_MacFinal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_MacFinal& Req_SKF_MacFinal::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_MacFinal_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_MacFinal::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_MacFinal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbmacdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hmac_ != nullptr) {
    delete hmac_;
  }
  hmac_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pulmacdatalen_ != nullptr) {
    delete pulmacdatalen_;
  }
  pulmacdatalen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_MacFinal::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_MacFinal*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hMac = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hmac();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbMacData = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbmacdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulMacDataLen = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulmacdatalen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_MacFinal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_MacFinal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hMac = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hmac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbMacData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbmacdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulMacDataLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulmacdatalen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_MacFinal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_MacFinal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_MacFinal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_MacFinal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hMac = 1;
  if (this->has_hmac()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hmac(this), output);
  }

  // bytes pbMacData = 2;
  if (this->pbmacdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pbmacdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulMacDataLen = 3;
  if (this->has_pulmacdatalen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::pulmacdatalen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_MacFinal)
}

::google::protobuf::uint8* Req_SKF_MacFinal::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_MacFinal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hMac = 1;
  if (this->has_hmac()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hmac(this), target);
  }

  // bytes pbMacData = 2;
  if (this->pbmacdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pbmacdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulMacDataLen = 3;
  if (this->has_pulmacdatalen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::pulmacdatalen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_MacFinal)
  return target;
}

size_t Req_SKF_MacFinal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_MacFinal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbMacData = 2;
  if (this->pbmacdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbmacdata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hMac = 1;
  if (this->has_hmac()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hmac_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulMacDataLen = 3;
  if (this->has_pulmacdatalen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulmacdatalen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_MacFinal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_MacFinal)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_MacFinal* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_MacFinal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_MacFinal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_MacFinal)
    MergeFrom(*source);
  }
}

void Req_SKF_MacFinal::MergeFrom(const Req_SKF_MacFinal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_MacFinal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbmacdata().size() > 0) {

    pbmacdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbmacdata_);
  }
  if (from.has_hmac()) {
    mutable_hmac()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hmac());
  }
  if (from.has_pulmacdatalen()) {
    mutable_pulmacdatalen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulmacdatalen());
  }
}

void Req_SKF_MacFinal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_MacFinal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_MacFinal::CopyFrom(const Req_SKF_MacFinal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_MacFinal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_MacFinal::IsInitialized() const {
  return true;
}

void Req_SKF_MacFinal::Swap(Req_SKF_MacFinal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_MacFinal::InternalSwap(Req_SKF_MacFinal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbmacdata_.Swap(&other->pbmacdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hmac_, other->hmac_);
  swap(pulmacdatalen_, other->pulmacdatalen_);
}

::google::protobuf::Metadata Req_SKF_MacFinal::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_MacFinal::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_MacFinal_default_instance_._instance.get_mutable()->pulmacdatalen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_MacFinal::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& pulmacdatalen(const Rsp_SKF_MacFinal* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_MacFinal::HasBitSetters::pulmacdatalen(const Rsp_SKF_MacFinal* msg) {
  return *msg->pulmacdatalen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_MacFinal::kPbMacDataFieldNumber;
const int Rsp_SKF_MacFinal::kPulMacDataLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_MacFinal::Rsp_SKF_MacFinal()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_MacFinal)
}
Rsp_SKF_MacFinal::Rsp_SKF_MacFinal(const Rsp_SKF_MacFinal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbmacdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbmacdata().size() > 0) {
    pbmacdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbmacdata_);
  }
  if (from.has_pulmacdatalen()) {
    pulmacdatalen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulmacdatalen_);
  } else {
    pulmacdatalen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_MacFinal)
}

void Rsp_SKF_MacFinal::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_MacFinal_skf_2eproto.base);
  pbmacdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pulmacdatalen_ = nullptr;
}

Rsp_SKF_MacFinal::~Rsp_SKF_MacFinal() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_MacFinal)
  SharedDtor();
}

void Rsp_SKF_MacFinal::SharedDtor() {
  pbmacdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pulmacdatalen_;
}

void Rsp_SKF_MacFinal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_MacFinal& Rsp_SKF_MacFinal::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_MacFinal_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_MacFinal::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_MacFinal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbmacdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && pulmacdatalen_ != nullptr) {
    delete pulmacdatalen_;
  }
  pulmacdatalen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_MacFinal::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_MacFinal*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes pbMacData = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbmacdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulMacDataLen = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulmacdatalen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_MacFinal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_MacFinal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes pbMacData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbmacdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulMacDataLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulmacdatalen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_MacFinal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_MacFinal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_MacFinal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_MacFinal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbMacData = 2;
  if (this->pbmacdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pbmacdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulMacDataLen = 3;
  if (this->has_pulmacdatalen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::pulmacdatalen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_MacFinal)
}

::google::protobuf::uint8* Rsp_SKF_MacFinal::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_MacFinal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbMacData = 2;
  if (this->pbmacdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pbmacdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulMacDataLen = 3;
  if (this->has_pulmacdatalen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::pulmacdatalen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_MacFinal)
  return target;
}

size_t Rsp_SKF_MacFinal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_MacFinal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbMacData = 2;
  if (this->pbmacdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbmacdata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulMacDataLen = 3;
  if (this->has_pulmacdatalen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulmacdatalen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_MacFinal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_MacFinal)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_MacFinal* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_MacFinal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_MacFinal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_MacFinal)
    MergeFrom(*source);
  }
}

void Rsp_SKF_MacFinal::MergeFrom(const Rsp_SKF_MacFinal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_MacFinal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbmacdata().size() > 0) {

    pbmacdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbmacdata_);
  }
  if (from.has_pulmacdatalen()) {
    mutable_pulmacdatalen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulmacdatalen());
  }
}

void Rsp_SKF_MacFinal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_MacFinal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_MacFinal::CopyFrom(const Rsp_SKF_MacFinal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_MacFinal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_MacFinal::IsInitialized() const {
  return true;
}

void Rsp_SKF_MacFinal::Swap(Rsp_SKF_MacFinal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_MacFinal::InternalSwap(Rsp_SKF_MacFinal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbmacdata_.Swap(&other->pbmacdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pulmacdatalen_, other->pulmacdatalen_);
}

::google::protobuf::Metadata Rsp_SKF_MacFinal::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_CloseHandle::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_CloseHandle_default_instance_._instance.get_mutable()->hhandle_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_CloseHandle::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hhandle(const Req_SKF_CloseHandle* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_CloseHandle::HasBitSetters::hhandle(const Req_SKF_CloseHandle* msg) {
  return *msg->hhandle_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_CloseHandle::kHHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_CloseHandle::Req_SKF_CloseHandle()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_CloseHandle)
}
Req_SKF_CloseHandle::Req_SKF_CloseHandle(const Req_SKF_CloseHandle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hhandle()) {
    hhandle_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hhandle_);
  } else {
    hhandle_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_CloseHandle)
}

void Req_SKF_CloseHandle::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_CloseHandle_skf_2eproto.base);
  hhandle_ = nullptr;
}

Req_SKF_CloseHandle::~Req_SKF_CloseHandle() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_CloseHandle)
  SharedDtor();
}

void Req_SKF_CloseHandle::SharedDtor() {
  if (this != internal_default_instance()) delete hhandle_;
}

void Req_SKF_CloseHandle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_CloseHandle& Req_SKF_CloseHandle::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_CloseHandle_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_CloseHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_CloseHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && hhandle_ != nullptr) {
    delete hhandle_;
  }
  hhandle_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_CloseHandle::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_CloseHandle*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hHandle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hhandle();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_CloseHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_CloseHandle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hHandle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hhandle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_CloseHandle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_CloseHandle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_CloseHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_CloseHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hHandle = 1;
  if (this->has_hhandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hhandle(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_CloseHandle)
}

::google::protobuf::uint8* Req_SKF_CloseHandle::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_CloseHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hHandle = 1;
  if (this->has_hhandle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hhandle(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_CloseHandle)
  return target;
}

size_t Req_SKF_CloseHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_CloseHandle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hHandle = 1;
  if (this->has_hhandle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hhandle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_CloseHandle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_CloseHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_CloseHandle* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_CloseHandle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_CloseHandle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_CloseHandle)
    MergeFrom(*source);
  }
}

void Req_SKF_CloseHandle::MergeFrom(const Req_SKF_CloseHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_CloseHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hhandle()) {
    mutable_hhandle()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hhandle());
  }
}

void Req_SKF_CloseHandle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_CloseHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_CloseHandle::CopyFrom(const Req_SKF_CloseHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_CloseHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_CloseHandle::IsInitialized() const {
  return true;
}

void Req_SKF_CloseHandle::Swap(Req_SKF_CloseHandle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_CloseHandle::InternalSwap(Req_SKF_CloseHandle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(hhandle_, other->hhandle_);
}

::google::protobuf::Metadata Req_SKF_CloseHandle::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_CloseHandle::InitAsDefaultInstance() {
}
class Rsp_SKF_CloseHandle::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_CloseHandle::Rsp_SKF_CloseHandle()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_CloseHandle)
}
Rsp_SKF_CloseHandle::Rsp_SKF_CloseHandle(const Rsp_SKF_CloseHandle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_CloseHandle)
}

void Rsp_SKF_CloseHandle::SharedCtor() {
}

Rsp_SKF_CloseHandle::~Rsp_SKF_CloseHandle() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_CloseHandle)
  SharedDtor();
}

void Rsp_SKF_CloseHandle::SharedDtor() {
}

void Rsp_SKF_CloseHandle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_CloseHandle& Rsp_SKF_CloseHandle::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_CloseHandle_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_CloseHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_CloseHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_CloseHandle::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_CloseHandle*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_CloseHandle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_CloseHandle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_CloseHandle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_CloseHandle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_CloseHandle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_CloseHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_CloseHandle)
}

::google::protobuf::uint8* Rsp_SKF_CloseHandle::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_CloseHandle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_CloseHandle)
  return target;
}

size_t Rsp_SKF_CloseHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_CloseHandle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_CloseHandle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_CloseHandle)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_CloseHandle* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_CloseHandle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_CloseHandle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_CloseHandle)
    MergeFrom(*source);
  }
}

void Rsp_SKF_CloseHandle::MergeFrom(const Rsp_SKF_CloseHandle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_CloseHandle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rsp_SKF_CloseHandle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_CloseHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_CloseHandle::CopyFrom(const Rsp_SKF_CloseHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_CloseHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_CloseHandle::IsInitialized() const {
  return true;
}

void Rsp_SKF_CloseHandle::Swap(Rsp_SKF_CloseHandle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_CloseHandle::InternalSwap(Rsp_SKF_CloseHandle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rsp_SKF_CloseHandle::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_Transmit::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_Transmit_default_instance_._instance.get_mutable()->hdev_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_Transmit_default_instance_._instance.get_mutable()->ulcommandlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_Transmit_default_instance_._instance.get_mutable()->puldatalen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_Transmit::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hdev(const Req_SKF_Transmit* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulcommandlen(const Req_SKF_Transmit* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& puldatalen(const Req_SKF_Transmit* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_Transmit::HasBitSetters::hdev(const Req_SKF_Transmit* msg) {
  return *msg->hdev_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_Transmit::HasBitSetters::ulcommandlen(const Req_SKF_Transmit* msg) {
  return *msg->ulcommandlen_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_Transmit::HasBitSetters::puldatalen(const Req_SKF_Transmit* msg) {
  return *msg->puldatalen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_Transmit::kHDevFieldNumber;
const int Req_SKF_Transmit::kPbCommandFieldNumber;
const int Req_SKF_Transmit::kUlCommandLenFieldNumber;
const int Req_SKF_Transmit::kPbDataFieldNumber;
const int Req_SKF_Transmit::kPulDataLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_Transmit::Req_SKF_Transmit()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_Transmit)
}
Req_SKF_Transmit::Req_SKF_Transmit(const Req_SKF_Transmit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbcommand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbcommand().size() > 0) {
    pbcommand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbcommand_);
  }
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbdata().size() > 0) {
    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.has_hdev()) {
    hdev_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hdev_);
  } else {
    hdev_ = nullptr;
  }
  if (from.has_ulcommandlen()) {
    ulcommandlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulcommandlen_);
  } else {
    ulcommandlen_ = nullptr;
  }
  if (from.has_puldatalen()) {
    puldatalen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.puldatalen_);
  } else {
    puldatalen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_Transmit)
}

void Req_SKF_Transmit::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_Transmit_skf_2eproto.base);
  pbcommand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hdev_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&puldatalen_) -
      reinterpret_cast<char*>(&hdev_)) + sizeof(puldatalen_));
}

Req_SKF_Transmit::~Req_SKF_Transmit() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_Transmit)
  SharedDtor();
}

void Req_SKF_Transmit::SharedDtor() {
  pbcommand_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hdev_;
  if (this != internal_default_instance()) delete ulcommandlen_;
  if (this != internal_default_instance()) delete puldatalen_;
}

void Req_SKF_Transmit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_Transmit& Req_SKF_Transmit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_Transmit_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_Transmit::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_Transmit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbcommand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulcommandlen_ != nullptr) {
    delete ulcommandlen_;
  }
  ulcommandlen_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && puldatalen_ != nullptr) {
    delete puldatalen_;
  }
  puldatalen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_Transmit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_Transmit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hdev();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbCommand = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbcommand();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulCommandLen = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulcommandlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbData = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_puldatalen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_Transmit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_Transmit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hdev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbCommand = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbcommand()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulCommandLen = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulcommandlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbData = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_puldatalen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_Transmit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_Transmit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_Transmit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_Transmit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hdev(this), output);
  }

  // bytes pbCommand = 2;
  if (this->pbcommand().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pbcommand(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulCommandLen = 3;
  if (this->has_ulcommandlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::ulcommandlen(this), output);
  }

  // bytes pbData = 4;
  if (this->pbdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->pbdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 5;
  if (this->has_puldatalen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::puldatalen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_Transmit)
}

::google::protobuf::uint8* Req_SKF_Transmit::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_Transmit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hdev(this), target);
  }

  // bytes pbCommand = 2;
  if (this->pbcommand().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pbcommand(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulCommandLen = 3;
  if (this->has_ulcommandlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::ulcommandlen(this), target);
  }

  // bytes pbData = 4;
  if (this->pbdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->pbdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 5;
  if (this->has_puldatalen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::puldatalen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_Transmit)
  return target;
}

size_t Req_SKF_Transmit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_Transmit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbCommand = 2;
  if (this->pbcommand().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbcommand());
  }

  // bytes pbData = 4;
  if (this->pbdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbdata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  if (this->has_hdev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hdev_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulCommandLen = 3;
  if (this->has_ulcommandlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulcommandlen_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 5;
  if (this->has_puldatalen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *puldatalen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_Transmit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_Transmit)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_Transmit* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_Transmit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_Transmit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_Transmit)
    MergeFrom(*source);
  }
}

void Req_SKF_Transmit::MergeFrom(const Req_SKF_Transmit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_Transmit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbcommand().size() > 0) {

    pbcommand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbcommand_);
  }
  if (from.pbdata().size() > 0) {

    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.has_hdev()) {
    mutable_hdev()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hdev());
  }
  if (from.has_ulcommandlen()) {
    mutable_ulcommandlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulcommandlen());
  }
  if (from.has_puldatalen()) {
    mutable_puldatalen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.puldatalen());
  }
}

void Req_SKF_Transmit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_Transmit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_Transmit::CopyFrom(const Req_SKF_Transmit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_Transmit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_Transmit::IsInitialized() const {
  return true;
}

void Req_SKF_Transmit::Swap(Req_SKF_Transmit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_Transmit::InternalSwap(Req_SKF_Transmit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbcommand_.Swap(&other->pbcommand_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pbdata_.Swap(&other->pbdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hdev_, other->hdev_);
  swap(ulcommandlen_, other->ulcommandlen_);
  swap(puldatalen_, other->puldatalen_);
}

::google::protobuf::Metadata Req_SKF_Transmit::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_Transmit::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_Transmit_default_instance_._instance.get_mutable()->puldatalen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_Transmit::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& puldatalen(const Rsp_SKF_Transmit* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_Transmit::HasBitSetters::puldatalen(const Rsp_SKF_Transmit* msg) {
  return *msg->puldatalen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_Transmit::kPbDataFieldNumber;
const int Rsp_SKF_Transmit::kPulDataLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_Transmit::Rsp_SKF_Transmit()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_Transmit)
}
Rsp_SKF_Transmit::Rsp_SKF_Transmit(const Rsp_SKF_Transmit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbdata().size() > 0) {
    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.has_puldatalen()) {
    puldatalen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.puldatalen_);
  } else {
    puldatalen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_Transmit)
}

void Rsp_SKF_Transmit::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_Transmit_skf_2eproto.base);
  pbdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  puldatalen_ = nullptr;
}

Rsp_SKF_Transmit::~Rsp_SKF_Transmit() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_Transmit)
  SharedDtor();
}

void Rsp_SKF_Transmit::SharedDtor() {
  pbdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete puldatalen_;
}

void Rsp_SKF_Transmit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_Transmit& Rsp_SKF_Transmit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_Transmit_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_Transmit::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_Transmit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && puldatalen_ != nullptr) {
    delete puldatalen_;
  }
  puldatalen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_Transmit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_Transmit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes pbData = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbdata();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_puldatalen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_Transmit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_Transmit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes pbData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_puldatalen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_Transmit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_Transmit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_Transmit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_Transmit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbData = 1;
  if (this->pbdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pbdata(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 2;
  if (this->has_puldatalen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::puldatalen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_Transmit)
}

::google::protobuf::uint8* Rsp_SKF_Transmit::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_Transmit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbData = 1;
  if (this->pbdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pbdata(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 2;
  if (this->has_puldatalen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::puldatalen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_Transmit)
  return target;
}

size_t Rsp_SKF_Transmit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_Transmit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbData = 1;
  if (this->pbdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbdata());
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 2;
  if (this->has_puldatalen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *puldatalen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_Transmit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_Transmit)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_Transmit* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_Transmit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_Transmit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_Transmit)
    MergeFrom(*source);
  }
}

void Rsp_SKF_Transmit::MergeFrom(const Rsp_SKF_Transmit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_Transmit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbdata().size() > 0) {

    pbdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbdata_);
  }
  if (from.has_puldatalen()) {
    mutable_puldatalen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.puldatalen());
  }
}

void Rsp_SKF_Transmit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_Transmit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_Transmit::CopyFrom(const Rsp_SKF_Transmit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_Transmit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_Transmit::IsInitialized() const {
  return true;
}

void Rsp_SKF_Transmit::Swap(Rsp_SKF_Transmit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_Transmit::InternalSwap(Rsp_SKF_Transmit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbdata_.Swap(&other->pbdata_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(puldatalen_, other->puldatalen_);
}

::google::protobuf::Metadata Rsp_SKF_Transmit::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_ImportCertificate::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_ImportCertificate_default_instance_._instance.get_mutable()->hcontainer_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ImportCertificate_default_instance_._instance.get_mutable()->bsignflag_ = const_cast< ::com::westone::skf::WST_PROTO_BOOL*>(
      ::com::westone::skf::WST_PROTO_BOOL::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ImportCertificate_default_instance_._instance.get_mutable()->ulcertlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_ImportCertificate::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hcontainer(const Req_SKF_ImportCertificate* msg);
  static const ::com::westone::skf::WST_PROTO_BOOL& bsignflag(const Req_SKF_ImportCertificate* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& ulcertlen(const Req_SKF_ImportCertificate* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ImportCertificate::HasBitSetters::hcontainer(const Req_SKF_ImportCertificate* msg) {
  return *msg->hcontainer_;
}
const ::com::westone::skf::WST_PROTO_BOOL&
Req_SKF_ImportCertificate::HasBitSetters::bsignflag(const Req_SKF_ImportCertificate* msg) {
  return *msg->bsignflag_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ImportCertificate::HasBitSetters::ulcertlen(const Req_SKF_ImportCertificate* msg) {
  return *msg->ulcertlen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_ImportCertificate::kHContainerFieldNumber;
const int Req_SKF_ImportCertificate::kBSignFlagFieldNumber;
const int Req_SKF_ImportCertificate::kPbCertFieldNumber;
const int Req_SKF_ImportCertificate::kUlCertLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_ImportCertificate::Req_SKF_ImportCertificate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_ImportCertificate)
}
Req_SKF_ImportCertificate::Req_SKF_ImportCertificate(const Req_SKF_ImportCertificate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbcert_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbcert().size() > 0) {
    pbcert_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbcert_);
  }
  if (from.has_hcontainer()) {
    hcontainer_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hcontainer_);
  } else {
    hcontainer_ = nullptr;
  }
  if (from.has_bsignflag()) {
    bsignflag_ = new ::com::westone::skf::WST_PROTO_BOOL(*from.bsignflag_);
  } else {
    bsignflag_ = nullptr;
  }
  if (from.has_ulcertlen()) {
    ulcertlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.ulcertlen_);
  } else {
    ulcertlen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_ImportCertificate)
}

void Req_SKF_ImportCertificate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_ImportCertificate_skf_2eproto.base);
  pbcert_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hcontainer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ulcertlen_) -
      reinterpret_cast<char*>(&hcontainer_)) + sizeof(ulcertlen_));
}

Req_SKF_ImportCertificate::~Req_SKF_ImportCertificate() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_ImportCertificate)
  SharedDtor();
}

void Req_SKF_ImportCertificate::SharedDtor() {
  pbcert_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hcontainer_;
  if (this != internal_default_instance()) delete bsignflag_;
  if (this != internal_default_instance()) delete ulcertlen_;
}

void Req_SKF_ImportCertificate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_ImportCertificate& Req_SKF_ImportCertificate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_ImportCertificate_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_ImportCertificate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_ImportCertificate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbcert_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bsignflag_ != nullptr) {
    delete bsignflag_;
  }
  bsignflag_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ulcertlen_ != nullptr) {
    delete ulcertlen_;
  }
  ulcertlen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_ImportCertificate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_ImportCertificate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hcontainer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_BOOL bSignFlag = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_BOOL::_InternalParse;
        object = msg->mutable_bsignflag();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbCert = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbcert();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 ulCertLen = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_ulcertlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_ImportCertificate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_ImportCertificate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hcontainer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_BOOL bSignFlag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bsignflag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbCert = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbcert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 ulCertLen = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ulcertlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_ImportCertificate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_ImportCertificate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_ImportCertificate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_ImportCertificate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hcontainer(this), output);
  }

  // .com.westone.skf.WST_PROTO_BOOL bSignFlag = 2;
  if (this->has_bsignflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::bsignflag(this), output);
  }

  // bytes pbCert = 3;
  if (this->pbcert().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->pbcert(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulCertLen = 4;
  if (this->has_ulcertlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::ulcertlen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_ImportCertificate)
}

::google::protobuf::uint8* Req_SKF_ImportCertificate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_ImportCertificate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hcontainer(this), target);
  }

  // .com.westone.skf.WST_PROTO_BOOL bSignFlag = 2;
  if (this->has_bsignflag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::bsignflag(this), target);
  }

  // bytes pbCert = 3;
  if (this->pbcert().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->pbcert(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulCertLen = 4;
  if (this->has_ulcertlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::ulcertlen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_ImportCertificate)
  return target;
}

size_t Req_SKF_ImportCertificate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_ImportCertificate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbCert = 3;
  if (this->pbcert().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbcert());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hcontainer_);
  }

  // .com.westone.skf.WST_PROTO_BOOL bSignFlag = 2;
  if (this->has_bsignflag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bsignflag_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 ulCertLen = 4;
  if (this->has_ulcertlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ulcertlen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_ImportCertificate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_ImportCertificate)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_ImportCertificate* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_ImportCertificate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_ImportCertificate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_ImportCertificate)
    MergeFrom(*source);
  }
}

void Req_SKF_ImportCertificate::MergeFrom(const Req_SKF_ImportCertificate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_ImportCertificate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbcert().size() > 0) {

    pbcert_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbcert_);
  }
  if (from.has_hcontainer()) {
    mutable_hcontainer()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hcontainer());
  }
  if (from.has_bsignflag()) {
    mutable_bsignflag()->::com::westone::skf::WST_PROTO_BOOL::MergeFrom(from.bsignflag());
  }
  if (from.has_ulcertlen()) {
    mutable_ulcertlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.ulcertlen());
  }
}

void Req_SKF_ImportCertificate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_ImportCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_ImportCertificate::CopyFrom(const Req_SKF_ImportCertificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_ImportCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_ImportCertificate::IsInitialized() const {
  return true;
}

void Req_SKF_ImportCertificate::Swap(Req_SKF_ImportCertificate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_ImportCertificate::InternalSwap(Req_SKF_ImportCertificate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbcert_.Swap(&other->pbcert_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hcontainer_, other->hcontainer_);
  swap(bsignflag_, other->bsignflag_);
  swap(ulcertlen_, other->ulcertlen_);
}

::google::protobuf::Metadata Req_SKF_ImportCertificate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_ImportCertificate::InitAsDefaultInstance() {
}
class Rsp_SKF_ImportCertificate::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_ImportCertificate::Rsp_SKF_ImportCertificate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_ImportCertificate)
}
Rsp_SKF_ImportCertificate::Rsp_SKF_ImportCertificate(const Rsp_SKF_ImportCertificate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_ImportCertificate)
}

void Rsp_SKF_ImportCertificate::SharedCtor() {
}

Rsp_SKF_ImportCertificate::~Rsp_SKF_ImportCertificate() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_ImportCertificate)
  SharedDtor();
}

void Rsp_SKF_ImportCertificate::SharedDtor() {
}

void Rsp_SKF_ImportCertificate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_ImportCertificate& Rsp_SKF_ImportCertificate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_ImportCertificate_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_ImportCertificate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_ImportCertificate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_ImportCertificate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_ImportCertificate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_ImportCertificate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_ImportCertificate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_ImportCertificate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_ImportCertificate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_ImportCertificate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_ImportCertificate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_ImportCertificate)
}

::google::protobuf::uint8* Rsp_SKF_ImportCertificate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_ImportCertificate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_ImportCertificate)
  return target;
}

size_t Rsp_SKF_ImportCertificate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_ImportCertificate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_ImportCertificate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_ImportCertificate)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_ImportCertificate* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_ImportCertificate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_ImportCertificate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_ImportCertificate)
    MergeFrom(*source);
  }
}

void Rsp_SKF_ImportCertificate::MergeFrom(const Rsp_SKF_ImportCertificate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_ImportCertificate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Rsp_SKF_ImportCertificate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_ImportCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_ImportCertificate::CopyFrom(const Rsp_SKF_ImportCertificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_ImportCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_ImportCertificate::IsInitialized() const {
  return true;
}

void Rsp_SKF_ImportCertificate::Swap(Rsp_SKF_ImportCertificate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_ImportCertificate::InternalSwap(Rsp_SKF_ImportCertificate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rsp_SKF_ImportCertificate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_ExportCertificate::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_ExportCertificate_default_instance_._instance.get_mutable()->hcontainer_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ExportCertificate_default_instance_._instance.get_mutable()->bsignflag_ = const_cast< ::com::westone::skf::WST_PROTO_BOOL*>(
      ::com::westone::skf::WST_PROTO_BOOL::internal_default_instance());
  ::com::westone::skf::_Req_SKF_ExportCertificate_default_instance_._instance.get_mutable()->pulcertlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_ExportCertificate::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hcontainer(const Req_SKF_ExportCertificate* msg);
  static const ::com::westone::skf::WST_PROTO_BOOL& bsignflag(const Req_SKF_ExportCertificate* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& pulcertlen(const Req_SKF_ExportCertificate* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ExportCertificate::HasBitSetters::hcontainer(const Req_SKF_ExportCertificate* msg) {
  return *msg->hcontainer_;
}
const ::com::westone::skf::WST_PROTO_BOOL&
Req_SKF_ExportCertificate::HasBitSetters::bsignflag(const Req_SKF_ExportCertificate* msg) {
  return *msg->bsignflag_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_ExportCertificate::HasBitSetters::pulcertlen(const Req_SKF_ExportCertificate* msg) {
  return *msg->pulcertlen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_ExportCertificate::kHContainerFieldNumber;
const int Req_SKF_ExportCertificate::kBSignFlagFieldNumber;
const int Req_SKF_ExportCertificate::kPbCertFieldNumber;
const int Req_SKF_ExportCertificate::kPulCertLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_ExportCertificate::Req_SKF_ExportCertificate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_ExportCertificate)
}
Req_SKF_ExportCertificate::Req_SKF_ExportCertificate(const Req_SKF_ExportCertificate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbcert_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbcert().size() > 0) {
    pbcert_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbcert_);
  }
  if (from.has_hcontainer()) {
    hcontainer_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hcontainer_);
  } else {
    hcontainer_ = nullptr;
  }
  if (from.has_bsignflag()) {
    bsignflag_ = new ::com::westone::skf::WST_PROTO_BOOL(*from.bsignflag_);
  } else {
    bsignflag_ = nullptr;
  }
  if (from.has_pulcertlen()) {
    pulcertlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulcertlen_);
  } else {
    pulcertlen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_ExportCertificate)
}

void Req_SKF_ExportCertificate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_ExportCertificate_skf_2eproto.base);
  pbcert_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hcontainer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pulcertlen_) -
      reinterpret_cast<char*>(&hcontainer_)) + sizeof(pulcertlen_));
}

Req_SKF_ExportCertificate::~Req_SKF_ExportCertificate() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_ExportCertificate)
  SharedDtor();
}

void Req_SKF_ExportCertificate::SharedDtor() {
  pbcert_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hcontainer_;
  if (this != internal_default_instance()) delete bsignflag_;
  if (this != internal_default_instance()) delete pulcertlen_;
}

void Req_SKF_ExportCertificate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_ExportCertificate& Req_SKF_ExportCertificate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_ExportCertificate_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_ExportCertificate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_ExportCertificate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbcert_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bsignflag_ != nullptr) {
    delete bsignflag_;
  }
  bsignflag_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pulcertlen_ != nullptr) {
    delete pulcertlen_;
  }
  pulcertlen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_ExportCertificate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_ExportCertificate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hcontainer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_BOOL bSignFlag = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_BOOL::_InternalParse;
        object = msg->mutable_bsignflag();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bytes pbCert = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbcert();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulCertLen = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulcertlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_ExportCertificate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_ExportCertificate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hcontainer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_BOOL bSignFlag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bsignflag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pbCert = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbcert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulCertLen = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulcertlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_ExportCertificate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_ExportCertificate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_ExportCertificate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_ExportCertificate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hcontainer(this), output);
  }

  // .com.westone.skf.WST_PROTO_BOOL bSignFlag = 2;
  if (this->has_bsignflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::bsignflag(this), output);
  }

  // bytes pbCert = 4;
  if (this->pbcert().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->pbcert(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulCertLen = 5;
  if (this->has_pulcertlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::pulcertlen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_ExportCertificate)
}

::google::protobuf::uint8* Req_SKF_ExportCertificate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_ExportCertificate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hcontainer(this), target);
  }

  // .com.westone.skf.WST_PROTO_BOOL bSignFlag = 2;
  if (this->has_bsignflag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::bsignflag(this), target);
  }

  // bytes pbCert = 4;
  if (this->pbcert().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->pbcert(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulCertLen = 5;
  if (this->has_pulcertlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::pulcertlen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_ExportCertificate)
  return target;
}

size_t Req_SKF_ExportCertificate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_ExportCertificate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbCert = 4;
  if (this->pbcert().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbcert());
  }

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hcontainer_);
  }

  // .com.westone.skf.WST_PROTO_BOOL bSignFlag = 2;
  if (this->has_bsignflag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bsignflag_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulCertLen = 5;
  if (this->has_pulcertlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulcertlen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_ExportCertificate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_ExportCertificate)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_ExportCertificate* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_ExportCertificate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_ExportCertificate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_ExportCertificate)
    MergeFrom(*source);
  }
}

void Req_SKF_ExportCertificate::MergeFrom(const Req_SKF_ExportCertificate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_ExportCertificate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbcert().size() > 0) {

    pbcert_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbcert_);
  }
  if (from.has_hcontainer()) {
    mutable_hcontainer()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hcontainer());
  }
  if (from.has_bsignflag()) {
    mutable_bsignflag()->::com::westone::skf::WST_PROTO_BOOL::MergeFrom(from.bsignflag());
  }
  if (from.has_pulcertlen()) {
    mutable_pulcertlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulcertlen());
  }
}

void Req_SKF_ExportCertificate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_ExportCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_ExportCertificate::CopyFrom(const Req_SKF_ExportCertificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_ExportCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_ExportCertificate::IsInitialized() const {
  return true;
}

void Req_SKF_ExportCertificate::Swap(Req_SKF_ExportCertificate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_ExportCertificate::InternalSwap(Req_SKF_ExportCertificate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbcert_.Swap(&other->pbcert_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hcontainer_, other->hcontainer_);
  swap(bsignflag_, other->bsignflag_);
  swap(pulcertlen_, other->pulcertlen_);
}

::google::protobuf::Metadata Req_SKF_ExportCertificate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_ExportCertificate::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_ExportCertificate_default_instance_._instance.get_mutable()->pulcertlen_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_ExportCertificate::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& pulcertlen(const Rsp_SKF_ExportCertificate* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_ExportCertificate::HasBitSetters::pulcertlen(const Rsp_SKF_ExportCertificate* msg) {
  return *msg->pulcertlen_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_ExportCertificate::kPbCertFieldNumber;
const int Rsp_SKF_ExportCertificate::kPulCertLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_ExportCertificate::Rsp_SKF_ExportCertificate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_ExportCertificate)
}
Rsp_SKF_ExportCertificate::Rsp_SKF_ExportCertificate(const Rsp_SKF_ExportCertificate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pbcert_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pbcert().size() > 0) {
    pbcert_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbcert_);
  }
  if (from.has_pulcertlen()) {
    pulcertlen_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulcertlen_);
  } else {
    pulcertlen_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_ExportCertificate)
}

void Rsp_SKF_ExportCertificate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_ExportCertificate_skf_2eproto.base);
  pbcert_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pulcertlen_ = nullptr;
}

Rsp_SKF_ExportCertificate::~Rsp_SKF_ExportCertificate() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_ExportCertificate)
  SharedDtor();
}

void Rsp_SKF_ExportCertificate::SharedDtor() {
  pbcert_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pulcertlen_;
}

void Rsp_SKF_ExportCertificate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_ExportCertificate& Rsp_SKF_ExportCertificate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_ExportCertificate_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_ExportCertificate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_ExportCertificate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pbcert_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && pulcertlen_ != nullptr) {
    delete pulcertlen_;
  }
  pulcertlen_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_ExportCertificate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_ExportCertificate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes pbCert = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_pbcert();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulCertLen = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulcertlen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_ExportCertificate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_ExportCertificate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes pbCert = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pbcert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulCertLen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulcertlen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_ExportCertificate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_ExportCertificate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_ExportCertificate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_ExportCertificate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbCert = 1;
  if (this->pbcert().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->pbcert(), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulCertLen = 2;
  if (this->has_pulcertlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pulcertlen(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_ExportCertificate)
}

::google::protobuf::uint8* Rsp_SKF_ExportCertificate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_ExportCertificate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pbCert = 1;
  if (this->pbcert().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->pbcert(), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulCertLen = 2;
  if (this->has_pulcertlen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pulcertlen(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_ExportCertificate)
  return target;
}

size_t Rsp_SKF_ExportCertificate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_ExportCertificate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pbCert = 1;
  if (this->pbcert().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pbcert());
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulCertLen = 2;
  if (this->has_pulcertlen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulcertlen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_ExportCertificate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_ExportCertificate)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_ExportCertificate* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_ExportCertificate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_ExportCertificate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_ExportCertificate)
    MergeFrom(*source);
  }
}

void Rsp_SKF_ExportCertificate::MergeFrom(const Rsp_SKF_ExportCertificate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_ExportCertificate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pbcert().size() > 0) {

    pbcert_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pbcert_);
  }
  if (from.has_pulcertlen()) {
    mutable_pulcertlen()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulcertlen());
  }
}

void Rsp_SKF_ExportCertificate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_ExportCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_ExportCertificate::CopyFrom(const Rsp_SKF_ExportCertificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_ExportCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_ExportCertificate::IsInitialized() const {
  return true;
}

void Rsp_SKF_ExportCertificate::Swap(Rsp_SKF_ExportCertificate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_ExportCertificate::InternalSwap(Rsp_SKF_ExportCertificate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pbcert_.Swap(&other->pbcert_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pulcertlen_, other->pulcertlen_);
}

::google::protobuf::Metadata Rsp_SKF_ExportCertificate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Req_SKF_GetContainerProperty::InitAsDefaultInstance() {
  ::com::westone::skf::_Req_SKF_GetContainerProperty_default_instance_._instance.get_mutable()->hcontainer_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
  ::com::westone::skf::_Req_SKF_GetContainerProperty_default_instance_._instance.get_mutable()->pulconproperty_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Req_SKF_GetContainerProperty::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& hcontainer(const Req_SKF_GetContainerProperty* msg);
  static const ::com::westone::skf::WST_PROTO_UINT32& pulconproperty(const Req_SKF_GetContainerProperty* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GetContainerProperty::HasBitSetters::hcontainer(const Req_SKF_GetContainerProperty* msg) {
  return *msg->hcontainer_;
}
const ::com::westone::skf::WST_PROTO_UINT32&
Req_SKF_GetContainerProperty::HasBitSetters::pulconproperty(const Req_SKF_GetContainerProperty* msg) {
  return *msg->pulconproperty_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Req_SKF_GetContainerProperty::kHContainerFieldNumber;
const int Req_SKF_GetContainerProperty::kPulConPropertyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Req_SKF_GetContainerProperty::Req_SKF_GetContainerProperty()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Req_SKF_GetContainerProperty)
}
Req_SKF_GetContainerProperty::Req_SKF_GetContainerProperty(const Req_SKF_GetContainerProperty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hcontainer()) {
    hcontainer_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.hcontainer_);
  } else {
    hcontainer_ = nullptr;
  }
  if (from.has_pulconproperty()) {
    pulconproperty_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulconproperty_);
  } else {
    pulconproperty_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Req_SKF_GetContainerProperty)
}

void Req_SKF_GetContainerProperty::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Req_SKF_GetContainerProperty_skf_2eproto.base);
  ::memset(&hcontainer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pulconproperty_) -
      reinterpret_cast<char*>(&hcontainer_)) + sizeof(pulconproperty_));
}

Req_SKF_GetContainerProperty::~Req_SKF_GetContainerProperty() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Req_SKF_GetContainerProperty)
  SharedDtor();
}

void Req_SKF_GetContainerProperty::SharedDtor() {
  if (this != internal_default_instance()) delete hcontainer_;
  if (this != internal_default_instance()) delete pulconproperty_;
}

void Req_SKF_GetContainerProperty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Req_SKF_GetContainerProperty& Req_SKF_GetContainerProperty::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Req_SKF_GetContainerProperty_skf_2eproto.base);
  return *internal_default_instance();
}


void Req_SKF_GetContainerProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Req_SKF_GetContainerProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pulconproperty_ != nullptr) {
    delete pulconproperty_;
  }
  pulconproperty_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Req_SKF_GetContainerProperty::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Req_SKF_GetContainerProperty*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_hcontainer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.westone.skf.WST_PROTO_UINT32 pulConProperty = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulconproperty();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Req_SKF_GetContainerProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Req_SKF_GetContainerProperty)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_hcontainer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.westone.skf.WST_PROTO_UINT32 pulConProperty = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulconproperty()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Req_SKF_GetContainerProperty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Req_SKF_GetContainerProperty)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Req_SKF_GetContainerProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Req_SKF_GetContainerProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::hcontainer(this), output);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulConProperty = 2;
  if (this->has_pulconproperty()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pulconproperty(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Req_SKF_GetContainerProperty)
}

::google::protobuf::uint8* Req_SKF_GetContainerProperty::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Req_SKF_GetContainerProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::hcontainer(this), target);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulConProperty = 2;
  if (this->has_pulconproperty()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pulconproperty(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Req_SKF_GetContainerProperty)
  return target;
}

size_t Req_SKF_GetContainerProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Req_SKF_GetContainerProperty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  if (this->has_hcontainer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *hcontainer_);
  }

  // .com.westone.skf.WST_PROTO_UINT32 pulConProperty = 2;
  if (this->has_pulconproperty()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulconproperty_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Req_SKF_GetContainerProperty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Req_SKF_GetContainerProperty)
  GOOGLE_DCHECK_NE(&from, this);
  const Req_SKF_GetContainerProperty* source =
      ::google::protobuf::DynamicCastToGenerated<Req_SKF_GetContainerProperty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Req_SKF_GetContainerProperty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Req_SKF_GetContainerProperty)
    MergeFrom(*source);
  }
}

void Req_SKF_GetContainerProperty::MergeFrom(const Req_SKF_GetContainerProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Req_SKF_GetContainerProperty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hcontainer()) {
    mutable_hcontainer()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.hcontainer());
  }
  if (from.has_pulconproperty()) {
    mutable_pulconproperty()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulconproperty());
  }
}

void Req_SKF_GetContainerProperty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Req_SKF_GetContainerProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Req_SKF_GetContainerProperty::CopyFrom(const Req_SKF_GetContainerProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Req_SKF_GetContainerProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Req_SKF_GetContainerProperty::IsInitialized() const {
  return true;
}

void Req_SKF_GetContainerProperty::Swap(Req_SKF_GetContainerProperty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Req_SKF_GetContainerProperty::InternalSwap(Req_SKF_GetContainerProperty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(hcontainer_, other->hcontainer_);
  swap(pulconproperty_, other->pulconproperty_);
}

::google::protobuf::Metadata Req_SKF_GetContainerProperty::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Rsp_SKF_GetContainerProperty::InitAsDefaultInstance() {
  ::com::westone::skf::_Rsp_SKF_GetContainerProperty_default_instance_._instance.get_mutable()->pulconproperty_ = const_cast< ::com::westone::skf::WST_PROTO_UINT32*>(
      ::com::westone::skf::WST_PROTO_UINT32::internal_default_instance());
}
class Rsp_SKF_GetContainerProperty::HasBitSetters {
 public:
  static const ::com::westone::skf::WST_PROTO_UINT32& pulconproperty(const Rsp_SKF_GetContainerProperty* msg);
};

const ::com::westone::skf::WST_PROTO_UINT32&
Rsp_SKF_GetContainerProperty::HasBitSetters::pulconproperty(const Rsp_SKF_GetContainerProperty* msg) {
  return *msg->pulconproperty_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rsp_SKF_GetContainerProperty::kPulConPropertyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rsp_SKF_GetContainerProperty::Rsp_SKF_GetContainerProperty()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.westone.skf.Rsp_SKF_GetContainerProperty)
}
Rsp_SKF_GetContainerProperty::Rsp_SKF_GetContainerProperty(const Rsp_SKF_GetContainerProperty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pulconproperty()) {
    pulconproperty_ = new ::com::westone::skf::WST_PROTO_UINT32(*from.pulconproperty_);
  } else {
    pulconproperty_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.westone.skf.Rsp_SKF_GetContainerProperty)
}

void Rsp_SKF_GetContainerProperty::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Rsp_SKF_GetContainerProperty_skf_2eproto.base);
  pulconproperty_ = nullptr;
}

Rsp_SKF_GetContainerProperty::~Rsp_SKF_GetContainerProperty() {
  // @@protoc_insertion_point(destructor:com.westone.skf.Rsp_SKF_GetContainerProperty)
  SharedDtor();
}

void Rsp_SKF_GetContainerProperty::SharedDtor() {
  if (this != internal_default_instance()) delete pulconproperty_;
}

void Rsp_SKF_GetContainerProperty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rsp_SKF_GetContainerProperty& Rsp_SKF_GetContainerProperty::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Rsp_SKF_GetContainerProperty_skf_2eproto.base);
  return *internal_default_instance();
}


void Rsp_SKF_GetContainerProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:com.westone.skf.Rsp_SKF_GetContainerProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pulconproperty_ != nullptr) {
    delete pulconproperty_;
  }
  pulconproperty_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rsp_SKF_GetContainerProperty::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Rsp_SKF_GetContainerProperty*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.westone.skf.WST_PROTO_UINT32 pulConProperty = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::westone::skf::WST_PROTO_UINT32::_InternalParse;
        object = msg->mutable_pulconproperty();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rsp_SKF_GetContainerProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.westone.skf.Rsp_SKF_GetContainerProperty)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.westone.skf.WST_PROTO_UINT32 pulConProperty = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pulconproperty()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.westone.skf.Rsp_SKF_GetContainerProperty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.westone.skf.Rsp_SKF_GetContainerProperty)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rsp_SKF_GetContainerProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.westone.skf.Rsp_SKF_GetContainerProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 pulConProperty = 1;
  if (this->has_pulconproperty()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::pulconproperty(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.westone.skf.Rsp_SKF_GetContainerProperty)
}

::google::protobuf::uint8* Rsp_SKF_GetContainerProperty::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.westone.skf.Rsp_SKF_GetContainerProperty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 pulConProperty = 1;
  if (this->has_pulconproperty()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::pulconproperty(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.westone.skf.Rsp_SKF_GetContainerProperty)
  return target;
}

size_t Rsp_SKF_GetContainerProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.westone.skf.Rsp_SKF_GetContainerProperty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.westone.skf.WST_PROTO_UINT32 pulConProperty = 1;
  if (this->has_pulconproperty()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pulconproperty_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rsp_SKF_GetContainerProperty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.westone.skf.Rsp_SKF_GetContainerProperty)
  GOOGLE_DCHECK_NE(&from, this);
  const Rsp_SKF_GetContainerProperty* source =
      ::google::protobuf::DynamicCastToGenerated<Rsp_SKF_GetContainerProperty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.westone.skf.Rsp_SKF_GetContainerProperty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.westone.skf.Rsp_SKF_GetContainerProperty)
    MergeFrom(*source);
  }
}

void Rsp_SKF_GetContainerProperty::MergeFrom(const Rsp_SKF_GetContainerProperty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.westone.skf.Rsp_SKF_GetContainerProperty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pulconproperty()) {
    mutable_pulconproperty()->::com::westone::skf::WST_PROTO_UINT32::MergeFrom(from.pulconproperty());
  }
}

void Rsp_SKF_GetContainerProperty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.westone.skf.Rsp_SKF_GetContainerProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rsp_SKF_GetContainerProperty::CopyFrom(const Rsp_SKF_GetContainerProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.westone.skf.Rsp_SKF_GetContainerProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rsp_SKF_GetContainerProperty::IsInitialized() const {
  return true;
}

void Rsp_SKF_GetContainerProperty::Swap(Rsp_SKF_GetContainerProperty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rsp_SKF_GetContainerProperty::InternalSwap(Rsp_SKF_GetContainerProperty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pulconproperty_, other->pulconproperty_);
}

::google::protobuf::Metadata Rsp_SKF_GetContainerProperty::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_skf_2eproto);
  return ::file_level_metadata_skf_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace skf
}  // namespace westone
}  // namespace com
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::com::westone::skf::WST_PROTO_UINT32* Arena::CreateMaybeMessage< ::com::westone::skf::WST_PROTO_UINT32 >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::WST_PROTO_UINT32 >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::WST_PROTO_BOOL* Arena::CreateMaybeMessage< ::com::westone::skf::WST_PROTO_BOOL >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::WST_PROTO_BOOL >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::SKF_Version* Arena::CreateMaybeMessage< ::com::westone::skf::SKF_Version >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::SKF_Version >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::SKF_DevInfo* Arena::CreateMaybeMessage< ::com::westone::skf::SKF_DevInfo >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::SKF_DevInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* Arena::CreateMaybeMessage< ::com::westone::skf::SKF_RSAPUBLICKEYBLOB >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::SKF_RSAPUBLICKEYBLOB >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::SKF_RSAPRIVATEKEYBLOB* Arena::CreateMaybeMessage< ::com::westone::skf::SKF_RSAPRIVATEKEYBLOB >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::SKF_RSAPRIVATEKEYBLOB >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Arena::CreateMaybeMessage< ::com::westone::skf::SKF_ECCPUBLICKEYBLOB >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::SKF_ECCPUBLICKEYBLOB >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB* Arena::CreateMaybeMessage< ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::SKF_ECCCIPHERBLOB* Arena::CreateMaybeMessage< ::com::westone::skf::SKF_ECCCIPHERBLOB >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::SKF_ECCCIPHERBLOB >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::SKF_ECCSIGNATUREBLOB* Arena::CreateMaybeMessage< ::com::westone::skf::SKF_ECCSIGNATUREBLOB >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::SKF_ECCSIGNATUREBLOB >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::SKF_BLOCKCIPHERPARAM* Arena::CreateMaybeMessage< ::com::westone::skf::SKF_BLOCKCIPHERPARAM >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::SKF_BLOCKCIPHERPARAM >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::SKF_ENVELOPEDKEYBLOB* Arena::CreateMaybeMessage< ::com::westone::skf::SKF_ENVELOPEDKEYBLOB >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::SKF_ENVELOPEDKEYBLOB >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::SKF_FILEATTRIBUTES* Arena::CreateMaybeMessage< ::com::westone::skf::SKF_FILEATTRIBUTES >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::SKF_FILEATTRIBUTES >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_WaitForDevEvent* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_WaitForDevEvent >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_WaitForDevEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_WaitForDevEvent* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_WaitForDevEvent >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_WaitForDevEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_CancelWaitForDevEvent* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_CancelWaitForDevEvent >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_CancelWaitForDevEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_CancelWaitForDevEvent* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_CancelWaitForDevEvent >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_CancelWaitForDevEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_EnumDev* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_EnumDev >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_EnumDev >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_EnumDev* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_EnumDev >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_EnumDev >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_ConnectDev* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_ConnectDev >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_ConnectDev >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_ConnectDev* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_ConnectDev >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_ConnectDev >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_DisConnectDev* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_DisConnectDev >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_DisConnectDev >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_DisConnectDev* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_DisConnectDev >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_DisConnectDev >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_GetDevState* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_GetDevState >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_GetDevState >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_GetDevState* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_GetDevState >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_GetDevState >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_SetLabel* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_SetLabel >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_SetLabel >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_SetLabel* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_SetLabel >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_SetLabel >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_GetDevInfo* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_GetDevInfo >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_GetDevInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_GetDevInfo* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_GetDevInfo >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_GetDevInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_LockDev* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_LockDev >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_LockDev >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_LockDev* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_LockDev >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_LockDev >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_UnlockDev* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_UnlockDev >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_UnlockDev >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_UnlockDev* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_UnlockDev >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_UnlockDev >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_ChangeDevAuthKey* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_ChangeDevAuthKey >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_ChangeDevAuthKey >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_ChangeDevAuthKey* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_ChangeDevAuthKey >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_ChangeDevAuthKey >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_DevAuth* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_DevAuth >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_DevAuth >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_DevAuth* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_DevAuth >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_DevAuth >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_ChangePIN* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_ChangePIN >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_ChangePIN >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_ChangePIN* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_ChangePIN >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_ChangePIN >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_GetPINInfo* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_GetPINInfo >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_GetPINInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_GetPINInfo* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_GetPINInfo >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_GetPINInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_VerifyPIN* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_VerifyPIN >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_VerifyPIN >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_VerifyPIN* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_VerifyPIN >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_VerifyPIN >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_UnblockPIN* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_UnblockPIN >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_UnblockPIN >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_UnblockPIN* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_UnblockPIN >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_UnblockPIN >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_ClearSecureState* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_ClearSecureState >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_ClearSecureState >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_ClearSecureState* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_ClearSecureState >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_ClearSecureState >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_CreateApplication* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_CreateApplication >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_CreateApplication >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_CreateApplication* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_CreateApplication >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_CreateApplication >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_EnumApplication* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_EnumApplication >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_EnumApplication >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_EnumApplication* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_EnumApplication >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_EnumApplication >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_DeleteApplication* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_DeleteApplication >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_DeleteApplication >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_DeleteApplication* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_DeleteApplication >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_DeleteApplication >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_OpenApplication* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_OpenApplication >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_OpenApplication >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_OpenApplication* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_OpenApplication >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_OpenApplication >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_CloseApplication* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_CloseApplication >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_CloseApplication >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_CloseApplication* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_CloseApplication >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_CloseApplication >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_CreateFile* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_CreateFile >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_CreateFile >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_CreateFile* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_CreateFile >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_CreateFile >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_DeleteFile* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_DeleteFile >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_DeleteFile >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_DeleteFile* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_DeleteFile >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_DeleteFile >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_EnumFiles* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_EnumFiles >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_EnumFiles >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_EnumFiles* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_EnumFiles >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_EnumFiles >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_GetFileInfo* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_GetFileInfo >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_GetFileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_GetFileInfo* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_GetFileInfo >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_GetFileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_ReadFile* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_ReadFile >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_ReadFile >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_ReadFile* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_ReadFile >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_ReadFile >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_WriteFile* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_WriteFile >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_WriteFile >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_WriteFile* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_WriteFile >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_WriteFile >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_CreateContainer* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_CreateContainer >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_CreateContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_CreateContainer* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_CreateContainer >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_CreateContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_DeleteContainer* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_DeleteContainer >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_DeleteContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_DeleteContainer* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_DeleteContainer >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_DeleteContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_OpenContainer* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_OpenContainer >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_OpenContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_OpenContainer* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_OpenContainer >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_OpenContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_CloseContainer* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_CloseContainer >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_CloseContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_CloseContainer* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_CloseContainer >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_CloseContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_EnumContainer* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_EnumContainer >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_EnumContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_EnumContainer* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_EnumContainer >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_EnumContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_GetContainerType* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_GetContainerType >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_GetContainerType >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_GetContainerType* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_GetContainerType >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_GetContainerType >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_GenRandom* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_GenRandom >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_GenRandom >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_GenRandom* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_GenRandom >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_GenRandom >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_GenExtRSAKey* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_GenExtRSAKey >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_GenExtRSAKey >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_GenExtRSAKey* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_GenExtRSAKey >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_GenExtRSAKey >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_GenRSAKeyPair* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_GenRSAKeyPair >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_GenRSAKeyPair >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_GenRSAKeyPair* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_GenRSAKeyPair >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_GenRSAKeyPair >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_ImportRSAKeyPair* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_ImportRSAKeyPair >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_ImportRSAKeyPair >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_ImportRSAKeyPair* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_ImportRSAKeyPair >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_ImportRSAKeyPair >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_RSASignData* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_RSASignData >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_RSASignData >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_RSASignData* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_RSASignData >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_RSASignData >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_RSAVerify* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_RSAVerify >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_RSAVerify >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_RSAVerify* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_RSAVerify >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_RSAVerify >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_RSAExportSessionKey* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_RSAExportSessionKey >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_RSAExportSessionKey >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_RSAExportSessionKey* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_RSAExportSessionKey >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_RSAExportSessionKey >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_ExtRSAPubKeyOperation* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_ExtRSAPubKeyOperation >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_ExtRSAPubKeyOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_ExtRSAPubKeyOperation* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_ExtRSAPubKeyOperation >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_ExtRSAPubKeyOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_ExtRSAPriKeyOperation* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_ExtRSAPriKeyOperation >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_ExtRSAPriKeyOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_ExtRSAPriKeyOperation* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_ExtRSAPriKeyOperation >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_ExtRSAPriKeyOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_GenECCKeyPair* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_GenECCKeyPair >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_GenECCKeyPair >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_GenECCKeyPair* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_GenECCKeyPair >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_GenECCKeyPair >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_ImportECCKeyPair* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_ImportECCKeyPair >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_ImportECCKeyPair >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_ImportECCKeyPair* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_ImportECCKeyPair >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_ImportECCKeyPair >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_ECCSignData* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_ECCSignData >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_ECCSignData >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_ECCSignData* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_ECCSignData >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_ECCSignData >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_ECCVerify* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_ECCVerify >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_ECCVerify >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_ECCVerify* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_ECCVerify >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_ECCVerify >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_ECCExportSessionKey* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_ECCExportSessionKey >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_ECCExportSessionKey >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_ECCExportSessionKey* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_ECCExportSessionKey >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_ECCExportSessionKey >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_ExtECCEncrypt* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_ExtECCEncrypt >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_ExtECCEncrypt >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_ExtECCEncrypt* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_ExtECCEncrypt >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_ExtECCEncrypt >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_ExtECCDecrypt* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_ExtECCDecrypt >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_ExtECCDecrypt >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_ExtECCDecrypt* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_ExtECCDecrypt >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_ExtECCDecrypt >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_ExtECCSign* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_ExtECCSign >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_ExtECCSign >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_ExtECCSign* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_ExtECCSign >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_ExtECCSign >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_ExtECCVerify* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_ExtECCVerify >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_ExtECCVerify >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_ExtECCVerify* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_ExtECCVerify >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_ExtECCVerify >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_GenerateAgreementDataWithECC* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_GenerateAgreementDataWithECC >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_GenerateAgreementDataWithECC >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_GenerateAgreementDataWithECC* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_GenerateAgreementDataWithECC >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_GenerateAgreementDataWithECC >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_GenerateAgreementDataAndKeyWithECC* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_GenerateAgreementDataAndKeyWithECC >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_GenerateAgreementDataAndKeyWithECC >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_GenerateAgreementDataAndKeyWithECC* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_GenerateAgreementDataAndKeyWithECC >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_GenerateAgreementDataAndKeyWithECC >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_GenerateKeyWithECC* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_GenerateKeyWithECC >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_GenerateKeyWithECC >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_GenerateKeyWithECC* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_GenerateKeyWithECC >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_GenerateKeyWithECC >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_ExportPublicKey* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_ExportPublicKey >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_ExportPublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_ExportPublicKey* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_ExportPublicKey >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_ExportPublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_ImportSessionKey* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_ImportSessionKey >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_ImportSessionKey >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_ImportSessionKey* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_ImportSessionKey >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_ImportSessionKey >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_SetSymmKey* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_SetSymmKey >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_SetSymmKey >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_SetSymmKey* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_SetSymmKey >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_SetSymmKey >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_EncryptInit* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_EncryptInit >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_EncryptInit >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_EncryptInit* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_EncryptInit >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_EncryptInit >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_Encrypt* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_Encrypt >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_Encrypt >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_Encrypt* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_Encrypt >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_Encrypt >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_EncryptUpdate* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_EncryptUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_EncryptUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_EncryptUpdate* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_EncryptUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_EncryptUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_EncryptFinal* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_EncryptFinal >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_EncryptFinal >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_EncryptFinal* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_EncryptFinal >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_EncryptFinal >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_DecryptInit* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_DecryptInit >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_DecryptInit >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_DecryptInit* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_DecryptInit >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_DecryptInit >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_Decrypt* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_Decrypt >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_Decrypt >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_Decrypt* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_Decrypt >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_Decrypt >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_DecryptUpdate* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_DecryptUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_DecryptUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_DecryptUpdate* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_DecryptUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_DecryptUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_DecryptFinal* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_DecryptFinal >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_DecryptFinal >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_DecryptFinal* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_DecryptFinal >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_DecryptFinal >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_DigestInit* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_DigestInit >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_DigestInit >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_DigestInit* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_DigestInit >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_DigestInit >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_Digest* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_Digest >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_Digest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_Digest* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_Digest >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_Digest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_DigestUpdate* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_DigestUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_DigestUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_DigestUpdate* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_DigestUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_DigestUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_DigestFinal* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_DigestFinal >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_DigestFinal >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_DigestFinal* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_DigestFinal >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_DigestFinal >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_MacInit* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_MacInit >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_MacInit >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_MacInit* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_MacInit >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_MacInit >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_Mac* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_Mac >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_Mac >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_Mac* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_Mac >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_Mac >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_MacUpdate* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_MacUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_MacUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_MacUpdate* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_MacUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_MacUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_MacFinal* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_MacFinal >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_MacFinal >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_MacFinal* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_MacFinal >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_MacFinal >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_CloseHandle* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_CloseHandle >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_CloseHandle >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_CloseHandle* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_CloseHandle >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_CloseHandle >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_Transmit* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_Transmit >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_Transmit >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_Transmit* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_Transmit >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_Transmit >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_ImportCertificate* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_ImportCertificate >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_ImportCertificate >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_ImportCertificate* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_ImportCertificate >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_ImportCertificate >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_ExportCertificate* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_ExportCertificate >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_ExportCertificate >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_ExportCertificate* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_ExportCertificate >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_ExportCertificate >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Req_SKF_GetContainerProperty* Arena::CreateMaybeMessage< ::com::westone::skf::Req_SKF_GetContainerProperty >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Req_SKF_GetContainerProperty >(arena);
}
template<> PROTOBUF_NOINLINE ::com::westone::skf::Rsp_SKF_GetContainerProperty* Arena::CreateMaybeMessage< ::com::westone::skf::Rsp_SKF_GetContainerProperty >(Arena* arena) {
  return Arena::CreateInternal< ::com::westone::skf::Rsp_SKF_GetContainerProperty >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
