// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: skf.proto

#ifndef PROTOBUF_INCLUDED_skf_2eproto
#define PROTOBUF_INCLUDED_skf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_skf_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_skf_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[171]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_skf_2eproto();
namespace com {
namespace westone {
namespace skf {
class Req_SKF_CancelWaitForDevEvent;
class Req_SKF_CancelWaitForDevEventDefaultTypeInternal;
extern Req_SKF_CancelWaitForDevEventDefaultTypeInternal _Req_SKF_CancelWaitForDevEvent_default_instance_;
class Req_SKF_ChangeDevAuthKey;
class Req_SKF_ChangeDevAuthKeyDefaultTypeInternal;
extern Req_SKF_ChangeDevAuthKeyDefaultTypeInternal _Req_SKF_ChangeDevAuthKey_default_instance_;
class Req_SKF_ChangePIN;
class Req_SKF_ChangePINDefaultTypeInternal;
extern Req_SKF_ChangePINDefaultTypeInternal _Req_SKF_ChangePIN_default_instance_;
class Req_SKF_ClearSecureState;
class Req_SKF_ClearSecureStateDefaultTypeInternal;
extern Req_SKF_ClearSecureStateDefaultTypeInternal _Req_SKF_ClearSecureState_default_instance_;
class Req_SKF_CloseApplication;
class Req_SKF_CloseApplicationDefaultTypeInternal;
extern Req_SKF_CloseApplicationDefaultTypeInternal _Req_SKF_CloseApplication_default_instance_;
class Req_SKF_CloseContainer;
class Req_SKF_CloseContainerDefaultTypeInternal;
extern Req_SKF_CloseContainerDefaultTypeInternal _Req_SKF_CloseContainer_default_instance_;
class Req_SKF_CloseHandle;
class Req_SKF_CloseHandleDefaultTypeInternal;
extern Req_SKF_CloseHandleDefaultTypeInternal _Req_SKF_CloseHandle_default_instance_;
class Req_SKF_ConnectDev;
class Req_SKF_ConnectDevDefaultTypeInternal;
extern Req_SKF_ConnectDevDefaultTypeInternal _Req_SKF_ConnectDev_default_instance_;
class Req_SKF_CreateApplication;
class Req_SKF_CreateApplicationDefaultTypeInternal;
extern Req_SKF_CreateApplicationDefaultTypeInternal _Req_SKF_CreateApplication_default_instance_;
class Req_SKF_CreateContainer;
class Req_SKF_CreateContainerDefaultTypeInternal;
extern Req_SKF_CreateContainerDefaultTypeInternal _Req_SKF_CreateContainer_default_instance_;
class Req_SKF_CreateFile;
class Req_SKF_CreateFileDefaultTypeInternal;
extern Req_SKF_CreateFileDefaultTypeInternal _Req_SKF_CreateFile_default_instance_;
class Req_SKF_Decrypt;
class Req_SKF_DecryptDefaultTypeInternal;
extern Req_SKF_DecryptDefaultTypeInternal _Req_SKF_Decrypt_default_instance_;
class Req_SKF_DecryptFinal;
class Req_SKF_DecryptFinalDefaultTypeInternal;
extern Req_SKF_DecryptFinalDefaultTypeInternal _Req_SKF_DecryptFinal_default_instance_;
class Req_SKF_DecryptInit;
class Req_SKF_DecryptInitDefaultTypeInternal;
extern Req_SKF_DecryptInitDefaultTypeInternal _Req_SKF_DecryptInit_default_instance_;
class Req_SKF_DecryptUpdate;
class Req_SKF_DecryptUpdateDefaultTypeInternal;
extern Req_SKF_DecryptUpdateDefaultTypeInternal _Req_SKF_DecryptUpdate_default_instance_;
class Req_SKF_DeleteApplication;
class Req_SKF_DeleteApplicationDefaultTypeInternal;
extern Req_SKF_DeleteApplicationDefaultTypeInternal _Req_SKF_DeleteApplication_default_instance_;
class Req_SKF_DeleteContainer;
class Req_SKF_DeleteContainerDefaultTypeInternal;
extern Req_SKF_DeleteContainerDefaultTypeInternal _Req_SKF_DeleteContainer_default_instance_;
class Req_SKF_DeleteFile;
class Req_SKF_DeleteFileDefaultTypeInternal;
extern Req_SKF_DeleteFileDefaultTypeInternal _Req_SKF_DeleteFile_default_instance_;
class Req_SKF_DevAuth;
class Req_SKF_DevAuthDefaultTypeInternal;
extern Req_SKF_DevAuthDefaultTypeInternal _Req_SKF_DevAuth_default_instance_;
class Req_SKF_Digest;
class Req_SKF_DigestDefaultTypeInternal;
extern Req_SKF_DigestDefaultTypeInternal _Req_SKF_Digest_default_instance_;
class Req_SKF_DigestFinal;
class Req_SKF_DigestFinalDefaultTypeInternal;
extern Req_SKF_DigestFinalDefaultTypeInternal _Req_SKF_DigestFinal_default_instance_;
class Req_SKF_DigestInit;
class Req_SKF_DigestInitDefaultTypeInternal;
extern Req_SKF_DigestInitDefaultTypeInternal _Req_SKF_DigestInit_default_instance_;
class Req_SKF_DigestUpdate;
class Req_SKF_DigestUpdateDefaultTypeInternal;
extern Req_SKF_DigestUpdateDefaultTypeInternal _Req_SKF_DigestUpdate_default_instance_;
class Req_SKF_DisConnectDev;
class Req_SKF_DisConnectDevDefaultTypeInternal;
extern Req_SKF_DisConnectDevDefaultTypeInternal _Req_SKF_DisConnectDev_default_instance_;
class Req_SKF_ECCExportSessionKey;
class Req_SKF_ECCExportSessionKeyDefaultTypeInternal;
extern Req_SKF_ECCExportSessionKeyDefaultTypeInternal _Req_SKF_ECCExportSessionKey_default_instance_;
class Req_SKF_ECCSignData;
class Req_SKF_ECCSignDataDefaultTypeInternal;
extern Req_SKF_ECCSignDataDefaultTypeInternal _Req_SKF_ECCSignData_default_instance_;
class Req_SKF_ECCVerify;
class Req_SKF_ECCVerifyDefaultTypeInternal;
extern Req_SKF_ECCVerifyDefaultTypeInternal _Req_SKF_ECCVerify_default_instance_;
class Req_SKF_Encrypt;
class Req_SKF_EncryptDefaultTypeInternal;
extern Req_SKF_EncryptDefaultTypeInternal _Req_SKF_Encrypt_default_instance_;
class Req_SKF_EncryptFinal;
class Req_SKF_EncryptFinalDefaultTypeInternal;
extern Req_SKF_EncryptFinalDefaultTypeInternal _Req_SKF_EncryptFinal_default_instance_;
class Req_SKF_EncryptInit;
class Req_SKF_EncryptInitDefaultTypeInternal;
extern Req_SKF_EncryptInitDefaultTypeInternal _Req_SKF_EncryptInit_default_instance_;
class Req_SKF_EncryptUpdate;
class Req_SKF_EncryptUpdateDefaultTypeInternal;
extern Req_SKF_EncryptUpdateDefaultTypeInternal _Req_SKF_EncryptUpdate_default_instance_;
class Req_SKF_EnumApplication;
class Req_SKF_EnumApplicationDefaultTypeInternal;
extern Req_SKF_EnumApplicationDefaultTypeInternal _Req_SKF_EnumApplication_default_instance_;
class Req_SKF_EnumContainer;
class Req_SKF_EnumContainerDefaultTypeInternal;
extern Req_SKF_EnumContainerDefaultTypeInternal _Req_SKF_EnumContainer_default_instance_;
class Req_SKF_EnumDev;
class Req_SKF_EnumDevDefaultTypeInternal;
extern Req_SKF_EnumDevDefaultTypeInternal _Req_SKF_EnumDev_default_instance_;
class Req_SKF_EnumFiles;
class Req_SKF_EnumFilesDefaultTypeInternal;
extern Req_SKF_EnumFilesDefaultTypeInternal _Req_SKF_EnumFiles_default_instance_;
class Req_SKF_ExportCertificate;
class Req_SKF_ExportCertificateDefaultTypeInternal;
extern Req_SKF_ExportCertificateDefaultTypeInternal _Req_SKF_ExportCertificate_default_instance_;
class Req_SKF_ExportPublicKey;
class Req_SKF_ExportPublicKeyDefaultTypeInternal;
extern Req_SKF_ExportPublicKeyDefaultTypeInternal _Req_SKF_ExportPublicKey_default_instance_;
class Req_SKF_ExtECCDecrypt;
class Req_SKF_ExtECCDecryptDefaultTypeInternal;
extern Req_SKF_ExtECCDecryptDefaultTypeInternal _Req_SKF_ExtECCDecrypt_default_instance_;
class Req_SKF_ExtECCEncrypt;
class Req_SKF_ExtECCEncryptDefaultTypeInternal;
extern Req_SKF_ExtECCEncryptDefaultTypeInternal _Req_SKF_ExtECCEncrypt_default_instance_;
class Req_SKF_ExtECCSign;
class Req_SKF_ExtECCSignDefaultTypeInternal;
extern Req_SKF_ExtECCSignDefaultTypeInternal _Req_SKF_ExtECCSign_default_instance_;
class Req_SKF_ExtECCVerify;
class Req_SKF_ExtECCVerifyDefaultTypeInternal;
extern Req_SKF_ExtECCVerifyDefaultTypeInternal _Req_SKF_ExtECCVerify_default_instance_;
class Req_SKF_ExtRSAPriKeyOperation;
class Req_SKF_ExtRSAPriKeyOperationDefaultTypeInternal;
extern Req_SKF_ExtRSAPriKeyOperationDefaultTypeInternal _Req_SKF_ExtRSAPriKeyOperation_default_instance_;
class Req_SKF_ExtRSAPubKeyOperation;
class Req_SKF_ExtRSAPubKeyOperationDefaultTypeInternal;
extern Req_SKF_ExtRSAPubKeyOperationDefaultTypeInternal _Req_SKF_ExtRSAPubKeyOperation_default_instance_;
class Req_SKF_GenECCKeyPair;
class Req_SKF_GenECCKeyPairDefaultTypeInternal;
extern Req_SKF_GenECCKeyPairDefaultTypeInternal _Req_SKF_GenECCKeyPair_default_instance_;
class Req_SKF_GenExtRSAKey;
class Req_SKF_GenExtRSAKeyDefaultTypeInternal;
extern Req_SKF_GenExtRSAKeyDefaultTypeInternal _Req_SKF_GenExtRSAKey_default_instance_;
class Req_SKF_GenRSAKeyPair;
class Req_SKF_GenRSAKeyPairDefaultTypeInternal;
extern Req_SKF_GenRSAKeyPairDefaultTypeInternal _Req_SKF_GenRSAKeyPair_default_instance_;
class Req_SKF_GenRandom;
class Req_SKF_GenRandomDefaultTypeInternal;
extern Req_SKF_GenRandomDefaultTypeInternal _Req_SKF_GenRandom_default_instance_;
class Req_SKF_GenerateAgreementDataAndKeyWithECC;
class Req_SKF_GenerateAgreementDataAndKeyWithECCDefaultTypeInternal;
extern Req_SKF_GenerateAgreementDataAndKeyWithECCDefaultTypeInternal _Req_SKF_GenerateAgreementDataAndKeyWithECC_default_instance_;
class Req_SKF_GenerateAgreementDataWithECC;
class Req_SKF_GenerateAgreementDataWithECCDefaultTypeInternal;
extern Req_SKF_GenerateAgreementDataWithECCDefaultTypeInternal _Req_SKF_GenerateAgreementDataWithECC_default_instance_;
class Req_SKF_GenerateKeyWithECC;
class Req_SKF_GenerateKeyWithECCDefaultTypeInternal;
extern Req_SKF_GenerateKeyWithECCDefaultTypeInternal _Req_SKF_GenerateKeyWithECC_default_instance_;
class Req_SKF_GetContainerProperty;
class Req_SKF_GetContainerPropertyDefaultTypeInternal;
extern Req_SKF_GetContainerPropertyDefaultTypeInternal _Req_SKF_GetContainerProperty_default_instance_;
class Req_SKF_GetContainerType;
class Req_SKF_GetContainerTypeDefaultTypeInternal;
extern Req_SKF_GetContainerTypeDefaultTypeInternal _Req_SKF_GetContainerType_default_instance_;
class Req_SKF_GetDevInfo;
class Req_SKF_GetDevInfoDefaultTypeInternal;
extern Req_SKF_GetDevInfoDefaultTypeInternal _Req_SKF_GetDevInfo_default_instance_;
class Req_SKF_GetDevState;
class Req_SKF_GetDevStateDefaultTypeInternal;
extern Req_SKF_GetDevStateDefaultTypeInternal _Req_SKF_GetDevState_default_instance_;
class Req_SKF_GetFileInfo;
class Req_SKF_GetFileInfoDefaultTypeInternal;
extern Req_SKF_GetFileInfoDefaultTypeInternal _Req_SKF_GetFileInfo_default_instance_;
class Req_SKF_GetPINInfo;
class Req_SKF_GetPINInfoDefaultTypeInternal;
extern Req_SKF_GetPINInfoDefaultTypeInternal _Req_SKF_GetPINInfo_default_instance_;
class Req_SKF_ImportCertificate;
class Req_SKF_ImportCertificateDefaultTypeInternal;
extern Req_SKF_ImportCertificateDefaultTypeInternal _Req_SKF_ImportCertificate_default_instance_;
class Req_SKF_ImportECCKeyPair;
class Req_SKF_ImportECCKeyPairDefaultTypeInternal;
extern Req_SKF_ImportECCKeyPairDefaultTypeInternal _Req_SKF_ImportECCKeyPair_default_instance_;
class Req_SKF_ImportRSAKeyPair;
class Req_SKF_ImportRSAKeyPairDefaultTypeInternal;
extern Req_SKF_ImportRSAKeyPairDefaultTypeInternal _Req_SKF_ImportRSAKeyPair_default_instance_;
class Req_SKF_ImportSessionKey;
class Req_SKF_ImportSessionKeyDefaultTypeInternal;
extern Req_SKF_ImportSessionKeyDefaultTypeInternal _Req_SKF_ImportSessionKey_default_instance_;
class Req_SKF_LockDev;
class Req_SKF_LockDevDefaultTypeInternal;
extern Req_SKF_LockDevDefaultTypeInternal _Req_SKF_LockDev_default_instance_;
class Req_SKF_Mac;
class Req_SKF_MacDefaultTypeInternal;
extern Req_SKF_MacDefaultTypeInternal _Req_SKF_Mac_default_instance_;
class Req_SKF_MacFinal;
class Req_SKF_MacFinalDefaultTypeInternal;
extern Req_SKF_MacFinalDefaultTypeInternal _Req_SKF_MacFinal_default_instance_;
class Req_SKF_MacInit;
class Req_SKF_MacInitDefaultTypeInternal;
extern Req_SKF_MacInitDefaultTypeInternal _Req_SKF_MacInit_default_instance_;
class Req_SKF_MacUpdate;
class Req_SKF_MacUpdateDefaultTypeInternal;
extern Req_SKF_MacUpdateDefaultTypeInternal _Req_SKF_MacUpdate_default_instance_;
class Req_SKF_OpenApplication;
class Req_SKF_OpenApplicationDefaultTypeInternal;
extern Req_SKF_OpenApplicationDefaultTypeInternal _Req_SKF_OpenApplication_default_instance_;
class Req_SKF_OpenContainer;
class Req_SKF_OpenContainerDefaultTypeInternal;
extern Req_SKF_OpenContainerDefaultTypeInternal _Req_SKF_OpenContainer_default_instance_;
class Req_SKF_RSAExportSessionKey;
class Req_SKF_RSAExportSessionKeyDefaultTypeInternal;
extern Req_SKF_RSAExportSessionKeyDefaultTypeInternal _Req_SKF_RSAExportSessionKey_default_instance_;
class Req_SKF_RSASignData;
class Req_SKF_RSASignDataDefaultTypeInternal;
extern Req_SKF_RSASignDataDefaultTypeInternal _Req_SKF_RSASignData_default_instance_;
class Req_SKF_RSAVerify;
class Req_SKF_RSAVerifyDefaultTypeInternal;
extern Req_SKF_RSAVerifyDefaultTypeInternal _Req_SKF_RSAVerify_default_instance_;
class Req_SKF_ReadFile;
class Req_SKF_ReadFileDefaultTypeInternal;
extern Req_SKF_ReadFileDefaultTypeInternal _Req_SKF_ReadFile_default_instance_;
class Req_SKF_SetLabel;
class Req_SKF_SetLabelDefaultTypeInternal;
extern Req_SKF_SetLabelDefaultTypeInternal _Req_SKF_SetLabel_default_instance_;
class Req_SKF_SetSymmKey;
class Req_SKF_SetSymmKeyDefaultTypeInternal;
extern Req_SKF_SetSymmKeyDefaultTypeInternal _Req_SKF_SetSymmKey_default_instance_;
class Req_SKF_Transmit;
class Req_SKF_TransmitDefaultTypeInternal;
extern Req_SKF_TransmitDefaultTypeInternal _Req_SKF_Transmit_default_instance_;
class Req_SKF_UnblockPIN;
class Req_SKF_UnblockPINDefaultTypeInternal;
extern Req_SKF_UnblockPINDefaultTypeInternal _Req_SKF_UnblockPIN_default_instance_;
class Req_SKF_UnlockDev;
class Req_SKF_UnlockDevDefaultTypeInternal;
extern Req_SKF_UnlockDevDefaultTypeInternal _Req_SKF_UnlockDev_default_instance_;
class Req_SKF_VerifyPIN;
class Req_SKF_VerifyPINDefaultTypeInternal;
extern Req_SKF_VerifyPINDefaultTypeInternal _Req_SKF_VerifyPIN_default_instance_;
class Req_SKF_WaitForDevEvent;
class Req_SKF_WaitForDevEventDefaultTypeInternal;
extern Req_SKF_WaitForDevEventDefaultTypeInternal _Req_SKF_WaitForDevEvent_default_instance_;
class Req_SKF_WriteFile;
class Req_SKF_WriteFileDefaultTypeInternal;
extern Req_SKF_WriteFileDefaultTypeInternal _Req_SKF_WriteFile_default_instance_;
class Rsp_SKF_CancelWaitForDevEvent;
class Rsp_SKF_CancelWaitForDevEventDefaultTypeInternal;
extern Rsp_SKF_CancelWaitForDevEventDefaultTypeInternal _Rsp_SKF_CancelWaitForDevEvent_default_instance_;
class Rsp_SKF_ChangeDevAuthKey;
class Rsp_SKF_ChangeDevAuthKeyDefaultTypeInternal;
extern Rsp_SKF_ChangeDevAuthKeyDefaultTypeInternal _Rsp_SKF_ChangeDevAuthKey_default_instance_;
class Rsp_SKF_ChangePIN;
class Rsp_SKF_ChangePINDefaultTypeInternal;
extern Rsp_SKF_ChangePINDefaultTypeInternal _Rsp_SKF_ChangePIN_default_instance_;
class Rsp_SKF_ClearSecureState;
class Rsp_SKF_ClearSecureStateDefaultTypeInternal;
extern Rsp_SKF_ClearSecureStateDefaultTypeInternal _Rsp_SKF_ClearSecureState_default_instance_;
class Rsp_SKF_CloseApplication;
class Rsp_SKF_CloseApplicationDefaultTypeInternal;
extern Rsp_SKF_CloseApplicationDefaultTypeInternal _Rsp_SKF_CloseApplication_default_instance_;
class Rsp_SKF_CloseContainer;
class Rsp_SKF_CloseContainerDefaultTypeInternal;
extern Rsp_SKF_CloseContainerDefaultTypeInternal _Rsp_SKF_CloseContainer_default_instance_;
class Rsp_SKF_CloseHandle;
class Rsp_SKF_CloseHandleDefaultTypeInternal;
extern Rsp_SKF_CloseHandleDefaultTypeInternal _Rsp_SKF_CloseHandle_default_instance_;
class Rsp_SKF_ConnectDev;
class Rsp_SKF_ConnectDevDefaultTypeInternal;
extern Rsp_SKF_ConnectDevDefaultTypeInternal _Rsp_SKF_ConnectDev_default_instance_;
class Rsp_SKF_CreateApplication;
class Rsp_SKF_CreateApplicationDefaultTypeInternal;
extern Rsp_SKF_CreateApplicationDefaultTypeInternal _Rsp_SKF_CreateApplication_default_instance_;
class Rsp_SKF_CreateContainer;
class Rsp_SKF_CreateContainerDefaultTypeInternal;
extern Rsp_SKF_CreateContainerDefaultTypeInternal _Rsp_SKF_CreateContainer_default_instance_;
class Rsp_SKF_CreateFile;
class Rsp_SKF_CreateFileDefaultTypeInternal;
extern Rsp_SKF_CreateFileDefaultTypeInternal _Rsp_SKF_CreateFile_default_instance_;
class Rsp_SKF_Decrypt;
class Rsp_SKF_DecryptDefaultTypeInternal;
extern Rsp_SKF_DecryptDefaultTypeInternal _Rsp_SKF_Decrypt_default_instance_;
class Rsp_SKF_DecryptFinal;
class Rsp_SKF_DecryptFinalDefaultTypeInternal;
extern Rsp_SKF_DecryptFinalDefaultTypeInternal _Rsp_SKF_DecryptFinal_default_instance_;
class Rsp_SKF_DecryptInit;
class Rsp_SKF_DecryptInitDefaultTypeInternal;
extern Rsp_SKF_DecryptInitDefaultTypeInternal _Rsp_SKF_DecryptInit_default_instance_;
class Rsp_SKF_DecryptUpdate;
class Rsp_SKF_DecryptUpdateDefaultTypeInternal;
extern Rsp_SKF_DecryptUpdateDefaultTypeInternal _Rsp_SKF_DecryptUpdate_default_instance_;
class Rsp_SKF_DeleteApplication;
class Rsp_SKF_DeleteApplicationDefaultTypeInternal;
extern Rsp_SKF_DeleteApplicationDefaultTypeInternal _Rsp_SKF_DeleteApplication_default_instance_;
class Rsp_SKF_DeleteContainer;
class Rsp_SKF_DeleteContainerDefaultTypeInternal;
extern Rsp_SKF_DeleteContainerDefaultTypeInternal _Rsp_SKF_DeleteContainer_default_instance_;
class Rsp_SKF_DeleteFile;
class Rsp_SKF_DeleteFileDefaultTypeInternal;
extern Rsp_SKF_DeleteFileDefaultTypeInternal _Rsp_SKF_DeleteFile_default_instance_;
class Rsp_SKF_DevAuth;
class Rsp_SKF_DevAuthDefaultTypeInternal;
extern Rsp_SKF_DevAuthDefaultTypeInternal _Rsp_SKF_DevAuth_default_instance_;
class Rsp_SKF_Digest;
class Rsp_SKF_DigestDefaultTypeInternal;
extern Rsp_SKF_DigestDefaultTypeInternal _Rsp_SKF_Digest_default_instance_;
class Rsp_SKF_DigestFinal;
class Rsp_SKF_DigestFinalDefaultTypeInternal;
extern Rsp_SKF_DigestFinalDefaultTypeInternal _Rsp_SKF_DigestFinal_default_instance_;
class Rsp_SKF_DigestInit;
class Rsp_SKF_DigestInitDefaultTypeInternal;
extern Rsp_SKF_DigestInitDefaultTypeInternal _Rsp_SKF_DigestInit_default_instance_;
class Rsp_SKF_DigestUpdate;
class Rsp_SKF_DigestUpdateDefaultTypeInternal;
extern Rsp_SKF_DigestUpdateDefaultTypeInternal _Rsp_SKF_DigestUpdate_default_instance_;
class Rsp_SKF_DisConnectDev;
class Rsp_SKF_DisConnectDevDefaultTypeInternal;
extern Rsp_SKF_DisConnectDevDefaultTypeInternal _Rsp_SKF_DisConnectDev_default_instance_;
class Rsp_SKF_ECCExportSessionKey;
class Rsp_SKF_ECCExportSessionKeyDefaultTypeInternal;
extern Rsp_SKF_ECCExportSessionKeyDefaultTypeInternal _Rsp_SKF_ECCExportSessionKey_default_instance_;
class Rsp_SKF_ECCSignData;
class Rsp_SKF_ECCSignDataDefaultTypeInternal;
extern Rsp_SKF_ECCSignDataDefaultTypeInternal _Rsp_SKF_ECCSignData_default_instance_;
class Rsp_SKF_ECCVerify;
class Rsp_SKF_ECCVerifyDefaultTypeInternal;
extern Rsp_SKF_ECCVerifyDefaultTypeInternal _Rsp_SKF_ECCVerify_default_instance_;
class Rsp_SKF_Encrypt;
class Rsp_SKF_EncryptDefaultTypeInternal;
extern Rsp_SKF_EncryptDefaultTypeInternal _Rsp_SKF_Encrypt_default_instance_;
class Rsp_SKF_EncryptFinal;
class Rsp_SKF_EncryptFinalDefaultTypeInternal;
extern Rsp_SKF_EncryptFinalDefaultTypeInternal _Rsp_SKF_EncryptFinal_default_instance_;
class Rsp_SKF_EncryptInit;
class Rsp_SKF_EncryptInitDefaultTypeInternal;
extern Rsp_SKF_EncryptInitDefaultTypeInternal _Rsp_SKF_EncryptInit_default_instance_;
class Rsp_SKF_EncryptUpdate;
class Rsp_SKF_EncryptUpdateDefaultTypeInternal;
extern Rsp_SKF_EncryptUpdateDefaultTypeInternal _Rsp_SKF_EncryptUpdate_default_instance_;
class Rsp_SKF_EnumApplication;
class Rsp_SKF_EnumApplicationDefaultTypeInternal;
extern Rsp_SKF_EnumApplicationDefaultTypeInternal _Rsp_SKF_EnumApplication_default_instance_;
class Rsp_SKF_EnumContainer;
class Rsp_SKF_EnumContainerDefaultTypeInternal;
extern Rsp_SKF_EnumContainerDefaultTypeInternal _Rsp_SKF_EnumContainer_default_instance_;
class Rsp_SKF_EnumDev;
class Rsp_SKF_EnumDevDefaultTypeInternal;
extern Rsp_SKF_EnumDevDefaultTypeInternal _Rsp_SKF_EnumDev_default_instance_;
class Rsp_SKF_EnumFiles;
class Rsp_SKF_EnumFilesDefaultTypeInternal;
extern Rsp_SKF_EnumFilesDefaultTypeInternal _Rsp_SKF_EnumFiles_default_instance_;
class Rsp_SKF_ExportCertificate;
class Rsp_SKF_ExportCertificateDefaultTypeInternal;
extern Rsp_SKF_ExportCertificateDefaultTypeInternal _Rsp_SKF_ExportCertificate_default_instance_;
class Rsp_SKF_ExportPublicKey;
class Rsp_SKF_ExportPublicKeyDefaultTypeInternal;
extern Rsp_SKF_ExportPublicKeyDefaultTypeInternal _Rsp_SKF_ExportPublicKey_default_instance_;
class Rsp_SKF_ExtECCDecrypt;
class Rsp_SKF_ExtECCDecryptDefaultTypeInternal;
extern Rsp_SKF_ExtECCDecryptDefaultTypeInternal _Rsp_SKF_ExtECCDecrypt_default_instance_;
class Rsp_SKF_ExtECCEncrypt;
class Rsp_SKF_ExtECCEncryptDefaultTypeInternal;
extern Rsp_SKF_ExtECCEncryptDefaultTypeInternal _Rsp_SKF_ExtECCEncrypt_default_instance_;
class Rsp_SKF_ExtECCSign;
class Rsp_SKF_ExtECCSignDefaultTypeInternal;
extern Rsp_SKF_ExtECCSignDefaultTypeInternal _Rsp_SKF_ExtECCSign_default_instance_;
class Rsp_SKF_ExtECCVerify;
class Rsp_SKF_ExtECCVerifyDefaultTypeInternal;
extern Rsp_SKF_ExtECCVerifyDefaultTypeInternal _Rsp_SKF_ExtECCVerify_default_instance_;
class Rsp_SKF_ExtRSAPriKeyOperation;
class Rsp_SKF_ExtRSAPriKeyOperationDefaultTypeInternal;
extern Rsp_SKF_ExtRSAPriKeyOperationDefaultTypeInternal _Rsp_SKF_ExtRSAPriKeyOperation_default_instance_;
class Rsp_SKF_ExtRSAPubKeyOperation;
class Rsp_SKF_ExtRSAPubKeyOperationDefaultTypeInternal;
extern Rsp_SKF_ExtRSAPubKeyOperationDefaultTypeInternal _Rsp_SKF_ExtRSAPubKeyOperation_default_instance_;
class Rsp_SKF_GenECCKeyPair;
class Rsp_SKF_GenECCKeyPairDefaultTypeInternal;
extern Rsp_SKF_GenECCKeyPairDefaultTypeInternal _Rsp_SKF_GenECCKeyPair_default_instance_;
class Rsp_SKF_GenExtRSAKey;
class Rsp_SKF_GenExtRSAKeyDefaultTypeInternal;
extern Rsp_SKF_GenExtRSAKeyDefaultTypeInternal _Rsp_SKF_GenExtRSAKey_default_instance_;
class Rsp_SKF_GenRSAKeyPair;
class Rsp_SKF_GenRSAKeyPairDefaultTypeInternal;
extern Rsp_SKF_GenRSAKeyPairDefaultTypeInternal _Rsp_SKF_GenRSAKeyPair_default_instance_;
class Rsp_SKF_GenRandom;
class Rsp_SKF_GenRandomDefaultTypeInternal;
extern Rsp_SKF_GenRandomDefaultTypeInternal _Rsp_SKF_GenRandom_default_instance_;
class Rsp_SKF_GenerateAgreementDataAndKeyWithECC;
class Rsp_SKF_GenerateAgreementDataAndKeyWithECCDefaultTypeInternal;
extern Rsp_SKF_GenerateAgreementDataAndKeyWithECCDefaultTypeInternal _Rsp_SKF_GenerateAgreementDataAndKeyWithECC_default_instance_;
class Rsp_SKF_GenerateAgreementDataWithECC;
class Rsp_SKF_GenerateAgreementDataWithECCDefaultTypeInternal;
extern Rsp_SKF_GenerateAgreementDataWithECCDefaultTypeInternal _Rsp_SKF_GenerateAgreementDataWithECC_default_instance_;
class Rsp_SKF_GenerateKeyWithECC;
class Rsp_SKF_GenerateKeyWithECCDefaultTypeInternal;
extern Rsp_SKF_GenerateKeyWithECCDefaultTypeInternal _Rsp_SKF_GenerateKeyWithECC_default_instance_;
class Rsp_SKF_GetContainerProperty;
class Rsp_SKF_GetContainerPropertyDefaultTypeInternal;
extern Rsp_SKF_GetContainerPropertyDefaultTypeInternal _Rsp_SKF_GetContainerProperty_default_instance_;
class Rsp_SKF_GetContainerType;
class Rsp_SKF_GetContainerTypeDefaultTypeInternal;
extern Rsp_SKF_GetContainerTypeDefaultTypeInternal _Rsp_SKF_GetContainerType_default_instance_;
class Rsp_SKF_GetDevInfo;
class Rsp_SKF_GetDevInfoDefaultTypeInternal;
extern Rsp_SKF_GetDevInfoDefaultTypeInternal _Rsp_SKF_GetDevInfo_default_instance_;
class Rsp_SKF_GetDevState;
class Rsp_SKF_GetDevStateDefaultTypeInternal;
extern Rsp_SKF_GetDevStateDefaultTypeInternal _Rsp_SKF_GetDevState_default_instance_;
class Rsp_SKF_GetFileInfo;
class Rsp_SKF_GetFileInfoDefaultTypeInternal;
extern Rsp_SKF_GetFileInfoDefaultTypeInternal _Rsp_SKF_GetFileInfo_default_instance_;
class Rsp_SKF_GetPINInfo;
class Rsp_SKF_GetPINInfoDefaultTypeInternal;
extern Rsp_SKF_GetPINInfoDefaultTypeInternal _Rsp_SKF_GetPINInfo_default_instance_;
class Rsp_SKF_ImportCertificate;
class Rsp_SKF_ImportCertificateDefaultTypeInternal;
extern Rsp_SKF_ImportCertificateDefaultTypeInternal _Rsp_SKF_ImportCertificate_default_instance_;
class Rsp_SKF_ImportECCKeyPair;
class Rsp_SKF_ImportECCKeyPairDefaultTypeInternal;
extern Rsp_SKF_ImportECCKeyPairDefaultTypeInternal _Rsp_SKF_ImportECCKeyPair_default_instance_;
class Rsp_SKF_ImportRSAKeyPair;
class Rsp_SKF_ImportRSAKeyPairDefaultTypeInternal;
extern Rsp_SKF_ImportRSAKeyPairDefaultTypeInternal _Rsp_SKF_ImportRSAKeyPair_default_instance_;
class Rsp_SKF_ImportSessionKey;
class Rsp_SKF_ImportSessionKeyDefaultTypeInternal;
extern Rsp_SKF_ImportSessionKeyDefaultTypeInternal _Rsp_SKF_ImportSessionKey_default_instance_;
class Rsp_SKF_LockDev;
class Rsp_SKF_LockDevDefaultTypeInternal;
extern Rsp_SKF_LockDevDefaultTypeInternal _Rsp_SKF_LockDev_default_instance_;
class Rsp_SKF_Mac;
class Rsp_SKF_MacDefaultTypeInternal;
extern Rsp_SKF_MacDefaultTypeInternal _Rsp_SKF_Mac_default_instance_;
class Rsp_SKF_MacFinal;
class Rsp_SKF_MacFinalDefaultTypeInternal;
extern Rsp_SKF_MacFinalDefaultTypeInternal _Rsp_SKF_MacFinal_default_instance_;
class Rsp_SKF_MacInit;
class Rsp_SKF_MacInitDefaultTypeInternal;
extern Rsp_SKF_MacInitDefaultTypeInternal _Rsp_SKF_MacInit_default_instance_;
class Rsp_SKF_MacUpdate;
class Rsp_SKF_MacUpdateDefaultTypeInternal;
extern Rsp_SKF_MacUpdateDefaultTypeInternal _Rsp_SKF_MacUpdate_default_instance_;
class Rsp_SKF_OpenApplication;
class Rsp_SKF_OpenApplicationDefaultTypeInternal;
extern Rsp_SKF_OpenApplicationDefaultTypeInternal _Rsp_SKF_OpenApplication_default_instance_;
class Rsp_SKF_OpenContainer;
class Rsp_SKF_OpenContainerDefaultTypeInternal;
extern Rsp_SKF_OpenContainerDefaultTypeInternal _Rsp_SKF_OpenContainer_default_instance_;
class Rsp_SKF_RSAExportSessionKey;
class Rsp_SKF_RSAExportSessionKeyDefaultTypeInternal;
extern Rsp_SKF_RSAExportSessionKeyDefaultTypeInternal _Rsp_SKF_RSAExportSessionKey_default_instance_;
class Rsp_SKF_RSASignData;
class Rsp_SKF_RSASignDataDefaultTypeInternal;
extern Rsp_SKF_RSASignDataDefaultTypeInternal _Rsp_SKF_RSASignData_default_instance_;
class Rsp_SKF_RSAVerify;
class Rsp_SKF_RSAVerifyDefaultTypeInternal;
extern Rsp_SKF_RSAVerifyDefaultTypeInternal _Rsp_SKF_RSAVerify_default_instance_;
class Rsp_SKF_ReadFile;
class Rsp_SKF_ReadFileDefaultTypeInternal;
extern Rsp_SKF_ReadFileDefaultTypeInternal _Rsp_SKF_ReadFile_default_instance_;
class Rsp_SKF_SetLabel;
class Rsp_SKF_SetLabelDefaultTypeInternal;
extern Rsp_SKF_SetLabelDefaultTypeInternal _Rsp_SKF_SetLabel_default_instance_;
class Rsp_SKF_SetSymmKey;
class Rsp_SKF_SetSymmKeyDefaultTypeInternal;
extern Rsp_SKF_SetSymmKeyDefaultTypeInternal _Rsp_SKF_SetSymmKey_default_instance_;
class Rsp_SKF_Transmit;
class Rsp_SKF_TransmitDefaultTypeInternal;
extern Rsp_SKF_TransmitDefaultTypeInternal _Rsp_SKF_Transmit_default_instance_;
class Rsp_SKF_UnblockPIN;
class Rsp_SKF_UnblockPINDefaultTypeInternal;
extern Rsp_SKF_UnblockPINDefaultTypeInternal _Rsp_SKF_UnblockPIN_default_instance_;
class Rsp_SKF_UnlockDev;
class Rsp_SKF_UnlockDevDefaultTypeInternal;
extern Rsp_SKF_UnlockDevDefaultTypeInternal _Rsp_SKF_UnlockDev_default_instance_;
class Rsp_SKF_VerifyPIN;
class Rsp_SKF_VerifyPINDefaultTypeInternal;
extern Rsp_SKF_VerifyPINDefaultTypeInternal _Rsp_SKF_VerifyPIN_default_instance_;
class Rsp_SKF_WaitForDevEvent;
class Rsp_SKF_WaitForDevEventDefaultTypeInternal;
extern Rsp_SKF_WaitForDevEventDefaultTypeInternal _Rsp_SKF_WaitForDevEvent_default_instance_;
class Rsp_SKF_WriteFile;
class Rsp_SKF_WriteFileDefaultTypeInternal;
extern Rsp_SKF_WriteFileDefaultTypeInternal _Rsp_SKF_WriteFile_default_instance_;
class SKF_BLOCKCIPHERPARAM;
class SKF_BLOCKCIPHERPARAMDefaultTypeInternal;
extern SKF_BLOCKCIPHERPARAMDefaultTypeInternal _SKF_BLOCKCIPHERPARAM_default_instance_;
class SKF_DevInfo;
class SKF_DevInfoDefaultTypeInternal;
extern SKF_DevInfoDefaultTypeInternal _SKF_DevInfo_default_instance_;
class SKF_ECCCIPHERBLOB;
class SKF_ECCCIPHERBLOBDefaultTypeInternal;
extern SKF_ECCCIPHERBLOBDefaultTypeInternal _SKF_ECCCIPHERBLOB_default_instance_;
class SKF_ECCPRIVATEKEYBLOB;
class SKF_ECCPRIVATEKEYBLOBDefaultTypeInternal;
extern SKF_ECCPRIVATEKEYBLOBDefaultTypeInternal _SKF_ECCPRIVATEKEYBLOB_default_instance_;
class SKF_ECCPUBLICKEYBLOB;
class SKF_ECCPUBLICKEYBLOBDefaultTypeInternal;
extern SKF_ECCPUBLICKEYBLOBDefaultTypeInternal _SKF_ECCPUBLICKEYBLOB_default_instance_;
class SKF_ECCSIGNATUREBLOB;
class SKF_ECCSIGNATUREBLOBDefaultTypeInternal;
extern SKF_ECCSIGNATUREBLOBDefaultTypeInternal _SKF_ECCSIGNATUREBLOB_default_instance_;
class SKF_ENVELOPEDKEYBLOB;
class SKF_ENVELOPEDKEYBLOBDefaultTypeInternal;
extern SKF_ENVELOPEDKEYBLOBDefaultTypeInternal _SKF_ENVELOPEDKEYBLOB_default_instance_;
class SKF_FILEATTRIBUTES;
class SKF_FILEATTRIBUTESDefaultTypeInternal;
extern SKF_FILEATTRIBUTESDefaultTypeInternal _SKF_FILEATTRIBUTES_default_instance_;
class SKF_RSAPRIVATEKEYBLOB;
class SKF_RSAPRIVATEKEYBLOBDefaultTypeInternal;
extern SKF_RSAPRIVATEKEYBLOBDefaultTypeInternal _SKF_RSAPRIVATEKEYBLOB_default_instance_;
class SKF_RSAPUBLICKEYBLOB;
class SKF_RSAPUBLICKEYBLOBDefaultTypeInternal;
extern SKF_RSAPUBLICKEYBLOBDefaultTypeInternal _SKF_RSAPUBLICKEYBLOB_default_instance_;
class SKF_Version;
class SKF_VersionDefaultTypeInternal;
extern SKF_VersionDefaultTypeInternal _SKF_Version_default_instance_;
class WST_PROTO_BOOL;
class WST_PROTO_BOOLDefaultTypeInternal;
extern WST_PROTO_BOOLDefaultTypeInternal _WST_PROTO_BOOL_default_instance_;
class WST_PROTO_UINT32;
class WST_PROTO_UINT32DefaultTypeInternal;
extern WST_PROTO_UINT32DefaultTypeInternal _WST_PROTO_UINT32_default_instance_;
}  // namespace skf
}  // namespace westone
}  // namespace com
namespace google {
namespace protobuf {
template<> ::com::westone::skf::Req_SKF_CancelWaitForDevEvent* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_CancelWaitForDevEvent>(Arena*);
template<> ::com::westone::skf::Req_SKF_ChangeDevAuthKey* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_ChangeDevAuthKey>(Arena*);
template<> ::com::westone::skf::Req_SKF_ChangePIN* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_ChangePIN>(Arena*);
template<> ::com::westone::skf::Req_SKF_ClearSecureState* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_ClearSecureState>(Arena*);
template<> ::com::westone::skf::Req_SKF_CloseApplication* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_CloseApplication>(Arena*);
template<> ::com::westone::skf::Req_SKF_CloseContainer* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_CloseContainer>(Arena*);
template<> ::com::westone::skf::Req_SKF_CloseHandle* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_CloseHandle>(Arena*);
template<> ::com::westone::skf::Req_SKF_ConnectDev* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_ConnectDev>(Arena*);
template<> ::com::westone::skf::Req_SKF_CreateApplication* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_CreateApplication>(Arena*);
template<> ::com::westone::skf::Req_SKF_CreateContainer* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_CreateContainer>(Arena*);
template<> ::com::westone::skf::Req_SKF_CreateFile* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_CreateFile>(Arena*);
template<> ::com::westone::skf::Req_SKF_Decrypt* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_Decrypt>(Arena*);
template<> ::com::westone::skf::Req_SKF_DecryptFinal* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_DecryptFinal>(Arena*);
template<> ::com::westone::skf::Req_SKF_DecryptInit* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_DecryptInit>(Arena*);
template<> ::com::westone::skf::Req_SKF_DecryptUpdate* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_DecryptUpdate>(Arena*);
template<> ::com::westone::skf::Req_SKF_DeleteApplication* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_DeleteApplication>(Arena*);
template<> ::com::westone::skf::Req_SKF_DeleteContainer* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_DeleteContainer>(Arena*);
template<> ::com::westone::skf::Req_SKF_DeleteFile* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_DeleteFile>(Arena*);
template<> ::com::westone::skf::Req_SKF_DevAuth* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_DevAuth>(Arena*);
template<> ::com::westone::skf::Req_SKF_Digest* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_Digest>(Arena*);
template<> ::com::westone::skf::Req_SKF_DigestFinal* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_DigestFinal>(Arena*);
template<> ::com::westone::skf::Req_SKF_DigestInit* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_DigestInit>(Arena*);
template<> ::com::westone::skf::Req_SKF_DigestUpdate* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_DigestUpdate>(Arena*);
template<> ::com::westone::skf::Req_SKF_DisConnectDev* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_DisConnectDev>(Arena*);
template<> ::com::westone::skf::Req_SKF_ECCExportSessionKey* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_ECCExportSessionKey>(Arena*);
template<> ::com::westone::skf::Req_SKF_ECCSignData* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_ECCSignData>(Arena*);
template<> ::com::westone::skf::Req_SKF_ECCVerify* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_ECCVerify>(Arena*);
template<> ::com::westone::skf::Req_SKF_Encrypt* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_Encrypt>(Arena*);
template<> ::com::westone::skf::Req_SKF_EncryptFinal* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_EncryptFinal>(Arena*);
template<> ::com::westone::skf::Req_SKF_EncryptInit* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_EncryptInit>(Arena*);
template<> ::com::westone::skf::Req_SKF_EncryptUpdate* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_EncryptUpdate>(Arena*);
template<> ::com::westone::skf::Req_SKF_EnumApplication* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_EnumApplication>(Arena*);
template<> ::com::westone::skf::Req_SKF_EnumContainer* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_EnumContainer>(Arena*);
template<> ::com::westone::skf::Req_SKF_EnumDev* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_EnumDev>(Arena*);
template<> ::com::westone::skf::Req_SKF_EnumFiles* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_EnumFiles>(Arena*);
template<> ::com::westone::skf::Req_SKF_ExportCertificate* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_ExportCertificate>(Arena*);
template<> ::com::westone::skf::Req_SKF_ExportPublicKey* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_ExportPublicKey>(Arena*);
template<> ::com::westone::skf::Req_SKF_ExtECCDecrypt* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_ExtECCDecrypt>(Arena*);
template<> ::com::westone::skf::Req_SKF_ExtECCEncrypt* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_ExtECCEncrypt>(Arena*);
template<> ::com::westone::skf::Req_SKF_ExtECCSign* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_ExtECCSign>(Arena*);
template<> ::com::westone::skf::Req_SKF_ExtECCVerify* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_ExtECCVerify>(Arena*);
template<> ::com::westone::skf::Req_SKF_ExtRSAPriKeyOperation* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_ExtRSAPriKeyOperation>(Arena*);
template<> ::com::westone::skf::Req_SKF_ExtRSAPubKeyOperation* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_ExtRSAPubKeyOperation>(Arena*);
template<> ::com::westone::skf::Req_SKF_GenECCKeyPair* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_GenECCKeyPair>(Arena*);
template<> ::com::westone::skf::Req_SKF_GenExtRSAKey* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_GenExtRSAKey>(Arena*);
template<> ::com::westone::skf::Req_SKF_GenRSAKeyPair* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_GenRSAKeyPair>(Arena*);
template<> ::com::westone::skf::Req_SKF_GenRandom* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_GenRandom>(Arena*);
template<> ::com::westone::skf::Req_SKF_GenerateAgreementDataAndKeyWithECC* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_GenerateAgreementDataAndKeyWithECC>(Arena*);
template<> ::com::westone::skf::Req_SKF_GenerateAgreementDataWithECC* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_GenerateAgreementDataWithECC>(Arena*);
template<> ::com::westone::skf::Req_SKF_GenerateKeyWithECC* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_GenerateKeyWithECC>(Arena*);
template<> ::com::westone::skf::Req_SKF_GetContainerProperty* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_GetContainerProperty>(Arena*);
template<> ::com::westone::skf::Req_SKF_GetContainerType* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_GetContainerType>(Arena*);
template<> ::com::westone::skf::Req_SKF_GetDevInfo* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_GetDevInfo>(Arena*);
template<> ::com::westone::skf::Req_SKF_GetDevState* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_GetDevState>(Arena*);
template<> ::com::westone::skf::Req_SKF_GetFileInfo* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_GetFileInfo>(Arena*);
template<> ::com::westone::skf::Req_SKF_GetPINInfo* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_GetPINInfo>(Arena*);
template<> ::com::westone::skf::Req_SKF_ImportCertificate* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_ImportCertificate>(Arena*);
template<> ::com::westone::skf::Req_SKF_ImportECCKeyPair* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_ImportECCKeyPair>(Arena*);
template<> ::com::westone::skf::Req_SKF_ImportRSAKeyPair* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_ImportRSAKeyPair>(Arena*);
template<> ::com::westone::skf::Req_SKF_ImportSessionKey* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_ImportSessionKey>(Arena*);
template<> ::com::westone::skf::Req_SKF_LockDev* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_LockDev>(Arena*);
template<> ::com::westone::skf::Req_SKF_Mac* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_Mac>(Arena*);
template<> ::com::westone::skf::Req_SKF_MacFinal* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_MacFinal>(Arena*);
template<> ::com::westone::skf::Req_SKF_MacInit* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_MacInit>(Arena*);
template<> ::com::westone::skf::Req_SKF_MacUpdate* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_MacUpdate>(Arena*);
template<> ::com::westone::skf::Req_SKF_OpenApplication* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_OpenApplication>(Arena*);
template<> ::com::westone::skf::Req_SKF_OpenContainer* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_OpenContainer>(Arena*);
template<> ::com::westone::skf::Req_SKF_RSAExportSessionKey* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_RSAExportSessionKey>(Arena*);
template<> ::com::westone::skf::Req_SKF_RSASignData* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_RSASignData>(Arena*);
template<> ::com::westone::skf::Req_SKF_RSAVerify* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_RSAVerify>(Arena*);
template<> ::com::westone::skf::Req_SKF_ReadFile* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_ReadFile>(Arena*);
template<> ::com::westone::skf::Req_SKF_SetLabel* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_SetLabel>(Arena*);
template<> ::com::westone::skf::Req_SKF_SetSymmKey* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_SetSymmKey>(Arena*);
template<> ::com::westone::skf::Req_SKF_Transmit* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_Transmit>(Arena*);
template<> ::com::westone::skf::Req_SKF_UnblockPIN* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_UnblockPIN>(Arena*);
template<> ::com::westone::skf::Req_SKF_UnlockDev* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_UnlockDev>(Arena*);
template<> ::com::westone::skf::Req_SKF_VerifyPIN* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_VerifyPIN>(Arena*);
template<> ::com::westone::skf::Req_SKF_WaitForDevEvent* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_WaitForDevEvent>(Arena*);
template<> ::com::westone::skf::Req_SKF_WriteFile* Arena::CreateMaybeMessage<::com::westone::skf::Req_SKF_WriteFile>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_CancelWaitForDevEvent* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_CancelWaitForDevEvent>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_ChangeDevAuthKey* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_ChangeDevAuthKey>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_ChangePIN* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_ChangePIN>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_ClearSecureState* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_ClearSecureState>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_CloseApplication* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_CloseApplication>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_CloseContainer* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_CloseContainer>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_CloseHandle* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_CloseHandle>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_ConnectDev* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_ConnectDev>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_CreateApplication* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_CreateApplication>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_CreateContainer* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_CreateContainer>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_CreateFile* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_CreateFile>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_Decrypt* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_Decrypt>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_DecryptFinal* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_DecryptFinal>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_DecryptInit* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_DecryptInit>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_DecryptUpdate* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_DecryptUpdate>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_DeleteApplication* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_DeleteApplication>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_DeleteContainer* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_DeleteContainer>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_DeleteFile* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_DeleteFile>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_DevAuth* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_DevAuth>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_Digest* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_Digest>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_DigestFinal* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_DigestFinal>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_DigestInit* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_DigestInit>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_DigestUpdate* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_DigestUpdate>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_DisConnectDev* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_DisConnectDev>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_ECCExportSessionKey* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_ECCExportSessionKey>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_ECCSignData* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_ECCSignData>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_ECCVerify* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_ECCVerify>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_Encrypt* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_Encrypt>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_EncryptFinal* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_EncryptFinal>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_EncryptInit* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_EncryptInit>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_EncryptUpdate* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_EncryptUpdate>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_EnumApplication* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_EnumApplication>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_EnumContainer* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_EnumContainer>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_EnumDev* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_EnumDev>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_EnumFiles* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_EnumFiles>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_ExportCertificate* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_ExportCertificate>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_ExportPublicKey* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_ExportPublicKey>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_ExtECCDecrypt* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_ExtECCDecrypt>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_ExtECCEncrypt* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_ExtECCEncrypt>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_ExtECCSign* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_ExtECCSign>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_ExtECCVerify* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_ExtECCVerify>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_ExtRSAPriKeyOperation* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_ExtRSAPriKeyOperation>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_ExtRSAPubKeyOperation* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_ExtRSAPubKeyOperation>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_GenECCKeyPair* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_GenECCKeyPair>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_GenExtRSAKey* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_GenExtRSAKey>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_GenRSAKeyPair* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_GenRSAKeyPair>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_GenRandom* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_GenRandom>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_GenerateAgreementDataAndKeyWithECC* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_GenerateAgreementDataAndKeyWithECC>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_GenerateAgreementDataWithECC* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_GenerateAgreementDataWithECC>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_GenerateKeyWithECC* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_GenerateKeyWithECC>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_GetContainerProperty* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_GetContainerProperty>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_GetContainerType* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_GetContainerType>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_GetDevInfo* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_GetDevInfo>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_GetDevState* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_GetDevState>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_GetFileInfo* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_GetFileInfo>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_GetPINInfo* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_GetPINInfo>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_ImportCertificate* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_ImportCertificate>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_ImportECCKeyPair* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_ImportECCKeyPair>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_ImportRSAKeyPair* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_ImportRSAKeyPair>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_ImportSessionKey* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_ImportSessionKey>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_LockDev* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_LockDev>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_Mac* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_Mac>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_MacFinal* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_MacFinal>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_MacInit* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_MacInit>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_MacUpdate* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_MacUpdate>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_OpenApplication* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_OpenApplication>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_OpenContainer* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_OpenContainer>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_RSAExportSessionKey* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_RSAExportSessionKey>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_RSASignData* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_RSASignData>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_RSAVerify* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_RSAVerify>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_ReadFile* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_ReadFile>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_SetLabel* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_SetLabel>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_SetSymmKey* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_SetSymmKey>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_Transmit* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_Transmit>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_UnblockPIN* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_UnblockPIN>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_UnlockDev* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_UnlockDev>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_VerifyPIN* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_VerifyPIN>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_WaitForDevEvent* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_WaitForDevEvent>(Arena*);
template<> ::com::westone::skf::Rsp_SKF_WriteFile* Arena::CreateMaybeMessage<::com::westone::skf::Rsp_SKF_WriteFile>(Arena*);
template<> ::com::westone::skf::SKF_BLOCKCIPHERPARAM* Arena::CreateMaybeMessage<::com::westone::skf::SKF_BLOCKCIPHERPARAM>(Arena*);
template<> ::com::westone::skf::SKF_DevInfo* Arena::CreateMaybeMessage<::com::westone::skf::SKF_DevInfo>(Arena*);
template<> ::com::westone::skf::SKF_ECCCIPHERBLOB* Arena::CreateMaybeMessage<::com::westone::skf::SKF_ECCCIPHERBLOB>(Arena*);
template<> ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB* Arena::CreateMaybeMessage<::com::westone::skf::SKF_ECCPRIVATEKEYBLOB>(Arena*);
template<> ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Arena::CreateMaybeMessage<::com::westone::skf::SKF_ECCPUBLICKEYBLOB>(Arena*);
template<> ::com::westone::skf::SKF_ECCSIGNATUREBLOB* Arena::CreateMaybeMessage<::com::westone::skf::SKF_ECCSIGNATUREBLOB>(Arena*);
template<> ::com::westone::skf::SKF_ENVELOPEDKEYBLOB* Arena::CreateMaybeMessage<::com::westone::skf::SKF_ENVELOPEDKEYBLOB>(Arena*);
template<> ::com::westone::skf::SKF_FILEATTRIBUTES* Arena::CreateMaybeMessage<::com::westone::skf::SKF_FILEATTRIBUTES>(Arena*);
template<> ::com::westone::skf::SKF_RSAPRIVATEKEYBLOB* Arena::CreateMaybeMessage<::com::westone::skf::SKF_RSAPRIVATEKEYBLOB>(Arena*);
template<> ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* Arena::CreateMaybeMessage<::com::westone::skf::SKF_RSAPUBLICKEYBLOB>(Arena*);
template<> ::com::westone::skf::SKF_Version* Arena::CreateMaybeMessage<::com::westone::skf::SKF_Version>(Arena*);
template<> ::com::westone::skf::WST_PROTO_BOOL* Arena::CreateMaybeMessage<::com::westone::skf::WST_PROTO_BOOL>(Arena*);
template<> ::com::westone::skf::WST_PROTO_UINT32* Arena::CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace com {
namespace westone {
namespace skf {

// ===================================================================

class WST_PROTO_UINT32 final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.WST_PROTO_UINT32) */ {
 public:
  WST_PROTO_UINT32();
  virtual ~WST_PROTO_UINT32();

  WST_PROTO_UINT32(const WST_PROTO_UINT32& from);

  inline WST_PROTO_UINT32& operator=(const WST_PROTO_UINT32& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WST_PROTO_UINT32(WST_PROTO_UINT32&& from) noexcept
    : WST_PROTO_UINT32() {
    *this = ::std::move(from);
  }

  inline WST_PROTO_UINT32& operator=(WST_PROTO_UINT32&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WST_PROTO_UINT32& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WST_PROTO_UINT32* internal_default_instance() {
    return reinterpret_cast<const WST_PROTO_UINT32*>(
               &_WST_PROTO_UINT32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(WST_PROTO_UINT32* other);
  friend void swap(WST_PROTO_UINT32& a, WST_PROTO_UINT32& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WST_PROTO_UINT32* New() const final {
    return CreateMaybeMessage<WST_PROTO_UINT32>(nullptr);
  }

  WST_PROTO_UINT32* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WST_PROTO_UINT32>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WST_PROTO_UINT32& from);
  void MergeFrom(const WST_PROTO_UINT32& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WST_PROTO_UINT32* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 u32value = 1;
  void clear_u32value();
  static const int kU32ValueFieldNumber = 1;
  ::google::protobuf::uint32 u32value() const;
  void set_u32value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.westone.skf.WST_PROTO_UINT32)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 u32value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class WST_PROTO_BOOL final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.WST_PROTO_BOOL) */ {
 public:
  WST_PROTO_BOOL();
  virtual ~WST_PROTO_BOOL();

  WST_PROTO_BOOL(const WST_PROTO_BOOL& from);

  inline WST_PROTO_BOOL& operator=(const WST_PROTO_BOOL& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WST_PROTO_BOOL(WST_PROTO_BOOL&& from) noexcept
    : WST_PROTO_BOOL() {
    *this = ::std::move(from);
  }

  inline WST_PROTO_BOOL& operator=(WST_PROTO_BOOL&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WST_PROTO_BOOL& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WST_PROTO_BOOL* internal_default_instance() {
    return reinterpret_cast<const WST_PROTO_BOOL*>(
               &_WST_PROTO_BOOL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(WST_PROTO_BOOL* other);
  friend void swap(WST_PROTO_BOOL& a, WST_PROTO_BOOL& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WST_PROTO_BOOL* New() const final {
    return CreateMaybeMessage<WST_PROTO_BOOL>(nullptr);
  }

  WST_PROTO_BOOL* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WST_PROTO_BOOL>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WST_PROTO_BOOL& from);
  void MergeFrom(const WST_PROTO_BOOL& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WST_PROTO_BOOL* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool boolvalue = 1;
  void clear_boolvalue();
  static const int kBoolvalueFieldNumber = 1;
  bool boolvalue() const;
  void set_boolvalue(bool value);

  // @@protoc_insertion_point(class_scope:com.westone.skf.WST_PROTO_BOOL)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool boolvalue_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class SKF_Version final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.SKF_Version) */ {
 public:
  SKF_Version();
  virtual ~SKF_Version();

  SKF_Version(const SKF_Version& from);

  inline SKF_Version& operator=(const SKF_Version& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SKF_Version(SKF_Version&& from) noexcept
    : SKF_Version() {
    *this = ::std::move(from);
  }

  inline SKF_Version& operator=(SKF_Version&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SKF_Version& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SKF_Version* internal_default_instance() {
    return reinterpret_cast<const SKF_Version*>(
               &_SKF_Version_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SKF_Version* other);
  friend void swap(SKF_Version& a, SKF_Version& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SKF_Version* New() const final {
    return CreateMaybeMessage<SKF_Version>(nullptr);
  }

  SKF_Version* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SKF_Version>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SKF_Version& from);
  void MergeFrom(const SKF_Version& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SKF_Version* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 major = 1;
  bool has_major() const;
  void clear_major();
  static const int kMajorFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& major() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_major();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_major();
  void set_allocated_major(::com::westone::skf::WST_PROTO_UINT32* major);

  // .com.westone.skf.WST_PROTO_UINT32 minor = 2;
  bool has_minor() const;
  void clear_minor();
  static const int kMinorFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& minor() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_minor();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_minor();
  void set_allocated_minor(::com::westone::skf::WST_PROTO_UINT32* minor);

  // @@protoc_insertion_point(class_scope:com.westone.skf.SKF_Version)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* major_;
  ::com::westone::skf::WST_PROTO_UINT32* minor_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class SKF_DevInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.SKF_DevInfo) */ {
 public:
  SKF_DevInfo();
  virtual ~SKF_DevInfo();

  SKF_DevInfo(const SKF_DevInfo& from);

  inline SKF_DevInfo& operator=(const SKF_DevInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SKF_DevInfo(SKF_DevInfo&& from) noexcept
    : SKF_DevInfo() {
    *this = ::std::move(from);
  }

  inline SKF_DevInfo& operator=(SKF_DevInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SKF_DevInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SKF_DevInfo* internal_default_instance() {
    return reinterpret_cast<const SKF_DevInfo*>(
               &_SKF_DevInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SKF_DevInfo* other);
  friend void swap(SKF_DevInfo& a, SKF_DevInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SKF_DevInfo* New() const final {
    return CreateMaybeMessage<SKF_DevInfo>(nullptr);
  }

  SKF_DevInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SKF_DevInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SKF_DevInfo& from);
  void MergeFrom(const SKF_DevInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SKF_DevInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Manufacturer = 2;
  void clear_manufacturer();
  static const int kManufacturerFieldNumber = 2;
  const ::std::string& manufacturer() const;
  void set_manufacturer(const ::std::string& value);
  #if LANG_CXX11
  void set_manufacturer(::std::string&& value);
  #endif
  void set_manufacturer(const char* value);
  void set_manufacturer(const void* value, size_t size);
  ::std::string* mutable_manufacturer();
  ::std::string* release_manufacturer();
  void set_allocated_manufacturer(::std::string* manufacturer);

  // bytes Issuer = 3;
  void clear_issuer();
  static const int kIssuerFieldNumber = 3;
  const ::std::string& issuer() const;
  void set_issuer(const ::std::string& value);
  #if LANG_CXX11
  void set_issuer(::std::string&& value);
  #endif
  void set_issuer(const char* value);
  void set_issuer(const void* value, size_t size);
  ::std::string* mutable_issuer();
  ::std::string* release_issuer();
  void set_allocated_issuer(::std::string* issuer);

  // bytes Label = 4;
  void clear_label();
  static const int kLabelFieldNumber = 4;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const void* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // bytes SerialNumber = 5;
  void clear_serialnumber();
  static const int kSerialNumberFieldNumber = 5;
  const ::std::string& serialnumber() const;
  void set_serialnumber(const ::std::string& value);
  #if LANG_CXX11
  void set_serialnumber(::std::string&& value);
  #endif
  void set_serialnumber(const char* value);
  void set_serialnumber(const void* value, size_t size);
  ::std::string* mutable_serialnumber();
  ::std::string* release_serialnumber();
  void set_allocated_serialnumber(::std::string* serialnumber);

  // bytes Reserved = 16;
  void clear_reserved();
  static const int kReservedFieldNumber = 16;
  const ::std::string& reserved() const;
  void set_reserved(const ::std::string& value);
  #if LANG_CXX11
  void set_reserved(::std::string&& value);
  #endif
  void set_reserved(const char* value);
  void set_reserved(const void* value, size_t size);
  ::std::string* mutable_reserved();
  ::std::string* release_reserved();
  void set_allocated_reserved(::std::string* reserved);

  // .com.westone.skf.SKF_Version version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::com::westone::skf::SKF_Version& version() const;
  ::com::westone::skf::SKF_Version* release_version();
  ::com::westone::skf::SKF_Version* mutable_version();
  void set_allocated_version(::com::westone::skf::SKF_Version* version);

  // .com.westone.skf.SKF_Version HWVersion = 6;
  bool has_hwversion() const;
  void clear_hwversion();
  static const int kHWVersionFieldNumber = 6;
  const ::com::westone::skf::SKF_Version& hwversion() const;
  ::com::westone::skf::SKF_Version* release_hwversion();
  ::com::westone::skf::SKF_Version* mutable_hwversion();
  void set_allocated_hwversion(::com::westone::skf::SKF_Version* hwversion);

  // .com.westone.skf.SKF_Version FirmwareVersion = 7;
  bool has_firmwareversion() const;
  void clear_firmwareversion();
  static const int kFirmwareVersionFieldNumber = 7;
  const ::com::westone::skf::SKF_Version& firmwareversion() const;
  ::com::westone::skf::SKF_Version* release_firmwareversion();
  ::com::westone::skf::SKF_Version* mutable_firmwareversion();
  void set_allocated_firmwareversion(::com::westone::skf::SKF_Version* firmwareversion);

  // .com.westone.skf.WST_PROTO_UINT32 AlgSymCap = 8;
  bool has_algsymcap() const;
  void clear_algsymcap();
  static const int kAlgSymCapFieldNumber = 8;
  const ::com::westone::skf::WST_PROTO_UINT32& algsymcap() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_algsymcap();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_algsymcap();
  void set_allocated_algsymcap(::com::westone::skf::WST_PROTO_UINT32* algsymcap);

  // .com.westone.skf.WST_PROTO_UINT32 AlgAsymCap = 9;
  bool has_algasymcap() const;
  void clear_algasymcap();
  static const int kAlgAsymCapFieldNumber = 9;
  const ::com::westone::skf::WST_PROTO_UINT32& algasymcap() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_algasymcap();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_algasymcap();
  void set_allocated_algasymcap(::com::westone::skf::WST_PROTO_UINT32* algasymcap);

  // .com.westone.skf.WST_PROTO_UINT32 AlgHashCap = 10;
  bool has_alghashcap() const;
  void clear_alghashcap();
  static const int kAlgHashCapFieldNumber = 10;
  const ::com::westone::skf::WST_PROTO_UINT32& alghashcap() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_alghashcap();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_alghashcap();
  void set_allocated_alghashcap(::com::westone::skf::WST_PROTO_UINT32* alghashcap);

  // .com.westone.skf.WST_PROTO_UINT32 DevAuthAlgId = 11;
  bool has_devauthalgid() const;
  void clear_devauthalgid();
  static const int kDevAuthAlgIdFieldNumber = 11;
  const ::com::westone::skf::WST_PROTO_UINT32& devauthalgid() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_devauthalgid();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_devauthalgid();
  void set_allocated_devauthalgid(::com::westone::skf::WST_PROTO_UINT32* devauthalgid);

  // .com.westone.skf.WST_PROTO_UINT32 TotalSpace = 12;
  bool has_totalspace() const;
  void clear_totalspace();
  static const int kTotalSpaceFieldNumber = 12;
  const ::com::westone::skf::WST_PROTO_UINT32& totalspace() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_totalspace();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_totalspace();
  void set_allocated_totalspace(::com::westone::skf::WST_PROTO_UINT32* totalspace);

  // .com.westone.skf.WST_PROTO_UINT32 FreeSpace = 13;
  bool has_freespace() const;
  void clear_freespace();
  static const int kFreeSpaceFieldNumber = 13;
  const ::com::westone::skf::WST_PROTO_UINT32& freespace() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_freespace();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_freespace();
  void set_allocated_freespace(::com::westone::skf::WST_PROTO_UINT32* freespace);

  // .com.westone.skf.WST_PROTO_UINT32 MaxEccBufferSize = 14;
  bool has_maxeccbuffersize() const;
  void clear_maxeccbuffersize();
  static const int kMaxEccBufferSizeFieldNumber = 14;
  const ::com::westone::skf::WST_PROTO_UINT32& maxeccbuffersize() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_maxeccbuffersize();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_maxeccbuffersize();
  void set_allocated_maxeccbuffersize(::com::westone::skf::WST_PROTO_UINT32* maxeccbuffersize);

  // .com.westone.skf.WST_PROTO_UINT32 MaxBufferSize = 15;
  bool has_maxbuffersize() const;
  void clear_maxbuffersize();
  static const int kMaxBufferSizeFieldNumber = 15;
  const ::com::westone::skf::WST_PROTO_UINT32& maxbuffersize() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_maxbuffersize();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_maxbuffersize();
  void set_allocated_maxbuffersize(::com::westone::skf::WST_PROTO_UINT32* maxbuffersize);

  // @@protoc_insertion_point(class_scope:com.westone.skf.SKF_DevInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr manufacturer_;
  ::google::protobuf::internal::ArenaStringPtr issuer_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  ::google::protobuf::internal::ArenaStringPtr serialnumber_;
  ::google::protobuf::internal::ArenaStringPtr reserved_;
  ::com::westone::skf::SKF_Version* version_;
  ::com::westone::skf::SKF_Version* hwversion_;
  ::com::westone::skf::SKF_Version* firmwareversion_;
  ::com::westone::skf::WST_PROTO_UINT32* algsymcap_;
  ::com::westone::skf::WST_PROTO_UINT32* algasymcap_;
  ::com::westone::skf::WST_PROTO_UINT32* alghashcap_;
  ::com::westone::skf::WST_PROTO_UINT32* devauthalgid_;
  ::com::westone::skf::WST_PROTO_UINT32* totalspace_;
  ::com::westone::skf::WST_PROTO_UINT32* freespace_;
  ::com::westone::skf::WST_PROTO_UINT32* maxeccbuffersize_;
  ::com::westone::skf::WST_PROTO_UINT32* maxbuffersize_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class SKF_RSAPUBLICKEYBLOB final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.SKF_RSAPUBLICKEYBLOB) */ {
 public:
  SKF_RSAPUBLICKEYBLOB();
  virtual ~SKF_RSAPUBLICKEYBLOB();

  SKF_RSAPUBLICKEYBLOB(const SKF_RSAPUBLICKEYBLOB& from);

  inline SKF_RSAPUBLICKEYBLOB& operator=(const SKF_RSAPUBLICKEYBLOB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SKF_RSAPUBLICKEYBLOB(SKF_RSAPUBLICKEYBLOB&& from) noexcept
    : SKF_RSAPUBLICKEYBLOB() {
    *this = ::std::move(from);
  }

  inline SKF_RSAPUBLICKEYBLOB& operator=(SKF_RSAPUBLICKEYBLOB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SKF_RSAPUBLICKEYBLOB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SKF_RSAPUBLICKEYBLOB* internal_default_instance() {
    return reinterpret_cast<const SKF_RSAPUBLICKEYBLOB*>(
               &_SKF_RSAPUBLICKEYBLOB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SKF_RSAPUBLICKEYBLOB* other);
  friend void swap(SKF_RSAPUBLICKEYBLOB& a, SKF_RSAPUBLICKEYBLOB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SKF_RSAPUBLICKEYBLOB* New() const final {
    return CreateMaybeMessage<SKF_RSAPUBLICKEYBLOB>(nullptr);
  }

  SKF_RSAPUBLICKEYBLOB* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SKF_RSAPUBLICKEYBLOB>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SKF_RSAPUBLICKEYBLOB& from);
  void MergeFrom(const SKF_RSAPUBLICKEYBLOB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SKF_RSAPUBLICKEYBLOB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Modulus = 3;
  void clear_modulus();
  static const int kModulusFieldNumber = 3;
  const ::std::string& modulus() const;
  void set_modulus(const ::std::string& value);
  #if LANG_CXX11
  void set_modulus(::std::string&& value);
  #endif
  void set_modulus(const char* value);
  void set_modulus(const void* value, size_t size);
  ::std::string* mutable_modulus();
  ::std::string* release_modulus();
  void set_allocated_modulus(::std::string* modulus);

  // bytes PublicExponent = 4;
  void clear_publicexponent();
  static const int kPublicExponentFieldNumber = 4;
  const ::std::string& publicexponent() const;
  void set_publicexponent(const ::std::string& value);
  #if LANG_CXX11
  void set_publicexponent(::std::string&& value);
  #endif
  void set_publicexponent(const char* value);
  void set_publicexponent(const void* value, size_t size);
  ::std::string* mutable_publicexponent();
  ::std::string* release_publicexponent();
  void set_allocated_publicexponent(::std::string* publicexponent);

  // .com.westone.skf.WST_PROTO_UINT32 AlgID = 1;
  bool has_algid() const;
  void clear_algid();
  static const int kAlgIDFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& algid() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_algid();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_algid();
  void set_allocated_algid(::com::westone::skf::WST_PROTO_UINT32* algid);

  // .com.westone.skf.WST_PROTO_UINT32 BitLen = 2;
  bool has_bitlen() const;
  void clear_bitlen();
  static const int kBitLenFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& bitlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_bitlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_bitlen();
  void set_allocated_bitlen(::com::westone::skf::WST_PROTO_UINT32* bitlen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.SKF_RSAPUBLICKEYBLOB)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr modulus_;
  ::google::protobuf::internal::ArenaStringPtr publicexponent_;
  ::com::westone::skf::WST_PROTO_UINT32* algid_;
  ::com::westone::skf::WST_PROTO_UINT32* bitlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class SKF_RSAPRIVATEKEYBLOB final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.SKF_RSAPRIVATEKEYBLOB) */ {
 public:
  SKF_RSAPRIVATEKEYBLOB();
  virtual ~SKF_RSAPRIVATEKEYBLOB();

  SKF_RSAPRIVATEKEYBLOB(const SKF_RSAPRIVATEKEYBLOB& from);

  inline SKF_RSAPRIVATEKEYBLOB& operator=(const SKF_RSAPRIVATEKEYBLOB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SKF_RSAPRIVATEKEYBLOB(SKF_RSAPRIVATEKEYBLOB&& from) noexcept
    : SKF_RSAPRIVATEKEYBLOB() {
    *this = ::std::move(from);
  }

  inline SKF_RSAPRIVATEKEYBLOB& operator=(SKF_RSAPRIVATEKEYBLOB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SKF_RSAPRIVATEKEYBLOB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SKF_RSAPRIVATEKEYBLOB* internal_default_instance() {
    return reinterpret_cast<const SKF_RSAPRIVATEKEYBLOB*>(
               &_SKF_RSAPRIVATEKEYBLOB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SKF_RSAPRIVATEKEYBLOB* other);
  friend void swap(SKF_RSAPRIVATEKEYBLOB& a, SKF_RSAPRIVATEKEYBLOB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SKF_RSAPRIVATEKEYBLOB* New() const final {
    return CreateMaybeMessage<SKF_RSAPRIVATEKEYBLOB>(nullptr);
  }

  SKF_RSAPRIVATEKEYBLOB* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SKF_RSAPRIVATEKEYBLOB>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SKF_RSAPRIVATEKEYBLOB& from);
  void MergeFrom(const SKF_RSAPRIVATEKEYBLOB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SKF_RSAPRIVATEKEYBLOB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Modulus = 3;
  void clear_modulus();
  static const int kModulusFieldNumber = 3;
  const ::std::string& modulus() const;
  void set_modulus(const ::std::string& value);
  #if LANG_CXX11
  void set_modulus(::std::string&& value);
  #endif
  void set_modulus(const char* value);
  void set_modulus(const void* value, size_t size);
  ::std::string* mutable_modulus();
  ::std::string* release_modulus();
  void set_allocated_modulus(::std::string* modulus);

  // bytes PublicExponent = 4;
  void clear_publicexponent();
  static const int kPublicExponentFieldNumber = 4;
  const ::std::string& publicexponent() const;
  void set_publicexponent(const ::std::string& value);
  #if LANG_CXX11
  void set_publicexponent(::std::string&& value);
  #endif
  void set_publicexponent(const char* value);
  void set_publicexponent(const void* value, size_t size);
  ::std::string* mutable_publicexponent();
  ::std::string* release_publicexponent();
  void set_allocated_publicexponent(::std::string* publicexponent);

  // bytes PrivateExponent = 5;
  void clear_privateexponent();
  static const int kPrivateExponentFieldNumber = 5;
  const ::std::string& privateexponent() const;
  void set_privateexponent(const ::std::string& value);
  #if LANG_CXX11
  void set_privateexponent(::std::string&& value);
  #endif
  void set_privateexponent(const char* value);
  void set_privateexponent(const void* value, size_t size);
  ::std::string* mutable_privateexponent();
  ::std::string* release_privateexponent();
  void set_allocated_privateexponent(::std::string* privateexponent);

  // bytes Prime1 = 6;
  void clear_prime1();
  static const int kPrime1FieldNumber = 6;
  const ::std::string& prime1() const;
  void set_prime1(const ::std::string& value);
  #if LANG_CXX11
  void set_prime1(::std::string&& value);
  #endif
  void set_prime1(const char* value);
  void set_prime1(const void* value, size_t size);
  ::std::string* mutable_prime1();
  ::std::string* release_prime1();
  void set_allocated_prime1(::std::string* prime1);

  // bytes Prime2 = 7;
  void clear_prime2();
  static const int kPrime2FieldNumber = 7;
  const ::std::string& prime2() const;
  void set_prime2(const ::std::string& value);
  #if LANG_CXX11
  void set_prime2(::std::string&& value);
  #endif
  void set_prime2(const char* value);
  void set_prime2(const void* value, size_t size);
  ::std::string* mutable_prime2();
  ::std::string* release_prime2();
  void set_allocated_prime2(::std::string* prime2);

  // bytes Prime1Exponent = 8;
  void clear_prime1exponent();
  static const int kPrime1ExponentFieldNumber = 8;
  const ::std::string& prime1exponent() const;
  void set_prime1exponent(const ::std::string& value);
  #if LANG_CXX11
  void set_prime1exponent(::std::string&& value);
  #endif
  void set_prime1exponent(const char* value);
  void set_prime1exponent(const void* value, size_t size);
  ::std::string* mutable_prime1exponent();
  ::std::string* release_prime1exponent();
  void set_allocated_prime1exponent(::std::string* prime1exponent);

  // bytes Prime2Exponent = 9;
  void clear_prime2exponent();
  static const int kPrime2ExponentFieldNumber = 9;
  const ::std::string& prime2exponent() const;
  void set_prime2exponent(const ::std::string& value);
  #if LANG_CXX11
  void set_prime2exponent(::std::string&& value);
  #endif
  void set_prime2exponent(const char* value);
  void set_prime2exponent(const void* value, size_t size);
  ::std::string* mutable_prime2exponent();
  ::std::string* release_prime2exponent();
  void set_allocated_prime2exponent(::std::string* prime2exponent);

  // bytes Coefficient = 10;
  void clear_coefficient();
  static const int kCoefficientFieldNumber = 10;
  const ::std::string& coefficient() const;
  void set_coefficient(const ::std::string& value);
  #if LANG_CXX11
  void set_coefficient(::std::string&& value);
  #endif
  void set_coefficient(const char* value);
  void set_coefficient(const void* value, size_t size);
  ::std::string* mutable_coefficient();
  ::std::string* release_coefficient();
  void set_allocated_coefficient(::std::string* coefficient);

  // .com.westone.skf.WST_PROTO_UINT32 AlgID = 1;
  bool has_algid() const;
  void clear_algid();
  static const int kAlgIDFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& algid() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_algid();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_algid();
  void set_allocated_algid(::com::westone::skf::WST_PROTO_UINT32* algid);

  // .com.westone.skf.WST_PROTO_UINT32 BitLen = 2;
  bool has_bitlen() const;
  void clear_bitlen();
  static const int kBitLenFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& bitlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_bitlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_bitlen();
  void set_allocated_bitlen(::com::westone::skf::WST_PROTO_UINT32* bitlen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.SKF_RSAPRIVATEKEYBLOB)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr modulus_;
  ::google::protobuf::internal::ArenaStringPtr publicexponent_;
  ::google::protobuf::internal::ArenaStringPtr privateexponent_;
  ::google::protobuf::internal::ArenaStringPtr prime1_;
  ::google::protobuf::internal::ArenaStringPtr prime2_;
  ::google::protobuf::internal::ArenaStringPtr prime1exponent_;
  ::google::protobuf::internal::ArenaStringPtr prime2exponent_;
  ::google::protobuf::internal::ArenaStringPtr coefficient_;
  ::com::westone::skf::WST_PROTO_UINT32* algid_;
  ::com::westone::skf::WST_PROTO_UINT32* bitlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class SKF_ECCPUBLICKEYBLOB final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.SKF_ECCPUBLICKEYBLOB) */ {
 public:
  SKF_ECCPUBLICKEYBLOB();
  virtual ~SKF_ECCPUBLICKEYBLOB();

  SKF_ECCPUBLICKEYBLOB(const SKF_ECCPUBLICKEYBLOB& from);

  inline SKF_ECCPUBLICKEYBLOB& operator=(const SKF_ECCPUBLICKEYBLOB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SKF_ECCPUBLICKEYBLOB(SKF_ECCPUBLICKEYBLOB&& from) noexcept
    : SKF_ECCPUBLICKEYBLOB() {
    *this = ::std::move(from);
  }

  inline SKF_ECCPUBLICKEYBLOB& operator=(SKF_ECCPUBLICKEYBLOB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SKF_ECCPUBLICKEYBLOB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SKF_ECCPUBLICKEYBLOB* internal_default_instance() {
    return reinterpret_cast<const SKF_ECCPUBLICKEYBLOB*>(
               &_SKF_ECCPUBLICKEYBLOB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(SKF_ECCPUBLICKEYBLOB* other);
  friend void swap(SKF_ECCPUBLICKEYBLOB& a, SKF_ECCPUBLICKEYBLOB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SKF_ECCPUBLICKEYBLOB* New() const final {
    return CreateMaybeMessage<SKF_ECCPUBLICKEYBLOB>(nullptr);
  }

  SKF_ECCPUBLICKEYBLOB* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SKF_ECCPUBLICKEYBLOB>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SKF_ECCPUBLICKEYBLOB& from);
  void MergeFrom(const SKF_ECCPUBLICKEYBLOB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SKF_ECCPUBLICKEYBLOB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes XCoordinate = 2;
  void clear_xcoordinate();
  static const int kXCoordinateFieldNumber = 2;
  const ::std::string& xcoordinate() const;
  void set_xcoordinate(const ::std::string& value);
  #if LANG_CXX11
  void set_xcoordinate(::std::string&& value);
  #endif
  void set_xcoordinate(const char* value);
  void set_xcoordinate(const void* value, size_t size);
  ::std::string* mutable_xcoordinate();
  ::std::string* release_xcoordinate();
  void set_allocated_xcoordinate(::std::string* xcoordinate);

  // bytes YCoordinate = 3;
  void clear_ycoordinate();
  static const int kYCoordinateFieldNumber = 3;
  const ::std::string& ycoordinate() const;
  void set_ycoordinate(const ::std::string& value);
  #if LANG_CXX11
  void set_ycoordinate(::std::string&& value);
  #endif
  void set_ycoordinate(const char* value);
  void set_ycoordinate(const void* value, size_t size);
  ::std::string* mutable_ycoordinate();
  ::std::string* release_ycoordinate();
  void set_allocated_ycoordinate(::std::string* ycoordinate);

  // .com.westone.skf.WST_PROTO_UINT32 BitLen = 1;
  bool has_bitlen() const;
  void clear_bitlen();
  static const int kBitLenFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& bitlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_bitlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_bitlen();
  void set_allocated_bitlen(::com::westone::skf::WST_PROTO_UINT32* bitlen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.SKF_ECCPUBLICKEYBLOB)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr xcoordinate_;
  ::google::protobuf::internal::ArenaStringPtr ycoordinate_;
  ::com::westone::skf::WST_PROTO_UINT32* bitlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class SKF_ECCPRIVATEKEYBLOB final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.SKF_ECCPRIVATEKEYBLOB) */ {
 public:
  SKF_ECCPRIVATEKEYBLOB();
  virtual ~SKF_ECCPRIVATEKEYBLOB();

  SKF_ECCPRIVATEKEYBLOB(const SKF_ECCPRIVATEKEYBLOB& from);

  inline SKF_ECCPRIVATEKEYBLOB& operator=(const SKF_ECCPRIVATEKEYBLOB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SKF_ECCPRIVATEKEYBLOB(SKF_ECCPRIVATEKEYBLOB&& from) noexcept
    : SKF_ECCPRIVATEKEYBLOB() {
    *this = ::std::move(from);
  }

  inline SKF_ECCPRIVATEKEYBLOB& operator=(SKF_ECCPRIVATEKEYBLOB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SKF_ECCPRIVATEKEYBLOB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SKF_ECCPRIVATEKEYBLOB* internal_default_instance() {
    return reinterpret_cast<const SKF_ECCPRIVATEKEYBLOB*>(
               &_SKF_ECCPRIVATEKEYBLOB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(SKF_ECCPRIVATEKEYBLOB* other);
  friend void swap(SKF_ECCPRIVATEKEYBLOB& a, SKF_ECCPRIVATEKEYBLOB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SKF_ECCPRIVATEKEYBLOB* New() const final {
    return CreateMaybeMessage<SKF_ECCPRIVATEKEYBLOB>(nullptr);
  }

  SKF_ECCPRIVATEKEYBLOB* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SKF_ECCPRIVATEKEYBLOB>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SKF_ECCPRIVATEKEYBLOB& from);
  void MergeFrom(const SKF_ECCPRIVATEKEYBLOB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SKF_ECCPRIVATEKEYBLOB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes PrivateKey = 2;
  void clear_privatekey();
  static const int kPrivateKeyFieldNumber = 2;
  const ::std::string& privatekey() const;
  void set_privatekey(const ::std::string& value);
  #if LANG_CXX11
  void set_privatekey(::std::string&& value);
  #endif
  void set_privatekey(const char* value);
  void set_privatekey(const void* value, size_t size);
  ::std::string* mutable_privatekey();
  ::std::string* release_privatekey();
  void set_allocated_privatekey(::std::string* privatekey);

  // .com.westone.skf.WST_PROTO_UINT32 BitLen = 1;
  bool has_bitlen() const;
  void clear_bitlen();
  static const int kBitLenFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& bitlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_bitlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_bitlen();
  void set_allocated_bitlen(::com::westone::skf::WST_PROTO_UINT32* bitlen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.SKF_ECCPRIVATEKEYBLOB)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr privatekey_;
  ::com::westone::skf::WST_PROTO_UINT32* bitlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class SKF_ECCCIPHERBLOB final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.SKF_ECCCIPHERBLOB) */ {
 public:
  SKF_ECCCIPHERBLOB();
  virtual ~SKF_ECCCIPHERBLOB();

  SKF_ECCCIPHERBLOB(const SKF_ECCCIPHERBLOB& from);

  inline SKF_ECCCIPHERBLOB& operator=(const SKF_ECCCIPHERBLOB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SKF_ECCCIPHERBLOB(SKF_ECCCIPHERBLOB&& from) noexcept
    : SKF_ECCCIPHERBLOB() {
    *this = ::std::move(from);
  }

  inline SKF_ECCCIPHERBLOB& operator=(SKF_ECCCIPHERBLOB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SKF_ECCCIPHERBLOB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SKF_ECCCIPHERBLOB* internal_default_instance() {
    return reinterpret_cast<const SKF_ECCCIPHERBLOB*>(
               &_SKF_ECCCIPHERBLOB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(SKF_ECCCIPHERBLOB* other);
  friend void swap(SKF_ECCCIPHERBLOB& a, SKF_ECCCIPHERBLOB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SKF_ECCCIPHERBLOB* New() const final {
    return CreateMaybeMessage<SKF_ECCCIPHERBLOB>(nullptr);
  }

  SKF_ECCCIPHERBLOB* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SKF_ECCCIPHERBLOB>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SKF_ECCCIPHERBLOB& from);
  void MergeFrom(const SKF_ECCCIPHERBLOB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SKF_ECCCIPHERBLOB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes XCoordinate = 1;
  void clear_xcoordinate();
  static const int kXCoordinateFieldNumber = 1;
  const ::std::string& xcoordinate() const;
  void set_xcoordinate(const ::std::string& value);
  #if LANG_CXX11
  void set_xcoordinate(::std::string&& value);
  #endif
  void set_xcoordinate(const char* value);
  void set_xcoordinate(const void* value, size_t size);
  ::std::string* mutable_xcoordinate();
  ::std::string* release_xcoordinate();
  void set_allocated_xcoordinate(::std::string* xcoordinate);

  // bytes YCoordinate = 2;
  void clear_ycoordinate();
  static const int kYCoordinateFieldNumber = 2;
  const ::std::string& ycoordinate() const;
  void set_ycoordinate(const ::std::string& value);
  #if LANG_CXX11
  void set_ycoordinate(::std::string&& value);
  #endif
  void set_ycoordinate(const char* value);
  void set_ycoordinate(const void* value, size_t size);
  ::std::string* mutable_ycoordinate();
  ::std::string* release_ycoordinate();
  void set_allocated_ycoordinate(::std::string* ycoordinate);

  // bytes HASH = 3;
  void clear_hash();
  static const int kHASHFieldNumber = 3;
  const ::std::string& hash() const;
  void set_hash(const ::std::string& value);
  #if LANG_CXX11
  void set_hash(::std::string&& value);
  #endif
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  ::std::string* mutable_hash();
  ::std::string* release_hash();
  void set_allocated_hash(::std::string* hash);

  // bytes Cipher = 5;
  void clear_cipher();
  static const int kCipherFieldNumber = 5;
  const ::std::string& cipher() const;
  void set_cipher(const ::std::string& value);
  #if LANG_CXX11
  void set_cipher(::std::string&& value);
  #endif
  void set_cipher(const char* value);
  void set_cipher(const void* value, size_t size);
  ::std::string* mutable_cipher();
  ::std::string* release_cipher();
  void set_allocated_cipher(::std::string* cipher);

  // .com.westone.skf.WST_PROTO_UINT32 CipherLen = 4;
  bool has_cipherlen() const;
  void clear_cipherlen();
  static const int kCipherLenFieldNumber = 4;
  const ::com::westone::skf::WST_PROTO_UINT32& cipherlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_cipherlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_cipherlen();
  void set_allocated_cipherlen(::com::westone::skf::WST_PROTO_UINT32* cipherlen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.SKF_ECCCIPHERBLOB)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr xcoordinate_;
  ::google::protobuf::internal::ArenaStringPtr ycoordinate_;
  ::google::protobuf::internal::ArenaStringPtr hash_;
  ::google::protobuf::internal::ArenaStringPtr cipher_;
  ::com::westone::skf::WST_PROTO_UINT32* cipherlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class SKF_ECCSIGNATUREBLOB final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.SKF_ECCSIGNATUREBLOB) */ {
 public:
  SKF_ECCSIGNATUREBLOB();
  virtual ~SKF_ECCSIGNATUREBLOB();

  SKF_ECCSIGNATUREBLOB(const SKF_ECCSIGNATUREBLOB& from);

  inline SKF_ECCSIGNATUREBLOB& operator=(const SKF_ECCSIGNATUREBLOB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SKF_ECCSIGNATUREBLOB(SKF_ECCSIGNATUREBLOB&& from) noexcept
    : SKF_ECCSIGNATUREBLOB() {
    *this = ::std::move(from);
  }

  inline SKF_ECCSIGNATUREBLOB& operator=(SKF_ECCSIGNATUREBLOB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SKF_ECCSIGNATUREBLOB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SKF_ECCSIGNATUREBLOB* internal_default_instance() {
    return reinterpret_cast<const SKF_ECCSIGNATUREBLOB*>(
               &_SKF_ECCSIGNATUREBLOB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(SKF_ECCSIGNATUREBLOB* other);
  friend void swap(SKF_ECCSIGNATUREBLOB& a, SKF_ECCSIGNATUREBLOB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SKF_ECCSIGNATUREBLOB* New() const final {
    return CreateMaybeMessage<SKF_ECCSIGNATUREBLOB>(nullptr);
  }

  SKF_ECCSIGNATUREBLOB* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SKF_ECCSIGNATUREBLOB>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SKF_ECCSIGNATUREBLOB& from);
  void MergeFrom(const SKF_ECCSIGNATUREBLOB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SKF_ECCSIGNATUREBLOB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes r = 1;
  void clear_r();
  static const int kRFieldNumber = 1;
  const ::std::string& r() const;
  void set_r(const ::std::string& value);
  #if LANG_CXX11
  void set_r(::std::string&& value);
  #endif
  void set_r(const char* value);
  void set_r(const void* value, size_t size);
  ::std::string* mutable_r();
  ::std::string* release_r();
  void set_allocated_r(::std::string* r);

  // bytes s = 2;
  void clear_s();
  static const int kSFieldNumber = 2;
  const ::std::string& s() const;
  void set_s(const ::std::string& value);
  #if LANG_CXX11
  void set_s(::std::string&& value);
  #endif
  void set_s(const char* value);
  void set_s(const void* value, size_t size);
  ::std::string* mutable_s();
  ::std::string* release_s();
  void set_allocated_s(::std::string* s);

  // @@protoc_insertion_point(class_scope:com.westone.skf.SKF_ECCSIGNATUREBLOB)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr r_;
  ::google::protobuf::internal::ArenaStringPtr s_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class SKF_BLOCKCIPHERPARAM final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.SKF_BLOCKCIPHERPARAM) */ {
 public:
  SKF_BLOCKCIPHERPARAM();
  virtual ~SKF_BLOCKCIPHERPARAM();

  SKF_BLOCKCIPHERPARAM(const SKF_BLOCKCIPHERPARAM& from);

  inline SKF_BLOCKCIPHERPARAM& operator=(const SKF_BLOCKCIPHERPARAM& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SKF_BLOCKCIPHERPARAM(SKF_BLOCKCIPHERPARAM&& from) noexcept
    : SKF_BLOCKCIPHERPARAM() {
    *this = ::std::move(from);
  }

  inline SKF_BLOCKCIPHERPARAM& operator=(SKF_BLOCKCIPHERPARAM&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SKF_BLOCKCIPHERPARAM& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SKF_BLOCKCIPHERPARAM* internal_default_instance() {
    return reinterpret_cast<const SKF_BLOCKCIPHERPARAM*>(
               &_SKF_BLOCKCIPHERPARAM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(SKF_BLOCKCIPHERPARAM* other);
  friend void swap(SKF_BLOCKCIPHERPARAM& a, SKF_BLOCKCIPHERPARAM& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SKF_BLOCKCIPHERPARAM* New() const final {
    return CreateMaybeMessage<SKF_BLOCKCIPHERPARAM>(nullptr);
  }

  SKF_BLOCKCIPHERPARAM* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SKF_BLOCKCIPHERPARAM>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SKF_BLOCKCIPHERPARAM& from);
  void MergeFrom(const SKF_BLOCKCIPHERPARAM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SKF_BLOCKCIPHERPARAM* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes IV = 1;
  void clear_iv();
  static const int kIVFieldNumber = 1;
  const ::std::string& iv() const;
  void set_iv(const ::std::string& value);
  #if LANG_CXX11
  void set_iv(::std::string&& value);
  #endif
  void set_iv(const char* value);
  void set_iv(const void* value, size_t size);
  ::std::string* mutable_iv();
  ::std::string* release_iv();
  void set_allocated_iv(::std::string* iv);

  // .com.westone.skf.WST_PROTO_UINT32 IVLen = 2;
  bool has_ivlen() const;
  void clear_ivlen();
  static const int kIVLenFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& ivlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ivlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ivlen();
  void set_allocated_ivlen(::com::westone::skf::WST_PROTO_UINT32* ivlen);

  // .com.westone.skf.WST_PROTO_UINT32 PaddingType = 3;
  bool has_paddingtype() const;
  void clear_paddingtype();
  static const int kPaddingTypeFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& paddingtype() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_paddingtype();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_paddingtype();
  void set_allocated_paddingtype(::com::westone::skf::WST_PROTO_UINT32* paddingtype);

  // .com.westone.skf.WST_PROTO_UINT32 FeedBitLen = 4;
  bool has_feedbitlen() const;
  void clear_feedbitlen();
  static const int kFeedBitLenFieldNumber = 4;
  const ::com::westone::skf::WST_PROTO_UINT32& feedbitlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_feedbitlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_feedbitlen();
  void set_allocated_feedbitlen(::com::westone::skf::WST_PROTO_UINT32* feedbitlen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.SKF_BLOCKCIPHERPARAM)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr iv_;
  ::com::westone::skf::WST_PROTO_UINT32* ivlen_;
  ::com::westone::skf::WST_PROTO_UINT32* paddingtype_;
  ::com::westone::skf::WST_PROTO_UINT32* feedbitlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class SKF_ENVELOPEDKEYBLOB final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.SKF_ENVELOPEDKEYBLOB) */ {
 public:
  SKF_ENVELOPEDKEYBLOB();
  virtual ~SKF_ENVELOPEDKEYBLOB();

  SKF_ENVELOPEDKEYBLOB(const SKF_ENVELOPEDKEYBLOB& from);

  inline SKF_ENVELOPEDKEYBLOB& operator=(const SKF_ENVELOPEDKEYBLOB& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SKF_ENVELOPEDKEYBLOB(SKF_ENVELOPEDKEYBLOB&& from) noexcept
    : SKF_ENVELOPEDKEYBLOB() {
    *this = ::std::move(from);
  }

  inline SKF_ENVELOPEDKEYBLOB& operator=(SKF_ENVELOPEDKEYBLOB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SKF_ENVELOPEDKEYBLOB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SKF_ENVELOPEDKEYBLOB* internal_default_instance() {
    return reinterpret_cast<const SKF_ENVELOPEDKEYBLOB*>(
               &_SKF_ENVELOPEDKEYBLOB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(SKF_ENVELOPEDKEYBLOB* other);
  friend void swap(SKF_ENVELOPEDKEYBLOB& a, SKF_ENVELOPEDKEYBLOB& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SKF_ENVELOPEDKEYBLOB* New() const final {
    return CreateMaybeMessage<SKF_ENVELOPEDKEYBLOB>(nullptr);
  }

  SKF_ENVELOPEDKEYBLOB* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SKF_ENVELOPEDKEYBLOB>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SKF_ENVELOPEDKEYBLOB& from);
  void MergeFrom(const SKF_ENVELOPEDKEYBLOB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SKF_ENVELOPEDKEYBLOB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes cbEncryptedPriKey = 4;
  void clear_cbencryptedprikey();
  static const int kCbEncryptedPriKeyFieldNumber = 4;
  const ::std::string& cbencryptedprikey() const;
  void set_cbencryptedprikey(const ::std::string& value);
  #if LANG_CXX11
  void set_cbencryptedprikey(::std::string&& value);
  #endif
  void set_cbencryptedprikey(const char* value);
  void set_cbencryptedprikey(const void* value, size_t size);
  ::std::string* mutable_cbencryptedprikey();
  ::std::string* release_cbencryptedprikey();
  void set_allocated_cbencryptedprikey(::std::string* cbencryptedprikey);

  // .com.westone.skf.WST_PROTO_UINT32 Version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& version() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_version();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_version();
  void set_allocated_version(::com::westone::skf::WST_PROTO_UINT32* version);

  // .com.westone.skf.WST_PROTO_UINT32 ulSymmAlgID = 2;
  bool has_ulsymmalgid() const;
  void clear_ulsymmalgid();
  static const int kUlSymmAlgIDFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& ulsymmalgid() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulsymmalgid();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulsymmalgid();
  void set_allocated_ulsymmalgid(::com::westone::skf::WST_PROTO_UINT32* ulsymmalgid);

  // .com.westone.skf.WST_PROTO_UINT32 ulBits = 3;
  bool has_ulbits() const;
  void clear_ulbits();
  static const int kUlBitsFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& ulbits() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulbits();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulbits();
  void set_allocated_ulbits(::com::westone::skf::WST_PROTO_UINT32* ulbits);

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB PubKey = 5;
  bool has_pubkey() const;
  void clear_pubkey();
  static const int kPubKeyFieldNumber = 5;
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& pubkey() const;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* release_pubkey();
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* mutable_pubkey();
  void set_allocated_pubkey(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* pubkey);

  // .com.westone.skf.SKF_ECCCIPHERBLOB ECCCipherBlob = 6;
  bool has_ecccipherblob() const;
  void clear_ecccipherblob();
  static const int kECCCipherBlobFieldNumber = 6;
  const ::com::westone::skf::SKF_ECCCIPHERBLOB& ecccipherblob() const;
  ::com::westone::skf::SKF_ECCCIPHERBLOB* release_ecccipherblob();
  ::com::westone::skf::SKF_ECCCIPHERBLOB* mutable_ecccipherblob();
  void set_allocated_ecccipherblob(::com::westone::skf::SKF_ECCCIPHERBLOB* ecccipherblob);

  // @@protoc_insertion_point(class_scope:com.westone.skf.SKF_ENVELOPEDKEYBLOB)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cbencryptedprikey_;
  ::com::westone::skf::WST_PROTO_UINT32* version_;
  ::com::westone::skf::WST_PROTO_UINT32* ulsymmalgid_;
  ::com::westone::skf::WST_PROTO_UINT32* ulbits_;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* pubkey_;
  ::com::westone::skf::SKF_ECCCIPHERBLOB* ecccipherblob_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class SKF_FILEATTRIBUTES final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.SKF_FILEATTRIBUTES) */ {
 public:
  SKF_FILEATTRIBUTES();
  virtual ~SKF_FILEATTRIBUTES();

  SKF_FILEATTRIBUTES(const SKF_FILEATTRIBUTES& from);

  inline SKF_FILEATTRIBUTES& operator=(const SKF_FILEATTRIBUTES& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SKF_FILEATTRIBUTES(SKF_FILEATTRIBUTES&& from) noexcept
    : SKF_FILEATTRIBUTES() {
    *this = ::std::move(from);
  }

  inline SKF_FILEATTRIBUTES& operator=(SKF_FILEATTRIBUTES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SKF_FILEATTRIBUTES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SKF_FILEATTRIBUTES* internal_default_instance() {
    return reinterpret_cast<const SKF_FILEATTRIBUTES*>(
               &_SKF_FILEATTRIBUTES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(SKF_FILEATTRIBUTES* other);
  friend void swap(SKF_FILEATTRIBUTES& a, SKF_FILEATTRIBUTES& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SKF_FILEATTRIBUTES* New() const final {
    return CreateMaybeMessage<SKF_FILEATTRIBUTES>(nullptr);
  }

  SKF_FILEATTRIBUTES* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SKF_FILEATTRIBUTES>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SKF_FILEATTRIBUTES& from);
  void MergeFrom(const SKF_FILEATTRIBUTES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SKF_FILEATTRIBUTES* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes FileName = 1;
  void clear_filename();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const void* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // .com.westone.skf.WST_PROTO_UINT32 FileSize = 2;
  bool has_filesize() const;
  void clear_filesize();
  static const int kFileSizeFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& filesize() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_filesize();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_filesize();
  void set_allocated_filesize(::com::westone::skf::WST_PROTO_UINT32* filesize);

  // .com.westone.skf.WST_PROTO_UINT32 ReadRights = 3;
  bool has_readrights() const;
  void clear_readrights();
  static const int kReadRightsFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& readrights() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_readrights();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_readrights();
  void set_allocated_readrights(::com::westone::skf::WST_PROTO_UINT32* readrights);

  // .com.westone.skf.WST_PROTO_UINT32 WriteRights = 4;
  bool has_writerights() const;
  void clear_writerights();
  static const int kWriteRightsFieldNumber = 4;
  const ::com::westone::skf::WST_PROTO_UINT32& writerights() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_writerights();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_writerights();
  void set_allocated_writerights(::com::westone::skf::WST_PROTO_UINT32* writerights);

  // @@protoc_insertion_point(class_scope:com.westone.skf.SKF_FILEATTRIBUTES)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::com::westone::skf::WST_PROTO_UINT32* filesize_;
  ::com::westone::skf::WST_PROTO_UINT32* readrights_;
  ::com::westone::skf::WST_PROTO_UINT32* writerights_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_WaitForDevEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_WaitForDevEvent) */ {
 public:
  Req_SKF_WaitForDevEvent();
  virtual ~Req_SKF_WaitForDevEvent();

  Req_SKF_WaitForDevEvent(const Req_SKF_WaitForDevEvent& from);

  inline Req_SKF_WaitForDevEvent& operator=(const Req_SKF_WaitForDevEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_WaitForDevEvent(Req_SKF_WaitForDevEvent&& from) noexcept
    : Req_SKF_WaitForDevEvent() {
    *this = ::std::move(from);
  }

  inline Req_SKF_WaitForDevEvent& operator=(Req_SKF_WaitForDevEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_WaitForDevEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_WaitForDevEvent* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_WaitForDevEvent*>(
               &_Req_SKF_WaitForDevEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(Req_SKF_WaitForDevEvent* other);
  friend void swap(Req_SKF_WaitForDevEvent& a, Req_SKF_WaitForDevEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_WaitForDevEvent* New() const final {
    return CreateMaybeMessage<Req_SKF_WaitForDevEvent>(nullptr);
  }

  Req_SKF_WaitForDevEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_WaitForDevEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_WaitForDevEvent& from);
  void MergeFrom(const Req_SKF_WaitForDevEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_WaitForDevEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes szDevName = 1;
  void clear_szdevname();
  static const int kSzDevNameFieldNumber = 1;
  const ::std::string& szdevname() const;
  void set_szdevname(const ::std::string& value);
  #if LANG_CXX11
  void set_szdevname(::std::string&& value);
  #endif
  void set_szdevname(const char* value);
  void set_szdevname(const void* value, size_t size);
  ::std::string* mutable_szdevname();
  ::std::string* release_szdevname();
  void set_allocated_szdevname(::std::string* szdevname);

  // .com.westone.skf.WST_PROTO_UINT32 pulDevNameLen = 2;
  bool has_puldevnamelen() const;
  void clear_puldevnamelen();
  static const int kPulDevNameLenFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& puldevnamelen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_puldevnamelen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_puldevnamelen();
  void set_allocated_puldevnamelen(::com::westone::skf::WST_PROTO_UINT32* puldevnamelen);

  // .com.westone.skf.WST_PROTO_UINT32 pulEvent = 3;
  bool has_pulevent() const;
  void clear_pulevent();
  static const int kPulEventFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& pulevent() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulevent();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulevent();
  void set_allocated_pulevent(::com::westone::skf::WST_PROTO_UINT32* pulevent);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_WaitForDevEvent)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szdevname_;
  ::com::westone::skf::WST_PROTO_UINT32* puldevnamelen_;
  ::com::westone::skf::WST_PROTO_UINT32* pulevent_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_WaitForDevEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_WaitForDevEvent) */ {
 public:
  Rsp_SKF_WaitForDevEvent();
  virtual ~Rsp_SKF_WaitForDevEvent();

  Rsp_SKF_WaitForDevEvent(const Rsp_SKF_WaitForDevEvent& from);

  inline Rsp_SKF_WaitForDevEvent& operator=(const Rsp_SKF_WaitForDevEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_WaitForDevEvent(Rsp_SKF_WaitForDevEvent&& from) noexcept
    : Rsp_SKF_WaitForDevEvent() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_WaitForDevEvent& operator=(Rsp_SKF_WaitForDevEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_WaitForDevEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_WaitForDevEvent* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_WaitForDevEvent*>(
               &_Rsp_SKF_WaitForDevEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(Rsp_SKF_WaitForDevEvent* other);
  friend void swap(Rsp_SKF_WaitForDevEvent& a, Rsp_SKF_WaitForDevEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_WaitForDevEvent* New() const final {
    return CreateMaybeMessage<Rsp_SKF_WaitForDevEvent>(nullptr);
  }

  Rsp_SKF_WaitForDevEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_WaitForDevEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_WaitForDevEvent& from);
  void MergeFrom(const Rsp_SKF_WaitForDevEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_WaitForDevEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes szDevName = 1;
  void clear_szdevname();
  static const int kSzDevNameFieldNumber = 1;
  const ::std::string& szdevname() const;
  void set_szdevname(const ::std::string& value);
  #if LANG_CXX11
  void set_szdevname(::std::string&& value);
  #endif
  void set_szdevname(const char* value);
  void set_szdevname(const void* value, size_t size);
  ::std::string* mutable_szdevname();
  ::std::string* release_szdevname();
  void set_allocated_szdevname(::std::string* szdevname);

  // .com.westone.skf.WST_PROTO_UINT32 pulDevNameLen = 2;
  bool has_puldevnamelen() const;
  void clear_puldevnamelen();
  static const int kPulDevNameLenFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& puldevnamelen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_puldevnamelen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_puldevnamelen();
  void set_allocated_puldevnamelen(::com::westone::skf::WST_PROTO_UINT32* puldevnamelen);

  // .com.westone.skf.WST_PROTO_UINT32 pulEvent = 3;
  bool has_pulevent() const;
  void clear_pulevent();
  static const int kPulEventFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& pulevent() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulevent();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulevent();
  void set_allocated_pulevent(::com::westone::skf::WST_PROTO_UINT32* pulevent);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_WaitForDevEvent)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szdevname_;
  ::com::westone::skf::WST_PROTO_UINT32* puldevnamelen_;
  ::com::westone::skf::WST_PROTO_UINT32* pulevent_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_CancelWaitForDevEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_CancelWaitForDevEvent) */ {
 public:
  Req_SKF_CancelWaitForDevEvent();
  virtual ~Req_SKF_CancelWaitForDevEvent();

  Req_SKF_CancelWaitForDevEvent(const Req_SKF_CancelWaitForDevEvent& from);

  inline Req_SKF_CancelWaitForDevEvent& operator=(const Req_SKF_CancelWaitForDevEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_CancelWaitForDevEvent(Req_SKF_CancelWaitForDevEvent&& from) noexcept
    : Req_SKF_CancelWaitForDevEvent() {
    *this = ::std::move(from);
  }

  inline Req_SKF_CancelWaitForDevEvent& operator=(Req_SKF_CancelWaitForDevEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_CancelWaitForDevEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_CancelWaitForDevEvent* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_CancelWaitForDevEvent*>(
               &_Req_SKF_CancelWaitForDevEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(Req_SKF_CancelWaitForDevEvent* other);
  friend void swap(Req_SKF_CancelWaitForDevEvent& a, Req_SKF_CancelWaitForDevEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_CancelWaitForDevEvent* New() const final {
    return CreateMaybeMessage<Req_SKF_CancelWaitForDevEvent>(nullptr);
  }

  Req_SKF_CancelWaitForDevEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_CancelWaitForDevEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_CancelWaitForDevEvent& from);
  void MergeFrom(const Req_SKF_CancelWaitForDevEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_CancelWaitForDevEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_CancelWaitForDevEvent)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_CancelWaitForDevEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_CancelWaitForDevEvent) */ {
 public:
  Rsp_SKF_CancelWaitForDevEvent();
  virtual ~Rsp_SKF_CancelWaitForDevEvent();

  Rsp_SKF_CancelWaitForDevEvent(const Rsp_SKF_CancelWaitForDevEvent& from);

  inline Rsp_SKF_CancelWaitForDevEvent& operator=(const Rsp_SKF_CancelWaitForDevEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_CancelWaitForDevEvent(Rsp_SKF_CancelWaitForDevEvent&& from) noexcept
    : Rsp_SKF_CancelWaitForDevEvent() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_CancelWaitForDevEvent& operator=(Rsp_SKF_CancelWaitForDevEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_CancelWaitForDevEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_CancelWaitForDevEvent* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_CancelWaitForDevEvent*>(
               &_Rsp_SKF_CancelWaitForDevEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(Rsp_SKF_CancelWaitForDevEvent* other);
  friend void swap(Rsp_SKF_CancelWaitForDevEvent& a, Rsp_SKF_CancelWaitForDevEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_CancelWaitForDevEvent* New() const final {
    return CreateMaybeMessage<Rsp_SKF_CancelWaitForDevEvent>(nullptr);
  }

  Rsp_SKF_CancelWaitForDevEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_CancelWaitForDevEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_CancelWaitForDevEvent& from);
  void MergeFrom(const Rsp_SKF_CancelWaitForDevEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_CancelWaitForDevEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_CancelWaitForDevEvent)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_EnumDev final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_EnumDev) */ {
 public:
  Req_SKF_EnumDev();
  virtual ~Req_SKF_EnumDev();

  Req_SKF_EnumDev(const Req_SKF_EnumDev& from);

  inline Req_SKF_EnumDev& operator=(const Req_SKF_EnumDev& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_EnumDev(Req_SKF_EnumDev&& from) noexcept
    : Req_SKF_EnumDev() {
    *this = ::std::move(from);
  }

  inline Req_SKF_EnumDev& operator=(Req_SKF_EnumDev&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_EnumDev& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_EnumDev* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_EnumDev*>(
               &_Req_SKF_EnumDev_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(Req_SKF_EnumDev* other);
  friend void swap(Req_SKF_EnumDev& a, Req_SKF_EnumDev& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_EnumDev* New() const final {
    return CreateMaybeMessage<Req_SKF_EnumDev>(nullptr);
  }

  Req_SKF_EnumDev* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_EnumDev>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_EnumDev& from);
  void MergeFrom(const Req_SKF_EnumDev& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_EnumDev* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes szNameList = 2;
  void clear_sznamelist();
  static const int kSzNameListFieldNumber = 2;
  const ::std::string& sznamelist() const;
  void set_sznamelist(const ::std::string& value);
  #if LANG_CXX11
  void set_sznamelist(::std::string&& value);
  #endif
  void set_sznamelist(const char* value);
  void set_sznamelist(const void* value, size_t size);
  ::std::string* mutable_sznamelist();
  ::std::string* release_sznamelist();
  void set_allocated_sznamelist(::std::string* sznamelist);

  // .com.westone.skf.WST_PROTO_BOOL bPresent = 1;
  bool has_bpresent() const;
  void clear_bpresent();
  static const int kBPresentFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_BOOL& bpresent() const;
  ::com::westone::skf::WST_PROTO_BOOL* release_bpresent();
  ::com::westone::skf::WST_PROTO_BOOL* mutable_bpresent();
  void set_allocated_bpresent(::com::westone::skf::WST_PROTO_BOOL* bpresent);

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 3;
  bool has_pulsize() const;
  void clear_pulsize();
  static const int kPulSizeFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& pulsize() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulsize();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulsize();
  void set_allocated_pulsize(::com::westone::skf::WST_PROTO_UINT32* pulsize);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_EnumDev)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sznamelist_;
  ::com::westone::skf::WST_PROTO_BOOL* bpresent_;
  ::com::westone::skf::WST_PROTO_UINT32* pulsize_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_EnumDev final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_EnumDev) */ {
 public:
  Rsp_SKF_EnumDev();
  virtual ~Rsp_SKF_EnumDev();

  Rsp_SKF_EnumDev(const Rsp_SKF_EnumDev& from);

  inline Rsp_SKF_EnumDev& operator=(const Rsp_SKF_EnumDev& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_EnumDev(Rsp_SKF_EnumDev&& from) noexcept
    : Rsp_SKF_EnumDev() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_EnumDev& operator=(Rsp_SKF_EnumDev&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_EnumDev& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_EnumDev* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_EnumDev*>(
               &_Rsp_SKF_EnumDev_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(Rsp_SKF_EnumDev* other);
  friend void swap(Rsp_SKF_EnumDev& a, Rsp_SKF_EnumDev& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_EnumDev* New() const final {
    return CreateMaybeMessage<Rsp_SKF_EnumDev>(nullptr);
  }

  Rsp_SKF_EnumDev* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_EnumDev>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_EnumDev& from);
  void MergeFrom(const Rsp_SKF_EnumDev& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_EnumDev* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes szNameList = 1;
  void clear_sznamelist();
  static const int kSzNameListFieldNumber = 1;
  const ::std::string& sznamelist() const;
  void set_sznamelist(const ::std::string& value);
  #if LANG_CXX11
  void set_sznamelist(::std::string&& value);
  #endif
  void set_sznamelist(const char* value);
  void set_sznamelist(const void* value, size_t size);
  ::std::string* mutable_sznamelist();
  ::std::string* release_sznamelist();
  void set_allocated_sznamelist(::std::string* sznamelist);

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 2;
  bool has_pulsize() const;
  void clear_pulsize();
  static const int kPulSizeFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& pulsize() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulsize();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulsize();
  void set_allocated_pulsize(::com::westone::skf::WST_PROTO_UINT32* pulsize);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_EnumDev)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sznamelist_;
  ::com::westone::skf::WST_PROTO_UINT32* pulsize_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_ConnectDev final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_ConnectDev) */ {
 public:
  Req_SKF_ConnectDev();
  virtual ~Req_SKF_ConnectDev();

  Req_SKF_ConnectDev(const Req_SKF_ConnectDev& from);

  inline Req_SKF_ConnectDev& operator=(const Req_SKF_ConnectDev& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_ConnectDev(Req_SKF_ConnectDev&& from) noexcept
    : Req_SKF_ConnectDev() {
    *this = ::std::move(from);
  }

  inline Req_SKF_ConnectDev& operator=(Req_SKF_ConnectDev&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_ConnectDev& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_ConnectDev* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_ConnectDev*>(
               &_Req_SKF_ConnectDev_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(Req_SKF_ConnectDev* other);
  friend void swap(Req_SKF_ConnectDev& a, Req_SKF_ConnectDev& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_ConnectDev* New() const final {
    return CreateMaybeMessage<Req_SKF_ConnectDev>(nullptr);
  }

  Req_SKF_ConnectDev* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_ConnectDev>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_ConnectDev& from);
  void MergeFrom(const Req_SKF_ConnectDev& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_ConnectDev* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string szName = 1;
  void clear_szname();
  static const int kSzNameFieldNumber = 1;
  const ::std::string& szname() const;
  void set_szname(const ::std::string& value);
  #if LANG_CXX11
  void set_szname(::std::string&& value);
  #endif
  void set_szname(const char* value);
  void set_szname(const char* value, size_t size);
  ::std::string* mutable_szname();
  ::std::string* release_szname();
  void set_allocated_szname(::std::string* szname);

  // .com.westone.skf.WST_PROTO_UINT32 phDev = 2;
  bool has_phdev() const;
  void clear_phdev();
  static const int kPhDevFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& phdev() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_phdev();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_phdev();
  void set_allocated_phdev(::com::westone::skf::WST_PROTO_UINT32* phdev);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_ConnectDev)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szname_;
  ::com::westone::skf::WST_PROTO_UINT32* phdev_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_ConnectDev final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_ConnectDev) */ {
 public:
  Rsp_SKF_ConnectDev();
  virtual ~Rsp_SKF_ConnectDev();

  Rsp_SKF_ConnectDev(const Rsp_SKF_ConnectDev& from);

  inline Rsp_SKF_ConnectDev& operator=(const Rsp_SKF_ConnectDev& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_ConnectDev(Rsp_SKF_ConnectDev&& from) noexcept
    : Rsp_SKF_ConnectDev() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_ConnectDev& operator=(Rsp_SKF_ConnectDev&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_ConnectDev& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_ConnectDev* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_ConnectDev*>(
               &_Rsp_SKF_ConnectDev_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(Rsp_SKF_ConnectDev* other);
  friend void swap(Rsp_SKF_ConnectDev& a, Rsp_SKF_ConnectDev& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_ConnectDev* New() const final {
    return CreateMaybeMessage<Rsp_SKF_ConnectDev>(nullptr);
  }

  Rsp_SKF_ConnectDev* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_ConnectDev>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_ConnectDev& from);
  void MergeFrom(const Rsp_SKF_ConnectDev& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_ConnectDev* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 phDev = 1;
  bool has_phdev() const;
  void clear_phdev();
  static const int kPhDevFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& phdev() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_phdev();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_phdev();
  void set_allocated_phdev(::com::westone::skf::WST_PROTO_UINT32* phdev);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_ConnectDev)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* phdev_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_DisConnectDev final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_DisConnectDev) */ {
 public:
  Req_SKF_DisConnectDev();
  virtual ~Req_SKF_DisConnectDev();

  Req_SKF_DisConnectDev(const Req_SKF_DisConnectDev& from);

  inline Req_SKF_DisConnectDev& operator=(const Req_SKF_DisConnectDev& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_DisConnectDev(Req_SKF_DisConnectDev&& from) noexcept
    : Req_SKF_DisConnectDev() {
    *this = ::std::move(from);
  }

  inline Req_SKF_DisConnectDev& operator=(Req_SKF_DisConnectDev&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_DisConnectDev& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_DisConnectDev* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_DisConnectDev*>(
               &_Req_SKF_DisConnectDev_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(Req_SKF_DisConnectDev* other);
  friend void swap(Req_SKF_DisConnectDev& a, Req_SKF_DisConnectDev& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_DisConnectDev* New() const final {
    return CreateMaybeMessage<Req_SKF_DisConnectDev>(nullptr);
  }

  Req_SKF_DisConnectDev* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_DisConnectDev>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_DisConnectDev& from);
  void MergeFrom(const Req_SKF_DisConnectDev& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_DisConnectDev* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  bool has_hdev() const;
  void clear_hdev();
  static const int kHDevFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hdev() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hdev();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hdev();
  void set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_DisConnectDev)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* hdev_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_DisConnectDev final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_DisConnectDev) */ {
 public:
  Rsp_SKF_DisConnectDev();
  virtual ~Rsp_SKF_DisConnectDev();

  Rsp_SKF_DisConnectDev(const Rsp_SKF_DisConnectDev& from);

  inline Rsp_SKF_DisConnectDev& operator=(const Rsp_SKF_DisConnectDev& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_DisConnectDev(Rsp_SKF_DisConnectDev&& from) noexcept
    : Rsp_SKF_DisConnectDev() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_DisConnectDev& operator=(Rsp_SKF_DisConnectDev&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_DisConnectDev& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_DisConnectDev* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_DisConnectDev*>(
               &_Rsp_SKF_DisConnectDev_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(Rsp_SKF_DisConnectDev* other);
  friend void swap(Rsp_SKF_DisConnectDev& a, Rsp_SKF_DisConnectDev& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_DisConnectDev* New() const final {
    return CreateMaybeMessage<Rsp_SKF_DisConnectDev>(nullptr);
  }

  Rsp_SKF_DisConnectDev* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_DisConnectDev>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_DisConnectDev& from);
  void MergeFrom(const Rsp_SKF_DisConnectDev& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_DisConnectDev* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_DisConnectDev)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_GetDevState final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_GetDevState) */ {
 public:
  Req_SKF_GetDevState();
  virtual ~Req_SKF_GetDevState();

  Req_SKF_GetDevState(const Req_SKF_GetDevState& from);

  inline Req_SKF_GetDevState& operator=(const Req_SKF_GetDevState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_GetDevState(Req_SKF_GetDevState&& from) noexcept
    : Req_SKF_GetDevState() {
    *this = ::std::move(from);
  }

  inline Req_SKF_GetDevState& operator=(Req_SKF_GetDevState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_GetDevState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_GetDevState* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_GetDevState*>(
               &_Req_SKF_GetDevState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(Req_SKF_GetDevState* other);
  friend void swap(Req_SKF_GetDevState& a, Req_SKF_GetDevState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_GetDevState* New() const final {
    return CreateMaybeMessage<Req_SKF_GetDevState>(nullptr);
  }

  Req_SKF_GetDevState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_GetDevState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_GetDevState& from);
  void MergeFrom(const Req_SKF_GetDevState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_GetDevState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string szDevName = 1;
  void clear_szdevname();
  static const int kSzDevNameFieldNumber = 1;
  const ::std::string& szdevname() const;
  void set_szdevname(const ::std::string& value);
  #if LANG_CXX11
  void set_szdevname(::std::string&& value);
  #endif
  void set_szdevname(const char* value);
  void set_szdevname(const char* value, size_t size);
  ::std::string* mutable_szdevname();
  ::std::string* release_szdevname();
  void set_allocated_szdevname(::std::string* szdevname);

  // .com.westone.skf.WST_PROTO_UINT32 pulDevState = 2;
  bool has_puldevstate() const;
  void clear_puldevstate();
  static const int kPulDevStateFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& puldevstate() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_puldevstate();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_puldevstate();
  void set_allocated_puldevstate(::com::westone::skf::WST_PROTO_UINT32* puldevstate);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_GetDevState)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szdevname_;
  ::com::westone::skf::WST_PROTO_UINT32* puldevstate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_GetDevState final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_GetDevState) */ {
 public:
  Rsp_SKF_GetDevState();
  virtual ~Rsp_SKF_GetDevState();

  Rsp_SKF_GetDevState(const Rsp_SKF_GetDevState& from);

  inline Rsp_SKF_GetDevState& operator=(const Rsp_SKF_GetDevState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_GetDevState(Rsp_SKF_GetDevState&& from) noexcept
    : Rsp_SKF_GetDevState() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_GetDevState& operator=(Rsp_SKF_GetDevState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_GetDevState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_GetDevState* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_GetDevState*>(
               &_Rsp_SKF_GetDevState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(Rsp_SKF_GetDevState* other);
  friend void swap(Rsp_SKF_GetDevState& a, Rsp_SKF_GetDevState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_GetDevState* New() const final {
    return CreateMaybeMessage<Rsp_SKF_GetDevState>(nullptr);
  }

  Rsp_SKF_GetDevState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_GetDevState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_GetDevState& from);
  void MergeFrom(const Rsp_SKF_GetDevState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_GetDevState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 pulDevState = 1;
  bool has_puldevstate() const;
  void clear_puldevstate();
  static const int kPulDevStateFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& puldevstate() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_puldevstate();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_puldevstate();
  void set_allocated_puldevstate(::com::westone::skf::WST_PROTO_UINT32* puldevstate);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_GetDevState)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* puldevstate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_SetLabel final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_SetLabel) */ {
 public:
  Req_SKF_SetLabel();
  virtual ~Req_SKF_SetLabel();

  Req_SKF_SetLabel(const Req_SKF_SetLabel& from);

  inline Req_SKF_SetLabel& operator=(const Req_SKF_SetLabel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_SetLabel(Req_SKF_SetLabel&& from) noexcept
    : Req_SKF_SetLabel() {
    *this = ::std::move(from);
  }

  inline Req_SKF_SetLabel& operator=(Req_SKF_SetLabel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_SetLabel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_SetLabel* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_SetLabel*>(
               &_Req_SKF_SetLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(Req_SKF_SetLabel* other);
  friend void swap(Req_SKF_SetLabel& a, Req_SKF_SetLabel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_SetLabel* New() const final {
    return CreateMaybeMessage<Req_SKF_SetLabel>(nullptr);
  }

  Req_SKF_SetLabel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_SetLabel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_SetLabel& from);
  void MergeFrom(const Req_SKF_SetLabel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_SetLabel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string szLabel = 2;
  void clear_szlabel();
  static const int kSzLabelFieldNumber = 2;
  const ::std::string& szlabel() const;
  void set_szlabel(const ::std::string& value);
  #if LANG_CXX11
  void set_szlabel(::std::string&& value);
  #endif
  void set_szlabel(const char* value);
  void set_szlabel(const char* value, size_t size);
  ::std::string* mutable_szlabel();
  ::std::string* release_szlabel();
  void set_allocated_szlabel(::std::string* szlabel);

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  bool has_hdev() const;
  void clear_hdev();
  static const int kHDevFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hdev() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hdev();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hdev();
  void set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_SetLabel)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szlabel_;
  ::com::westone::skf::WST_PROTO_UINT32* hdev_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_SetLabel final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_SetLabel) */ {
 public:
  Rsp_SKF_SetLabel();
  virtual ~Rsp_SKF_SetLabel();

  Rsp_SKF_SetLabel(const Rsp_SKF_SetLabel& from);

  inline Rsp_SKF_SetLabel& operator=(const Rsp_SKF_SetLabel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_SetLabel(Rsp_SKF_SetLabel&& from) noexcept
    : Rsp_SKF_SetLabel() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_SetLabel& operator=(Rsp_SKF_SetLabel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_SetLabel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_SetLabel* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_SetLabel*>(
               &_Rsp_SKF_SetLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(Rsp_SKF_SetLabel* other);
  friend void swap(Rsp_SKF_SetLabel& a, Rsp_SKF_SetLabel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_SetLabel* New() const final {
    return CreateMaybeMessage<Rsp_SKF_SetLabel>(nullptr);
  }

  Rsp_SKF_SetLabel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_SetLabel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_SetLabel& from);
  void MergeFrom(const Rsp_SKF_SetLabel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_SetLabel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_SetLabel)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_GetDevInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_GetDevInfo) */ {
 public:
  Req_SKF_GetDevInfo();
  virtual ~Req_SKF_GetDevInfo();

  Req_SKF_GetDevInfo(const Req_SKF_GetDevInfo& from);

  inline Req_SKF_GetDevInfo& operator=(const Req_SKF_GetDevInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_GetDevInfo(Req_SKF_GetDevInfo&& from) noexcept
    : Req_SKF_GetDevInfo() {
    *this = ::std::move(from);
  }

  inline Req_SKF_GetDevInfo& operator=(Req_SKF_GetDevInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_GetDevInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_GetDevInfo* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_GetDevInfo*>(
               &_Req_SKF_GetDevInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(Req_SKF_GetDevInfo* other);
  friend void swap(Req_SKF_GetDevInfo& a, Req_SKF_GetDevInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_GetDevInfo* New() const final {
    return CreateMaybeMessage<Req_SKF_GetDevInfo>(nullptr);
  }

  Req_SKF_GetDevInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_GetDevInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_GetDevInfo& from);
  void MergeFrom(const Req_SKF_GetDevInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_GetDevInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  bool has_hdev() const;
  void clear_hdev();
  static const int kHDevFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hdev() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hdev();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hdev();
  void set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev);

  // .com.westone.skf.SKF_DevInfo pDevInfo = 2;
  bool has_pdevinfo() const;
  void clear_pdevinfo();
  static const int kPDevInfoFieldNumber = 2;
  const ::com::westone::skf::SKF_DevInfo& pdevinfo() const;
  ::com::westone::skf::SKF_DevInfo* release_pdevinfo();
  ::com::westone::skf::SKF_DevInfo* mutable_pdevinfo();
  void set_allocated_pdevinfo(::com::westone::skf::SKF_DevInfo* pdevinfo);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_GetDevInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* hdev_;
  ::com::westone::skf::SKF_DevInfo* pdevinfo_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_GetDevInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_GetDevInfo) */ {
 public:
  Rsp_SKF_GetDevInfo();
  virtual ~Rsp_SKF_GetDevInfo();

  Rsp_SKF_GetDevInfo(const Rsp_SKF_GetDevInfo& from);

  inline Rsp_SKF_GetDevInfo& operator=(const Rsp_SKF_GetDevInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_GetDevInfo(Rsp_SKF_GetDevInfo&& from) noexcept
    : Rsp_SKF_GetDevInfo() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_GetDevInfo& operator=(Rsp_SKF_GetDevInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_GetDevInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_GetDevInfo* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_GetDevInfo*>(
               &_Rsp_SKF_GetDevInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(Rsp_SKF_GetDevInfo* other);
  friend void swap(Rsp_SKF_GetDevInfo& a, Rsp_SKF_GetDevInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_GetDevInfo* New() const final {
    return CreateMaybeMessage<Rsp_SKF_GetDevInfo>(nullptr);
  }

  Rsp_SKF_GetDevInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_GetDevInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_GetDevInfo& from);
  void MergeFrom(const Rsp_SKF_GetDevInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_GetDevInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.SKF_DevInfo pDevInfo = 1;
  bool has_pdevinfo() const;
  void clear_pdevinfo();
  static const int kPDevInfoFieldNumber = 1;
  const ::com::westone::skf::SKF_DevInfo& pdevinfo() const;
  ::com::westone::skf::SKF_DevInfo* release_pdevinfo();
  ::com::westone::skf::SKF_DevInfo* mutable_pdevinfo();
  void set_allocated_pdevinfo(::com::westone::skf::SKF_DevInfo* pdevinfo);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_GetDevInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::SKF_DevInfo* pdevinfo_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_LockDev final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_LockDev) */ {
 public:
  Req_SKF_LockDev();
  virtual ~Req_SKF_LockDev();

  Req_SKF_LockDev(const Req_SKF_LockDev& from);

  inline Req_SKF_LockDev& operator=(const Req_SKF_LockDev& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_LockDev(Req_SKF_LockDev&& from) noexcept
    : Req_SKF_LockDev() {
    *this = ::std::move(from);
  }

  inline Req_SKF_LockDev& operator=(Req_SKF_LockDev&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_LockDev& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_LockDev* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_LockDev*>(
               &_Req_SKF_LockDev_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(Req_SKF_LockDev* other);
  friend void swap(Req_SKF_LockDev& a, Req_SKF_LockDev& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_LockDev* New() const final {
    return CreateMaybeMessage<Req_SKF_LockDev>(nullptr);
  }

  Req_SKF_LockDev* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_LockDev>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_LockDev& from);
  void MergeFrom(const Req_SKF_LockDev& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_LockDev* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  bool has_hdev() const;
  void clear_hdev();
  static const int kHDevFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hdev() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hdev();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hdev();
  void set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev);

  // .com.westone.skf.WST_PROTO_UINT32 ulTimeOut = 2;
  bool has_ultimeout() const;
  void clear_ultimeout();
  static const int kUlTimeOutFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& ultimeout() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ultimeout();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ultimeout();
  void set_allocated_ultimeout(::com::westone::skf::WST_PROTO_UINT32* ultimeout);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_LockDev)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* hdev_;
  ::com::westone::skf::WST_PROTO_UINT32* ultimeout_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_LockDev final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_LockDev) */ {
 public:
  Rsp_SKF_LockDev();
  virtual ~Rsp_SKF_LockDev();

  Rsp_SKF_LockDev(const Rsp_SKF_LockDev& from);

  inline Rsp_SKF_LockDev& operator=(const Rsp_SKF_LockDev& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_LockDev(Rsp_SKF_LockDev&& from) noexcept
    : Rsp_SKF_LockDev() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_LockDev& operator=(Rsp_SKF_LockDev&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_LockDev& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_LockDev* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_LockDev*>(
               &_Rsp_SKF_LockDev_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(Rsp_SKF_LockDev* other);
  friend void swap(Rsp_SKF_LockDev& a, Rsp_SKF_LockDev& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_LockDev* New() const final {
    return CreateMaybeMessage<Rsp_SKF_LockDev>(nullptr);
  }

  Rsp_SKF_LockDev* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_LockDev>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_LockDev& from);
  void MergeFrom(const Rsp_SKF_LockDev& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_LockDev* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_LockDev)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_UnlockDev final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_UnlockDev) */ {
 public:
  Req_SKF_UnlockDev();
  virtual ~Req_SKF_UnlockDev();

  Req_SKF_UnlockDev(const Req_SKF_UnlockDev& from);

  inline Req_SKF_UnlockDev& operator=(const Req_SKF_UnlockDev& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_UnlockDev(Req_SKF_UnlockDev&& from) noexcept
    : Req_SKF_UnlockDev() {
    *this = ::std::move(from);
  }

  inline Req_SKF_UnlockDev& operator=(Req_SKF_UnlockDev&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_UnlockDev& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_UnlockDev* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_UnlockDev*>(
               &_Req_SKF_UnlockDev_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(Req_SKF_UnlockDev* other);
  friend void swap(Req_SKF_UnlockDev& a, Req_SKF_UnlockDev& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_UnlockDev* New() const final {
    return CreateMaybeMessage<Req_SKF_UnlockDev>(nullptr);
  }

  Req_SKF_UnlockDev* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_UnlockDev>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_UnlockDev& from);
  void MergeFrom(const Req_SKF_UnlockDev& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_UnlockDev* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  bool has_hdev() const;
  void clear_hdev();
  static const int kHDevFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hdev() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hdev();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hdev();
  void set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_UnlockDev)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* hdev_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_UnlockDev final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_UnlockDev) */ {
 public:
  Rsp_SKF_UnlockDev();
  virtual ~Rsp_SKF_UnlockDev();

  Rsp_SKF_UnlockDev(const Rsp_SKF_UnlockDev& from);

  inline Rsp_SKF_UnlockDev& operator=(const Rsp_SKF_UnlockDev& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_UnlockDev(Rsp_SKF_UnlockDev&& from) noexcept
    : Rsp_SKF_UnlockDev() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_UnlockDev& operator=(Rsp_SKF_UnlockDev&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_UnlockDev& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_UnlockDev* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_UnlockDev*>(
               &_Rsp_SKF_UnlockDev_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(Rsp_SKF_UnlockDev* other);
  friend void swap(Rsp_SKF_UnlockDev& a, Rsp_SKF_UnlockDev& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_UnlockDev* New() const final {
    return CreateMaybeMessage<Rsp_SKF_UnlockDev>(nullptr);
  }

  Rsp_SKF_UnlockDev* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_UnlockDev>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_UnlockDev& from);
  void MergeFrom(const Rsp_SKF_UnlockDev& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_UnlockDev* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_UnlockDev)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_ChangeDevAuthKey final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_ChangeDevAuthKey) */ {
 public:
  Req_SKF_ChangeDevAuthKey();
  virtual ~Req_SKF_ChangeDevAuthKey();

  Req_SKF_ChangeDevAuthKey(const Req_SKF_ChangeDevAuthKey& from);

  inline Req_SKF_ChangeDevAuthKey& operator=(const Req_SKF_ChangeDevAuthKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_ChangeDevAuthKey(Req_SKF_ChangeDevAuthKey&& from) noexcept
    : Req_SKF_ChangeDevAuthKey() {
    *this = ::std::move(from);
  }

  inline Req_SKF_ChangeDevAuthKey& operator=(Req_SKF_ChangeDevAuthKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_ChangeDevAuthKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_ChangeDevAuthKey* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_ChangeDevAuthKey*>(
               &_Req_SKF_ChangeDevAuthKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(Req_SKF_ChangeDevAuthKey* other);
  friend void swap(Req_SKF_ChangeDevAuthKey& a, Req_SKF_ChangeDevAuthKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_ChangeDevAuthKey* New() const final {
    return CreateMaybeMessage<Req_SKF_ChangeDevAuthKey>(nullptr);
  }

  Req_SKF_ChangeDevAuthKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_ChangeDevAuthKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_ChangeDevAuthKey& from);
  void MergeFrom(const Req_SKF_ChangeDevAuthKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_ChangeDevAuthKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbKeyValue = 2;
  void clear_pbkeyvalue();
  static const int kPbKeyValueFieldNumber = 2;
  const ::std::string& pbkeyvalue() const;
  void set_pbkeyvalue(const ::std::string& value);
  #if LANG_CXX11
  void set_pbkeyvalue(::std::string&& value);
  #endif
  void set_pbkeyvalue(const char* value);
  void set_pbkeyvalue(const void* value, size_t size);
  ::std::string* mutable_pbkeyvalue();
  ::std::string* release_pbkeyvalue();
  void set_allocated_pbkeyvalue(::std::string* pbkeyvalue);

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  bool has_hdev() const;
  void clear_hdev();
  static const int kHDevFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hdev() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hdev();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hdev();
  void set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev);

  // .com.westone.skf.WST_PROTO_UINT32 ulKeyLen = 3;
  bool has_ulkeylen() const;
  void clear_ulkeylen();
  static const int kUlKeyLenFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& ulkeylen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulkeylen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulkeylen();
  void set_allocated_ulkeylen(::com::westone::skf::WST_PROTO_UINT32* ulkeylen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_ChangeDevAuthKey)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbkeyvalue_;
  ::com::westone::skf::WST_PROTO_UINT32* hdev_;
  ::com::westone::skf::WST_PROTO_UINT32* ulkeylen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_ChangeDevAuthKey final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_ChangeDevAuthKey) */ {
 public:
  Rsp_SKF_ChangeDevAuthKey();
  virtual ~Rsp_SKF_ChangeDevAuthKey();

  Rsp_SKF_ChangeDevAuthKey(const Rsp_SKF_ChangeDevAuthKey& from);

  inline Rsp_SKF_ChangeDevAuthKey& operator=(const Rsp_SKF_ChangeDevAuthKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_ChangeDevAuthKey(Rsp_SKF_ChangeDevAuthKey&& from) noexcept
    : Rsp_SKF_ChangeDevAuthKey() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_ChangeDevAuthKey& operator=(Rsp_SKF_ChangeDevAuthKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_ChangeDevAuthKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_ChangeDevAuthKey* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_ChangeDevAuthKey*>(
               &_Rsp_SKF_ChangeDevAuthKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(Rsp_SKF_ChangeDevAuthKey* other);
  friend void swap(Rsp_SKF_ChangeDevAuthKey& a, Rsp_SKF_ChangeDevAuthKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_ChangeDevAuthKey* New() const final {
    return CreateMaybeMessage<Rsp_SKF_ChangeDevAuthKey>(nullptr);
  }

  Rsp_SKF_ChangeDevAuthKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_ChangeDevAuthKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_ChangeDevAuthKey& from);
  void MergeFrom(const Rsp_SKF_ChangeDevAuthKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_ChangeDevAuthKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_ChangeDevAuthKey)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_DevAuth final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_DevAuth) */ {
 public:
  Req_SKF_DevAuth();
  virtual ~Req_SKF_DevAuth();

  Req_SKF_DevAuth(const Req_SKF_DevAuth& from);

  inline Req_SKF_DevAuth& operator=(const Req_SKF_DevAuth& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_DevAuth(Req_SKF_DevAuth&& from) noexcept
    : Req_SKF_DevAuth() {
    *this = ::std::move(from);
  }

  inline Req_SKF_DevAuth& operator=(Req_SKF_DevAuth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_DevAuth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_DevAuth* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_DevAuth*>(
               &_Req_SKF_DevAuth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(Req_SKF_DevAuth* other);
  friend void swap(Req_SKF_DevAuth& a, Req_SKF_DevAuth& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_DevAuth* New() const final {
    return CreateMaybeMessage<Req_SKF_DevAuth>(nullptr);
  }

  Req_SKF_DevAuth* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_DevAuth>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_DevAuth& from);
  void MergeFrom(const Req_SKF_DevAuth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_DevAuth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbAuthData = 2;
  void clear_pbauthdata();
  static const int kPbAuthDataFieldNumber = 2;
  const ::std::string& pbauthdata() const;
  void set_pbauthdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbauthdata(::std::string&& value);
  #endif
  void set_pbauthdata(const char* value);
  void set_pbauthdata(const void* value, size_t size);
  ::std::string* mutable_pbauthdata();
  ::std::string* release_pbauthdata();
  void set_allocated_pbauthdata(::std::string* pbauthdata);

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  bool has_hdev() const;
  void clear_hdev();
  static const int kHDevFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hdev() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hdev();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hdev();
  void set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev);

  // .com.westone.skf.WST_PROTO_UINT32 ulLen = 3;
  bool has_ullen() const;
  void clear_ullen();
  static const int kUlLenFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& ullen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ullen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ullen();
  void set_allocated_ullen(::com::westone::skf::WST_PROTO_UINT32* ullen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_DevAuth)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbauthdata_;
  ::com::westone::skf::WST_PROTO_UINT32* hdev_;
  ::com::westone::skf::WST_PROTO_UINT32* ullen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_DevAuth final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_DevAuth) */ {
 public:
  Rsp_SKF_DevAuth();
  virtual ~Rsp_SKF_DevAuth();

  Rsp_SKF_DevAuth(const Rsp_SKF_DevAuth& from);

  inline Rsp_SKF_DevAuth& operator=(const Rsp_SKF_DevAuth& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_DevAuth(Rsp_SKF_DevAuth&& from) noexcept
    : Rsp_SKF_DevAuth() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_DevAuth& operator=(Rsp_SKF_DevAuth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_DevAuth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_DevAuth* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_DevAuth*>(
               &_Rsp_SKF_DevAuth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(Rsp_SKF_DevAuth* other);
  friend void swap(Rsp_SKF_DevAuth& a, Rsp_SKF_DevAuth& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_DevAuth* New() const final {
    return CreateMaybeMessage<Rsp_SKF_DevAuth>(nullptr);
  }

  Rsp_SKF_DevAuth* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_DevAuth>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_DevAuth& from);
  void MergeFrom(const Rsp_SKF_DevAuth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_DevAuth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_DevAuth)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_ChangePIN final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_ChangePIN) */ {
 public:
  Req_SKF_ChangePIN();
  virtual ~Req_SKF_ChangePIN();

  Req_SKF_ChangePIN(const Req_SKF_ChangePIN& from);

  inline Req_SKF_ChangePIN& operator=(const Req_SKF_ChangePIN& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_ChangePIN(Req_SKF_ChangePIN&& from) noexcept
    : Req_SKF_ChangePIN() {
    *this = ::std::move(from);
  }

  inline Req_SKF_ChangePIN& operator=(Req_SKF_ChangePIN&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_ChangePIN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_ChangePIN* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_ChangePIN*>(
               &_Req_SKF_ChangePIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(Req_SKF_ChangePIN* other);
  friend void swap(Req_SKF_ChangePIN& a, Req_SKF_ChangePIN& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_ChangePIN* New() const final {
    return CreateMaybeMessage<Req_SKF_ChangePIN>(nullptr);
  }

  Req_SKF_ChangePIN* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_ChangePIN>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_ChangePIN& from);
  void MergeFrom(const Req_SKF_ChangePIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_ChangePIN* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string szOldPIN = 3;
  void clear_szoldpin();
  static const int kSzOldPINFieldNumber = 3;
  const ::std::string& szoldpin() const;
  void set_szoldpin(const ::std::string& value);
  #if LANG_CXX11
  void set_szoldpin(::std::string&& value);
  #endif
  void set_szoldpin(const char* value);
  void set_szoldpin(const char* value, size_t size);
  ::std::string* mutable_szoldpin();
  ::std::string* release_szoldpin();
  void set_allocated_szoldpin(::std::string* szoldpin);

  // string szNewPIN = 4;
  void clear_sznewpin();
  static const int kSzNewPINFieldNumber = 4;
  const ::std::string& sznewpin() const;
  void set_sznewpin(const ::std::string& value);
  #if LANG_CXX11
  void set_sznewpin(::std::string&& value);
  #endif
  void set_sznewpin(const char* value);
  void set_sznewpin(const char* value, size_t size);
  ::std::string* mutable_sznewpin();
  ::std::string* release_sznewpin();
  void set_allocated_sznewpin(::std::string* sznewpin);

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  bool has_happlication() const;
  void clear_happlication();
  static const int kHApplicationFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& happlication() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_happlication();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_happlication();
  void set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication);

  // .com.westone.skf.WST_PROTO_UINT32 ulPINType = 2;
  bool has_ulpintype() const;
  void clear_ulpintype();
  static const int kUlPINTypeFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& ulpintype() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulpintype();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulpintype();
  void set_allocated_ulpintype(::com::westone::skf::WST_PROTO_UINT32* ulpintype);

  // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 5;
  bool has_pulretrycount() const;
  void clear_pulretrycount();
  static const int kPulRetryCountFieldNumber = 5;
  const ::com::westone::skf::WST_PROTO_UINT32& pulretrycount() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulretrycount();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulretrycount();
  void set_allocated_pulretrycount(::com::westone::skf::WST_PROTO_UINT32* pulretrycount);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_ChangePIN)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szoldpin_;
  ::google::protobuf::internal::ArenaStringPtr sznewpin_;
  ::com::westone::skf::WST_PROTO_UINT32* happlication_;
  ::com::westone::skf::WST_PROTO_UINT32* ulpintype_;
  ::com::westone::skf::WST_PROTO_UINT32* pulretrycount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_ChangePIN final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_ChangePIN) */ {
 public:
  Rsp_SKF_ChangePIN();
  virtual ~Rsp_SKF_ChangePIN();

  Rsp_SKF_ChangePIN(const Rsp_SKF_ChangePIN& from);

  inline Rsp_SKF_ChangePIN& operator=(const Rsp_SKF_ChangePIN& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_ChangePIN(Rsp_SKF_ChangePIN&& from) noexcept
    : Rsp_SKF_ChangePIN() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_ChangePIN& operator=(Rsp_SKF_ChangePIN&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_ChangePIN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_ChangePIN* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_ChangePIN*>(
               &_Rsp_SKF_ChangePIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(Rsp_SKF_ChangePIN* other);
  friend void swap(Rsp_SKF_ChangePIN& a, Rsp_SKF_ChangePIN& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_ChangePIN* New() const final {
    return CreateMaybeMessage<Rsp_SKF_ChangePIN>(nullptr);
  }

  Rsp_SKF_ChangePIN* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_ChangePIN>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_ChangePIN& from);
  void MergeFrom(const Rsp_SKF_ChangePIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_ChangePIN* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 1;
  bool has_pulretrycount() const;
  void clear_pulretrycount();
  static const int kPulRetryCountFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& pulretrycount() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulretrycount();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulretrycount();
  void set_allocated_pulretrycount(::com::westone::skf::WST_PROTO_UINT32* pulretrycount);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_ChangePIN)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* pulretrycount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_GetPINInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_GetPINInfo) */ {
 public:
  Req_SKF_GetPINInfo();
  virtual ~Req_SKF_GetPINInfo();

  Req_SKF_GetPINInfo(const Req_SKF_GetPINInfo& from);

  inline Req_SKF_GetPINInfo& operator=(const Req_SKF_GetPINInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_GetPINInfo(Req_SKF_GetPINInfo&& from) noexcept
    : Req_SKF_GetPINInfo() {
    *this = ::std::move(from);
  }

  inline Req_SKF_GetPINInfo& operator=(Req_SKF_GetPINInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_GetPINInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_GetPINInfo* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_GetPINInfo*>(
               &_Req_SKF_GetPINInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(Req_SKF_GetPINInfo* other);
  friend void swap(Req_SKF_GetPINInfo& a, Req_SKF_GetPINInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_GetPINInfo* New() const final {
    return CreateMaybeMessage<Req_SKF_GetPINInfo>(nullptr);
  }

  Req_SKF_GetPINInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_GetPINInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_GetPINInfo& from);
  void MergeFrom(const Req_SKF_GetPINInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_GetPINInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  bool has_happlication() const;
  void clear_happlication();
  static const int kHApplicationFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& happlication() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_happlication();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_happlication();
  void set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication);

  // .com.westone.skf.WST_PROTO_UINT32 ulPINType = 2;
  bool has_ulpintype() const;
  void clear_ulpintype();
  static const int kUlPINTypeFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& ulpintype() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulpintype();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulpintype();
  void set_allocated_ulpintype(::com::westone::skf::WST_PROTO_UINT32* ulpintype);

  // .com.westone.skf.WST_PROTO_UINT32 pulMaxRetryCount = 3;
  bool has_pulmaxretrycount() const;
  void clear_pulmaxretrycount();
  static const int kPulMaxRetryCountFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& pulmaxretrycount() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulmaxretrycount();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulmaxretrycount();
  void set_allocated_pulmaxretrycount(::com::westone::skf::WST_PROTO_UINT32* pulmaxretrycount);

  // .com.westone.skf.WST_PROTO_UINT32 pulRemainRetryCount = 4;
  bool has_pulremainretrycount() const;
  void clear_pulremainretrycount();
  static const int kPulRemainRetryCountFieldNumber = 4;
  const ::com::westone::skf::WST_PROTO_UINT32& pulremainretrycount() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulremainretrycount();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulremainretrycount();
  void set_allocated_pulremainretrycount(::com::westone::skf::WST_PROTO_UINT32* pulremainretrycount);

  // .com.westone.skf.WST_PROTO_BOOL pbDefaultPin = 5;
  bool has_pbdefaultpin() const;
  void clear_pbdefaultpin();
  static const int kPbDefaultPinFieldNumber = 5;
  const ::com::westone::skf::WST_PROTO_BOOL& pbdefaultpin() const;
  ::com::westone::skf::WST_PROTO_BOOL* release_pbdefaultpin();
  ::com::westone::skf::WST_PROTO_BOOL* mutable_pbdefaultpin();
  void set_allocated_pbdefaultpin(::com::westone::skf::WST_PROTO_BOOL* pbdefaultpin);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_GetPINInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* happlication_;
  ::com::westone::skf::WST_PROTO_UINT32* ulpintype_;
  ::com::westone::skf::WST_PROTO_UINT32* pulmaxretrycount_;
  ::com::westone::skf::WST_PROTO_UINT32* pulremainretrycount_;
  ::com::westone::skf::WST_PROTO_BOOL* pbdefaultpin_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_GetPINInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_GetPINInfo) */ {
 public:
  Rsp_SKF_GetPINInfo();
  virtual ~Rsp_SKF_GetPINInfo();

  Rsp_SKF_GetPINInfo(const Rsp_SKF_GetPINInfo& from);

  inline Rsp_SKF_GetPINInfo& operator=(const Rsp_SKF_GetPINInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_GetPINInfo(Rsp_SKF_GetPINInfo&& from) noexcept
    : Rsp_SKF_GetPINInfo() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_GetPINInfo& operator=(Rsp_SKF_GetPINInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_GetPINInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_GetPINInfo* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_GetPINInfo*>(
               &_Rsp_SKF_GetPINInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(Rsp_SKF_GetPINInfo* other);
  friend void swap(Rsp_SKF_GetPINInfo& a, Rsp_SKF_GetPINInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_GetPINInfo* New() const final {
    return CreateMaybeMessage<Rsp_SKF_GetPINInfo>(nullptr);
  }

  Rsp_SKF_GetPINInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_GetPINInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_GetPINInfo& from);
  void MergeFrom(const Rsp_SKF_GetPINInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_GetPINInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 pulMaxRetryCount = 1;
  bool has_pulmaxretrycount() const;
  void clear_pulmaxretrycount();
  static const int kPulMaxRetryCountFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& pulmaxretrycount() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulmaxretrycount();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulmaxretrycount();
  void set_allocated_pulmaxretrycount(::com::westone::skf::WST_PROTO_UINT32* pulmaxretrycount);

  // .com.westone.skf.WST_PROTO_UINT32 pulRemainRetryCount = 2;
  bool has_pulremainretrycount() const;
  void clear_pulremainretrycount();
  static const int kPulRemainRetryCountFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& pulremainretrycount() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulremainretrycount();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulremainretrycount();
  void set_allocated_pulremainretrycount(::com::westone::skf::WST_PROTO_UINT32* pulremainretrycount);

  // .com.westone.skf.WST_PROTO_BOOL pbDefaultPin = 3;
  bool has_pbdefaultpin() const;
  void clear_pbdefaultpin();
  static const int kPbDefaultPinFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_BOOL& pbdefaultpin() const;
  ::com::westone::skf::WST_PROTO_BOOL* release_pbdefaultpin();
  ::com::westone::skf::WST_PROTO_BOOL* mutable_pbdefaultpin();
  void set_allocated_pbdefaultpin(::com::westone::skf::WST_PROTO_BOOL* pbdefaultpin);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_GetPINInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* pulmaxretrycount_;
  ::com::westone::skf::WST_PROTO_UINT32* pulremainretrycount_;
  ::com::westone::skf::WST_PROTO_BOOL* pbdefaultpin_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_VerifyPIN final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_VerifyPIN) */ {
 public:
  Req_SKF_VerifyPIN();
  virtual ~Req_SKF_VerifyPIN();

  Req_SKF_VerifyPIN(const Req_SKF_VerifyPIN& from);

  inline Req_SKF_VerifyPIN& operator=(const Req_SKF_VerifyPIN& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_VerifyPIN(Req_SKF_VerifyPIN&& from) noexcept
    : Req_SKF_VerifyPIN() {
    *this = ::std::move(from);
  }

  inline Req_SKF_VerifyPIN& operator=(Req_SKF_VerifyPIN&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_VerifyPIN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_VerifyPIN* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_VerifyPIN*>(
               &_Req_SKF_VerifyPIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(Req_SKF_VerifyPIN* other);
  friend void swap(Req_SKF_VerifyPIN& a, Req_SKF_VerifyPIN& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_VerifyPIN* New() const final {
    return CreateMaybeMessage<Req_SKF_VerifyPIN>(nullptr);
  }

  Req_SKF_VerifyPIN* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_VerifyPIN>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_VerifyPIN& from);
  void MergeFrom(const Req_SKF_VerifyPIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_VerifyPIN* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string szPIN = 3;
  void clear_szpin();
  static const int kSzPINFieldNumber = 3;
  const ::std::string& szpin() const;
  void set_szpin(const ::std::string& value);
  #if LANG_CXX11
  void set_szpin(::std::string&& value);
  #endif
  void set_szpin(const char* value);
  void set_szpin(const char* value, size_t size);
  ::std::string* mutable_szpin();
  ::std::string* release_szpin();
  void set_allocated_szpin(::std::string* szpin);

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  bool has_happlication() const;
  void clear_happlication();
  static const int kHApplicationFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& happlication() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_happlication();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_happlication();
  void set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication);

  // .com.westone.skf.WST_PROTO_UINT32 ulPINType = 2;
  bool has_ulpintype() const;
  void clear_ulpintype();
  static const int kUlPINTypeFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& ulpintype() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulpintype();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulpintype();
  void set_allocated_ulpintype(::com::westone::skf::WST_PROTO_UINT32* ulpintype);

  // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 4;
  bool has_pulretrycount() const;
  void clear_pulretrycount();
  static const int kPulRetryCountFieldNumber = 4;
  const ::com::westone::skf::WST_PROTO_UINT32& pulretrycount() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulretrycount();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulretrycount();
  void set_allocated_pulretrycount(::com::westone::skf::WST_PROTO_UINT32* pulretrycount);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_VerifyPIN)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szpin_;
  ::com::westone::skf::WST_PROTO_UINT32* happlication_;
  ::com::westone::skf::WST_PROTO_UINT32* ulpintype_;
  ::com::westone::skf::WST_PROTO_UINT32* pulretrycount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_VerifyPIN final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_VerifyPIN) */ {
 public:
  Rsp_SKF_VerifyPIN();
  virtual ~Rsp_SKF_VerifyPIN();

  Rsp_SKF_VerifyPIN(const Rsp_SKF_VerifyPIN& from);

  inline Rsp_SKF_VerifyPIN& operator=(const Rsp_SKF_VerifyPIN& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_VerifyPIN(Rsp_SKF_VerifyPIN&& from) noexcept
    : Rsp_SKF_VerifyPIN() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_VerifyPIN& operator=(Rsp_SKF_VerifyPIN&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_VerifyPIN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_VerifyPIN* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_VerifyPIN*>(
               &_Rsp_SKF_VerifyPIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(Rsp_SKF_VerifyPIN* other);
  friend void swap(Rsp_SKF_VerifyPIN& a, Rsp_SKF_VerifyPIN& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_VerifyPIN* New() const final {
    return CreateMaybeMessage<Rsp_SKF_VerifyPIN>(nullptr);
  }

  Rsp_SKF_VerifyPIN* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_VerifyPIN>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_VerifyPIN& from);
  void MergeFrom(const Rsp_SKF_VerifyPIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_VerifyPIN* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 1;
  bool has_pulretrycount() const;
  void clear_pulretrycount();
  static const int kPulRetryCountFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& pulretrycount() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulretrycount();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulretrycount();
  void set_allocated_pulretrycount(::com::westone::skf::WST_PROTO_UINT32* pulretrycount);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_VerifyPIN)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* pulretrycount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_UnblockPIN final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_UnblockPIN) */ {
 public:
  Req_SKF_UnblockPIN();
  virtual ~Req_SKF_UnblockPIN();

  Req_SKF_UnblockPIN(const Req_SKF_UnblockPIN& from);

  inline Req_SKF_UnblockPIN& operator=(const Req_SKF_UnblockPIN& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_UnblockPIN(Req_SKF_UnblockPIN&& from) noexcept
    : Req_SKF_UnblockPIN() {
    *this = ::std::move(from);
  }

  inline Req_SKF_UnblockPIN& operator=(Req_SKF_UnblockPIN&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_UnblockPIN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_UnblockPIN* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_UnblockPIN*>(
               &_Req_SKF_UnblockPIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(Req_SKF_UnblockPIN* other);
  friend void swap(Req_SKF_UnblockPIN& a, Req_SKF_UnblockPIN& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_UnblockPIN* New() const final {
    return CreateMaybeMessage<Req_SKF_UnblockPIN>(nullptr);
  }

  Req_SKF_UnblockPIN* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_UnblockPIN>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_UnblockPIN& from);
  void MergeFrom(const Req_SKF_UnblockPIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_UnblockPIN* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string szAdminPIN = 2;
  void clear_szadminpin();
  static const int kSzAdminPINFieldNumber = 2;
  const ::std::string& szadminpin() const;
  void set_szadminpin(const ::std::string& value);
  #if LANG_CXX11
  void set_szadminpin(::std::string&& value);
  #endif
  void set_szadminpin(const char* value);
  void set_szadminpin(const char* value, size_t size);
  ::std::string* mutable_szadminpin();
  ::std::string* release_szadminpin();
  void set_allocated_szadminpin(::std::string* szadminpin);

  // string szNewUserPIN = 3;
  void clear_sznewuserpin();
  static const int kSzNewUserPINFieldNumber = 3;
  const ::std::string& sznewuserpin() const;
  void set_sznewuserpin(const ::std::string& value);
  #if LANG_CXX11
  void set_sznewuserpin(::std::string&& value);
  #endif
  void set_sznewuserpin(const char* value);
  void set_sznewuserpin(const char* value, size_t size);
  ::std::string* mutable_sznewuserpin();
  ::std::string* release_sznewuserpin();
  void set_allocated_sznewuserpin(::std::string* sznewuserpin);

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  bool has_happlication() const;
  void clear_happlication();
  static const int kHApplicationFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& happlication() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_happlication();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_happlication();
  void set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication);

  // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 4;
  bool has_pulretrycount() const;
  void clear_pulretrycount();
  static const int kPulRetryCountFieldNumber = 4;
  const ::com::westone::skf::WST_PROTO_UINT32& pulretrycount() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulretrycount();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulretrycount();
  void set_allocated_pulretrycount(::com::westone::skf::WST_PROTO_UINT32* pulretrycount);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_UnblockPIN)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szadminpin_;
  ::google::protobuf::internal::ArenaStringPtr sznewuserpin_;
  ::com::westone::skf::WST_PROTO_UINT32* happlication_;
  ::com::westone::skf::WST_PROTO_UINT32* pulretrycount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_UnblockPIN final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_UnblockPIN) */ {
 public:
  Rsp_SKF_UnblockPIN();
  virtual ~Rsp_SKF_UnblockPIN();

  Rsp_SKF_UnblockPIN(const Rsp_SKF_UnblockPIN& from);

  inline Rsp_SKF_UnblockPIN& operator=(const Rsp_SKF_UnblockPIN& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_UnblockPIN(Rsp_SKF_UnblockPIN&& from) noexcept
    : Rsp_SKF_UnblockPIN() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_UnblockPIN& operator=(Rsp_SKF_UnblockPIN&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_UnblockPIN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_UnblockPIN* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_UnblockPIN*>(
               &_Rsp_SKF_UnblockPIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(Rsp_SKF_UnblockPIN* other);
  friend void swap(Rsp_SKF_UnblockPIN& a, Rsp_SKF_UnblockPIN& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_UnblockPIN* New() const final {
    return CreateMaybeMessage<Rsp_SKF_UnblockPIN>(nullptr);
  }

  Rsp_SKF_UnblockPIN* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_UnblockPIN>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_UnblockPIN& from);
  void MergeFrom(const Rsp_SKF_UnblockPIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_UnblockPIN* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 1;
  bool has_pulretrycount() const;
  void clear_pulretrycount();
  static const int kPulRetryCountFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& pulretrycount() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulretrycount();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulretrycount();
  void set_allocated_pulretrycount(::com::westone::skf::WST_PROTO_UINT32* pulretrycount);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_UnblockPIN)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* pulretrycount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_ClearSecureState final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_ClearSecureState) */ {
 public:
  Req_SKF_ClearSecureState();
  virtual ~Req_SKF_ClearSecureState();

  Req_SKF_ClearSecureState(const Req_SKF_ClearSecureState& from);

  inline Req_SKF_ClearSecureState& operator=(const Req_SKF_ClearSecureState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_ClearSecureState(Req_SKF_ClearSecureState&& from) noexcept
    : Req_SKF_ClearSecureState() {
    *this = ::std::move(from);
  }

  inline Req_SKF_ClearSecureState& operator=(Req_SKF_ClearSecureState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_ClearSecureState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_ClearSecureState* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_ClearSecureState*>(
               &_Req_SKF_ClearSecureState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void Swap(Req_SKF_ClearSecureState* other);
  friend void swap(Req_SKF_ClearSecureState& a, Req_SKF_ClearSecureState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_ClearSecureState* New() const final {
    return CreateMaybeMessage<Req_SKF_ClearSecureState>(nullptr);
  }

  Req_SKF_ClearSecureState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_ClearSecureState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_ClearSecureState& from);
  void MergeFrom(const Req_SKF_ClearSecureState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_ClearSecureState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  bool has_happlication() const;
  void clear_happlication();
  static const int kHApplicationFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& happlication() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_happlication();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_happlication();
  void set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_ClearSecureState)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* happlication_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_ClearSecureState final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_ClearSecureState) */ {
 public:
  Rsp_SKF_ClearSecureState();
  virtual ~Rsp_SKF_ClearSecureState();

  Rsp_SKF_ClearSecureState(const Rsp_SKF_ClearSecureState& from);

  inline Rsp_SKF_ClearSecureState& operator=(const Rsp_SKF_ClearSecureState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_ClearSecureState(Rsp_SKF_ClearSecureState&& from) noexcept
    : Rsp_SKF_ClearSecureState() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_ClearSecureState& operator=(Rsp_SKF_ClearSecureState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_ClearSecureState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_ClearSecureState* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_ClearSecureState*>(
               &_Rsp_SKF_ClearSecureState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(Rsp_SKF_ClearSecureState* other);
  friend void swap(Rsp_SKF_ClearSecureState& a, Rsp_SKF_ClearSecureState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_ClearSecureState* New() const final {
    return CreateMaybeMessage<Rsp_SKF_ClearSecureState>(nullptr);
  }

  Rsp_SKF_ClearSecureState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_ClearSecureState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_ClearSecureState& from);
  void MergeFrom(const Rsp_SKF_ClearSecureState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_ClearSecureState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_ClearSecureState)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_CreateApplication final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_CreateApplication) */ {
 public:
  Req_SKF_CreateApplication();
  virtual ~Req_SKF_CreateApplication();

  Req_SKF_CreateApplication(const Req_SKF_CreateApplication& from);

  inline Req_SKF_CreateApplication& operator=(const Req_SKF_CreateApplication& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_CreateApplication(Req_SKF_CreateApplication&& from) noexcept
    : Req_SKF_CreateApplication() {
    *this = ::std::move(from);
  }

  inline Req_SKF_CreateApplication& operator=(Req_SKF_CreateApplication&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_CreateApplication& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_CreateApplication* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_CreateApplication*>(
               &_Req_SKF_CreateApplication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void Swap(Req_SKF_CreateApplication* other);
  friend void swap(Req_SKF_CreateApplication& a, Req_SKF_CreateApplication& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_CreateApplication* New() const final {
    return CreateMaybeMessage<Req_SKF_CreateApplication>(nullptr);
  }

  Req_SKF_CreateApplication* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_CreateApplication>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_CreateApplication& from);
  void MergeFrom(const Req_SKF_CreateApplication& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_CreateApplication* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string szAppName = 2;
  void clear_szappname();
  static const int kSzAppNameFieldNumber = 2;
  const ::std::string& szappname() const;
  void set_szappname(const ::std::string& value);
  #if LANG_CXX11
  void set_szappname(::std::string&& value);
  #endif
  void set_szappname(const char* value);
  void set_szappname(const char* value, size_t size);
  ::std::string* mutable_szappname();
  ::std::string* release_szappname();
  void set_allocated_szappname(::std::string* szappname);

  // string szAdminPIN = 3;
  void clear_szadminpin();
  static const int kSzAdminPINFieldNumber = 3;
  const ::std::string& szadminpin() const;
  void set_szadminpin(const ::std::string& value);
  #if LANG_CXX11
  void set_szadminpin(::std::string&& value);
  #endif
  void set_szadminpin(const char* value);
  void set_szadminpin(const char* value, size_t size);
  ::std::string* mutable_szadminpin();
  ::std::string* release_szadminpin();
  void set_allocated_szadminpin(::std::string* szadminpin);

  // string szUserPIN = 5;
  void clear_szuserpin();
  static const int kSzUserPINFieldNumber = 5;
  const ::std::string& szuserpin() const;
  void set_szuserpin(const ::std::string& value);
  #if LANG_CXX11
  void set_szuserpin(::std::string&& value);
  #endif
  void set_szuserpin(const char* value);
  void set_szuserpin(const char* value, size_t size);
  ::std::string* mutable_szuserpin();
  ::std::string* release_szuserpin();
  void set_allocated_szuserpin(::std::string* szuserpin);

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  bool has_hdev() const;
  void clear_hdev();
  static const int kHDevFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hdev() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hdev();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hdev();
  void set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev);

  // .com.westone.skf.WST_PROTO_UINT32 dwAdminPinRetryCount = 4;
  bool has_dwadminpinretrycount() const;
  void clear_dwadminpinretrycount();
  static const int kDwAdminPinRetryCountFieldNumber = 4;
  const ::com::westone::skf::WST_PROTO_UINT32& dwadminpinretrycount() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_dwadminpinretrycount();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_dwadminpinretrycount();
  void set_allocated_dwadminpinretrycount(::com::westone::skf::WST_PROTO_UINT32* dwadminpinretrycount);

  // .com.westone.skf.WST_PROTO_UINT32 dwUserPinRetryCount = 6;
  bool has_dwuserpinretrycount() const;
  void clear_dwuserpinretrycount();
  static const int kDwUserPinRetryCountFieldNumber = 6;
  const ::com::westone::skf::WST_PROTO_UINT32& dwuserpinretrycount() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_dwuserpinretrycount();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_dwuserpinretrycount();
  void set_allocated_dwuserpinretrycount(::com::westone::skf::WST_PROTO_UINT32* dwuserpinretrycount);

  // .com.westone.skf.WST_PROTO_UINT32 dwCreateFileRights = 7;
  bool has_dwcreatefilerights() const;
  void clear_dwcreatefilerights();
  static const int kDwCreateFileRightsFieldNumber = 7;
  const ::com::westone::skf::WST_PROTO_UINT32& dwcreatefilerights() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_dwcreatefilerights();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_dwcreatefilerights();
  void set_allocated_dwcreatefilerights(::com::westone::skf::WST_PROTO_UINT32* dwcreatefilerights);

  // .com.westone.skf.WST_PROTO_UINT32 phApplication = 8;
  bool has_phapplication() const;
  void clear_phapplication();
  static const int kPhApplicationFieldNumber = 8;
  const ::com::westone::skf::WST_PROTO_UINT32& phapplication() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_phapplication();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_phapplication();
  void set_allocated_phapplication(::com::westone::skf::WST_PROTO_UINT32* phapplication);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_CreateApplication)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szappname_;
  ::google::protobuf::internal::ArenaStringPtr szadminpin_;
  ::google::protobuf::internal::ArenaStringPtr szuserpin_;
  ::com::westone::skf::WST_PROTO_UINT32* hdev_;
  ::com::westone::skf::WST_PROTO_UINT32* dwadminpinretrycount_;
  ::com::westone::skf::WST_PROTO_UINT32* dwuserpinretrycount_;
  ::com::westone::skf::WST_PROTO_UINT32* dwcreatefilerights_;
  ::com::westone::skf::WST_PROTO_UINT32* phapplication_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_CreateApplication final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_CreateApplication) */ {
 public:
  Rsp_SKF_CreateApplication();
  virtual ~Rsp_SKF_CreateApplication();

  Rsp_SKF_CreateApplication(const Rsp_SKF_CreateApplication& from);

  inline Rsp_SKF_CreateApplication& operator=(const Rsp_SKF_CreateApplication& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_CreateApplication(Rsp_SKF_CreateApplication&& from) noexcept
    : Rsp_SKF_CreateApplication() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_CreateApplication& operator=(Rsp_SKF_CreateApplication&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_CreateApplication& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_CreateApplication* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_CreateApplication*>(
               &_Rsp_SKF_CreateApplication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void Swap(Rsp_SKF_CreateApplication* other);
  friend void swap(Rsp_SKF_CreateApplication& a, Rsp_SKF_CreateApplication& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_CreateApplication* New() const final {
    return CreateMaybeMessage<Rsp_SKF_CreateApplication>(nullptr);
  }

  Rsp_SKF_CreateApplication* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_CreateApplication>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_CreateApplication& from);
  void MergeFrom(const Rsp_SKF_CreateApplication& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_CreateApplication* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 phApplication = 1;
  bool has_phapplication() const;
  void clear_phapplication();
  static const int kPhApplicationFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& phapplication() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_phapplication();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_phapplication();
  void set_allocated_phapplication(::com::westone::skf::WST_PROTO_UINT32* phapplication);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_CreateApplication)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* phapplication_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_EnumApplication final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_EnumApplication) */ {
 public:
  Req_SKF_EnumApplication();
  virtual ~Req_SKF_EnumApplication();

  Req_SKF_EnumApplication(const Req_SKF_EnumApplication& from);

  inline Req_SKF_EnumApplication& operator=(const Req_SKF_EnumApplication& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_EnumApplication(Req_SKF_EnumApplication&& from) noexcept
    : Req_SKF_EnumApplication() {
    *this = ::std::move(from);
  }

  inline Req_SKF_EnumApplication& operator=(Req_SKF_EnumApplication&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_EnumApplication& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_EnumApplication* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_EnumApplication*>(
               &_Req_SKF_EnumApplication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  void Swap(Req_SKF_EnumApplication* other);
  friend void swap(Req_SKF_EnumApplication& a, Req_SKF_EnumApplication& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_EnumApplication* New() const final {
    return CreateMaybeMessage<Req_SKF_EnumApplication>(nullptr);
  }

  Req_SKF_EnumApplication* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_EnumApplication>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_EnumApplication& from);
  void MergeFrom(const Req_SKF_EnumApplication& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_EnumApplication* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes szAppName = 2;
  void clear_szappname();
  static const int kSzAppNameFieldNumber = 2;
  const ::std::string& szappname() const;
  void set_szappname(const ::std::string& value);
  #if LANG_CXX11
  void set_szappname(::std::string&& value);
  #endif
  void set_szappname(const char* value);
  void set_szappname(const void* value, size_t size);
  ::std::string* mutable_szappname();
  ::std::string* release_szappname();
  void set_allocated_szappname(::std::string* szappname);

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  bool has_hdev() const;
  void clear_hdev();
  static const int kHDevFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hdev() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hdev();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hdev();
  void set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev);

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 3;
  bool has_pulsize() const;
  void clear_pulsize();
  static const int kPulSizeFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& pulsize() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulsize();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulsize();
  void set_allocated_pulsize(::com::westone::skf::WST_PROTO_UINT32* pulsize);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_EnumApplication)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szappname_;
  ::com::westone::skf::WST_PROTO_UINT32* hdev_;
  ::com::westone::skf::WST_PROTO_UINT32* pulsize_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_EnumApplication final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_EnumApplication) */ {
 public:
  Rsp_SKF_EnumApplication();
  virtual ~Rsp_SKF_EnumApplication();

  Rsp_SKF_EnumApplication(const Rsp_SKF_EnumApplication& from);

  inline Rsp_SKF_EnumApplication& operator=(const Rsp_SKF_EnumApplication& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_EnumApplication(Rsp_SKF_EnumApplication&& from) noexcept
    : Rsp_SKF_EnumApplication() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_EnumApplication& operator=(Rsp_SKF_EnumApplication&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_EnumApplication& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_EnumApplication* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_EnumApplication*>(
               &_Rsp_SKF_EnumApplication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  void Swap(Rsp_SKF_EnumApplication* other);
  friend void swap(Rsp_SKF_EnumApplication& a, Rsp_SKF_EnumApplication& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_EnumApplication* New() const final {
    return CreateMaybeMessage<Rsp_SKF_EnumApplication>(nullptr);
  }

  Rsp_SKF_EnumApplication* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_EnumApplication>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_EnumApplication& from);
  void MergeFrom(const Rsp_SKF_EnumApplication& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_EnumApplication* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes szAppName = 1;
  void clear_szappname();
  static const int kSzAppNameFieldNumber = 1;
  const ::std::string& szappname() const;
  void set_szappname(const ::std::string& value);
  #if LANG_CXX11
  void set_szappname(::std::string&& value);
  #endif
  void set_szappname(const char* value);
  void set_szappname(const void* value, size_t size);
  ::std::string* mutable_szappname();
  ::std::string* release_szappname();
  void set_allocated_szappname(::std::string* szappname);

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 2;
  bool has_pulsize() const;
  void clear_pulsize();
  static const int kPulSizeFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& pulsize() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulsize();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulsize();
  void set_allocated_pulsize(::com::westone::skf::WST_PROTO_UINT32* pulsize);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_EnumApplication)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szappname_;
  ::com::westone::skf::WST_PROTO_UINT32* pulsize_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_DeleteApplication final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_DeleteApplication) */ {
 public:
  Req_SKF_DeleteApplication();
  virtual ~Req_SKF_DeleteApplication();

  Req_SKF_DeleteApplication(const Req_SKF_DeleteApplication& from);

  inline Req_SKF_DeleteApplication& operator=(const Req_SKF_DeleteApplication& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_DeleteApplication(Req_SKF_DeleteApplication&& from) noexcept
    : Req_SKF_DeleteApplication() {
    *this = ::std::move(from);
  }

  inline Req_SKF_DeleteApplication& operator=(Req_SKF_DeleteApplication&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_DeleteApplication& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_DeleteApplication* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_DeleteApplication*>(
               &_Req_SKF_DeleteApplication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  void Swap(Req_SKF_DeleteApplication* other);
  friend void swap(Req_SKF_DeleteApplication& a, Req_SKF_DeleteApplication& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_DeleteApplication* New() const final {
    return CreateMaybeMessage<Req_SKF_DeleteApplication>(nullptr);
  }

  Req_SKF_DeleteApplication* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_DeleteApplication>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_DeleteApplication& from);
  void MergeFrom(const Req_SKF_DeleteApplication& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_DeleteApplication* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string szAppName = 2;
  void clear_szappname();
  static const int kSzAppNameFieldNumber = 2;
  const ::std::string& szappname() const;
  void set_szappname(const ::std::string& value);
  #if LANG_CXX11
  void set_szappname(::std::string&& value);
  #endif
  void set_szappname(const char* value);
  void set_szappname(const char* value, size_t size);
  ::std::string* mutable_szappname();
  ::std::string* release_szappname();
  void set_allocated_szappname(::std::string* szappname);

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  bool has_hdev() const;
  void clear_hdev();
  static const int kHDevFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hdev() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hdev();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hdev();
  void set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_DeleteApplication)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szappname_;
  ::com::westone::skf::WST_PROTO_UINT32* hdev_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_DeleteApplication final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_DeleteApplication) */ {
 public:
  Rsp_SKF_DeleteApplication();
  virtual ~Rsp_SKF_DeleteApplication();

  Rsp_SKF_DeleteApplication(const Rsp_SKF_DeleteApplication& from);

  inline Rsp_SKF_DeleteApplication& operator=(const Rsp_SKF_DeleteApplication& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_DeleteApplication(Rsp_SKF_DeleteApplication&& from) noexcept
    : Rsp_SKF_DeleteApplication() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_DeleteApplication& operator=(Rsp_SKF_DeleteApplication&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_DeleteApplication& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_DeleteApplication* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_DeleteApplication*>(
               &_Rsp_SKF_DeleteApplication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  void Swap(Rsp_SKF_DeleteApplication* other);
  friend void swap(Rsp_SKF_DeleteApplication& a, Rsp_SKF_DeleteApplication& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_DeleteApplication* New() const final {
    return CreateMaybeMessage<Rsp_SKF_DeleteApplication>(nullptr);
  }

  Rsp_SKF_DeleteApplication* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_DeleteApplication>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_DeleteApplication& from);
  void MergeFrom(const Rsp_SKF_DeleteApplication& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_DeleteApplication* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_DeleteApplication)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_OpenApplication final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_OpenApplication) */ {
 public:
  Req_SKF_OpenApplication();
  virtual ~Req_SKF_OpenApplication();

  Req_SKF_OpenApplication(const Req_SKF_OpenApplication& from);

  inline Req_SKF_OpenApplication& operator=(const Req_SKF_OpenApplication& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_OpenApplication(Req_SKF_OpenApplication&& from) noexcept
    : Req_SKF_OpenApplication() {
    *this = ::std::move(from);
  }

  inline Req_SKF_OpenApplication& operator=(Req_SKF_OpenApplication&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_OpenApplication& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_OpenApplication* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_OpenApplication*>(
               &_Req_SKF_OpenApplication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  void Swap(Req_SKF_OpenApplication* other);
  friend void swap(Req_SKF_OpenApplication& a, Req_SKF_OpenApplication& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_OpenApplication* New() const final {
    return CreateMaybeMessage<Req_SKF_OpenApplication>(nullptr);
  }

  Req_SKF_OpenApplication* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_OpenApplication>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_OpenApplication& from);
  void MergeFrom(const Req_SKF_OpenApplication& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_OpenApplication* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string szAppName = 2;
  void clear_szappname();
  static const int kSzAppNameFieldNumber = 2;
  const ::std::string& szappname() const;
  void set_szappname(const ::std::string& value);
  #if LANG_CXX11
  void set_szappname(::std::string&& value);
  #endif
  void set_szappname(const char* value);
  void set_szappname(const char* value, size_t size);
  ::std::string* mutable_szappname();
  ::std::string* release_szappname();
  void set_allocated_szappname(::std::string* szappname);

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  bool has_hdev() const;
  void clear_hdev();
  static const int kHDevFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hdev() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hdev();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hdev();
  void set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev);

  // .com.westone.skf.WST_PROTO_UINT32 phApplication = 3;
  bool has_phapplication() const;
  void clear_phapplication();
  static const int kPhApplicationFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& phapplication() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_phapplication();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_phapplication();
  void set_allocated_phapplication(::com::westone::skf::WST_PROTO_UINT32* phapplication);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_OpenApplication)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szappname_;
  ::com::westone::skf::WST_PROTO_UINT32* hdev_;
  ::com::westone::skf::WST_PROTO_UINT32* phapplication_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_OpenApplication final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_OpenApplication) */ {
 public:
  Rsp_SKF_OpenApplication();
  virtual ~Rsp_SKF_OpenApplication();

  Rsp_SKF_OpenApplication(const Rsp_SKF_OpenApplication& from);

  inline Rsp_SKF_OpenApplication& operator=(const Rsp_SKF_OpenApplication& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_OpenApplication(Rsp_SKF_OpenApplication&& from) noexcept
    : Rsp_SKF_OpenApplication() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_OpenApplication& operator=(Rsp_SKF_OpenApplication&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_OpenApplication& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_OpenApplication* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_OpenApplication*>(
               &_Rsp_SKF_OpenApplication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  void Swap(Rsp_SKF_OpenApplication* other);
  friend void swap(Rsp_SKF_OpenApplication& a, Rsp_SKF_OpenApplication& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_OpenApplication* New() const final {
    return CreateMaybeMessage<Rsp_SKF_OpenApplication>(nullptr);
  }

  Rsp_SKF_OpenApplication* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_OpenApplication>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_OpenApplication& from);
  void MergeFrom(const Rsp_SKF_OpenApplication& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_OpenApplication* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 phApplication = 1;
  bool has_phapplication() const;
  void clear_phapplication();
  static const int kPhApplicationFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& phapplication() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_phapplication();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_phapplication();
  void set_allocated_phapplication(::com::westone::skf::WST_PROTO_UINT32* phapplication);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_OpenApplication)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* phapplication_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_CloseApplication final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_CloseApplication) */ {
 public:
  Req_SKF_CloseApplication();
  virtual ~Req_SKF_CloseApplication();

  Req_SKF_CloseApplication(const Req_SKF_CloseApplication& from);

  inline Req_SKF_CloseApplication& operator=(const Req_SKF_CloseApplication& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_CloseApplication(Req_SKF_CloseApplication&& from) noexcept
    : Req_SKF_CloseApplication() {
    *this = ::std::move(from);
  }

  inline Req_SKF_CloseApplication& operator=(Req_SKF_CloseApplication&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_CloseApplication& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_CloseApplication* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_CloseApplication*>(
               &_Req_SKF_CloseApplication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  void Swap(Req_SKF_CloseApplication* other);
  friend void swap(Req_SKF_CloseApplication& a, Req_SKF_CloseApplication& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_CloseApplication* New() const final {
    return CreateMaybeMessage<Req_SKF_CloseApplication>(nullptr);
  }

  Req_SKF_CloseApplication* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_CloseApplication>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_CloseApplication& from);
  void MergeFrom(const Req_SKF_CloseApplication& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_CloseApplication* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  bool has_happlication() const;
  void clear_happlication();
  static const int kHApplicationFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& happlication() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_happlication();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_happlication();
  void set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_CloseApplication)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* happlication_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_CloseApplication final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_CloseApplication) */ {
 public:
  Rsp_SKF_CloseApplication();
  virtual ~Rsp_SKF_CloseApplication();

  Rsp_SKF_CloseApplication(const Rsp_SKF_CloseApplication& from);

  inline Rsp_SKF_CloseApplication& operator=(const Rsp_SKF_CloseApplication& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_CloseApplication(Rsp_SKF_CloseApplication&& from) noexcept
    : Rsp_SKF_CloseApplication() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_CloseApplication& operator=(Rsp_SKF_CloseApplication&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_CloseApplication& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_CloseApplication* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_CloseApplication*>(
               &_Rsp_SKF_CloseApplication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  void Swap(Rsp_SKF_CloseApplication* other);
  friend void swap(Rsp_SKF_CloseApplication& a, Rsp_SKF_CloseApplication& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_CloseApplication* New() const final {
    return CreateMaybeMessage<Rsp_SKF_CloseApplication>(nullptr);
  }

  Rsp_SKF_CloseApplication* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_CloseApplication>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_CloseApplication& from);
  void MergeFrom(const Rsp_SKF_CloseApplication& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_CloseApplication* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_CloseApplication)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_CreateFile final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_CreateFile) */ {
 public:
  Req_SKF_CreateFile();
  virtual ~Req_SKF_CreateFile();

  Req_SKF_CreateFile(const Req_SKF_CreateFile& from);

  inline Req_SKF_CreateFile& operator=(const Req_SKF_CreateFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_CreateFile(Req_SKF_CreateFile&& from) noexcept
    : Req_SKF_CreateFile() {
    *this = ::std::move(from);
  }

  inline Req_SKF_CreateFile& operator=(Req_SKF_CreateFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_CreateFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_CreateFile* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_CreateFile*>(
               &_Req_SKF_CreateFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  void Swap(Req_SKF_CreateFile* other);
  friend void swap(Req_SKF_CreateFile& a, Req_SKF_CreateFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_CreateFile* New() const final {
    return CreateMaybeMessage<Req_SKF_CreateFile>(nullptr);
  }

  Req_SKF_CreateFile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_CreateFile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_CreateFile& from);
  void MergeFrom(const Req_SKF_CreateFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_CreateFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string szFileName = 2;
  void clear_szfilename();
  static const int kSzFileNameFieldNumber = 2;
  const ::std::string& szfilename() const;
  void set_szfilename(const ::std::string& value);
  #if LANG_CXX11
  void set_szfilename(::std::string&& value);
  #endif
  void set_szfilename(const char* value);
  void set_szfilename(const char* value, size_t size);
  ::std::string* mutable_szfilename();
  ::std::string* release_szfilename();
  void set_allocated_szfilename(::std::string* szfilename);

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  bool has_happlication() const;
  void clear_happlication();
  static const int kHApplicationFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& happlication() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_happlication();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_happlication();
  void set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication);

  // .com.westone.skf.WST_PROTO_UINT32 ulFileSize = 3;
  bool has_ulfilesize() const;
  void clear_ulfilesize();
  static const int kUlFileSizeFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& ulfilesize() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulfilesize();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulfilesize();
  void set_allocated_ulfilesize(::com::westone::skf::WST_PROTO_UINT32* ulfilesize);

  // .com.westone.skf.WST_PROTO_UINT32 ulReadRights = 4;
  bool has_ulreadrights() const;
  void clear_ulreadrights();
  static const int kUlReadRightsFieldNumber = 4;
  const ::com::westone::skf::WST_PROTO_UINT32& ulreadrights() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulreadrights();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulreadrights();
  void set_allocated_ulreadrights(::com::westone::skf::WST_PROTO_UINT32* ulreadrights);

  // .com.westone.skf.WST_PROTO_UINT32 ulWriteRights = 5;
  bool has_ulwriterights() const;
  void clear_ulwriterights();
  static const int kUlWriteRightsFieldNumber = 5;
  const ::com::westone::skf::WST_PROTO_UINT32& ulwriterights() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulwriterights();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulwriterights();
  void set_allocated_ulwriterights(::com::westone::skf::WST_PROTO_UINT32* ulwriterights);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_CreateFile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szfilename_;
  ::com::westone::skf::WST_PROTO_UINT32* happlication_;
  ::com::westone::skf::WST_PROTO_UINT32* ulfilesize_;
  ::com::westone::skf::WST_PROTO_UINT32* ulreadrights_;
  ::com::westone::skf::WST_PROTO_UINT32* ulwriterights_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_CreateFile final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_CreateFile) */ {
 public:
  Rsp_SKF_CreateFile();
  virtual ~Rsp_SKF_CreateFile();

  Rsp_SKF_CreateFile(const Rsp_SKF_CreateFile& from);

  inline Rsp_SKF_CreateFile& operator=(const Rsp_SKF_CreateFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_CreateFile(Rsp_SKF_CreateFile&& from) noexcept
    : Rsp_SKF_CreateFile() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_CreateFile& operator=(Rsp_SKF_CreateFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_CreateFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_CreateFile* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_CreateFile*>(
               &_Rsp_SKF_CreateFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  void Swap(Rsp_SKF_CreateFile* other);
  friend void swap(Rsp_SKF_CreateFile& a, Rsp_SKF_CreateFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_CreateFile* New() const final {
    return CreateMaybeMessage<Rsp_SKF_CreateFile>(nullptr);
  }

  Rsp_SKF_CreateFile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_CreateFile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_CreateFile& from);
  void MergeFrom(const Rsp_SKF_CreateFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_CreateFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_CreateFile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_DeleteFile final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_DeleteFile) */ {
 public:
  Req_SKF_DeleteFile();
  virtual ~Req_SKF_DeleteFile();

  Req_SKF_DeleteFile(const Req_SKF_DeleteFile& from);

  inline Req_SKF_DeleteFile& operator=(const Req_SKF_DeleteFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_DeleteFile(Req_SKF_DeleteFile&& from) noexcept
    : Req_SKF_DeleteFile() {
    *this = ::std::move(from);
  }

  inline Req_SKF_DeleteFile& operator=(Req_SKF_DeleteFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_DeleteFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_DeleteFile* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_DeleteFile*>(
               &_Req_SKF_DeleteFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  void Swap(Req_SKF_DeleteFile* other);
  friend void swap(Req_SKF_DeleteFile& a, Req_SKF_DeleteFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_DeleteFile* New() const final {
    return CreateMaybeMessage<Req_SKF_DeleteFile>(nullptr);
  }

  Req_SKF_DeleteFile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_DeleteFile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_DeleteFile& from);
  void MergeFrom(const Req_SKF_DeleteFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_DeleteFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string szFileName = 2;
  void clear_szfilename();
  static const int kSzFileNameFieldNumber = 2;
  const ::std::string& szfilename() const;
  void set_szfilename(const ::std::string& value);
  #if LANG_CXX11
  void set_szfilename(::std::string&& value);
  #endif
  void set_szfilename(const char* value);
  void set_szfilename(const char* value, size_t size);
  ::std::string* mutable_szfilename();
  ::std::string* release_szfilename();
  void set_allocated_szfilename(::std::string* szfilename);

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  bool has_happlication() const;
  void clear_happlication();
  static const int kHApplicationFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& happlication() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_happlication();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_happlication();
  void set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_DeleteFile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szfilename_;
  ::com::westone::skf::WST_PROTO_UINT32* happlication_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_DeleteFile final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_DeleteFile) */ {
 public:
  Rsp_SKF_DeleteFile();
  virtual ~Rsp_SKF_DeleteFile();

  Rsp_SKF_DeleteFile(const Rsp_SKF_DeleteFile& from);

  inline Rsp_SKF_DeleteFile& operator=(const Rsp_SKF_DeleteFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_DeleteFile(Rsp_SKF_DeleteFile&& from) noexcept
    : Rsp_SKF_DeleteFile() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_DeleteFile& operator=(Rsp_SKF_DeleteFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_DeleteFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_DeleteFile* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_DeleteFile*>(
               &_Rsp_SKF_DeleteFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  void Swap(Rsp_SKF_DeleteFile* other);
  friend void swap(Rsp_SKF_DeleteFile& a, Rsp_SKF_DeleteFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_DeleteFile* New() const final {
    return CreateMaybeMessage<Rsp_SKF_DeleteFile>(nullptr);
  }

  Rsp_SKF_DeleteFile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_DeleteFile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_DeleteFile& from);
  void MergeFrom(const Rsp_SKF_DeleteFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_DeleteFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_DeleteFile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_EnumFiles final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_EnumFiles) */ {
 public:
  Req_SKF_EnumFiles();
  virtual ~Req_SKF_EnumFiles();

  Req_SKF_EnumFiles(const Req_SKF_EnumFiles& from);

  inline Req_SKF_EnumFiles& operator=(const Req_SKF_EnumFiles& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_EnumFiles(Req_SKF_EnumFiles&& from) noexcept
    : Req_SKF_EnumFiles() {
    *this = ::std::move(from);
  }

  inline Req_SKF_EnumFiles& operator=(Req_SKF_EnumFiles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_EnumFiles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_EnumFiles* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_EnumFiles*>(
               &_Req_SKF_EnumFiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  void Swap(Req_SKF_EnumFiles* other);
  friend void swap(Req_SKF_EnumFiles& a, Req_SKF_EnumFiles& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_EnumFiles* New() const final {
    return CreateMaybeMessage<Req_SKF_EnumFiles>(nullptr);
  }

  Req_SKF_EnumFiles* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_EnumFiles>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_EnumFiles& from);
  void MergeFrom(const Req_SKF_EnumFiles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_EnumFiles* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string szFileName = 2;
  void clear_szfilename();
  static const int kSzFileNameFieldNumber = 2;
  const ::std::string& szfilename() const;
  void set_szfilename(const ::std::string& value);
  #if LANG_CXX11
  void set_szfilename(::std::string&& value);
  #endif
  void set_szfilename(const char* value);
  void set_szfilename(const char* value, size_t size);
  ::std::string* mutable_szfilename();
  ::std::string* release_szfilename();
  void set_allocated_szfilename(::std::string* szfilename);

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  bool has_happlication() const;
  void clear_happlication();
  static const int kHApplicationFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& happlication() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_happlication();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_happlication();
  void set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication);

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 3;
  bool has_pulsize() const;
  void clear_pulsize();
  static const int kPulSizeFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& pulsize() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulsize();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulsize();
  void set_allocated_pulsize(::com::westone::skf::WST_PROTO_UINT32* pulsize);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_EnumFiles)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szfilename_;
  ::com::westone::skf::WST_PROTO_UINT32* happlication_;
  ::com::westone::skf::WST_PROTO_UINT32* pulsize_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_EnumFiles final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_EnumFiles) */ {
 public:
  Rsp_SKF_EnumFiles();
  virtual ~Rsp_SKF_EnumFiles();

  Rsp_SKF_EnumFiles(const Rsp_SKF_EnumFiles& from);

  inline Rsp_SKF_EnumFiles& operator=(const Rsp_SKF_EnumFiles& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_EnumFiles(Rsp_SKF_EnumFiles&& from) noexcept
    : Rsp_SKF_EnumFiles() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_EnumFiles& operator=(Rsp_SKF_EnumFiles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_EnumFiles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_EnumFiles* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_EnumFiles*>(
               &_Rsp_SKF_EnumFiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  void Swap(Rsp_SKF_EnumFiles* other);
  friend void swap(Rsp_SKF_EnumFiles& a, Rsp_SKF_EnumFiles& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_EnumFiles* New() const final {
    return CreateMaybeMessage<Rsp_SKF_EnumFiles>(nullptr);
  }

  Rsp_SKF_EnumFiles* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_EnumFiles>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_EnumFiles& from);
  void MergeFrom(const Rsp_SKF_EnumFiles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_EnumFiles* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string szFileName = 1;
  void clear_szfilename();
  static const int kSzFileNameFieldNumber = 1;
  const ::std::string& szfilename() const;
  void set_szfilename(const ::std::string& value);
  #if LANG_CXX11
  void set_szfilename(::std::string&& value);
  #endif
  void set_szfilename(const char* value);
  void set_szfilename(const char* value, size_t size);
  ::std::string* mutable_szfilename();
  ::std::string* release_szfilename();
  void set_allocated_szfilename(::std::string* szfilename);

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 2;
  bool has_pulsize() const;
  void clear_pulsize();
  static const int kPulSizeFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& pulsize() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulsize();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulsize();
  void set_allocated_pulsize(::com::westone::skf::WST_PROTO_UINT32* pulsize);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_EnumFiles)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szfilename_;
  ::com::westone::skf::WST_PROTO_UINT32* pulsize_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_GetFileInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_GetFileInfo) */ {
 public:
  Req_SKF_GetFileInfo();
  virtual ~Req_SKF_GetFileInfo();

  Req_SKF_GetFileInfo(const Req_SKF_GetFileInfo& from);

  inline Req_SKF_GetFileInfo& operator=(const Req_SKF_GetFileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_GetFileInfo(Req_SKF_GetFileInfo&& from) noexcept
    : Req_SKF_GetFileInfo() {
    *this = ::std::move(from);
  }

  inline Req_SKF_GetFileInfo& operator=(Req_SKF_GetFileInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_GetFileInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_GetFileInfo* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_GetFileInfo*>(
               &_Req_SKF_GetFileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  void Swap(Req_SKF_GetFileInfo* other);
  friend void swap(Req_SKF_GetFileInfo& a, Req_SKF_GetFileInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_GetFileInfo* New() const final {
    return CreateMaybeMessage<Req_SKF_GetFileInfo>(nullptr);
  }

  Req_SKF_GetFileInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_GetFileInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_GetFileInfo& from);
  void MergeFrom(const Req_SKF_GetFileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_GetFileInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string szFileName = 2;
  void clear_szfilename();
  static const int kSzFileNameFieldNumber = 2;
  const ::std::string& szfilename() const;
  void set_szfilename(const ::std::string& value);
  #if LANG_CXX11
  void set_szfilename(::std::string&& value);
  #endif
  void set_szfilename(const char* value);
  void set_szfilename(const char* value, size_t size);
  ::std::string* mutable_szfilename();
  ::std::string* release_szfilename();
  void set_allocated_szfilename(::std::string* szfilename);

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  bool has_happlication() const;
  void clear_happlication();
  static const int kHApplicationFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& happlication() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_happlication();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_happlication();
  void set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication);

  // .com.westone.skf.SKF_FILEATTRIBUTES pFileInfo = 3;
  bool has_pfileinfo() const;
  void clear_pfileinfo();
  static const int kPFileInfoFieldNumber = 3;
  const ::com::westone::skf::SKF_FILEATTRIBUTES& pfileinfo() const;
  ::com::westone::skf::SKF_FILEATTRIBUTES* release_pfileinfo();
  ::com::westone::skf::SKF_FILEATTRIBUTES* mutable_pfileinfo();
  void set_allocated_pfileinfo(::com::westone::skf::SKF_FILEATTRIBUTES* pfileinfo);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_GetFileInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szfilename_;
  ::com::westone::skf::WST_PROTO_UINT32* happlication_;
  ::com::westone::skf::SKF_FILEATTRIBUTES* pfileinfo_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_GetFileInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_GetFileInfo) */ {
 public:
  Rsp_SKF_GetFileInfo();
  virtual ~Rsp_SKF_GetFileInfo();

  Rsp_SKF_GetFileInfo(const Rsp_SKF_GetFileInfo& from);

  inline Rsp_SKF_GetFileInfo& operator=(const Rsp_SKF_GetFileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_GetFileInfo(Rsp_SKF_GetFileInfo&& from) noexcept
    : Rsp_SKF_GetFileInfo() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_GetFileInfo& operator=(Rsp_SKF_GetFileInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_GetFileInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_GetFileInfo* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_GetFileInfo*>(
               &_Rsp_SKF_GetFileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  void Swap(Rsp_SKF_GetFileInfo* other);
  friend void swap(Rsp_SKF_GetFileInfo& a, Rsp_SKF_GetFileInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_GetFileInfo* New() const final {
    return CreateMaybeMessage<Rsp_SKF_GetFileInfo>(nullptr);
  }

  Rsp_SKF_GetFileInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_GetFileInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_GetFileInfo& from);
  void MergeFrom(const Rsp_SKF_GetFileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_GetFileInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.SKF_FILEATTRIBUTES pFileInfo = 1;
  bool has_pfileinfo() const;
  void clear_pfileinfo();
  static const int kPFileInfoFieldNumber = 1;
  const ::com::westone::skf::SKF_FILEATTRIBUTES& pfileinfo() const;
  ::com::westone::skf::SKF_FILEATTRIBUTES* release_pfileinfo();
  ::com::westone::skf::SKF_FILEATTRIBUTES* mutable_pfileinfo();
  void set_allocated_pfileinfo(::com::westone::skf::SKF_FILEATTRIBUTES* pfileinfo);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_GetFileInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::SKF_FILEATTRIBUTES* pfileinfo_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_ReadFile final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_ReadFile) */ {
 public:
  Req_SKF_ReadFile();
  virtual ~Req_SKF_ReadFile();

  Req_SKF_ReadFile(const Req_SKF_ReadFile& from);

  inline Req_SKF_ReadFile& operator=(const Req_SKF_ReadFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_ReadFile(Req_SKF_ReadFile&& from) noexcept
    : Req_SKF_ReadFile() {
    *this = ::std::move(from);
  }

  inline Req_SKF_ReadFile& operator=(Req_SKF_ReadFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_ReadFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_ReadFile* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_ReadFile*>(
               &_Req_SKF_ReadFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  void Swap(Req_SKF_ReadFile* other);
  friend void swap(Req_SKF_ReadFile& a, Req_SKF_ReadFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_ReadFile* New() const final {
    return CreateMaybeMessage<Req_SKF_ReadFile>(nullptr);
  }

  Req_SKF_ReadFile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_ReadFile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_ReadFile& from);
  void MergeFrom(const Req_SKF_ReadFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_ReadFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string szFileName = 2;
  void clear_szfilename();
  static const int kSzFileNameFieldNumber = 2;
  const ::std::string& szfilename() const;
  void set_szfilename(const ::std::string& value);
  #if LANG_CXX11
  void set_szfilename(::std::string&& value);
  #endif
  void set_szfilename(const char* value);
  void set_szfilename(const char* value, size_t size);
  ::std::string* mutable_szfilename();
  ::std::string* release_szfilename();
  void set_allocated_szfilename(::std::string* szfilename);

  // bytes pbOutData = 5;
  void clear_pboutdata();
  static const int kPbOutDataFieldNumber = 5;
  const ::std::string& pboutdata() const;
  void set_pboutdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pboutdata(::std::string&& value);
  #endif
  void set_pboutdata(const char* value);
  void set_pboutdata(const void* value, size_t size);
  ::std::string* mutable_pboutdata();
  ::std::string* release_pboutdata();
  void set_allocated_pboutdata(::std::string* pboutdata);

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  bool has_happlication() const;
  void clear_happlication();
  static const int kHApplicationFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& happlication() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_happlication();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_happlication();
  void set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication);

  // .com.westone.skf.WST_PROTO_UINT32 ulOffset = 3;
  bool has_uloffset() const;
  void clear_uloffset();
  static const int kUlOffsetFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& uloffset() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_uloffset();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_uloffset();
  void set_allocated_uloffset(::com::westone::skf::WST_PROTO_UINT32* uloffset);

  // .com.westone.skf.WST_PROTO_UINT32 ulSize = 4;
  bool has_ulsize() const;
  void clear_ulsize();
  static const int kUlSizeFieldNumber = 4;
  const ::com::westone::skf::WST_PROTO_UINT32& ulsize() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulsize();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulsize();
  void set_allocated_ulsize(::com::westone::skf::WST_PROTO_UINT32* ulsize);

  // .com.westone.skf.WST_PROTO_UINT32 pulOutLen = 6;
  bool has_puloutlen() const;
  void clear_puloutlen();
  static const int kPulOutLenFieldNumber = 6;
  const ::com::westone::skf::WST_PROTO_UINT32& puloutlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_puloutlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_puloutlen();
  void set_allocated_puloutlen(::com::westone::skf::WST_PROTO_UINT32* puloutlen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_ReadFile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szfilename_;
  ::google::protobuf::internal::ArenaStringPtr pboutdata_;
  ::com::westone::skf::WST_PROTO_UINT32* happlication_;
  ::com::westone::skf::WST_PROTO_UINT32* uloffset_;
  ::com::westone::skf::WST_PROTO_UINT32* ulsize_;
  ::com::westone::skf::WST_PROTO_UINT32* puloutlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_ReadFile final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_ReadFile) */ {
 public:
  Rsp_SKF_ReadFile();
  virtual ~Rsp_SKF_ReadFile();

  Rsp_SKF_ReadFile(const Rsp_SKF_ReadFile& from);

  inline Rsp_SKF_ReadFile& operator=(const Rsp_SKF_ReadFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_ReadFile(Rsp_SKF_ReadFile&& from) noexcept
    : Rsp_SKF_ReadFile() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_ReadFile& operator=(Rsp_SKF_ReadFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_ReadFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_ReadFile* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_ReadFile*>(
               &_Rsp_SKF_ReadFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  void Swap(Rsp_SKF_ReadFile* other);
  friend void swap(Rsp_SKF_ReadFile& a, Rsp_SKF_ReadFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_ReadFile* New() const final {
    return CreateMaybeMessage<Rsp_SKF_ReadFile>(nullptr);
  }

  Rsp_SKF_ReadFile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_ReadFile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_ReadFile& from);
  void MergeFrom(const Rsp_SKF_ReadFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_ReadFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbOutData = 1;
  void clear_pboutdata();
  static const int kPbOutDataFieldNumber = 1;
  const ::std::string& pboutdata() const;
  void set_pboutdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pboutdata(::std::string&& value);
  #endif
  void set_pboutdata(const char* value);
  void set_pboutdata(const void* value, size_t size);
  ::std::string* mutable_pboutdata();
  ::std::string* release_pboutdata();
  void set_allocated_pboutdata(::std::string* pboutdata);

  // .com.westone.skf.WST_PROTO_UINT32 pulOutLen = 2;
  bool has_puloutlen() const;
  void clear_puloutlen();
  static const int kPulOutLenFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& puloutlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_puloutlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_puloutlen();
  void set_allocated_puloutlen(::com::westone::skf::WST_PROTO_UINT32* puloutlen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_ReadFile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pboutdata_;
  ::com::westone::skf::WST_PROTO_UINT32* puloutlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_WriteFile final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_WriteFile) */ {
 public:
  Req_SKF_WriteFile();
  virtual ~Req_SKF_WriteFile();

  Req_SKF_WriteFile(const Req_SKF_WriteFile& from);

  inline Req_SKF_WriteFile& operator=(const Req_SKF_WriteFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_WriteFile(Req_SKF_WriteFile&& from) noexcept
    : Req_SKF_WriteFile() {
    *this = ::std::move(from);
  }

  inline Req_SKF_WriteFile& operator=(Req_SKF_WriteFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_WriteFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_WriteFile* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_WriteFile*>(
               &_Req_SKF_WriteFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  void Swap(Req_SKF_WriteFile* other);
  friend void swap(Req_SKF_WriteFile& a, Req_SKF_WriteFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_WriteFile* New() const final {
    return CreateMaybeMessage<Req_SKF_WriteFile>(nullptr);
  }

  Req_SKF_WriteFile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_WriteFile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_WriteFile& from);
  void MergeFrom(const Req_SKF_WriteFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_WriteFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string szFileName = 2;
  void clear_szfilename();
  static const int kSzFileNameFieldNumber = 2;
  const ::std::string& szfilename() const;
  void set_szfilename(const ::std::string& value);
  #if LANG_CXX11
  void set_szfilename(::std::string&& value);
  #endif
  void set_szfilename(const char* value);
  void set_szfilename(const char* value, size_t size);
  ::std::string* mutable_szfilename();
  ::std::string* release_szfilename();
  void set_allocated_szfilename(::std::string* szfilename);

  // bytes pbData = 4;
  void clear_pbdata();
  static const int kPbDataFieldNumber = 4;
  const ::std::string& pbdata() const;
  void set_pbdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbdata(::std::string&& value);
  #endif
  void set_pbdata(const char* value);
  void set_pbdata(const void* value, size_t size);
  ::std::string* mutable_pbdata();
  ::std::string* release_pbdata();
  void set_allocated_pbdata(::std::string* pbdata);

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  bool has_happlication() const;
  void clear_happlication();
  static const int kHApplicationFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& happlication() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_happlication();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_happlication();
  void set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication);

  // .com.westone.skf.WST_PROTO_UINT32 ulOffset = 3;
  bool has_uloffset() const;
  void clear_uloffset();
  static const int kUlOffsetFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& uloffset() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_uloffset();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_uloffset();
  void set_allocated_uloffset(::com::westone::skf::WST_PROTO_UINT32* uloffset);

  // .com.westone.skf.WST_PROTO_UINT32 ulSize = 5;
  bool has_ulsize() const;
  void clear_ulsize();
  static const int kUlSizeFieldNumber = 5;
  const ::com::westone::skf::WST_PROTO_UINT32& ulsize() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulsize();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulsize();
  void set_allocated_ulsize(::com::westone::skf::WST_PROTO_UINT32* ulsize);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_WriteFile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szfilename_;
  ::google::protobuf::internal::ArenaStringPtr pbdata_;
  ::com::westone::skf::WST_PROTO_UINT32* happlication_;
  ::com::westone::skf::WST_PROTO_UINT32* uloffset_;
  ::com::westone::skf::WST_PROTO_UINT32* ulsize_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_WriteFile final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_WriteFile) */ {
 public:
  Rsp_SKF_WriteFile();
  virtual ~Rsp_SKF_WriteFile();

  Rsp_SKF_WriteFile(const Rsp_SKF_WriteFile& from);

  inline Rsp_SKF_WriteFile& operator=(const Rsp_SKF_WriteFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_WriteFile(Rsp_SKF_WriteFile&& from) noexcept
    : Rsp_SKF_WriteFile() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_WriteFile& operator=(Rsp_SKF_WriteFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_WriteFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_WriteFile* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_WriteFile*>(
               &_Rsp_SKF_WriteFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  void Swap(Rsp_SKF_WriteFile* other);
  friend void swap(Rsp_SKF_WriteFile& a, Rsp_SKF_WriteFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_WriteFile* New() const final {
    return CreateMaybeMessage<Rsp_SKF_WriteFile>(nullptr);
  }

  Rsp_SKF_WriteFile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_WriteFile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_WriteFile& from);
  void MergeFrom(const Rsp_SKF_WriteFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_WriteFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_WriteFile)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_CreateContainer final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_CreateContainer) */ {
 public:
  Req_SKF_CreateContainer();
  virtual ~Req_SKF_CreateContainer();

  Req_SKF_CreateContainer(const Req_SKF_CreateContainer& from);

  inline Req_SKF_CreateContainer& operator=(const Req_SKF_CreateContainer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_CreateContainer(Req_SKF_CreateContainer&& from) noexcept
    : Req_SKF_CreateContainer() {
    *this = ::std::move(from);
  }

  inline Req_SKF_CreateContainer& operator=(Req_SKF_CreateContainer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_CreateContainer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_CreateContainer* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_CreateContainer*>(
               &_Req_SKF_CreateContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  void Swap(Req_SKF_CreateContainer* other);
  friend void swap(Req_SKF_CreateContainer& a, Req_SKF_CreateContainer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_CreateContainer* New() const final {
    return CreateMaybeMessage<Req_SKF_CreateContainer>(nullptr);
  }

  Req_SKF_CreateContainer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_CreateContainer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_CreateContainer& from);
  void MergeFrom(const Req_SKF_CreateContainer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_CreateContainer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string szContainerName = 2;
  void clear_szcontainername();
  static const int kSzContainerNameFieldNumber = 2;
  const ::std::string& szcontainername() const;
  void set_szcontainername(const ::std::string& value);
  #if LANG_CXX11
  void set_szcontainername(::std::string&& value);
  #endif
  void set_szcontainername(const char* value);
  void set_szcontainername(const char* value, size_t size);
  ::std::string* mutable_szcontainername();
  ::std::string* release_szcontainername();
  void set_allocated_szcontainername(::std::string* szcontainername);

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  bool has_happlication() const;
  void clear_happlication();
  static const int kHApplicationFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& happlication() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_happlication();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_happlication();
  void set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication);

  // .com.westone.skf.WST_PROTO_UINT32 phContainer = 3;
  bool has_phcontainer() const;
  void clear_phcontainer();
  static const int kPhContainerFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& phcontainer() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_phcontainer();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_phcontainer();
  void set_allocated_phcontainer(::com::westone::skf::WST_PROTO_UINT32* phcontainer);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_CreateContainer)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szcontainername_;
  ::com::westone::skf::WST_PROTO_UINT32* happlication_;
  ::com::westone::skf::WST_PROTO_UINT32* phcontainer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_CreateContainer final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_CreateContainer) */ {
 public:
  Rsp_SKF_CreateContainer();
  virtual ~Rsp_SKF_CreateContainer();

  Rsp_SKF_CreateContainer(const Rsp_SKF_CreateContainer& from);

  inline Rsp_SKF_CreateContainer& operator=(const Rsp_SKF_CreateContainer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_CreateContainer(Rsp_SKF_CreateContainer&& from) noexcept
    : Rsp_SKF_CreateContainer() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_CreateContainer& operator=(Rsp_SKF_CreateContainer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_CreateContainer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_CreateContainer* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_CreateContainer*>(
               &_Rsp_SKF_CreateContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  void Swap(Rsp_SKF_CreateContainer* other);
  friend void swap(Rsp_SKF_CreateContainer& a, Rsp_SKF_CreateContainer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_CreateContainer* New() const final {
    return CreateMaybeMessage<Rsp_SKF_CreateContainer>(nullptr);
  }

  Rsp_SKF_CreateContainer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_CreateContainer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_CreateContainer& from);
  void MergeFrom(const Rsp_SKF_CreateContainer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_CreateContainer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 phContainer = 1;
  bool has_phcontainer() const;
  void clear_phcontainer();
  static const int kPhContainerFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& phcontainer() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_phcontainer();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_phcontainer();
  void set_allocated_phcontainer(::com::westone::skf::WST_PROTO_UINT32* phcontainer);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_CreateContainer)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* phcontainer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_DeleteContainer final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_DeleteContainer) */ {
 public:
  Req_SKF_DeleteContainer();
  virtual ~Req_SKF_DeleteContainer();

  Req_SKF_DeleteContainer(const Req_SKF_DeleteContainer& from);

  inline Req_SKF_DeleteContainer& operator=(const Req_SKF_DeleteContainer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_DeleteContainer(Req_SKF_DeleteContainer&& from) noexcept
    : Req_SKF_DeleteContainer() {
    *this = ::std::move(from);
  }

  inline Req_SKF_DeleteContainer& operator=(Req_SKF_DeleteContainer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_DeleteContainer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_DeleteContainer* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_DeleteContainer*>(
               &_Req_SKF_DeleteContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  void Swap(Req_SKF_DeleteContainer* other);
  friend void swap(Req_SKF_DeleteContainer& a, Req_SKF_DeleteContainer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_DeleteContainer* New() const final {
    return CreateMaybeMessage<Req_SKF_DeleteContainer>(nullptr);
  }

  Req_SKF_DeleteContainer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_DeleteContainer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_DeleteContainer& from);
  void MergeFrom(const Req_SKF_DeleteContainer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_DeleteContainer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string szContainerName = 2;
  void clear_szcontainername();
  static const int kSzContainerNameFieldNumber = 2;
  const ::std::string& szcontainername() const;
  void set_szcontainername(const ::std::string& value);
  #if LANG_CXX11
  void set_szcontainername(::std::string&& value);
  #endif
  void set_szcontainername(const char* value);
  void set_szcontainername(const char* value, size_t size);
  ::std::string* mutable_szcontainername();
  ::std::string* release_szcontainername();
  void set_allocated_szcontainername(::std::string* szcontainername);

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  bool has_happlication() const;
  void clear_happlication();
  static const int kHApplicationFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& happlication() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_happlication();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_happlication();
  void set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_DeleteContainer)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szcontainername_;
  ::com::westone::skf::WST_PROTO_UINT32* happlication_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_DeleteContainer final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_DeleteContainer) */ {
 public:
  Rsp_SKF_DeleteContainer();
  virtual ~Rsp_SKF_DeleteContainer();

  Rsp_SKF_DeleteContainer(const Rsp_SKF_DeleteContainer& from);

  inline Rsp_SKF_DeleteContainer& operator=(const Rsp_SKF_DeleteContainer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_DeleteContainer(Rsp_SKF_DeleteContainer&& from) noexcept
    : Rsp_SKF_DeleteContainer() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_DeleteContainer& operator=(Rsp_SKF_DeleteContainer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_DeleteContainer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_DeleteContainer* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_DeleteContainer*>(
               &_Rsp_SKF_DeleteContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  void Swap(Rsp_SKF_DeleteContainer* other);
  friend void swap(Rsp_SKF_DeleteContainer& a, Rsp_SKF_DeleteContainer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_DeleteContainer* New() const final {
    return CreateMaybeMessage<Rsp_SKF_DeleteContainer>(nullptr);
  }

  Rsp_SKF_DeleteContainer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_DeleteContainer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_DeleteContainer& from);
  void MergeFrom(const Rsp_SKF_DeleteContainer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_DeleteContainer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_DeleteContainer)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_OpenContainer final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_OpenContainer) */ {
 public:
  Req_SKF_OpenContainer();
  virtual ~Req_SKF_OpenContainer();

  Req_SKF_OpenContainer(const Req_SKF_OpenContainer& from);

  inline Req_SKF_OpenContainer& operator=(const Req_SKF_OpenContainer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_OpenContainer(Req_SKF_OpenContainer&& from) noexcept
    : Req_SKF_OpenContainer() {
    *this = ::std::move(from);
  }

  inline Req_SKF_OpenContainer& operator=(Req_SKF_OpenContainer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_OpenContainer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_OpenContainer* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_OpenContainer*>(
               &_Req_SKF_OpenContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  void Swap(Req_SKF_OpenContainer* other);
  friend void swap(Req_SKF_OpenContainer& a, Req_SKF_OpenContainer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_OpenContainer* New() const final {
    return CreateMaybeMessage<Req_SKF_OpenContainer>(nullptr);
  }

  Req_SKF_OpenContainer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_OpenContainer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_OpenContainer& from);
  void MergeFrom(const Req_SKF_OpenContainer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_OpenContainer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string szContainerName = 2;
  void clear_szcontainername();
  static const int kSzContainerNameFieldNumber = 2;
  const ::std::string& szcontainername() const;
  void set_szcontainername(const ::std::string& value);
  #if LANG_CXX11
  void set_szcontainername(::std::string&& value);
  #endif
  void set_szcontainername(const char* value);
  void set_szcontainername(const char* value, size_t size);
  ::std::string* mutable_szcontainername();
  ::std::string* release_szcontainername();
  void set_allocated_szcontainername(::std::string* szcontainername);

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  bool has_happlication() const;
  void clear_happlication();
  static const int kHApplicationFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& happlication() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_happlication();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_happlication();
  void set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication);

  // .com.westone.skf.WST_PROTO_UINT32 phContainer = 3;
  bool has_phcontainer() const;
  void clear_phcontainer();
  static const int kPhContainerFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& phcontainer() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_phcontainer();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_phcontainer();
  void set_allocated_phcontainer(::com::westone::skf::WST_PROTO_UINT32* phcontainer);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_OpenContainer)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szcontainername_;
  ::com::westone::skf::WST_PROTO_UINT32* happlication_;
  ::com::westone::skf::WST_PROTO_UINT32* phcontainer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_OpenContainer final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_OpenContainer) */ {
 public:
  Rsp_SKF_OpenContainer();
  virtual ~Rsp_SKF_OpenContainer();

  Rsp_SKF_OpenContainer(const Rsp_SKF_OpenContainer& from);

  inline Rsp_SKF_OpenContainer& operator=(const Rsp_SKF_OpenContainer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_OpenContainer(Rsp_SKF_OpenContainer&& from) noexcept
    : Rsp_SKF_OpenContainer() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_OpenContainer& operator=(Rsp_SKF_OpenContainer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_OpenContainer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_OpenContainer* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_OpenContainer*>(
               &_Rsp_SKF_OpenContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  void Swap(Rsp_SKF_OpenContainer* other);
  friend void swap(Rsp_SKF_OpenContainer& a, Rsp_SKF_OpenContainer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_OpenContainer* New() const final {
    return CreateMaybeMessage<Rsp_SKF_OpenContainer>(nullptr);
  }

  Rsp_SKF_OpenContainer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_OpenContainer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_OpenContainer& from);
  void MergeFrom(const Rsp_SKF_OpenContainer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_OpenContainer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 phContainer = 1;
  bool has_phcontainer() const;
  void clear_phcontainer();
  static const int kPhContainerFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& phcontainer() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_phcontainer();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_phcontainer();
  void set_allocated_phcontainer(::com::westone::skf::WST_PROTO_UINT32* phcontainer);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_OpenContainer)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* phcontainer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_CloseContainer final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_CloseContainer) */ {
 public:
  Req_SKF_CloseContainer();
  virtual ~Req_SKF_CloseContainer();

  Req_SKF_CloseContainer(const Req_SKF_CloseContainer& from);

  inline Req_SKF_CloseContainer& operator=(const Req_SKF_CloseContainer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_CloseContainer(Req_SKF_CloseContainer&& from) noexcept
    : Req_SKF_CloseContainer() {
    *this = ::std::move(from);
  }

  inline Req_SKF_CloseContainer& operator=(Req_SKF_CloseContainer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_CloseContainer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_CloseContainer* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_CloseContainer*>(
               &_Req_SKF_CloseContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  void Swap(Req_SKF_CloseContainer* other);
  friend void swap(Req_SKF_CloseContainer& a, Req_SKF_CloseContainer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_CloseContainer* New() const final {
    return CreateMaybeMessage<Req_SKF_CloseContainer>(nullptr);
  }

  Req_SKF_CloseContainer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_CloseContainer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_CloseContainer& from);
  void MergeFrom(const Req_SKF_CloseContainer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_CloseContainer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  bool has_hcontainer() const;
  void clear_hcontainer();
  static const int kHContainerFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hcontainer() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hcontainer();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hcontainer();
  void set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_CloseContainer)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* hcontainer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_CloseContainer final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_CloseContainer) */ {
 public:
  Rsp_SKF_CloseContainer();
  virtual ~Rsp_SKF_CloseContainer();

  Rsp_SKF_CloseContainer(const Rsp_SKF_CloseContainer& from);

  inline Rsp_SKF_CloseContainer& operator=(const Rsp_SKF_CloseContainer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_CloseContainer(Rsp_SKF_CloseContainer&& from) noexcept
    : Rsp_SKF_CloseContainer() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_CloseContainer& operator=(Rsp_SKF_CloseContainer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_CloseContainer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_CloseContainer* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_CloseContainer*>(
               &_Rsp_SKF_CloseContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  void Swap(Rsp_SKF_CloseContainer* other);
  friend void swap(Rsp_SKF_CloseContainer& a, Rsp_SKF_CloseContainer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_CloseContainer* New() const final {
    return CreateMaybeMessage<Rsp_SKF_CloseContainer>(nullptr);
  }

  Rsp_SKF_CloseContainer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_CloseContainer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_CloseContainer& from);
  void MergeFrom(const Rsp_SKF_CloseContainer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_CloseContainer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_CloseContainer)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_EnumContainer final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_EnumContainer) */ {
 public:
  Req_SKF_EnumContainer();
  virtual ~Req_SKF_EnumContainer();

  Req_SKF_EnumContainer(const Req_SKF_EnumContainer& from);

  inline Req_SKF_EnumContainer& operator=(const Req_SKF_EnumContainer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_EnumContainer(Req_SKF_EnumContainer&& from) noexcept
    : Req_SKF_EnumContainer() {
    *this = ::std::move(from);
  }

  inline Req_SKF_EnumContainer& operator=(Req_SKF_EnumContainer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_EnumContainer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_EnumContainer* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_EnumContainer*>(
               &_Req_SKF_EnumContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  void Swap(Req_SKF_EnumContainer* other);
  friend void swap(Req_SKF_EnumContainer& a, Req_SKF_EnumContainer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_EnumContainer* New() const final {
    return CreateMaybeMessage<Req_SKF_EnumContainer>(nullptr);
  }

  Req_SKF_EnumContainer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_EnumContainer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_EnumContainer& from);
  void MergeFrom(const Req_SKF_EnumContainer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_EnumContainer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string szContainerName = 2;
  void clear_szcontainername();
  static const int kSzContainerNameFieldNumber = 2;
  const ::std::string& szcontainername() const;
  void set_szcontainername(const ::std::string& value);
  #if LANG_CXX11
  void set_szcontainername(::std::string&& value);
  #endif
  void set_szcontainername(const char* value);
  void set_szcontainername(const char* value, size_t size);
  ::std::string* mutable_szcontainername();
  ::std::string* release_szcontainername();
  void set_allocated_szcontainername(::std::string* szcontainername);

  // .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
  bool has_happlication() const;
  void clear_happlication();
  static const int kHApplicationFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& happlication() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_happlication();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_happlication();
  void set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication);

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 3;
  bool has_pulsize() const;
  void clear_pulsize();
  static const int kPulSizeFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& pulsize() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulsize();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulsize();
  void set_allocated_pulsize(::com::westone::skf::WST_PROTO_UINT32* pulsize);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_EnumContainer)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szcontainername_;
  ::com::westone::skf::WST_PROTO_UINT32* happlication_;
  ::com::westone::skf::WST_PROTO_UINT32* pulsize_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_EnumContainer final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_EnumContainer) */ {
 public:
  Rsp_SKF_EnumContainer();
  virtual ~Rsp_SKF_EnumContainer();

  Rsp_SKF_EnumContainer(const Rsp_SKF_EnumContainer& from);

  inline Rsp_SKF_EnumContainer& operator=(const Rsp_SKF_EnumContainer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_EnumContainer(Rsp_SKF_EnumContainer&& from) noexcept
    : Rsp_SKF_EnumContainer() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_EnumContainer& operator=(Rsp_SKF_EnumContainer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_EnumContainer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_EnumContainer* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_EnumContainer*>(
               &_Rsp_SKF_EnumContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  void Swap(Rsp_SKF_EnumContainer* other);
  friend void swap(Rsp_SKF_EnumContainer& a, Rsp_SKF_EnumContainer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_EnumContainer* New() const final {
    return CreateMaybeMessage<Rsp_SKF_EnumContainer>(nullptr);
  }

  Rsp_SKF_EnumContainer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_EnumContainer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_EnumContainer& from);
  void MergeFrom(const Rsp_SKF_EnumContainer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_EnumContainer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string szContainerName = 1;
  void clear_szcontainername();
  static const int kSzContainerNameFieldNumber = 1;
  const ::std::string& szcontainername() const;
  void set_szcontainername(const ::std::string& value);
  #if LANG_CXX11
  void set_szcontainername(::std::string&& value);
  #endif
  void set_szcontainername(const char* value);
  void set_szcontainername(const char* value, size_t size);
  ::std::string* mutable_szcontainername();
  ::std::string* release_szcontainername();
  void set_allocated_szcontainername(::std::string* szcontainername);

  // .com.westone.skf.WST_PROTO_UINT32 pulSize = 2;
  bool has_pulsize() const;
  void clear_pulsize();
  static const int kPulSizeFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& pulsize() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulsize();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulsize();
  void set_allocated_pulsize(::com::westone::skf::WST_PROTO_UINT32* pulsize);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_EnumContainer)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr szcontainername_;
  ::com::westone::skf::WST_PROTO_UINT32* pulsize_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_GetContainerType final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_GetContainerType) */ {
 public:
  Req_SKF_GetContainerType();
  virtual ~Req_SKF_GetContainerType();

  Req_SKF_GetContainerType(const Req_SKF_GetContainerType& from);

  inline Req_SKF_GetContainerType& operator=(const Req_SKF_GetContainerType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_GetContainerType(Req_SKF_GetContainerType&& from) noexcept
    : Req_SKF_GetContainerType() {
    *this = ::std::move(from);
  }

  inline Req_SKF_GetContainerType& operator=(Req_SKF_GetContainerType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_GetContainerType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_GetContainerType* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_GetContainerType*>(
               &_Req_SKF_GetContainerType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  void Swap(Req_SKF_GetContainerType* other);
  friend void swap(Req_SKF_GetContainerType& a, Req_SKF_GetContainerType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_GetContainerType* New() const final {
    return CreateMaybeMessage<Req_SKF_GetContainerType>(nullptr);
  }

  Req_SKF_GetContainerType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_GetContainerType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_GetContainerType& from);
  void MergeFrom(const Req_SKF_GetContainerType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_GetContainerType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  bool has_hcontainer() const;
  void clear_hcontainer();
  static const int kHContainerFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hcontainer() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hcontainer();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hcontainer();
  void set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer);

  // .com.westone.skf.WST_PROTO_UINT32 pulContainerType = 2;
  bool has_pulcontainertype() const;
  void clear_pulcontainertype();
  static const int kPulContainerTypeFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& pulcontainertype() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulcontainertype();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulcontainertype();
  void set_allocated_pulcontainertype(::com::westone::skf::WST_PROTO_UINT32* pulcontainertype);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_GetContainerType)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* hcontainer_;
  ::com::westone::skf::WST_PROTO_UINT32* pulcontainertype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_GetContainerType final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_GetContainerType) */ {
 public:
  Rsp_SKF_GetContainerType();
  virtual ~Rsp_SKF_GetContainerType();

  Rsp_SKF_GetContainerType(const Rsp_SKF_GetContainerType& from);

  inline Rsp_SKF_GetContainerType& operator=(const Rsp_SKF_GetContainerType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_GetContainerType(Rsp_SKF_GetContainerType&& from) noexcept
    : Rsp_SKF_GetContainerType() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_GetContainerType& operator=(Rsp_SKF_GetContainerType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_GetContainerType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_GetContainerType* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_GetContainerType*>(
               &_Rsp_SKF_GetContainerType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  void Swap(Rsp_SKF_GetContainerType* other);
  friend void swap(Rsp_SKF_GetContainerType& a, Rsp_SKF_GetContainerType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_GetContainerType* New() const final {
    return CreateMaybeMessage<Rsp_SKF_GetContainerType>(nullptr);
  }

  Rsp_SKF_GetContainerType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_GetContainerType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_GetContainerType& from);
  void MergeFrom(const Rsp_SKF_GetContainerType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_GetContainerType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 pulContainerType = 1;
  bool has_pulcontainertype() const;
  void clear_pulcontainertype();
  static const int kPulContainerTypeFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& pulcontainertype() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulcontainertype();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulcontainertype();
  void set_allocated_pulcontainertype(::com::westone::skf::WST_PROTO_UINT32* pulcontainertype);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_GetContainerType)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* pulcontainertype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_GenRandom final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_GenRandom) */ {
 public:
  Req_SKF_GenRandom();
  virtual ~Req_SKF_GenRandom();

  Req_SKF_GenRandom(const Req_SKF_GenRandom& from);

  inline Req_SKF_GenRandom& operator=(const Req_SKF_GenRandom& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_GenRandom(Req_SKF_GenRandom&& from) noexcept
    : Req_SKF_GenRandom() {
    *this = ::std::move(from);
  }

  inline Req_SKF_GenRandom& operator=(Req_SKF_GenRandom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_GenRandom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_GenRandom* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_GenRandom*>(
               &_Req_SKF_GenRandom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  void Swap(Req_SKF_GenRandom* other);
  friend void swap(Req_SKF_GenRandom& a, Req_SKF_GenRandom& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_GenRandom* New() const final {
    return CreateMaybeMessage<Req_SKF_GenRandom>(nullptr);
  }

  Req_SKF_GenRandom* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_GenRandom>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_GenRandom& from);
  void MergeFrom(const Req_SKF_GenRandom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_GenRandom* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbRandom = 2;
  void clear_pbrandom();
  static const int kPbRandomFieldNumber = 2;
  const ::std::string& pbrandom() const;
  void set_pbrandom(const ::std::string& value);
  #if LANG_CXX11
  void set_pbrandom(::std::string&& value);
  #endif
  void set_pbrandom(const char* value);
  void set_pbrandom(const void* value, size_t size);
  ::std::string* mutable_pbrandom();
  ::std::string* release_pbrandom();
  void set_allocated_pbrandom(::std::string* pbrandom);

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  bool has_hdev() const;
  void clear_hdev();
  static const int kHDevFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hdev() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hdev();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hdev();
  void set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev);

  // .com.westone.skf.WST_PROTO_UINT32 ulRandomLen = 3;
  bool has_ulrandomlen() const;
  void clear_ulrandomlen();
  static const int kUlRandomLenFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& ulrandomlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulrandomlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulrandomlen();
  void set_allocated_ulrandomlen(::com::westone::skf::WST_PROTO_UINT32* ulrandomlen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_GenRandom)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbrandom_;
  ::com::westone::skf::WST_PROTO_UINT32* hdev_;
  ::com::westone::skf::WST_PROTO_UINT32* ulrandomlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_GenRandom final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_GenRandom) */ {
 public:
  Rsp_SKF_GenRandom();
  virtual ~Rsp_SKF_GenRandom();

  Rsp_SKF_GenRandom(const Rsp_SKF_GenRandom& from);

  inline Rsp_SKF_GenRandom& operator=(const Rsp_SKF_GenRandom& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_GenRandom(Rsp_SKF_GenRandom&& from) noexcept
    : Rsp_SKF_GenRandom() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_GenRandom& operator=(Rsp_SKF_GenRandom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_GenRandom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_GenRandom* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_GenRandom*>(
               &_Rsp_SKF_GenRandom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  void Swap(Rsp_SKF_GenRandom* other);
  friend void swap(Rsp_SKF_GenRandom& a, Rsp_SKF_GenRandom& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_GenRandom* New() const final {
    return CreateMaybeMessage<Rsp_SKF_GenRandom>(nullptr);
  }

  Rsp_SKF_GenRandom* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_GenRandom>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_GenRandom& from);
  void MergeFrom(const Rsp_SKF_GenRandom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_GenRandom* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbRandom = 1;
  void clear_pbrandom();
  static const int kPbRandomFieldNumber = 1;
  const ::std::string& pbrandom() const;
  void set_pbrandom(const ::std::string& value);
  #if LANG_CXX11
  void set_pbrandom(::std::string&& value);
  #endif
  void set_pbrandom(const char* value);
  void set_pbrandom(const void* value, size_t size);
  ::std::string* mutable_pbrandom();
  ::std::string* release_pbrandom();
  void set_allocated_pbrandom(::std::string* pbrandom);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_GenRandom)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbrandom_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_GenExtRSAKey final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_GenExtRSAKey) */ {
 public:
  Req_SKF_GenExtRSAKey();
  virtual ~Req_SKF_GenExtRSAKey();

  Req_SKF_GenExtRSAKey(const Req_SKF_GenExtRSAKey& from);

  inline Req_SKF_GenExtRSAKey& operator=(const Req_SKF_GenExtRSAKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_GenExtRSAKey(Req_SKF_GenExtRSAKey&& from) noexcept
    : Req_SKF_GenExtRSAKey() {
    *this = ::std::move(from);
  }

  inline Req_SKF_GenExtRSAKey& operator=(Req_SKF_GenExtRSAKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_GenExtRSAKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_GenExtRSAKey* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_GenExtRSAKey*>(
               &_Req_SKF_GenExtRSAKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  void Swap(Req_SKF_GenExtRSAKey* other);
  friend void swap(Req_SKF_GenExtRSAKey& a, Req_SKF_GenExtRSAKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_GenExtRSAKey* New() const final {
    return CreateMaybeMessage<Req_SKF_GenExtRSAKey>(nullptr);
  }

  Req_SKF_GenExtRSAKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_GenExtRSAKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_GenExtRSAKey& from);
  void MergeFrom(const Req_SKF_GenExtRSAKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_GenExtRSAKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  bool has_hdev() const;
  void clear_hdev();
  static const int kHDevFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hdev() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hdev();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hdev();
  void set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev);

  // .com.westone.skf.WST_PROTO_UINT32 ulBitsLen = 2;
  bool has_ulbitslen() const;
  void clear_ulbitslen();
  static const int kUlBitsLenFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& ulbitslen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulbitslen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulbitslen();
  void set_allocated_ulbitslen(::com::westone::skf::WST_PROTO_UINT32* ulbitslen);

  // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pBlob = 3;
  bool has_pblob() const;
  void clear_pblob();
  static const int kPBlobFieldNumber = 3;
  const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB& pblob() const;
  ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* release_pblob();
  ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* mutable_pblob();
  void set_allocated_pblob(::com::westone::skf::SKF_RSAPUBLICKEYBLOB* pblob);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_GenExtRSAKey)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* hdev_;
  ::com::westone::skf::WST_PROTO_UINT32* ulbitslen_;
  ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* pblob_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_GenExtRSAKey final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_GenExtRSAKey) */ {
 public:
  Rsp_SKF_GenExtRSAKey();
  virtual ~Rsp_SKF_GenExtRSAKey();

  Rsp_SKF_GenExtRSAKey(const Rsp_SKF_GenExtRSAKey& from);

  inline Rsp_SKF_GenExtRSAKey& operator=(const Rsp_SKF_GenExtRSAKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_GenExtRSAKey(Rsp_SKF_GenExtRSAKey&& from) noexcept
    : Rsp_SKF_GenExtRSAKey() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_GenExtRSAKey& operator=(Rsp_SKF_GenExtRSAKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_GenExtRSAKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_GenExtRSAKey* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_GenExtRSAKey*>(
               &_Rsp_SKF_GenExtRSAKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  void Swap(Rsp_SKF_GenExtRSAKey* other);
  friend void swap(Rsp_SKF_GenExtRSAKey& a, Rsp_SKF_GenExtRSAKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_GenExtRSAKey* New() const final {
    return CreateMaybeMessage<Rsp_SKF_GenExtRSAKey>(nullptr);
  }

  Rsp_SKF_GenExtRSAKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_GenExtRSAKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_GenExtRSAKey& from);
  void MergeFrom(const Rsp_SKF_GenExtRSAKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_GenExtRSAKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pBlob = 1;
  bool has_pblob() const;
  void clear_pblob();
  static const int kPBlobFieldNumber = 1;
  const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB& pblob() const;
  ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* release_pblob();
  ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* mutable_pblob();
  void set_allocated_pblob(::com::westone::skf::SKF_RSAPUBLICKEYBLOB* pblob);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_GenExtRSAKey)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* pblob_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_GenRSAKeyPair final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_GenRSAKeyPair) */ {
 public:
  Req_SKF_GenRSAKeyPair();
  virtual ~Req_SKF_GenRSAKeyPair();

  Req_SKF_GenRSAKeyPair(const Req_SKF_GenRSAKeyPair& from);

  inline Req_SKF_GenRSAKeyPair& operator=(const Req_SKF_GenRSAKeyPair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_GenRSAKeyPair(Req_SKF_GenRSAKeyPair&& from) noexcept
    : Req_SKF_GenRSAKeyPair() {
    *this = ::std::move(from);
  }

  inline Req_SKF_GenRSAKeyPair& operator=(Req_SKF_GenRSAKeyPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_GenRSAKeyPair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_GenRSAKeyPair* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_GenRSAKeyPair*>(
               &_Req_SKF_GenRSAKeyPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  void Swap(Req_SKF_GenRSAKeyPair* other);
  friend void swap(Req_SKF_GenRSAKeyPair& a, Req_SKF_GenRSAKeyPair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_GenRSAKeyPair* New() const final {
    return CreateMaybeMessage<Req_SKF_GenRSAKeyPair>(nullptr);
  }

  Req_SKF_GenRSAKeyPair* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_GenRSAKeyPair>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_GenRSAKeyPair& from);
  void MergeFrom(const Req_SKF_GenRSAKeyPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_GenRSAKeyPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  bool has_hcontainer() const;
  void clear_hcontainer();
  static const int kHContainerFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hcontainer() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hcontainer();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hcontainer();
  void set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer);

  // .com.westone.skf.WST_PROTO_UINT32 ulBitsLen = 2;
  bool has_ulbitslen() const;
  void clear_ulbitslen();
  static const int kUlBitsLenFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& ulbitslen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulbitslen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulbitslen();
  void set_allocated_ulbitslen(::com::westone::skf::WST_PROTO_UINT32* ulbitslen);

  // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pBlob = 3;
  bool has_pblob() const;
  void clear_pblob();
  static const int kPBlobFieldNumber = 3;
  const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB& pblob() const;
  ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* release_pblob();
  ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* mutable_pblob();
  void set_allocated_pblob(::com::westone::skf::SKF_RSAPUBLICKEYBLOB* pblob);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_GenRSAKeyPair)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* hcontainer_;
  ::com::westone::skf::WST_PROTO_UINT32* ulbitslen_;
  ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* pblob_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_GenRSAKeyPair final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_GenRSAKeyPair) */ {
 public:
  Rsp_SKF_GenRSAKeyPair();
  virtual ~Rsp_SKF_GenRSAKeyPair();

  Rsp_SKF_GenRSAKeyPair(const Rsp_SKF_GenRSAKeyPair& from);

  inline Rsp_SKF_GenRSAKeyPair& operator=(const Rsp_SKF_GenRSAKeyPair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_GenRSAKeyPair(Rsp_SKF_GenRSAKeyPair&& from) noexcept
    : Rsp_SKF_GenRSAKeyPair() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_GenRSAKeyPair& operator=(Rsp_SKF_GenRSAKeyPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_GenRSAKeyPair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_GenRSAKeyPair* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_GenRSAKeyPair*>(
               &_Rsp_SKF_GenRSAKeyPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  void Swap(Rsp_SKF_GenRSAKeyPair* other);
  friend void swap(Rsp_SKF_GenRSAKeyPair& a, Rsp_SKF_GenRSAKeyPair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_GenRSAKeyPair* New() const final {
    return CreateMaybeMessage<Rsp_SKF_GenRSAKeyPair>(nullptr);
  }

  Rsp_SKF_GenRSAKeyPair* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_GenRSAKeyPair>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_GenRSAKeyPair& from);
  void MergeFrom(const Rsp_SKF_GenRSAKeyPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_GenRSAKeyPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pBlob = 1;
  bool has_pblob() const;
  void clear_pblob();
  static const int kPBlobFieldNumber = 1;
  const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB& pblob() const;
  ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* release_pblob();
  ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* mutable_pblob();
  void set_allocated_pblob(::com::westone::skf::SKF_RSAPUBLICKEYBLOB* pblob);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_GenRSAKeyPair)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* pblob_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_ImportRSAKeyPair final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_ImportRSAKeyPair) */ {
 public:
  Req_SKF_ImportRSAKeyPair();
  virtual ~Req_SKF_ImportRSAKeyPair();

  Req_SKF_ImportRSAKeyPair(const Req_SKF_ImportRSAKeyPair& from);

  inline Req_SKF_ImportRSAKeyPair& operator=(const Req_SKF_ImportRSAKeyPair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_ImportRSAKeyPair(Req_SKF_ImportRSAKeyPair&& from) noexcept
    : Req_SKF_ImportRSAKeyPair() {
    *this = ::std::move(from);
  }

  inline Req_SKF_ImportRSAKeyPair& operator=(Req_SKF_ImportRSAKeyPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_ImportRSAKeyPair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_ImportRSAKeyPair* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_ImportRSAKeyPair*>(
               &_Req_SKF_ImportRSAKeyPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  void Swap(Req_SKF_ImportRSAKeyPair* other);
  friend void swap(Req_SKF_ImportRSAKeyPair& a, Req_SKF_ImportRSAKeyPair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_ImportRSAKeyPair* New() const final {
    return CreateMaybeMessage<Req_SKF_ImportRSAKeyPair>(nullptr);
  }

  Req_SKF_ImportRSAKeyPair* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_ImportRSAKeyPair>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_ImportRSAKeyPair& from);
  void MergeFrom(const Req_SKF_ImportRSAKeyPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_ImportRSAKeyPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbWrappedKey = 3;
  void clear_pbwrappedkey();
  static const int kPbWrappedKeyFieldNumber = 3;
  const ::std::string& pbwrappedkey() const;
  void set_pbwrappedkey(const ::std::string& value);
  #if LANG_CXX11
  void set_pbwrappedkey(::std::string&& value);
  #endif
  void set_pbwrappedkey(const char* value);
  void set_pbwrappedkey(const void* value, size_t size);
  ::std::string* mutable_pbwrappedkey();
  ::std::string* release_pbwrappedkey();
  void set_allocated_pbwrappedkey(::std::string* pbwrappedkey);

  // bytes pbEncryptedData = 5;
  void clear_pbencrypteddata();
  static const int kPbEncryptedDataFieldNumber = 5;
  const ::std::string& pbencrypteddata() const;
  void set_pbencrypteddata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbencrypteddata(::std::string&& value);
  #endif
  void set_pbencrypteddata(const char* value);
  void set_pbencrypteddata(const void* value, size_t size);
  ::std::string* mutable_pbencrypteddata();
  ::std::string* release_pbencrypteddata();
  void set_allocated_pbencrypteddata(::std::string* pbencrypteddata);

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  bool has_hcontainer() const;
  void clear_hcontainer();
  static const int kHContainerFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hcontainer() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hcontainer();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hcontainer();
  void set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer);

  // .com.westone.skf.WST_PROTO_UINT32 ulSymmAlgID = 2;
  bool has_ulsymmalgid() const;
  void clear_ulsymmalgid();
  static const int kUlSymmAlgIDFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& ulsymmalgid() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulsymmalgid();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulsymmalgid();
  void set_allocated_ulsymmalgid(::com::westone::skf::WST_PROTO_UINT32* ulsymmalgid);

  // .com.westone.skf.WST_PROTO_UINT32 ulWrappedKeyLen = 4;
  bool has_ulwrappedkeylen() const;
  void clear_ulwrappedkeylen();
  static const int kUlWrappedKeyLenFieldNumber = 4;
  const ::com::westone::skf::WST_PROTO_UINT32& ulwrappedkeylen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulwrappedkeylen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulwrappedkeylen();
  void set_allocated_ulwrappedkeylen(::com::westone::skf::WST_PROTO_UINT32* ulwrappedkeylen);

  // .com.westone.skf.WST_PROTO_UINT32 ulEncryptedDataLen = 6;
  bool has_ulencrypteddatalen() const;
  void clear_ulencrypteddatalen();
  static const int kUlEncryptedDataLenFieldNumber = 6;
  const ::com::westone::skf::WST_PROTO_UINT32& ulencrypteddatalen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulencrypteddatalen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulencrypteddatalen();
  void set_allocated_ulencrypteddatalen(::com::westone::skf::WST_PROTO_UINT32* ulencrypteddatalen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_ImportRSAKeyPair)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbwrappedkey_;
  ::google::protobuf::internal::ArenaStringPtr pbencrypteddata_;
  ::com::westone::skf::WST_PROTO_UINT32* hcontainer_;
  ::com::westone::skf::WST_PROTO_UINT32* ulsymmalgid_;
  ::com::westone::skf::WST_PROTO_UINT32* ulwrappedkeylen_;
  ::com::westone::skf::WST_PROTO_UINT32* ulencrypteddatalen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_ImportRSAKeyPair final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_ImportRSAKeyPair) */ {
 public:
  Rsp_SKF_ImportRSAKeyPair();
  virtual ~Rsp_SKF_ImportRSAKeyPair();

  Rsp_SKF_ImportRSAKeyPair(const Rsp_SKF_ImportRSAKeyPair& from);

  inline Rsp_SKF_ImportRSAKeyPair& operator=(const Rsp_SKF_ImportRSAKeyPair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_ImportRSAKeyPair(Rsp_SKF_ImportRSAKeyPair&& from) noexcept
    : Rsp_SKF_ImportRSAKeyPair() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_ImportRSAKeyPair& operator=(Rsp_SKF_ImportRSAKeyPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_ImportRSAKeyPair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_ImportRSAKeyPair* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_ImportRSAKeyPair*>(
               &_Rsp_SKF_ImportRSAKeyPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  void Swap(Rsp_SKF_ImportRSAKeyPair* other);
  friend void swap(Rsp_SKF_ImportRSAKeyPair& a, Rsp_SKF_ImportRSAKeyPair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_ImportRSAKeyPair* New() const final {
    return CreateMaybeMessage<Rsp_SKF_ImportRSAKeyPair>(nullptr);
  }

  Rsp_SKF_ImportRSAKeyPair* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_ImportRSAKeyPair>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_ImportRSAKeyPair& from);
  void MergeFrom(const Rsp_SKF_ImportRSAKeyPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_ImportRSAKeyPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_ImportRSAKeyPair)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_RSASignData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_RSASignData) */ {
 public:
  Req_SKF_RSASignData();
  virtual ~Req_SKF_RSASignData();

  Req_SKF_RSASignData(const Req_SKF_RSASignData& from);

  inline Req_SKF_RSASignData& operator=(const Req_SKF_RSASignData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_RSASignData(Req_SKF_RSASignData&& from) noexcept
    : Req_SKF_RSASignData() {
    *this = ::std::move(from);
  }

  inline Req_SKF_RSASignData& operator=(Req_SKF_RSASignData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_RSASignData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_RSASignData* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_RSASignData*>(
               &_Req_SKF_RSASignData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  void Swap(Req_SKF_RSASignData* other);
  friend void swap(Req_SKF_RSASignData& a, Req_SKF_RSASignData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_RSASignData* New() const final {
    return CreateMaybeMessage<Req_SKF_RSASignData>(nullptr);
  }

  Req_SKF_RSASignData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_RSASignData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_RSASignData& from);
  void MergeFrom(const Req_SKF_RSASignData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_RSASignData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbData = 2;
  void clear_pbdata();
  static const int kPbDataFieldNumber = 2;
  const ::std::string& pbdata() const;
  void set_pbdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbdata(::std::string&& value);
  #endif
  void set_pbdata(const char* value);
  void set_pbdata(const void* value, size_t size);
  ::std::string* mutable_pbdata();
  ::std::string* release_pbdata();
  void set_allocated_pbdata(::std::string* pbdata);

  // bytes pbSignature = 4;
  void clear_pbsignature();
  static const int kPbSignatureFieldNumber = 4;
  const ::std::string& pbsignature() const;
  void set_pbsignature(const ::std::string& value);
  #if LANG_CXX11
  void set_pbsignature(::std::string&& value);
  #endif
  void set_pbsignature(const char* value);
  void set_pbsignature(const void* value, size_t size);
  ::std::string* mutable_pbsignature();
  ::std::string* release_pbsignature();
  void set_allocated_pbsignature(::std::string* pbsignature);

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  bool has_hcontainer() const;
  void clear_hcontainer();
  static const int kHContainerFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hcontainer() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hcontainer();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hcontainer();
  void set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer);

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  bool has_uldatalen() const;
  void clear_uldatalen();
  static const int kUlDataLenFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& uldatalen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_uldatalen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_uldatalen();
  void set_allocated_uldatalen(::com::westone::skf::WST_PROTO_UINT32* uldatalen);

  // .com.westone.skf.WST_PROTO_UINT32 pulSigLen = 5;
  bool has_pulsiglen() const;
  void clear_pulsiglen();
  static const int kPulSigLenFieldNumber = 5;
  const ::com::westone::skf::WST_PROTO_UINT32& pulsiglen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulsiglen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulsiglen();
  void set_allocated_pulsiglen(::com::westone::skf::WST_PROTO_UINT32* pulsiglen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_RSASignData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbdata_;
  ::google::protobuf::internal::ArenaStringPtr pbsignature_;
  ::com::westone::skf::WST_PROTO_UINT32* hcontainer_;
  ::com::westone::skf::WST_PROTO_UINT32* uldatalen_;
  ::com::westone::skf::WST_PROTO_UINT32* pulsiglen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_RSASignData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_RSASignData) */ {
 public:
  Rsp_SKF_RSASignData();
  virtual ~Rsp_SKF_RSASignData();

  Rsp_SKF_RSASignData(const Rsp_SKF_RSASignData& from);

  inline Rsp_SKF_RSASignData& operator=(const Rsp_SKF_RSASignData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_RSASignData(Rsp_SKF_RSASignData&& from) noexcept
    : Rsp_SKF_RSASignData() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_RSASignData& operator=(Rsp_SKF_RSASignData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_RSASignData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_RSASignData* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_RSASignData*>(
               &_Rsp_SKF_RSASignData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  void Swap(Rsp_SKF_RSASignData* other);
  friend void swap(Rsp_SKF_RSASignData& a, Rsp_SKF_RSASignData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_RSASignData* New() const final {
    return CreateMaybeMessage<Rsp_SKF_RSASignData>(nullptr);
  }

  Rsp_SKF_RSASignData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_RSASignData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_RSASignData& from);
  void MergeFrom(const Rsp_SKF_RSASignData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_RSASignData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbSignature = 1;
  void clear_pbsignature();
  static const int kPbSignatureFieldNumber = 1;
  const ::std::string& pbsignature() const;
  void set_pbsignature(const ::std::string& value);
  #if LANG_CXX11
  void set_pbsignature(::std::string&& value);
  #endif
  void set_pbsignature(const char* value);
  void set_pbsignature(const void* value, size_t size);
  ::std::string* mutable_pbsignature();
  ::std::string* release_pbsignature();
  void set_allocated_pbsignature(::std::string* pbsignature);

  // .com.westone.skf.WST_PROTO_UINT32 pulSigLen = 2;
  bool has_pulsiglen() const;
  void clear_pulsiglen();
  static const int kPulSigLenFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& pulsiglen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulsiglen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulsiglen();
  void set_allocated_pulsiglen(::com::westone::skf::WST_PROTO_UINT32* pulsiglen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_RSASignData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbsignature_;
  ::com::westone::skf::WST_PROTO_UINT32* pulsiglen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_RSAVerify final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_RSAVerify) */ {
 public:
  Req_SKF_RSAVerify();
  virtual ~Req_SKF_RSAVerify();

  Req_SKF_RSAVerify(const Req_SKF_RSAVerify& from);

  inline Req_SKF_RSAVerify& operator=(const Req_SKF_RSAVerify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_RSAVerify(Req_SKF_RSAVerify&& from) noexcept
    : Req_SKF_RSAVerify() {
    *this = ::std::move(from);
  }

  inline Req_SKF_RSAVerify& operator=(Req_SKF_RSAVerify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_RSAVerify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_RSAVerify* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_RSAVerify*>(
               &_Req_SKF_RSAVerify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  void Swap(Req_SKF_RSAVerify* other);
  friend void swap(Req_SKF_RSAVerify& a, Req_SKF_RSAVerify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_RSAVerify* New() const final {
    return CreateMaybeMessage<Req_SKF_RSAVerify>(nullptr);
  }

  Req_SKF_RSAVerify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_RSAVerify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_RSAVerify& from);
  void MergeFrom(const Req_SKF_RSAVerify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_RSAVerify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbData = 3;
  void clear_pbdata();
  static const int kPbDataFieldNumber = 3;
  const ::std::string& pbdata() const;
  void set_pbdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbdata(::std::string&& value);
  #endif
  void set_pbdata(const char* value);
  void set_pbdata(const void* value, size_t size);
  ::std::string* mutable_pbdata();
  ::std::string* release_pbdata();
  void set_allocated_pbdata(::std::string* pbdata);

  // bytes pbSignature = 5;
  void clear_pbsignature();
  static const int kPbSignatureFieldNumber = 5;
  const ::std::string& pbsignature() const;
  void set_pbsignature(const ::std::string& value);
  #if LANG_CXX11
  void set_pbsignature(::std::string&& value);
  #endif
  void set_pbsignature(const char* value);
  void set_pbsignature(const void* value, size_t size);
  ::std::string* mutable_pbsignature();
  ::std::string* release_pbsignature();
  void set_allocated_pbsignature(::std::string* pbsignature);

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  bool has_hdev() const;
  void clear_hdev();
  static const int kHDevFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hdev() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hdev();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hdev();
  void set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev);

  // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pRSAPubKeyBlob = 2;
  bool has_prsapubkeyblob() const;
  void clear_prsapubkeyblob();
  static const int kPRSAPubKeyBlobFieldNumber = 2;
  const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB& prsapubkeyblob() const;
  ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* release_prsapubkeyblob();
  ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* mutable_prsapubkeyblob();
  void set_allocated_prsapubkeyblob(::com::westone::skf::SKF_RSAPUBLICKEYBLOB* prsapubkeyblob);

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 4;
  bool has_uldatalen() const;
  void clear_uldatalen();
  static const int kUlDataLenFieldNumber = 4;
  const ::com::westone::skf::WST_PROTO_UINT32& uldatalen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_uldatalen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_uldatalen();
  void set_allocated_uldatalen(::com::westone::skf::WST_PROTO_UINT32* uldatalen);

  // .com.westone.skf.WST_PROTO_UINT32 ulSigLen = 6;
  bool has_ulsiglen() const;
  void clear_ulsiglen();
  static const int kUlSigLenFieldNumber = 6;
  const ::com::westone::skf::WST_PROTO_UINT32& ulsiglen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulsiglen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulsiglen();
  void set_allocated_ulsiglen(::com::westone::skf::WST_PROTO_UINT32* ulsiglen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_RSAVerify)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbdata_;
  ::google::protobuf::internal::ArenaStringPtr pbsignature_;
  ::com::westone::skf::WST_PROTO_UINT32* hdev_;
  ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* prsapubkeyblob_;
  ::com::westone::skf::WST_PROTO_UINT32* uldatalen_;
  ::com::westone::skf::WST_PROTO_UINT32* ulsiglen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_RSAVerify final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_RSAVerify) */ {
 public:
  Rsp_SKF_RSAVerify();
  virtual ~Rsp_SKF_RSAVerify();

  Rsp_SKF_RSAVerify(const Rsp_SKF_RSAVerify& from);

  inline Rsp_SKF_RSAVerify& operator=(const Rsp_SKF_RSAVerify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_RSAVerify(Rsp_SKF_RSAVerify&& from) noexcept
    : Rsp_SKF_RSAVerify() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_RSAVerify& operator=(Rsp_SKF_RSAVerify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_RSAVerify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_RSAVerify* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_RSAVerify*>(
               &_Rsp_SKF_RSAVerify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  void Swap(Rsp_SKF_RSAVerify* other);
  friend void swap(Rsp_SKF_RSAVerify& a, Rsp_SKF_RSAVerify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_RSAVerify* New() const final {
    return CreateMaybeMessage<Rsp_SKF_RSAVerify>(nullptr);
  }

  Rsp_SKF_RSAVerify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_RSAVerify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_RSAVerify& from);
  void MergeFrom(const Rsp_SKF_RSAVerify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_RSAVerify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_RSAVerify)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_RSAExportSessionKey final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_RSAExportSessionKey) */ {
 public:
  Req_SKF_RSAExportSessionKey();
  virtual ~Req_SKF_RSAExportSessionKey();

  Req_SKF_RSAExportSessionKey(const Req_SKF_RSAExportSessionKey& from);

  inline Req_SKF_RSAExportSessionKey& operator=(const Req_SKF_RSAExportSessionKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_RSAExportSessionKey(Req_SKF_RSAExportSessionKey&& from) noexcept
    : Req_SKF_RSAExportSessionKey() {
    *this = ::std::move(from);
  }

  inline Req_SKF_RSAExportSessionKey& operator=(Req_SKF_RSAExportSessionKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_RSAExportSessionKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_RSAExportSessionKey* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_RSAExportSessionKey*>(
               &_Req_SKF_RSAExportSessionKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  void Swap(Req_SKF_RSAExportSessionKey* other);
  friend void swap(Req_SKF_RSAExportSessionKey& a, Req_SKF_RSAExportSessionKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_RSAExportSessionKey* New() const final {
    return CreateMaybeMessage<Req_SKF_RSAExportSessionKey>(nullptr);
  }

  Req_SKF_RSAExportSessionKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_RSAExportSessionKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_RSAExportSessionKey& from);
  void MergeFrom(const Req_SKF_RSAExportSessionKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_RSAExportSessionKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbData = 5;
  void clear_pbdata();
  static const int kPbDataFieldNumber = 5;
  const ::std::string& pbdata() const;
  void set_pbdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbdata(::std::string&& value);
  #endif
  void set_pbdata(const char* value);
  void set_pbdata(const void* value, size_t size);
  ::std::string* mutable_pbdata();
  ::std::string* release_pbdata();
  void set_allocated_pbdata(::std::string* pbdata);

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  bool has_hcontainer() const;
  void clear_hcontainer();
  static const int kHContainerFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hcontainer() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hcontainer();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hcontainer();
  void set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer);

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
  bool has_ulalgid() const;
  void clear_ulalgid();
  static const int kUlAlgIDFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& ulalgid() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulalgid();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulalgid();
  void set_allocated_ulalgid(::com::westone::skf::WST_PROTO_UINT32* ulalgid);

  // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pPubKey = 3;
  bool has_ppubkey() const;
  void clear_ppubkey();
  static const int kPPubKeyFieldNumber = 3;
  const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB& ppubkey() const;
  ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* release_ppubkey();
  ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* mutable_ppubkey();
  void set_allocated_ppubkey(::com::westone::skf::SKF_RSAPUBLICKEYBLOB* ppubkey);

  // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 6;
  bool has_puldatalen() const;
  void clear_puldatalen();
  static const int kPulDataLenFieldNumber = 6;
  const ::com::westone::skf::WST_PROTO_UINT32& puldatalen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_puldatalen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_puldatalen();
  void set_allocated_puldatalen(::com::westone::skf::WST_PROTO_UINT32* puldatalen);

  // .com.westone.skf.WST_PROTO_UINT32 phSessionKey = 7;
  bool has_phsessionkey() const;
  void clear_phsessionkey();
  static const int kPhSessionKeyFieldNumber = 7;
  const ::com::westone::skf::WST_PROTO_UINT32& phsessionkey() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_phsessionkey();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_phsessionkey();
  void set_allocated_phsessionkey(::com::westone::skf::WST_PROTO_UINT32* phsessionkey);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_RSAExportSessionKey)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbdata_;
  ::com::westone::skf::WST_PROTO_UINT32* hcontainer_;
  ::com::westone::skf::WST_PROTO_UINT32* ulalgid_;
  ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* ppubkey_;
  ::com::westone::skf::WST_PROTO_UINT32* puldatalen_;
  ::com::westone::skf::WST_PROTO_UINT32* phsessionkey_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_RSAExportSessionKey final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_RSAExportSessionKey) */ {
 public:
  Rsp_SKF_RSAExportSessionKey();
  virtual ~Rsp_SKF_RSAExportSessionKey();

  Rsp_SKF_RSAExportSessionKey(const Rsp_SKF_RSAExportSessionKey& from);

  inline Rsp_SKF_RSAExportSessionKey& operator=(const Rsp_SKF_RSAExportSessionKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_RSAExportSessionKey(Rsp_SKF_RSAExportSessionKey&& from) noexcept
    : Rsp_SKF_RSAExportSessionKey() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_RSAExportSessionKey& operator=(Rsp_SKF_RSAExportSessionKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_RSAExportSessionKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_RSAExportSessionKey* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_RSAExportSessionKey*>(
               &_Rsp_SKF_RSAExportSessionKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  void Swap(Rsp_SKF_RSAExportSessionKey* other);
  friend void swap(Rsp_SKF_RSAExportSessionKey& a, Rsp_SKF_RSAExportSessionKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_RSAExportSessionKey* New() const final {
    return CreateMaybeMessage<Rsp_SKF_RSAExportSessionKey>(nullptr);
  }

  Rsp_SKF_RSAExportSessionKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_RSAExportSessionKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_RSAExportSessionKey& from);
  void MergeFrom(const Rsp_SKF_RSAExportSessionKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_RSAExportSessionKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_RSAExportSessionKey)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_ExtRSAPubKeyOperation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation) */ {
 public:
  Req_SKF_ExtRSAPubKeyOperation();
  virtual ~Req_SKF_ExtRSAPubKeyOperation();

  Req_SKF_ExtRSAPubKeyOperation(const Req_SKF_ExtRSAPubKeyOperation& from);

  inline Req_SKF_ExtRSAPubKeyOperation& operator=(const Req_SKF_ExtRSAPubKeyOperation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_ExtRSAPubKeyOperation(Req_SKF_ExtRSAPubKeyOperation&& from) noexcept
    : Req_SKF_ExtRSAPubKeyOperation() {
    *this = ::std::move(from);
  }

  inline Req_SKF_ExtRSAPubKeyOperation& operator=(Req_SKF_ExtRSAPubKeyOperation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_ExtRSAPubKeyOperation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_ExtRSAPubKeyOperation* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_ExtRSAPubKeyOperation*>(
               &_Req_SKF_ExtRSAPubKeyOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  void Swap(Req_SKF_ExtRSAPubKeyOperation* other);
  friend void swap(Req_SKF_ExtRSAPubKeyOperation& a, Req_SKF_ExtRSAPubKeyOperation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_ExtRSAPubKeyOperation* New() const final {
    return CreateMaybeMessage<Req_SKF_ExtRSAPubKeyOperation>(nullptr);
  }

  Req_SKF_ExtRSAPubKeyOperation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_ExtRSAPubKeyOperation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_ExtRSAPubKeyOperation& from);
  void MergeFrom(const Req_SKF_ExtRSAPubKeyOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_ExtRSAPubKeyOperation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbInput = 3;
  void clear_pbinput();
  static const int kPbInputFieldNumber = 3;
  const ::std::string& pbinput() const;
  void set_pbinput(const ::std::string& value);
  #if LANG_CXX11
  void set_pbinput(::std::string&& value);
  #endif
  void set_pbinput(const char* value);
  void set_pbinput(const void* value, size_t size);
  ::std::string* mutable_pbinput();
  ::std::string* release_pbinput();
  void set_allocated_pbinput(::std::string* pbinput);

  // bytes pbOutData = 5;
  void clear_pboutdata();
  static const int kPbOutDataFieldNumber = 5;
  const ::std::string& pboutdata() const;
  void set_pboutdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pboutdata(::std::string&& value);
  #endif
  void set_pboutdata(const char* value);
  void set_pboutdata(const void* value, size_t size);
  ::std::string* mutable_pboutdata();
  ::std::string* release_pboutdata();
  void set_allocated_pboutdata(::std::string* pboutdata);

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  bool has_hdev() const;
  void clear_hdev();
  static const int kHDevFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hdev() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hdev();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hdev();
  void set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev);

  // .com.westone.skf.SKF_RSAPUBLICKEYBLOB pRSAPubKeyBlob = 2;
  bool has_prsapubkeyblob() const;
  void clear_prsapubkeyblob();
  static const int kPRSAPubKeyBlobFieldNumber = 2;
  const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB& prsapubkeyblob() const;
  ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* release_prsapubkeyblob();
  ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* mutable_prsapubkeyblob();
  void set_allocated_prsapubkeyblob(::com::westone::skf::SKF_RSAPUBLICKEYBLOB* prsapubkeyblob);

  // .com.westone.skf.WST_PROTO_UINT32 ulInputLen = 4;
  bool has_ulinputlen() const;
  void clear_ulinputlen();
  static const int kUlInputLenFieldNumber = 4;
  const ::com::westone::skf::WST_PROTO_UINT32& ulinputlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulinputlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulinputlen();
  void set_allocated_ulinputlen(::com::westone::skf::WST_PROTO_UINT32* ulinputlen);

  // .com.westone.skf.WST_PROTO_UINT32 pulOutputLen = 6;
  bool has_puloutputlen() const;
  void clear_puloutputlen();
  static const int kPulOutputLenFieldNumber = 6;
  const ::com::westone::skf::WST_PROTO_UINT32& puloutputlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_puloutputlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_puloutputlen();
  void set_allocated_puloutputlen(::com::westone::skf::WST_PROTO_UINT32* puloutputlen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbinput_;
  ::google::protobuf::internal::ArenaStringPtr pboutdata_;
  ::com::westone::skf::WST_PROTO_UINT32* hdev_;
  ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* prsapubkeyblob_;
  ::com::westone::skf::WST_PROTO_UINT32* ulinputlen_;
  ::com::westone::skf::WST_PROTO_UINT32* puloutputlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_ExtRSAPubKeyOperation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation) */ {
 public:
  Rsp_SKF_ExtRSAPubKeyOperation();
  virtual ~Rsp_SKF_ExtRSAPubKeyOperation();

  Rsp_SKF_ExtRSAPubKeyOperation(const Rsp_SKF_ExtRSAPubKeyOperation& from);

  inline Rsp_SKF_ExtRSAPubKeyOperation& operator=(const Rsp_SKF_ExtRSAPubKeyOperation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_ExtRSAPubKeyOperation(Rsp_SKF_ExtRSAPubKeyOperation&& from) noexcept
    : Rsp_SKF_ExtRSAPubKeyOperation() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_ExtRSAPubKeyOperation& operator=(Rsp_SKF_ExtRSAPubKeyOperation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_ExtRSAPubKeyOperation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_ExtRSAPubKeyOperation* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_ExtRSAPubKeyOperation*>(
               &_Rsp_SKF_ExtRSAPubKeyOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  void Swap(Rsp_SKF_ExtRSAPubKeyOperation* other);
  friend void swap(Rsp_SKF_ExtRSAPubKeyOperation& a, Rsp_SKF_ExtRSAPubKeyOperation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_ExtRSAPubKeyOperation* New() const final {
    return CreateMaybeMessage<Rsp_SKF_ExtRSAPubKeyOperation>(nullptr);
  }

  Rsp_SKF_ExtRSAPubKeyOperation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_ExtRSAPubKeyOperation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_ExtRSAPubKeyOperation& from);
  void MergeFrom(const Rsp_SKF_ExtRSAPubKeyOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_ExtRSAPubKeyOperation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbOutData = 1;
  void clear_pboutdata();
  static const int kPbOutDataFieldNumber = 1;
  const ::std::string& pboutdata() const;
  void set_pboutdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pboutdata(::std::string&& value);
  #endif
  void set_pboutdata(const char* value);
  void set_pboutdata(const void* value, size_t size);
  ::std::string* mutable_pboutdata();
  ::std::string* release_pboutdata();
  void set_allocated_pboutdata(::std::string* pboutdata);

  // .com.westone.skf.WST_PROTO_UINT32 pulOutputLen = 2;
  bool has_puloutputlen() const;
  void clear_puloutputlen();
  static const int kPulOutputLenFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& puloutputlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_puloutputlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_puloutputlen();
  void set_allocated_puloutputlen(::com::westone::skf::WST_PROTO_UINT32* puloutputlen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pboutdata_;
  ::com::westone::skf::WST_PROTO_UINT32* puloutputlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_ExtRSAPriKeyOperation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation) */ {
 public:
  Req_SKF_ExtRSAPriKeyOperation();
  virtual ~Req_SKF_ExtRSAPriKeyOperation();

  Req_SKF_ExtRSAPriKeyOperation(const Req_SKF_ExtRSAPriKeyOperation& from);

  inline Req_SKF_ExtRSAPriKeyOperation& operator=(const Req_SKF_ExtRSAPriKeyOperation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_ExtRSAPriKeyOperation(Req_SKF_ExtRSAPriKeyOperation&& from) noexcept
    : Req_SKF_ExtRSAPriKeyOperation() {
    *this = ::std::move(from);
  }

  inline Req_SKF_ExtRSAPriKeyOperation& operator=(Req_SKF_ExtRSAPriKeyOperation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_ExtRSAPriKeyOperation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_ExtRSAPriKeyOperation* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_ExtRSAPriKeyOperation*>(
               &_Req_SKF_ExtRSAPriKeyOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  void Swap(Req_SKF_ExtRSAPriKeyOperation* other);
  friend void swap(Req_SKF_ExtRSAPriKeyOperation& a, Req_SKF_ExtRSAPriKeyOperation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_ExtRSAPriKeyOperation* New() const final {
    return CreateMaybeMessage<Req_SKF_ExtRSAPriKeyOperation>(nullptr);
  }

  Req_SKF_ExtRSAPriKeyOperation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_ExtRSAPriKeyOperation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_ExtRSAPriKeyOperation& from);
  void MergeFrom(const Req_SKF_ExtRSAPriKeyOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_ExtRSAPriKeyOperation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbInput = 3;
  void clear_pbinput();
  static const int kPbInputFieldNumber = 3;
  const ::std::string& pbinput() const;
  void set_pbinput(const ::std::string& value);
  #if LANG_CXX11
  void set_pbinput(::std::string&& value);
  #endif
  void set_pbinput(const char* value);
  void set_pbinput(const void* value, size_t size);
  ::std::string* mutable_pbinput();
  ::std::string* release_pbinput();
  void set_allocated_pbinput(::std::string* pbinput);

  // bytes pbOutData = 5;
  void clear_pboutdata();
  static const int kPbOutDataFieldNumber = 5;
  const ::std::string& pboutdata() const;
  void set_pboutdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pboutdata(::std::string&& value);
  #endif
  void set_pboutdata(const char* value);
  void set_pboutdata(const void* value, size_t size);
  ::std::string* mutable_pboutdata();
  ::std::string* release_pboutdata();
  void set_allocated_pboutdata(::std::string* pboutdata);

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  bool has_hdev() const;
  void clear_hdev();
  static const int kHDevFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hdev() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hdev();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hdev();
  void set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev);

  // .com.westone.skf.SKF_RSAPRIVATEKEYBLOB pRSAPriKeyBlob = 2;
  bool has_prsaprikeyblob() const;
  void clear_prsaprikeyblob();
  static const int kPRSAPriKeyBlobFieldNumber = 2;
  const ::com::westone::skf::SKF_RSAPRIVATEKEYBLOB& prsaprikeyblob() const;
  ::com::westone::skf::SKF_RSAPRIVATEKEYBLOB* release_prsaprikeyblob();
  ::com::westone::skf::SKF_RSAPRIVATEKEYBLOB* mutable_prsaprikeyblob();
  void set_allocated_prsaprikeyblob(::com::westone::skf::SKF_RSAPRIVATEKEYBLOB* prsaprikeyblob);

  // .com.westone.skf.WST_PROTO_UINT32 ulInputLen = 4;
  bool has_ulinputlen() const;
  void clear_ulinputlen();
  static const int kUlInputLenFieldNumber = 4;
  const ::com::westone::skf::WST_PROTO_UINT32& ulinputlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulinputlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulinputlen();
  void set_allocated_ulinputlen(::com::westone::skf::WST_PROTO_UINT32* ulinputlen);

  // .com.westone.skf.WST_PROTO_UINT32 pulOutputLen = 6;
  bool has_puloutputlen() const;
  void clear_puloutputlen();
  static const int kPulOutputLenFieldNumber = 6;
  const ::com::westone::skf::WST_PROTO_UINT32& puloutputlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_puloutputlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_puloutputlen();
  void set_allocated_puloutputlen(::com::westone::skf::WST_PROTO_UINT32* puloutputlen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbinput_;
  ::google::protobuf::internal::ArenaStringPtr pboutdata_;
  ::com::westone::skf::WST_PROTO_UINT32* hdev_;
  ::com::westone::skf::SKF_RSAPRIVATEKEYBLOB* prsaprikeyblob_;
  ::com::westone::skf::WST_PROTO_UINT32* ulinputlen_;
  ::com::westone::skf::WST_PROTO_UINT32* puloutputlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_ExtRSAPriKeyOperation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation) */ {
 public:
  Rsp_SKF_ExtRSAPriKeyOperation();
  virtual ~Rsp_SKF_ExtRSAPriKeyOperation();

  Rsp_SKF_ExtRSAPriKeyOperation(const Rsp_SKF_ExtRSAPriKeyOperation& from);

  inline Rsp_SKF_ExtRSAPriKeyOperation& operator=(const Rsp_SKF_ExtRSAPriKeyOperation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_ExtRSAPriKeyOperation(Rsp_SKF_ExtRSAPriKeyOperation&& from) noexcept
    : Rsp_SKF_ExtRSAPriKeyOperation() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_ExtRSAPriKeyOperation& operator=(Rsp_SKF_ExtRSAPriKeyOperation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_ExtRSAPriKeyOperation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_ExtRSAPriKeyOperation* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_ExtRSAPriKeyOperation*>(
               &_Rsp_SKF_ExtRSAPriKeyOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  void Swap(Rsp_SKF_ExtRSAPriKeyOperation* other);
  friend void swap(Rsp_SKF_ExtRSAPriKeyOperation& a, Rsp_SKF_ExtRSAPriKeyOperation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_ExtRSAPriKeyOperation* New() const final {
    return CreateMaybeMessage<Rsp_SKF_ExtRSAPriKeyOperation>(nullptr);
  }

  Rsp_SKF_ExtRSAPriKeyOperation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_ExtRSAPriKeyOperation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_ExtRSAPriKeyOperation& from);
  void MergeFrom(const Rsp_SKF_ExtRSAPriKeyOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_ExtRSAPriKeyOperation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbOutData = 1;
  void clear_pboutdata();
  static const int kPbOutDataFieldNumber = 1;
  const ::std::string& pboutdata() const;
  void set_pboutdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pboutdata(::std::string&& value);
  #endif
  void set_pboutdata(const char* value);
  void set_pboutdata(const void* value, size_t size);
  ::std::string* mutable_pboutdata();
  ::std::string* release_pboutdata();
  void set_allocated_pboutdata(::std::string* pboutdata);

  // .com.westone.skf.WST_PROTO_UINT32 pulOutputLen = 2;
  bool has_puloutputlen() const;
  void clear_puloutputlen();
  static const int kPulOutputLenFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& puloutputlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_puloutputlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_puloutputlen();
  void set_allocated_puloutputlen(::com::westone::skf::WST_PROTO_UINT32* puloutputlen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pboutdata_;
  ::com::westone::skf::WST_PROTO_UINT32* puloutputlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_GenECCKeyPair final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_GenECCKeyPair) */ {
 public:
  Req_SKF_GenECCKeyPair();
  virtual ~Req_SKF_GenECCKeyPair();

  Req_SKF_GenECCKeyPair(const Req_SKF_GenECCKeyPair& from);

  inline Req_SKF_GenECCKeyPair& operator=(const Req_SKF_GenECCKeyPair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_GenECCKeyPair(Req_SKF_GenECCKeyPair&& from) noexcept
    : Req_SKF_GenECCKeyPair() {
    *this = ::std::move(from);
  }

  inline Req_SKF_GenECCKeyPair& operator=(Req_SKF_GenECCKeyPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_GenECCKeyPair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_GenECCKeyPair* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_GenECCKeyPair*>(
               &_Req_SKF_GenECCKeyPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  void Swap(Req_SKF_GenECCKeyPair* other);
  friend void swap(Req_SKF_GenECCKeyPair& a, Req_SKF_GenECCKeyPair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_GenECCKeyPair* New() const final {
    return CreateMaybeMessage<Req_SKF_GenECCKeyPair>(nullptr);
  }

  Req_SKF_GenECCKeyPair* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_GenECCKeyPair>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_GenECCKeyPair& from);
  void MergeFrom(const Req_SKF_GenECCKeyPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_GenECCKeyPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  bool has_hcontainer() const;
  void clear_hcontainer();
  static const int kHContainerFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hcontainer() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hcontainer();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hcontainer();
  void set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer);

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
  bool has_ulalgid() const;
  void clear_ulalgid();
  static const int kUlAlgIDFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& ulalgid() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulalgid();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulalgid();
  void set_allocated_ulalgid(::com::westone::skf::WST_PROTO_UINT32* ulalgid);

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pBlob = 3;
  bool has_pblob() const;
  void clear_pblob();
  static const int kPBlobFieldNumber = 3;
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& pblob() const;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* release_pblob();
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* mutable_pblob();
  void set_allocated_pblob(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* pblob);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_GenECCKeyPair)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* hcontainer_;
  ::com::westone::skf::WST_PROTO_UINT32* ulalgid_;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* pblob_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_GenECCKeyPair final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_GenECCKeyPair) */ {
 public:
  Rsp_SKF_GenECCKeyPair();
  virtual ~Rsp_SKF_GenECCKeyPair();

  Rsp_SKF_GenECCKeyPair(const Rsp_SKF_GenECCKeyPair& from);

  inline Rsp_SKF_GenECCKeyPair& operator=(const Rsp_SKF_GenECCKeyPair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_GenECCKeyPair(Rsp_SKF_GenECCKeyPair&& from) noexcept
    : Rsp_SKF_GenECCKeyPair() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_GenECCKeyPair& operator=(Rsp_SKF_GenECCKeyPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_GenECCKeyPair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_GenECCKeyPair* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_GenECCKeyPair*>(
               &_Rsp_SKF_GenECCKeyPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  void Swap(Rsp_SKF_GenECCKeyPair* other);
  friend void swap(Rsp_SKF_GenECCKeyPair& a, Rsp_SKF_GenECCKeyPair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_GenECCKeyPair* New() const final {
    return CreateMaybeMessage<Rsp_SKF_GenECCKeyPair>(nullptr);
  }

  Rsp_SKF_GenECCKeyPair* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_GenECCKeyPair>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_GenECCKeyPair& from);
  void MergeFrom(const Rsp_SKF_GenECCKeyPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_GenECCKeyPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pBlob = 1;
  bool has_pblob() const;
  void clear_pblob();
  static const int kPBlobFieldNumber = 1;
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& pblob() const;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* release_pblob();
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* mutable_pblob();
  void set_allocated_pblob(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* pblob);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_GenECCKeyPair)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* pblob_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_ImportECCKeyPair final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_ImportECCKeyPair) */ {
 public:
  Req_SKF_ImportECCKeyPair();
  virtual ~Req_SKF_ImportECCKeyPair();

  Req_SKF_ImportECCKeyPair(const Req_SKF_ImportECCKeyPair& from);

  inline Req_SKF_ImportECCKeyPair& operator=(const Req_SKF_ImportECCKeyPair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_ImportECCKeyPair(Req_SKF_ImportECCKeyPair&& from) noexcept
    : Req_SKF_ImportECCKeyPair() {
    *this = ::std::move(from);
  }

  inline Req_SKF_ImportECCKeyPair& operator=(Req_SKF_ImportECCKeyPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_ImportECCKeyPair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_ImportECCKeyPair* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_ImportECCKeyPair*>(
               &_Req_SKF_ImportECCKeyPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  void Swap(Req_SKF_ImportECCKeyPair* other);
  friend void swap(Req_SKF_ImportECCKeyPair& a, Req_SKF_ImportECCKeyPair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_ImportECCKeyPair* New() const final {
    return CreateMaybeMessage<Req_SKF_ImportECCKeyPair>(nullptr);
  }

  Req_SKF_ImportECCKeyPair* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_ImportECCKeyPair>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_ImportECCKeyPair& from);
  void MergeFrom(const Req_SKF_ImportECCKeyPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_ImportECCKeyPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  bool has_hcontainer() const;
  void clear_hcontainer();
  static const int kHContainerFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hcontainer() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hcontainer();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hcontainer();
  void set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer);

  // .com.westone.skf.SKF_ENVELOPEDKEYBLOB pEnvelopedKeyBlob = 2;
  bool has_penvelopedkeyblob() const;
  void clear_penvelopedkeyblob();
  static const int kPEnvelopedKeyBlobFieldNumber = 2;
  const ::com::westone::skf::SKF_ENVELOPEDKEYBLOB& penvelopedkeyblob() const;
  ::com::westone::skf::SKF_ENVELOPEDKEYBLOB* release_penvelopedkeyblob();
  ::com::westone::skf::SKF_ENVELOPEDKEYBLOB* mutable_penvelopedkeyblob();
  void set_allocated_penvelopedkeyblob(::com::westone::skf::SKF_ENVELOPEDKEYBLOB* penvelopedkeyblob);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_ImportECCKeyPair)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* hcontainer_;
  ::com::westone::skf::SKF_ENVELOPEDKEYBLOB* penvelopedkeyblob_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_ImportECCKeyPair final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_ImportECCKeyPair) */ {
 public:
  Rsp_SKF_ImportECCKeyPair();
  virtual ~Rsp_SKF_ImportECCKeyPair();

  Rsp_SKF_ImportECCKeyPair(const Rsp_SKF_ImportECCKeyPair& from);

  inline Rsp_SKF_ImportECCKeyPair& operator=(const Rsp_SKF_ImportECCKeyPair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_ImportECCKeyPair(Rsp_SKF_ImportECCKeyPair&& from) noexcept
    : Rsp_SKF_ImportECCKeyPair() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_ImportECCKeyPair& operator=(Rsp_SKF_ImportECCKeyPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_ImportECCKeyPair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_ImportECCKeyPair* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_ImportECCKeyPair*>(
               &_Rsp_SKF_ImportECCKeyPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  void Swap(Rsp_SKF_ImportECCKeyPair* other);
  friend void swap(Rsp_SKF_ImportECCKeyPair& a, Rsp_SKF_ImportECCKeyPair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_ImportECCKeyPair* New() const final {
    return CreateMaybeMessage<Rsp_SKF_ImportECCKeyPair>(nullptr);
  }

  Rsp_SKF_ImportECCKeyPair* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_ImportECCKeyPair>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_ImportECCKeyPair& from);
  void MergeFrom(const Rsp_SKF_ImportECCKeyPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_ImportECCKeyPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_ImportECCKeyPair)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_ECCSignData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_ECCSignData) */ {
 public:
  Req_SKF_ECCSignData();
  virtual ~Req_SKF_ECCSignData();

  Req_SKF_ECCSignData(const Req_SKF_ECCSignData& from);

  inline Req_SKF_ECCSignData& operator=(const Req_SKF_ECCSignData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_ECCSignData(Req_SKF_ECCSignData&& from) noexcept
    : Req_SKF_ECCSignData() {
    *this = ::std::move(from);
  }

  inline Req_SKF_ECCSignData& operator=(Req_SKF_ECCSignData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_ECCSignData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_ECCSignData* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_ECCSignData*>(
               &_Req_SKF_ECCSignData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  void Swap(Req_SKF_ECCSignData* other);
  friend void swap(Req_SKF_ECCSignData& a, Req_SKF_ECCSignData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_ECCSignData* New() const final {
    return CreateMaybeMessage<Req_SKF_ECCSignData>(nullptr);
  }

  Req_SKF_ECCSignData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_ECCSignData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_ECCSignData& from);
  void MergeFrom(const Req_SKF_ECCSignData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_ECCSignData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbData = 2;
  void clear_pbdata();
  static const int kPbDataFieldNumber = 2;
  const ::std::string& pbdata() const;
  void set_pbdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbdata(::std::string&& value);
  #endif
  void set_pbdata(const char* value);
  void set_pbdata(const void* value, size_t size);
  ::std::string* mutable_pbdata();
  ::std::string* release_pbdata();
  void set_allocated_pbdata(::std::string* pbdata);

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  bool has_hcontainer() const;
  void clear_hcontainer();
  static const int kHContainerFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hcontainer() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hcontainer();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hcontainer();
  void set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer);

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  bool has_uldatalen() const;
  void clear_uldatalen();
  static const int kUlDataLenFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& uldatalen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_uldatalen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_uldatalen();
  void set_allocated_uldatalen(::com::westone::skf::WST_PROTO_UINT32* uldatalen);

  // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 4;
  bool has_psignature() const;
  void clear_psignature();
  static const int kPSignatureFieldNumber = 4;
  const ::com::westone::skf::SKF_ECCSIGNATUREBLOB& psignature() const;
  ::com::westone::skf::SKF_ECCSIGNATUREBLOB* release_psignature();
  ::com::westone::skf::SKF_ECCSIGNATUREBLOB* mutable_psignature();
  void set_allocated_psignature(::com::westone::skf::SKF_ECCSIGNATUREBLOB* psignature);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_ECCSignData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbdata_;
  ::com::westone::skf::WST_PROTO_UINT32* hcontainer_;
  ::com::westone::skf::WST_PROTO_UINT32* uldatalen_;
  ::com::westone::skf::SKF_ECCSIGNATUREBLOB* psignature_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_ECCSignData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_ECCSignData) */ {
 public:
  Rsp_SKF_ECCSignData();
  virtual ~Rsp_SKF_ECCSignData();

  Rsp_SKF_ECCSignData(const Rsp_SKF_ECCSignData& from);

  inline Rsp_SKF_ECCSignData& operator=(const Rsp_SKF_ECCSignData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_ECCSignData(Rsp_SKF_ECCSignData&& from) noexcept
    : Rsp_SKF_ECCSignData() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_ECCSignData& operator=(Rsp_SKF_ECCSignData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_ECCSignData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_ECCSignData* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_ECCSignData*>(
               &_Rsp_SKF_ECCSignData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  void Swap(Rsp_SKF_ECCSignData* other);
  friend void swap(Rsp_SKF_ECCSignData& a, Rsp_SKF_ECCSignData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_ECCSignData* New() const final {
    return CreateMaybeMessage<Rsp_SKF_ECCSignData>(nullptr);
  }

  Rsp_SKF_ECCSignData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_ECCSignData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_ECCSignData& from);
  void MergeFrom(const Rsp_SKF_ECCSignData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_ECCSignData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 1;
  bool has_psignature() const;
  void clear_psignature();
  static const int kPSignatureFieldNumber = 1;
  const ::com::westone::skf::SKF_ECCSIGNATUREBLOB& psignature() const;
  ::com::westone::skf::SKF_ECCSIGNATUREBLOB* release_psignature();
  ::com::westone::skf::SKF_ECCSIGNATUREBLOB* mutable_psignature();
  void set_allocated_psignature(::com::westone::skf::SKF_ECCSIGNATUREBLOB* psignature);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_ECCSignData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::SKF_ECCSIGNATUREBLOB* psignature_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_ECCVerify final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_ECCVerify) */ {
 public:
  Req_SKF_ECCVerify();
  virtual ~Req_SKF_ECCVerify();

  Req_SKF_ECCVerify(const Req_SKF_ECCVerify& from);

  inline Req_SKF_ECCVerify& operator=(const Req_SKF_ECCVerify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_ECCVerify(Req_SKF_ECCVerify&& from) noexcept
    : Req_SKF_ECCVerify() {
    *this = ::std::move(from);
  }

  inline Req_SKF_ECCVerify& operator=(Req_SKF_ECCVerify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_ECCVerify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_ECCVerify* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_ECCVerify*>(
               &_Req_SKF_ECCVerify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  void Swap(Req_SKF_ECCVerify* other);
  friend void swap(Req_SKF_ECCVerify& a, Req_SKF_ECCVerify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_ECCVerify* New() const final {
    return CreateMaybeMessage<Req_SKF_ECCVerify>(nullptr);
  }

  Req_SKF_ECCVerify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_ECCVerify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_ECCVerify& from);
  void MergeFrom(const Req_SKF_ECCVerify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_ECCVerify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbData = 3;
  void clear_pbdata();
  static const int kPbDataFieldNumber = 3;
  const ::std::string& pbdata() const;
  void set_pbdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbdata(::std::string&& value);
  #endif
  void set_pbdata(const char* value);
  void set_pbdata(const void* value, size_t size);
  ::std::string* mutable_pbdata();
  ::std::string* release_pbdata();
  void set_allocated_pbdata(::std::string* pbdata);

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  bool has_hdev() const;
  void clear_hdev();
  static const int kHDevFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hdev() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hdev();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hdev();
  void set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev);

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pECCPubKeyBlob = 2;
  bool has_peccpubkeyblob() const;
  void clear_peccpubkeyblob();
  static const int kPECCPubKeyBlobFieldNumber = 2;
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& peccpubkeyblob() const;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* release_peccpubkeyblob();
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* mutable_peccpubkeyblob();
  void set_allocated_peccpubkeyblob(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* peccpubkeyblob);

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 4;
  bool has_uldatalen() const;
  void clear_uldatalen();
  static const int kUlDataLenFieldNumber = 4;
  const ::com::westone::skf::WST_PROTO_UINT32& uldatalen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_uldatalen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_uldatalen();
  void set_allocated_uldatalen(::com::westone::skf::WST_PROTO_UINT32* uldatalen);

  // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 5;
  bool has_psignature() const;
  void clear_psignature();
  static const int kPSignatureFieldNumber = 5;
  const ::com::westone::skf::SKF_ECCSIGNATUREBLOB& psignature() const;
  ::com::westone::skf::SKF_ECCSIGNATUREBLOB* release_psignature();
  ::com::westone::skf::SKF_ECCSIGNATUREBLOB* mutable_psignature();
  void set_allocated_psignature(::com::westone::skf::SKF_ECCSIGNATUREBLOB* psignature);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_ECCVerify)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbdata_;
  ::com::westone::skf::WST_PROTO_UINT32* hdev_;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* peccpubkeyblob_;
  ::com::westone::skf::WST_PROTO_UINT32* uldatalen_;
  ::com::westone::skf::SKF_ECCSIGNATUREBLOB* psignature_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_ECCVerify final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_ECCVerify) */ {
 public:
  Rsp_SKF_ECCVerify();
  virtual ~Rsp_SKF_ECCVerify();

  Rsp_SKF_ECCVerify(const Rsp_SKF_ECCVerify& from);

  inline Rsp_SKF_ECCVerify& operator=(const Rsp_SKF_ECCVerify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_ECCVerify(Rsp_SKF_ECCVerify&& from) noexcept
    : Rsp_SKF_ECCVerify() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_ECCVerify& operator=(Rsp_SKF_ECCVerify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_ECCVerify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_ECCVerify* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_ECCVerify*>(
               &_Rsp_SKF_ECCVerify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  void Swap(Rsp_SKF_ECCVerify* other);
  friend void swap(Rsp_SKF_ECCVerify& a, Rsp_SKF_ECCVerify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_ECCVerify* New() const final {
    return CreateMaybeMessage<Rsp_SKF_ECCVerify>(nullptr);
  }

  Rsp_SKF_ECCVerify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_ECCVerify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_ECCVerify& from);
  void MergeFrom(const Rsp_SKF_ECCVerify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_ECCVerify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_ECCVerify)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_ECCExportSessionKey final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_ECCExportSessionKey) */ {
 public:
  Req_SKF_ECCExportSessionKey();
  virtual ~Req_SKF_ECCExportSessionKey();

  Req_SKF_ECCExportSessionKey(const Req_SKF_ECCExportSessionKey& from);

  inline Req_SKF_ECCExportSessionKey& operator=(const Req_SKF_ECCExportSessionKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_ECCExportSessionKey(Req_SKF_ECCExportSessionKey&& from) noexcept
    : Req_SKF_ECCExportSessionKey() {
    *this = ::std::move(from);
  }

  inline Req_SKF_ECCExportSessionKey& operator=(Req_SKF_ECCExportSessionKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_ECCExportSessionKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_ECCExportSessionKey* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_ECCExportSessionKey*>(
               &_Req_SKF_ECCExportSessionKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  void Swap(Req_SKF_ECCExportSessionKey* other);
  friend void swap(Req_SKF_ECCExportSessionKey& a, Req_SKF_ECCExportSessionKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_ECCExportSessionKey* New() const final {
    return CreateMaybeMessage<Req_SKF_ECCExportSessionKey>(nullptr);
  }

  Req_SKF_ECCExportSessionKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_ECCExportSessionKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_ECCExportSessionKey& from);
  void MergeFrom(const Req_SKF_ECCExportSessionKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_ECCExportSessionKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  bool has_hcontainer() const;
  void clear_hcontainer();
  static const int kHContainerFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hcontainer() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hcontainer();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hcontainer();
  void set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer);

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
  bool has_ulalgid() const;
  void clear_ulalgid();
  static const int kUlAlgIDFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& ulalgid() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulalgid();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulalgid();
  void set_allocated_ulalgid(::com::westone::skf::WST_PROTO_UINT32* ulalgid);

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pPubKey = 3;
  bool has_ppubkey() const;
  void clear_ppubkey();
  static const int kPPubKeyFieldNumber = 3;
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& ppubkey() const;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* release_ppubkey();
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* mutable_ppubkey();
  void set_allocated_ppubkey(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* ppubkey);

  // .com.westone.skf.SKF_ECCCIPHERBLOB pData = 4;
  bool has_pdata() const;
  void clear_pdata();
  static const int kPDataFieldNumber = 4;
  const ::com::westone::skf::SKF_ECCCIPHERBLOB& pdata() const;
  ::com::westone::skf::SKF_ECCCIPHERBLOB* release_pdata();
  ::com::westone::skf::SKF_ECCCIPHERBLOB* mutable_pdata();
  void set_allocated_pdata(::com::westone::skf::SKF_ECCCIPHERBLOB* pdata);

  // .com.westone.skf.WST_PROTO_UINT32 phSessionKey = 5;
  bool has_phsessionkey() const;
  void clear_phsessionkey();
  static const int kPhSessionKeyFieldNumber = 5;
  const ::com::westone::skf::WST_PROTO_UINT32& phsessionkey() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_phsessionkey();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_phsessionkey();
  void set_allocated_phsessionkey(::com::westone::skf::WST_PROTO_UINT32* phsessionkey);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_ECCExportSessionKey)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* hcontainer_;
  ::com::westone::skf::WST_PROTO_UINT32* ulalgid_;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* ppubkey_;
  ::com::westone::skf::SKF_ECCCIPHERBLOB* pdata_;
  ::com::westone::skf::WST_PROTO_UINT32* phsessionkey_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_ECCExportSessionKey final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_ECCExportSessionKey) */ {
 public:
  Rsp_SKF_ECCExportSessionKey();
  virtual ~Rsp_SKF_ECCExportSessionKey();

  Rsp_SKF_ECCExportSessionKey(const Rsp_SKF_ECCExportSessionKey& from);

  inline Rsp_SKF_ECCExportSessionKey& operator=(const Rsp_SKF_ECCExportSessionKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_ECCExportSessionKey(Rsp_SKF_ECCExportSessionKey&& from) noexcept
    : Rsp_SKF_ECCExportSessionKey() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_ECCExportSessionKey& operator=(Rsp_SKF_ECCExportSessionKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_ECCExportSessionKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_ECCExportSessionKey* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_ECCExportSessionKey*>(
               &_Rsp_SKF_ECCExportSessionKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  void Swap(Rsp_SKF_ECCExportSessionKey* other);
  friend void swap(Rsp_SKF_ECCExportSessionKey& a, Rsp_SKF_ECCExportSessionKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_ECCExportSessionKey* New() const final {
    return CreateMaybeMessage<Rsp_SKF_ECCExportSessionKey>(nullptr);
  }

  Rsp_SKF_ECCExportSessionKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_ECCExportSessionKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_ECCExportSessionKey& from);
  void MergeFrom(const Rsp_SKF_ECCExportSessionKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_ECCExportSessionKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.SKF_ECCCIPHERBLOB pData = 1;
  bool has_pdata() const;
  void clear_pdata();
  static const int kPDataFieldNumber = 1;
  const ::com::westone::skf::SKF_ECCCIPHERBLOB& pdata() const;
  ::com::westone::skf::SKF_ECCCIPHERBLOB* release_pdata();
  ::com::westone::skf::SKF_ECCCIPHERBLOB* mutable_pdata();
  void set_allocated_pdata(::com::westone::skf::SKF_ECCCIPHERBLOB* pdata);

  // .com.westone.skf.WST_PROTO_UINT32 phSessionKey = 2;
  bool has_phsessionkey() const;
  void clear_phsessionkey();
  static const int kPhSessionKeyFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& phsessionkey() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_phsessionkey();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_phsessionkey();
  void set_allocated_phsessionkey(::com::westone::skf::WST_PROTO_UINT32* phsessionkey);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_ECCExportSessionKey)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::SKF_ECCCIPHERBLOB* pdata_;
  ::com::westone::skf::WST_PROTO_UINT32* phsessionkey_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_ExtECCEncrypt final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_ExtECCEncrypt) */ {
 public:
  Req_SKF_ExtECCEncrypt();
  virtual ~Req_SKF_ExtECCEncrypt();

  Req_SKF_ExtECCEncrypt(const Req_SKF_ExtECCEncrypt& from);

  inline Req_SKF_ExtECCEncrypt& operator=(const Req_SKF_ExtECCEncrypt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_ExtECCEncrypt(Req_SKF_ExtECCEncrypt&& from) noexcept
    : Req_SKF_ExtECCEncrypt() {
    *this = ::std::move(from);
  }

  inline Req_SKF_ExtECCEncrypt& operator=(Req_SKF_ExtECCEncrypt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_ExtECCEncrypt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_ExtECCEncrypt* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_ExtECCEncrypt*>(
               &_Req_SKF_ExtECCEncrypt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  void Swap(Req_SKF_ExtECCEncrypt* other);
  friend void swap(Req_SKF_ExtECCEncrypt& a, Req_SKF_ExtECCEncrypt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_ExtECCEncrypt* New() const final {
    return CreateMaybeMessage<Req_SKF_ExtECCEncrypt>(nullptr);
  }

  Req_SKF_ExtECCEncrypt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_ExtECCEncrypt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_ExtECCEncrypt& from);
  void MergeFrom(const Req_SKF_ExtECCEncrypt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_ExtECCEncrypt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbPlainText = 3;
  void clear_pbplaintext();
  static const int kPbPlainTextFieldNumber = 3;
  const ::std::string& pbplaintext() const;
  void set_pbplaintext(const ::std::string& value);
  #if LANG_CXX11
  void set_pbplaintext(::std::string&& value);
  #endif
  void set_pbplaintext(const char* value);
  void set_pbplaintext(const void* value, size_t size);
  ::std::string* mutable_pbplaintext();
  ::std::string* release_pbplaintext();
  void set_allocated_pbplaintext(::std::string* pbplaintext);

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  bool has_hdev() const;
  void clear_hdev();
  static const int kHDevFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hdev() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hdev();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hdev();
  void set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev);

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pECCPubKeyBlob = 2;
  bool has_peccpubkeyblob() const;
  void clear_peccpubkeyblob();
  static const int kPECCPubKeyBlobFieldNumber = 2;
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& peccpubkeyblob() const;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* release_peccpubkeyblob();
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* mutable_peccpubkeyblob();
  void set_allocated_peccpubkeyblob(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* peccpubkeyblob);

  // .com.westone.skf.WST_PROTO_UINT32 ulPlainTextLen = 4;
  bool has_ulplaintextlen() const;
  void clear_ulplaintextlen();
  static const int kUlPlainTextLenFieldNumber = 4;
  const ::com::westone::skf::WST_PROTO_UINT32& ulplaintextlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulplaintextlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulplaintextlen();
  void set_allocated_ulplaintextlen(::com::westone::skf::WST_PROTO_UINT32* ulplaintextlen);

  // .com.westone.skf.SKF_ECCCIPHERBLOB pbCipherText = 5;
  bool has_pbciphertext() const;
  void clear_pbciphertext();
  static const int kPbCipherTextFieldNumber = 5;
  const ::com::westone::skf::SKF_ECCCIPHERBLOB& pbciphertext() const;
  ::com::westone::skf::SKF_ECCCIPHERBLOB* release_pbciphertext();
  ::com::westone::skf::SKF_ECCCIPHERBLOB* mutable_pbciphertext();
  void set_allocated_pbciphertext(::com::westone::skf::SKF_ECCCIPHERBLOB* pbciphertext);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_ExtECCEncrypt)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbplaintext_;
  ::com::westone::skf::WST_PROTO_UINT32* hdev_;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* peccpubkeyblob_;
  ::com::westone::skf::WST_PROTO_UINT32* ulplaintextlen_;
  ::com::westone::skf::SKF_ECCCIPHERBLOB* pbciphertext_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_ExtECCEncrypt final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_ExtECCEncrypt) */ {
 public:
  Rsp_SKF_ExtECCEncrypt();
  virtual ~Rsp_SKF_ExtECCEncrypt();

  Rsp_SKF_ExtECCEncrypt(const Rsp_SKF_ExtECCEncrypt& from);

  inline Rsp_SKF_ExtECCEncrypt& operator=(const Rsp_SKF_ExtECCEncrypt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_ExtECCEncrypt(Rsp_SKF_ExtECCEncrypt&& from) noexcept
    : Rsp_SKF_ExtECCEncrypt() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_ExtECCEncrypt& operator=(Rsp_SKF_ExtECCEncrypt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_ExtECCEncrypt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_ExtECCEncrypt* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_ExtECCEncrypt*>(
               &_Rsp_SKF_ExtECCEncrypt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  void Swap(Rsp_SKF_ExtECCEncrypt* other);
  friend void swap(Rsp_SKF_ExtECCEncrypt& a, Rsp_SKF_ExtECCEncrypt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_ExtECCEncrypt* New() const final {
    return CreateMaybeMessage<Rsp_SKF_ExtECCEncrypt>(nullptr);
  }

  Rsp_SKF_ExtECCEncrypt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_ExtECCEncrypt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_ExtECCEncrypt& from);
  void MergeFrom(const Rsp_SKF_ExtECCEncrypt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_ExtECCEncrypt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.SKF_ECCCIPHERBLOB pbCipherText = 1;
  bool has_pbciphertext() const;
  void clear_pbciphertext();
  static const int kPbCipherTextFieldNumber = 1;
  const ::com::westone::skf::SKF_ECCCIPHERBLOB& pbciphertext() const;
  ::com::westone::skf::SKF_ECCCIPHERBLOB* release_pbciphertext();
  ::com::westone::skf::SKF_ECCCIPHERBLOB* mutable_pbciphertext();
  void set_allocated_pbciphertext(::com::westone::skf::SKF_ECCCIPHERBLOB* pbciphertext);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_ExtECCEncrypt)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::SKF_ECCCIPHERBLOB* pbciphertext_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_ExtECCDecrypt final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_ExtECCDecrypt) */ {
 public:
  Req_SKF_ExtECCDecrypt();
  virtual ~Req_SKF_ExtECCDecrypt();

  Req_SKF_ExtECCDecrypt(const Req_SKF_ExtECCDecrypt& from);

  inline Req_SKF_ExtECCDecrypt& operator=(const Req_SKF_ExtECCDecrypt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_ExtECCDecrypt(Req_SKF_ExtECCDecrypt&& from) noexcept
    : Req_SKF_ExtECCDecrypt() {
    *this = ::std::move(from);
  }

  inline Req_SKF_ExtECCDecrypt& operator=(Req_SKF_ExtECCDecrypt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_ExtECCDecrypt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_ExtECCDecrypt* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_ExtECCDecrypt*>(
               &_Req_SKF_ExtECCDecrypt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  void Swap(Req_SKF_ExtECCDecrypt* other);
  friend void swap(Req_SKF_ExtECCDecrypt& a, Req_SKF_ExtECCDecrypt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_ExtECCDecrypt* New() const final {
    return CreateMaybeMessage<Req_SKF_ExtECCDecrypt>(nullptr);
  }

  Req_SKF_ExtECCDecrypt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_ExtECCDecrypt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_ExtECCDecrypt& from);
  void MergeFrom(const Req_SKF_ExtECCDecrypt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_ExtECCDecrypt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbPlainText = 4;
  void clear_pbplaintext();
  static const int kPbPlainTextFieldNumber = 4;
  const ::std::string& pbplaintext() const;
  void set_pbplaintext(const ::std::string& value);
  #if LANG_CXX11
  void set_pbplaintext(::std::string&& value);
  #endif
  void set_pbplaintext(const char* value);
  void set_pbplaintext(const void* value, size_t size);
  ::std::string* mutable_pbplaintext();
  ::std::string* release_pbplaintext();
  void set_allocated_pbplaintext(::std::string* pbplaintext);

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  bool has_hdev() const;
  void clear_hdev();
  static const int kHDevFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hdev() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hdev();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hdev();
  void set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev);

  // .com.westone.skf.SKF_ECCPRIVATEKEYBLOB pECCPriKeyBlob = 2;
  bool has_peccprikeyblob() const;
  void clear_peccprikeyblob();
  static const int kPECCPriKeyBlobFieldNumber = 2;
  const ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB& peccprikeyblob() const;
  ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB* release_peccprikeyblob();
  ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB* mutable_peccprikeyblob();
  void set_allocated_peccprikeyblob(::com::westone::skf::SKF_ECCPRIVATEKEYBLOB* peccprikeyblob);

  // .com.westone.skf.SKF_ECCCIPHERBLOB pbCipherText = 3;
  bool has_pbciphertext() const;
  void clear_pbciphertext();
  static const int kPbCipherTextFieldNumber = 3;
  const ::com::westone::skf::SKF_ECCCIPHERBLOB& pbciphertext() const;
  ::com::westone::skf::SKF_ECCCIPHERBLOB* release_pbciphertext();
  ::com::westone::skf::SKF_ECCCIPHERBLOB* mutable_pbciphertext();
  void set_allocated_pbciphertext(::com::westone::skf::SKF_ECCCIPHERBLOB* pbciphertext);

  // .com.westone.skf.WST_PROTO_UINT32 pulPlainTextLen = 5;
  bool has_pulplaintextlen() const;
  void clear_pulplaintextlen();
  static const int kPulPlainTextLenFieldNumber = 5;
  const ::com::westone::skf::WST_PROTO_UINT32& pulplaintextlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulplaintextlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulplaintextlen();
  void set_allocated_pulplaintextlen(::com::westone::skf::WST_PROTO_UINT32* pulplaintextlen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_ExtECCDecrypt)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbplaintext_;
  ::com::westone::skf::WST_PROTO_UINT32* hdev_;
  ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB* peccprikeyblob_;
  ::com::westone::skf::SKF_ECCCIPHERBLOB* pbciphertext_;
  ::com::westone::skf::WST_PROTO_UINT32* pulplaintextlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_ExtECCDecrypt final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_ExtECCDecrypt) */ {
 public:
  Rsp_SKF_ExtECCDecrypt();
  virtual ~Rsp_SKF_ExtECCDecrypt();

  Rsp_SKF_ExtECCDecrypt(const Rsp_SKF_ExtECCDecrypt& from);

  inline Rsp_SKF_ExtECCDecrypt& operator=(const Rsp_SKF_ExtECCDecrypt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_ExtECCDecrypt(Rsp_SKF_ExtECCDecrypt&& from) noexcept
    : Rsp_SKF_ExtECCDecrypt() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_ExtECCDecrypt& operator=(Rsp_SKF_ExtECCDecrypt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_ExtECCDecrypt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_ExtECCDecrypt* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_ExtECCDecrypt*>(
               &_Rsp_SKF_ExtECCDecrypt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  void Swap(Rsp_SKF_ExtECCDecrypt* other);
  friend void swap(Rsp_SKF_ExtECCDecrypt& a, Rsp_SKF_ExtECCDecrypt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_ExtECCDecrypt* New() const final {
    return CreateMaybeMessage<Rsp_SKF_ExtECCDecrypt>(nullptr);
  }

  Rsp_SKF_ExtECCDecrypt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_ExtECCDecrypt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_ExtECCDecrypt& from);
  void MergeFrom(const Rsp_SKF_ExtECCDecrypt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_ExtECCDecrypt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbPlainText = 1;
  void clear_pbplaintext();
  static const int kPbPlainTextFieldNumber = 1;
  const ::std::string& pbplaintext() const;
  void set_pbplaintext(const ::std::string& value);
  #if LANG_CXX11
  void set_pbplaintext(::std::string&& value);
  #endif
  void set_pbplaintext(const char* value);
  void set_pbplaintext(const void* value, size_t size);
  ::std::string* mutable_pbplaintext();
  ::std::string* release_pbplaintext();
  void set_allocated_pbplaintext(::std::string* pbplaintext);

  // .com.westone.skf.WST_PROTO_UINT32 pulPlainTextLen = 2;
  bool has_pulplaintextlen() const;
  void clear_pulplaintextlen();
  static const int kPulPlainTextLenFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& pulplaintextlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulplaintextlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulplaintextlen();
  void set_allocated_pulplaintextlen(::com::westone::skf::WST_PROTO_UINT32* pulplaintextlen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_ExtECCDecrypt)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbplaintext_;
  ::com::westone::skf::WST_PROTO_UINT32* pulplaintextlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_ExtECCSign final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_ExtECCSign) */ {
 public:
  Req_SKF_ExtECCSign();
  virtual ~Req_SKF_ExtECCSign();

  Req_SKF_ExtECCSign(const Req_SKF_ExtECCSign& from);

  inline Req_SKF_ExtECCSign& operator=(const Req_SKF_ExtECCSign& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_ExtECCSign(Req_SKF_ExtECCSign&& from) noexcept
    : Req_SKF_ExtECCSign() {
    *this = ::std::move(from);
  }

  inline Req_SKF_ExtECCSign& operator=(Req_SKF_ExtECCSign&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_ExtECCSign& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_ExtECCSign* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_ExtECCSign*>(
               &_Req_SKF_ExtECCSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  void Swap(Req_SKF_ExtECCSign* other);
  friend void swap(Req_SKF_ExtECCSign& a, Req_SKF_ExtECCSign& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_ExtECCSign* New() const final {
    return CreateMaybeMessage<Req_SKF_ExtECCSign>(nullptr);
  }

  Req_SKF_ExtECCSign* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_ExtECCSign>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_ExtECCSign& from);
  void MergeFrom(const Req_SKF_ExtECCSign& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_ExtECCSign* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbData = 3;
  void clear_pbdata();
  static const int kPbDataFieldNumber = 3;
  const ::std::string& pbdata() const;
  void set_pbdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbdata(::std::string&& value);
  #endif
  void set_pbdata(const char* value);
  void set_pbdata(const void* value, size_t size);
  ::std::string* mutable_pbdata();
  ::std::string* release_pbdata();
  void set_allocated_pbdata(::std::string* pbdata);

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  bool has_hdev() const;
  void clear_hdev();
  static const int kHDevFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hdev() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hdev();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hdev();
  void set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev);

  // .com.westone.skf.SKF_ECCPRIVATEKEYBLOB pECCPriKeyBlob = 2;
  bool has_peccprikeyblob() const;
  void clear_peccprikeyblob();
  static const int kPECCPriKeyBlobFieldNumber = 2;
  const ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB& peccprikeyblob() const;
  ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB* release_peccprikeyblob();
  ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB* mutable_peccprikeyblob();
  void set_allocated_peccprikeyblob(::com::westone::skf::SKF_ECCPRIVATEKEYBLOB* peccprikeyblob);

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 4;
  bool has_uldatalen() const;
  void clear_uldatalen();
  static const int kUlDataLenFieldNumber = 4;
  const ::com::westone::skf::WST_PROTO_UINT32& uldatalen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_uldatalen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_uldatalen();
  void set_allocated_uldatalen(::com::westone::skf::WST_PROTO_UINT32* uldatalen);

  // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 5;
  bool has_psignature() const;
  void clear_psignature();
  static const int kPSignatureFieldNumber = 5;
  const ::com::westone::skf::SKF_ECCSIGNATUREBLOB& psignature() const;
  ::com::westone::skf::SKF_ECCSIGNATUREBLOB* release_psignature();
  ::com::westone::skf::SKF_ECCSIGNATUREBLOB* mutable_psignature();
  void set_allocated_psignature(::com::westone::skf::SKF_ECCSIGNATUREBLOB* psignature);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_ExtECCSign)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbdata_;
  ::com::westone::skf::WST_PROTO_UINT32* hdev_;
  ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB* peccprikeyblob_;
  ::com::westone::skf::WST_PROTO_UINT32* uldatalen_;
  ::com::westone::skf::SKF_ECCSIGNATUREBLOB* psignature_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_ExtECCSign final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_ExtECCSign) */ {
 public:
  Rsp_SKF_ExtECCSign();
  virtual ~Rsp_SKF_ExtECCSign();

  Rsp_SKF_ExtECCSign(const Rsp_SKF_ExtECCSign& from);

  inline Rsp_SKF_ExtECCSign& operator=(const Rsp_SKF_ExtECCSign& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_ExtECCSign(Rsp_SKF_ExtECCSign&& from) noexcept
    : Rsp_SKF_ExtECCSign() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_ExtECCSign& operator=(Rsp_SKF_ExtECCSign&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_ExtECCSign& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_ExtECCSign* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_ExtECCSign*>(
               &_Rsp_SKF_ExtECCSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  void Swap(Rsp_SKF_ExtECCSign* other);
  friend void swap(Rsp_SKF_ExtECCSign& a, Rsp_SKF_ExtECCSign& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_ExtECCSign* New() const final {
    return CreateMaybeMessage<Rsp_SKF_ExtECCSign>(nullptr);
  }

  Rsp_SKF_ExtECCSign* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_ExtECCSign>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_ExtECCSign& from);
  void MergeFrom(const Rsp_SKF_ExtECCSign& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_ExtECCSign* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 1;
  bool has_psignature() const;
  void clear_psignature();
  static const int kPSignatureFieldNumber = 1;
  const ::com::westone::skf::SKF_ECCSIGNATUREBLOB& psignature() const;
  ::com::westone::skf::SKF_ECCSIGNATUREBLOB* release_psignature();
  ::com::westone::skf::SKF_ECCSIGNATUREBLOB* mutable_psignature();
  void set_allocated_psignature(::com::westone::skf::SKF_ECCSIGNATUREBLOB* psignature);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_ExtECCSign)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::SKF_ECCSIGNATUREBLOB* psignature_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_ExtECCVerify final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_ExtECCVerify) */ {
 public:
  Req_SKF_ExtECCVerify();
  virtual ~Req_SKF_ExtECCVerify();

  Req_SKF_ExtECCVerify(const Req_SKF_ExtECCVerify& from);

  inline Req_SKF_ExtECCVerify& operator=(const Req_SKF_ExtECCVerify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_ExtECCVerify(Req_SKF_ExtECCVerify&& from) noexcept
    : Req_SKF_ExtECCVerify() {
    *this = ::std::move(from);
  }

  inline Req_SKF_ExtECCVerify& operator=(Req_SKF_ExtECCVerify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_ExtECCVerify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_ExtECCVerify* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_ExtECCVerify*>(
               &_Req_SKF_ExtECCVerify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  void Swap(Req_SKF_ExtECCVerify* other);
  friend void swap(Req_SKF_ExtECCVerify& a, Req_SKF_ExtECCVerify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_ExtECCVerify* New() const final {
    return CreateMaybeMessage<Req_SKF_ExtECCVerify>(nullptr);
  }

  Req_SKF_ExtECCVerify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_ExtECCVerify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_ExtECCVerify& from);
  void MergeFrom(const Req_SKF_ExtECCVerify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_ExtECCVerify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbData = 3;
  void clear_pbdata();
  static const int kPbDataFieldNumber = 3;
  const ::std::string& pbdata() const;
  void set_pbdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbdata(::std::string&& value);
  #endif
  void set_pbdata(const char* value);
  void set_pbdata(const void* value, size_t size);
  ::std::string* mutable_pbdata();
  ::std::string* release_pbdata();
  void set_allocated_pbdata(::std::string* pbdata);

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  bool has_hdev() const;
  void clear_hdev();
  static const int kHDevFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hdev() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hdev();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hdev();
  void set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev);

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pECCPubKeyBlob = 2;
  bool has_peccpubkeyblob() const;
  void clear_peccpubkeyblob();
  static const int kPECCPubKeyBlobFieldNumber = 2;
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& peccpubkeyblob() const;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* release_peccpubkeyblob();
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* mutable_peccpubkeyblob();
  void set_allocated_peccpubkeyblob(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* peccpubkeyblob);

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 4;
  bool has_uldatalen() const;
  void clear_uldatalen();
  static const int kUlDataLenFieldNumber = 4;
  const ::com::westone::skf::WST_PROTO_UINT32& uldatalen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_uldatalen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_uldatalen();
  void set_allocated_uldatalen(::com::westone::skf::WST_PROTO_UINT32* uldatalen);

  // .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 5;
  bool has_psignature() const;
  void clear_psignature();
  static const int kPSignatureFieldNumber = 5;
  const ::com::westone::skf::SKF_ECCSIGNATUREBLOB& psignature() const;
  ::com::westone::skf::SKF_ECCSIGNATUREBLOB* release_psignature();
  ::com::westone::skf::SKF_ECCSIGNATUREBLOB* mutable_psignature();
  void set_allocated_psignature(::com::westone::skf::SKF_ECCSIGNATUREBLOB* psignature);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_ExtECCVerify)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbdata_;
  ::com::westone::skf::WST_PROTO_UINT32* hdev_;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* peccpubkeyblob_;
  ::com::westone::skf::WST_PROTO_UINT32* uldatalen_;
  ::com::westone::skf::SKF_ECCSIGNATUREBLOB* psignature_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_ExtECCVerify final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_ExtECCVerify) */ {
 public:
  Rsp_SKF_ExtECCVerify();
  virtual ~Rsp_SKF_ExtECCVerify();

  Rsp_SKF_ExtECCVerify(const Rsp_SKF_ExtECCVerify& from);

  inline Rsp_SKF_ExtECCVerify& operator=(const Rsp_SKF_ExtECCVerify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_ExtECCVerify(Rsp_SKF_ExtECCVerify&& from) noexcept
    : Rsp_SKF_ExtECCVerify() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_ExtECCVerify& operator=(Rsp_SKF_ExtECCVerify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_ExtECCVerify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_ExtECCVerify* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_ExtECCVerify*>(
               &_Rsp_SKF_ExtECCVerify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  void Swap(Rsp_SKF_ExtECCVerify* other);
  friend void swap(Rsp_SKF_ExtECCVerify& a, Rsp_SKF_ExtECCVerify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_ExtECCVerify* New() const final {
    return CreateMaybeMessage<Rsp_SKF_ExtECCVerify>(nullptr);
  }

  Rsp_SKF_ExtECCVerify* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_ExtECCVerify>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_ExtECCVerify& from);
  void MergeFrom(const Rsp_SKF_ExtECCVerify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_ExtECCVerify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_ExtECCVerify)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_GenerateAgreementDataWithECC final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC) */ {
 public:
  Req_SKF_GenerateAgreementDataWithECC();
  virtual ~Req_SKF_GenerateAgreementDataWithECC();

  Req_SKF_GenerateAgreementDataWithECC(const Req_SKF_GenerateAgreementDataWithECC& from);

  inline Req_SKF_GenerateAgreementDataWithECC& operator=(const Req_SKF_GenerateAgreementDataWithECC& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_GenerateAgreementDataWithECC(Req_SKF_GenerateAgreementDataWithECC&& from) noexcept
    : Req_SKF_GenerateAgreementDataWithECC() {
    *this = ::std::move(from);
  }

  inline Req_SKF_GenerateAgreementDataWithECC& operator=(Req_SKF_GenerateAgreementDataWithECC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_GenerateAgreementDataWithECC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_GenerateAgreementDataWithECC* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_GenerateAgreementDataWithECC*>(
               &_Req_SKF_GenerateAgreementDataWithECC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  void Swap(Req_SKF_GenerateAgreementDataWithECC* other);
  friend void swap(Req_SKF_GenerateAgreementDataWithECC& a, Req_SKF_GenerateAgreementDataWithECC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_GenerateAgreementDataWithECC* New() const final {
    return CreateMaybeMessage<Req_SKF_GenerateAgreementDataWithECC>(nullptr);
  }

  Req_SKF_GenerateAgreementDataWithECC* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_GenerateAgreementDataWithECC>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_GenerateAgreementDataWithECC& from);
  void MergeFrom(const Req_SKF_GenerateAgreementDataWithECC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_GenerateAgreementDataWithECC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbID = 4;
  void clear_pbid();
  static const int kPbIDFieldNumber = 4;
  const ::std::string& pbid() const;
  void set_pbid(const ::std::string& value);
  #if LANG_CXX11
  void set_pbid(::std::string&& value);
  #endif
  void set_pbid(const char* value);
  void set_pbid(const void* value, size_t size);
  ::std::string* mutable_pbid();
  ::std::string* release_pbid();
  void set_allocated_pbid(::std::string* pbid);

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  bool has_hcontainer() const;
  void clear_hcontainer();
  static const int kHContainerFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hcontainer() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hcontainer();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hcontainer();
  void set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer);

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
  bool has_ulalgid() const;
  void clear_ulalgid();
  static const int kUlAlgIDFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& ulalgid() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulalgid();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulalgid();
  void set_allocated_ulalgid(::com::westone::skf::WST_PROTO_UINT32* ulalgid);

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 3;
  bool has_ptempeccpubkeyblob() const;
  void clear_ptempeccpubkeyblob();
  static const int kPTempECCPubKeyBlobFieldNumber = 3;
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& ptempeccpubkeyblob() const;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* release_ptempeccpubkeyblob();
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* mutable_ptempeccpubkeyblob();
  void set_allocated_ptempeccpubkeyblob(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* ptempeccpubkeyblob);

  // .com.westone.skf.WST_PROTO_UINT32 ulIDLen = 5;
  bool has_ulidlen() const;
  void clear_ulidlen();
  static const int kUlIDLenFieldNumber = 5;
  const ::com::westone::skf::WST_PROTO_UINT32& ulidlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulidlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulidlen();
  void set_allocated_ulidlen(::com::westone::skf::WST_PROTO_UINT32* ulidlen);

  // .com.westone.skf.WST_PROTO_UINT32 phAgreementHandle = 6;
  bool has_phagreementhandle() const;
  void clear_phagreementhandle();
  static const int kPhAgreementHandleFieldNumber = 6;
  const ::com::westone::skf::WST_PROTO_UINT32& phagreementhandle() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_phagreementhandle();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_phagreementhandle();
  void set_allocated_phagreementhandle(::com::westone::skf::WST_PROTO_UINT32* phagreementhandle);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbid_;
  ::com::westone::skf::WST_PROTO_UINT32* hcontainer_;
  ::com::westone::skf::WST_PROTO_UINT32* ulalgid_;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* ptempeccpubkeyblob_;
  ::com::westone::skf::WST_PROTO_UINT32* ulidlen_;
  ::com::westone::skf::WST_PROTO_UINT32* phagreementhandle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_GenerateAgreementDataWithECC final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_GenerateAgreementDataWithECC) */ {
 public:
  Rsp_SKF_GenerateAgreementDataWithECC();
  virtual ~Rsp_SKF_GenerateAgreementDataWithECC();

  Rsp_SKF_GenerateAgreementDataWithECC(const Rsp_SKF_GenerateAgreementDataWithECC& from);

  inline Rsp_SKF_GenerateAgreementDataWithECC& operator=(const Rsp_SKF_GenerateAgreementDataWithECC& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_GenerateAgreementDataWithECC(Rsp_SKF_GenerateAgreementDataWithECC&& from) noexcept
    : Rsp_SKF_GenerateAgreementDataWithECC() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_GenerateAgreementDataWithECC& operator=(Rsp_SKF_GenerateAgreementDataWithECC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_GenerateAgreementDataWithECC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_GenerateAgreementDataWithECC* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_GenerateAgreementDataWithECC*>(
               &_Rsp_SKF_GenerateAgreementDataWithECC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  void Swap(Rsp_SKF_GenerateAgreementDataWithECC* other);
  friend void swap(Rsp_SKF_GenerateAgreementDataWithECC& a, Rsp_SKF_GenerateAgreementDataWithECC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_GenerateAgreementDataWithECC* New() const final {
    return CreateMaybeMessage<Rsp_SKF_GenerateAgreementDataWithECC>(nullptr);
  }

  Rsp_SKF_GenerateAgreementDataWithECC* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_GenerateAgreementDataWithECC>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_GenerateAgreementDataWithECC& from);
  void MergeFrom(const Rsp_SKF_GenerateAgreementDataWithECC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_GenerateAgreementDataWithECC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 1;
  bool has_ptempeccpubkeyblob() const;
  void clear_ptempeccpubkeyblob();
  static const int kPTempECCPubKeyBlobFieldNumber = 1;
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& ptempeccpubkeyblob() const;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* release_ptempeccpubkeyblob();
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* mutable_ptempeccpubkeyblob();
  void set_allocated_ptempeccpubkeyblob(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* ptempeccpubkeyblob);

  // .com.westone.skf.WST_PROTO_UINT32 phAgreementHandle = 2;
  bool has_phagreementhandle() const;
  void clear_phagreementhandle();
  static const int kPhAgreementHandleFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& phagreementhandle() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_phagreementhandle();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_phagreementhandle();
  void set_allocated_phagreementhandle(::com::westone::skf::WST_PROTO_UINT32* phagreementhandle);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_GenerateAgreementDataWithECC)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* ptempeccpubkeyblob_;
  ::com::westone::skf::WST_PROTO_UINT32* phagreementhandle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_GenerateAgreementDataAndKeyWithECC final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC) */ {
 public:
  Req_SKF_GenerateAgreementDataAndKeyWithECC();
  virtual ~Req_SKF_GenerateAgreementDataAndKeyWithECC();

  Req_SKF_GenerateAgreementDataAndKeyWithECC(const Req_SKF_GenerateAgreementDataAndKeyWithECC& from);

  inline Req_SKF_GenerateAgreementDataAndKeyWithECC& operator=(const Req_SKF_GenerateAgreementDataAndKeyWithECC& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_GenerateAgreementDataAndKeyWithECC(Req_SKF_GenerateAgreementDataAndKeyWithECC&& from) noexcept
    : Req_SKF_GenerateAgreementDataAndKeyWithECC() {
    *this = ::std::move(from);
  }

  inline Req_SKF_GenerateAgreementDataAndKeyWithECC& operator=(Req_SKF_GenerateAgreementDataAndKeyWithECC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_GenerateAgreementDataAndKeyWithECC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_GenerateAgreementDataAndKeyWithECC* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_GenerateAgreementDataAndKeyWithECC*>(
               &_Req_SKF_GenerateAgreementDataAndKeyWithECC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  void Swap(Req_SKF_GenerateAgreementDataAndKeyWithECC* other);
  friend void swap(Req_SKF_GenerateAgreementDataAndKeyWithECC& a, Req_SKF_GenerateAgreementDataAndKeyWithECC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_GenerateAgreementDataAndKeyWithECC* New() const final {
    return CreateMaybeMessage<Req_SKF_GenerateAgreementDataAndKeyWithECC>(nullptr);
  }

  Req_SKF_GenerateAgreementDataAndKeyWithECC* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_GenerateAgreementDataAndKeyWithECC>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_GenerateAgreementDataAndKeyWithECC& from);
  void MergeFrom(const Req_SKF_GenerateAgreementDataAndKeyWithECC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_GenerateAgreementDataAndKeyWithECC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbID = 6;
  void clear_pbid();
  static const int kPbIDFieldNumber = 6;
  const ::std::string& pbid() const;
  void set_pbid(const ::std::string& value);
  #if LANG_CXX11
  void set_pbid(::std::string&& value);
  #endif
  void set_pbid(const char* value);
  void set_pbid(const void* value, size_t size);
  ::std::string* mutable_pbid();
  ::std::string* release_pbid();
  void set_allocated_pbid(::std::string* pbid);

  // bytes pbSponsorID = 8;
  void clear_pbsponsorid();
  static const int kPbSponsorIDFieldNumber = 8;
  const ::std::string& pbsponsorid() const;
  void set_pbsponsorid(const ::std::string& value);
  #if LANG_CXX11
  void set_pbsponsorid(::std::string&& value);
  #endif
  void set_pbsponsorid(const char* value);
  void set_pbsponsorid(const void* value, size_t size);
  ::std::string* mutable_pbsponsorid();
  ::std::string* release_pbsponsorid();
  void set_allocated_pbsponsorid(::std::string* pbsponsorid);

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  bool has_hcontainer() const;
  void clear_hcontainer();
  static const int kHContainerFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hcontainer() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hcontainer();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hcontainer();
  void set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer);

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
  bool has_ulalgid() const;
  void clear_ulalgid();
  static const int kUlAlgIDFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& ulalgid() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulalgid();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulalgid();
  void set_allocated_ulalgid(::com::westone::skf::WST_PROTO_UINT32* ulalgid);

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pSponsorECCPubKeyBlob = 3;
  bool has_psponsoreccpubkeyblob() const;
  void clear_psponsoreccpubkeyblob();
  static const int kPSponsorECCPubKeyBlobFieldNumber = 3;
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& psponsoreccpubkeyblob() const;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* release_psponsoreccpubkeyblob();
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* mutable_psponsoreccpubkeyblob();
  void set_allocated_psponsoreccpubkeyblob(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* psponsoreccpubkeyblob);

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pSponsorTempECCPubKeyBlob = 4;
  bool has_psponsortempeccpubkeyblob() const;
  void clear_psponsortempeccpubkeyblob();
  static const int kPSponsorTempECCPubKeyBlobFieldNumber = 4;
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& psponsortempeccpubkeyblob() const;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* release_psponsortempeccpubkeyblob();
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* mutable_psponsortempeccpubkeyblob();
  void set_allocated_psponsortempeccpubkeyblob(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* psponsortempeccpubkeyblob);

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 5;
  bool has_ptempeccpubkeyblob() const;
  void clear_ptempeccpubkeyblob();
  static const int kPTempECCPubKeyBlobFieldNumber = 5;
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& ptempeccpubkeyblob() const;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* release_ptempeccpubkeyblob();
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* mutable_ptempeccpubkeyblob();
  void set_allocated_ptempeccpubkeyblob(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* ptempeccpubkeyblob);

  // .com.westone.skf.WST_PROTO_UINT32 ulIDLen = 7;
  bool has_ulidlen() const;
  void clear_ulidlen();
  static const int kUlIDLenFieldNumber = 7;
  const ::com::westone::skf::WST_PROTO_UINT32& ulidlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulidlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulidlen();
  void set_allocated_ulidlen(::com::westone::skf::WST_PROTO_UINT32* ulidlen);

  // .com.westone.skf.WST_PROTO_UINT32 ulSponsorIDLen = 9;
  bool has_ulsponsoridlen() const;
  void clear_ulsponsoridlen();
  static const int kUlSponsorIDLenFieldNumber = 9;
  const ::com::westone::skf::WST_PROTO_UINT32& ulsponsoridlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulsponsoridlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulsponsoridlen();
  void set_allocated_ulsponsoridlen(::com::westone::skf::WST_PROTO_UINT32* ulsponsoridlen);

  // .com.westone.skf.WST_PROTO_UINT32 phKeyHandle = 10;
  bool has_phkeyhandle() const;
  void clear_phkeyhandle();
  static const int kPhKeyHandleFieldNumber = 10;
  const ::com::westone::skf::WST_PROTO_UINT32& phkeyhandle() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_phkeyhandle();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_phkeyhandle();
  void set_allocated_phkeyhandle(::com::westone::skf::WST_PROTO_UINT32* phkeyhandle);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbid_;
  ::google::protobuf::internal::ArenaStringPtr pbsponsorid_;
  ::com::westone::skf::WST_PROTO_UINT32* hcontainer_;
  ::com::westone::skf::WST_PROTO_UINT32* ulalgid_;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* psponsoreccpubkeyblob_;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* psponsortempeccpubkeyblob_;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* ptempeccpubkeyblob_;
  ::com::westone::skf::WST_PROTO_UINT32* ulidlen_;
  ::com::westone::skf::WST_PROTO_UINT32* ulsponsoridlen_;
  ::com::westone::skf::WST_PROTO_UINT32* phkeyhandle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_GenerateAgreementDataAndKeyWithECC final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_GenerateAgreementDataAndKeyWithECC) */ {
 public:
  Rsp_SKF_GenerateAgreementDataAndKeyWithECC();
  virtual ~Rsp_SKF_GenerateAgreementDataAndKeyWithECC();

  Rsp_SKF_GenerateAgreementDataAndKeyWithECC(const Rsp_SKF_GenerateAgreementDataAndKeyWithECC& from);

  inline Rsp_SKF_GenerateAgreementDataAndKeyWithECC& operator=(const Rsp_SKF_GenerateAgreementDataAndKeyWithECC& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_GenerateAgreementDataAndKeyWithECC(Rsp_SKF_GenerateAgreementDataAndKeyWithECC&& from) noexcept
    : Rsp_SKF_GenerateAgreementDataAndKeyWithECC() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_GenerateAgreementDataAndKeyWithECC& operator=(Rsp_SKF_GenerateAgreementDataAndKeyWithECC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_GenerateAgreementDataAndKeyWithECC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_GenerateAgreementDataAndKeyWithECC* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_GenerateAgreementDataAndKeyWithECC*>(
               &_Rsp_SKF_GenerateAgreementDataAndKeyWithECC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  void Swap(Rsp_SKF_GenerateAgreementDataAndKeyWithECC* other);
  friend void swap(Rsp_SKF_GenerateAgreementDataAndKeyWithECC& a, Rsp_SKF_GenerateAgreementDataAndKeyWithECC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_GenerateAgreementDataAndKeyWithECC* New() const final {
    return CreateMaybeMessage<Rsp_SKF_GenerateAgreementDataAndKeyWithECC>(nullptr);
  }

  Rsp_SKF_GenerateAgreementDataAndKeyWithECC* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_GenerateAgreementDataAndKeyWithECC>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_GenerateAgreementDataAndKeyWithECC& from);
  void MergeFrom(const Rsp_SKF_GenerateAgreementDataAndKeyWithECC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_GenerateAgreementDataAndKeyWithECC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 1;
  bool has_ptempeccpubkeyblob() const;
  void clear_ptempeccpubkeyblob();
  static const int kPTempECCPubKeyBlobFieldNumber = 1;
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& ptempeccpubkeyblob() const;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* release_ptempeccpubkeyblob();
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* mutable_ptempeccpubkeyblob();
  void set_allocated_ptempeccpubkeyblob(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* ptempeccpubkeyblob);

  // .com.westone.skf.WST_PROTO_UINT32 phAgreementHandle = 2;
  bool has_phagreementhandle() const;
  void clear_phagreementhandle();
  static const int kPhAgreementHandleFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& phagreementhandle() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_phagreementhandle();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_phagreementhandle();
  void set_allocated_phagreementhandle(::com::westone::skf::WST_PROTO_UINT32* phagreementhandle);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_GenerateAgreementDataAndKeyWithECC)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* ptempeccpubkeyblob_;
  ::com::westone::skf::WST_PROTO_UINT32* phagreementhandle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_GenerateKeyWithECC final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_GenerateKeyWithECC) */ {
 public:
  Req_SKF_GenerateKeyWithECC();
  virtual ~Req_SKF_GenerateKeyWithECC();

  Req_SKF_GenerateKeyWithECC(const Req_SKF_GenerateKeyWithECC& from);

  inline Req_SKF_GenerateKeyWithECC& operator=(const Req_SKF_GenerateKeyWithECC& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_GenerateKeyWithECC(Req_SKF_GenerateKeyWithECC&& from) noexcept
    : Req_SKF_GenerateKeyWithECC() {
    *this = ::std::move(from);
  }

  inline Req_SKF_GenerateKeyWithECC& operator=(Req_SKF_GenerateKeyWithECC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_GenerateKeyWithECC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_GenerateKeyWithECC* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_GenerateKeyWithECC*>(
               &_Req_SKF_GenerateKeyWithECC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  void Swap(Req_SKF_GenerateKeyWithECC* other);
  friend void swap(Req_SKF_GenerateKeyWithECC& a, Req_SKF_GenerateKeyWithECC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_GenerateKeyWithECC* New() const final {
    return CreateMaybeMessage<Req_SKF_GenerateKeyWithECC>(nullptr);
  }

  Req_SKF_GenerateKeyWithECC* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_GenerateKeyWithECC>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_GenerateKeyWithECC& from);
  void MergeFrom(const Req_SKF_GenerateKeyWithECC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_GenerateKeyWithECC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbID = 4;
  void clear_pbid();
  static const int kPbIDFieldNumber = 4;
  const ::std::string& pbid() const;
  void set_pbid(const ::std::string& value);
  #if LANG_CXX11
  void set_pbid(::std::string&& value);
  #endif
  void set_pbid(const char* value);
  void set_pbid(const void* value, size_t size);
  ::std::string* mutable_pbid();
  ::std::string* release_pbid();
  void set_allocated_pbid(::std::string* pbid);

  // .com.westone.skf.WST_PROTO_UINT32 hAgreementHandle = 1;
  bool has_hagreementhandle() const;
  void clear_hagreementhandle();
  static const int kHAgreementHandleFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hagreementhandle() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hagreementhandle();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hagreementhandle();
  void set_allocated_hagreementhandle(::com::westone::skf::WST_PROTO_UINT32* hagreementhandle);

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pECCPubKeyBlob = 2;
  bool has_peccpubkeyblob() const;
  void clear_peccpubkeyblob();
  static const int kPECCPubKeyBlobFieldNumber = 2;
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& peccpubkeyblob() const;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* release_peccpubkeyblob();
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* mutable_peccpubkeyblob();
  void set_allocated_peccpubkeyblob(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* peccpubkeyblob);

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 3;
  bool has_ptempeccpubkeyblob() const;
  void clear_ptempeccpubkeyblob();
  static const int kPTempECCPubKeyBlobFieldNumber = 3;
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& ptempeccpubkeyblob() const;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* release_ptempeccpubkeyblob();
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* mutable_ptempeccpubkeyblob();
  void set_allocated_ptempeccpubkeyblob(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* ptempeccpubkeyblob);

  // .com.westone.skf.WST_PROTO_UINT32 ulIDLen = 5;
  bool has_ulidlen() const;
  void clear_ulidlen();
  static const int kUlIDLenFieldNumber = 5;
  const ::com::westone::skf::WST_PROTO_UINT32& ulidlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulidlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulidlen();
  void set_allocated_ulidlen(::com::westone::skf::WST_PROTO_UINT32* ulidlen);

  // .com.westone.skf.WST_PROTO_UINT32 phKeyHandle = 6;
  bool has_phkeyhandle() const;
  void clear_phkeyhandle();
  static const int kPhKeyHandleFieldNumber = 6;
  const ::com::westone::skf::WST_PROTO_UINT32& phkeyhandle() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_phkeyhandle();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_phkeyhandle();
  void set_allocated_phkeyhandle(::com::westone::skf::WST_PROTO_UINT32* phkeyhandle);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_GenerateKeyWithECC)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbid_;
  ::com::westone::skf::WST_PROTO_UINT32* hagreementhandle_;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* peccpubkeyblob_;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* ptempeccpubkeyblob_;
  ::com::westone::skf::WST_PROTO_UINT32* ulidlen_;
  ::com::westone::skf::WST_PROTO_UINT32* phkeyhandle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_GenerateKeyWithECC final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_GenerateKeyWithECC) */ {
 public:
  Rsp_SKF_GenerateKeyWithECC();
  virtual ~Rsp_SKF_GenerateKeyWithECC();

  Rsp_SKF_GenerateKeyWithECC(const Rsp_SKF_GenerateKeyWithECC& from);

  inline Rsp_SKF_GenerateKeyWithECC& operator=(const Rsp_SKF_GenerateKeyWithECC& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_GenerateKeyWithECC(Rsp_SKF_GenerateKeyWithECC&& from) noexcept
    : Rsp_SKF_GenerateKeyWithECC() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_GenerateKeyWithECC& operator=(Rsp_SKF_GenerateKeyWithECC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_GenerateKeyWithECC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_GenerateKeyWithECC* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_GenerateKeyWithECC*>(
               &_Rsp_SKF_GenerateKeyWithECC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  void Swap(Rsp_SKF_GenerateKeyWithECC* other);
  friend void swap(Rsp_SKF_GenerateKeyWithECC& a, Rsp_SKF_GenerateKeyWithECC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_GenerateKeyWithECC* New() const final {
    return CreateMaybeMessage<Rsp_SKF_GenerateKeyWithECC>(nullptr);
  }

  Rsp_SKF_GenerateKeyWithECC* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_GenerateKeyWithECC>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_GenerateKeyWithECC& from);
  void MergeFrom(const Rsp_SKF_GenerateKeyWithECC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_GenerateKeyWithECC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 phKeyHandle = 1;
  bool has_phkeyhandle() const;
  void clear_phkeyhandle();
  static const int kPhKeyHandleFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& phkeyhandle() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_phkeyhandle();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_phkeyhandle();
  void set_allocated_phkeyhandle(::com::westone::skf::WST_PROTO_UINT32* phkeyhandle);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_GenerateKeyWithECC)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* phkeyhandle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_ExportPublicKey final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_ExportPublicKey) */ {
 public:
  Req_SKF_ExportPublicKey();
  virtual ~Req_SKF_ExportPublicKey();

  Req_SKF_ExportPublicKey(const Req_SKF_ExportPublicKey& from);

  inline Req_SKF_ExportPublicKey& operator=(const Req_SKF_ExportPublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_ExportPublicKey(Req_SKF_ExportPublicKey&& from) noexcept
    : Req_SKF_ExportPublicKey() {
    *this = ::std::move(from);
  }

  inline Req_SKF_ExportPublicKey& operator=(Req_SKF_ExportPublicKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_ExportPublicKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_ExportPublicKey* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_ExportPublicKey*>(
               &_Req_SKF_ExportPublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  void Swap(Req_SKF_ExportPublicKey* other);
  friend void swap(Req_SKF_ExportPublicKey& a, Req_SKF_ExportPublicKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_ExportPublicKey* New() const final {
    return CreateMaybeMessage<Req_SKF_ExportPublicKey>(nullptr);
  }

  Req_SKF_ExportPublicKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_ExportPublicKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_ExportPublicKey& from);
  void MergeFrom(const Req_SKF_ExportPublicKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_ExportPublicKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbBlob = 3;
  void clear_pbblob();
  static const int kPbBlobFieldNumber = 3;
  const ::std::string& pbblob() const;
  void set_pbblob(const ::std::string& value);
  #if LANG_CXX11
  void set_pbblob(::std::string&& value);
  #endif
  void set_pbblob(const char* value);
  void set_pbblob(const void* value, size_t size);
  ::std::string* mutable_pbblob();
  ::std::string* release_pbblob();
  void set_allocated_pbblob(::std::string* pbblob);

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  bool has_hcontainer() const;
  void clear_hcontainer();
  static const int kHContainerFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hcontainer() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hcontainer();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hcontainer();
  void set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer);

  // .com.westone.skf.WST_PROTO_BOOL bSignFlag = 2;
  bool has_bsignflag() const;
  void clear_bsignflag();
  static const int kBSignFlagFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_BOOL& bsignflag() const;
  ::com::westone::skf::WST_PROTO_BOOL* release_bsignflag();
  ::com::westone::skf::WST_PROTO_BOOL* mutable_bsignflag();
  void set_allocated_bsignflag(::com::westone::skf::WST_PROTO_BOOL* bsignflag);

  // .com.westone.skf.WST_PROTO_UINT32 pulBlobLen = 4;
  bool has_pulbloblen() const;
  void clear_pulbloblen();
  static const int kPulBlobLenFieldNumber = 4;
  const ::com::westone::skf::WST_PROTO_UINT32& pulbloblen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulbloblen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulbloblen();
  void set_allocated_pulbloblen(::com::westone::skf::WST_PROTO_UINT32* pulbloblen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_ExportPublicKey)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbblob_;
  ::com::westone::skf::WST_PROTO_UINT32* hcontainer_;
  ::com::westone::skf::WST_PROTO_BOOL* bsignflag_;
  ::com::westone::skf::WST_PROTO_UINT32* pulbloblen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_ExportPublicKey final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_ExportPublicKey) */ {
 public:
  Rsp_SKF_ExportPublicKey();
  virtual ~Rsp_SKF_ExportPublicKey();

  Rsp_SKF_ExportPublicKey(const Rsp_SKF_ExportPublicKey& from);

  inline Rsp_SKF_ExportPublicKey& operator=(const Rsp_SKF_ExportPublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_ExportPublicKey(Rsp_SKF_ExportPublicKey&& from) noexcept
    : Rsp_SKF_ExportPublicKey() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_ExportPublicKey& operator=(Rsp_SKF_ExportPublicKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_ExportPublicKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_ExportPublicKey* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_ExportPublicKey*>(
               &_Rsp_SKF_ExportPublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  void Swap(Rsp_SKF_ExportPublicKey* other);
  friend void swap(Rsp_SKF_ExportPublicKey& a, Rsp_SKF_ExportPublicKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_ExportPublicKey* New() const final {
    return CreateMaybeMessage<Rsp_SKF_ExportPublicKey>(nullptr);
  }

  Rsp_SKF_ExportPublicKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_ExportPublicKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_ExportPublicKey& from);
  void MergeFrom(const Rsp_SKF_ExportPublicKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_ExportPublicKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbBlob = 1;
  void clear_pbblob();
  static const int kPbBlobFieldNumber = 1;
  const ::std::string& pbblob() const;
  void set_pbblob(const ::std::string& value);
  #if LANG_CXX11
  void set_pbblob(::std::string&& value);
  #endif
  void set_pbblob(const char* value);
  void set_pbblob(const void* value, size_t size);
  ::std::string* mutable_pbblob();
  ::std::string* release_pbblob();
  void set_allocated_pbblob(::std::string* pbblob);

  // .com.westone.skf.WST_PROTO_UINT32 pulBlobLen = 2;
  bool has_pulbloblen() const;
  void clear_pulbloblen();
  static const int kPulBlobLenFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& pulbloblen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulbloblen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulbloblen();
  void set_allocated_pulbloblen(::com::westone::skf::WST_PROTO_UINT32* pulbloblen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_ExportPublicKey)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbblob_;
  ::com::westone::skf::WST_PROTO_UINT32* pulbloblen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_ImportSessionKey final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_ImportSessionKey) */ {
 public:
  Req_SKF_ImportSessionKey();
  virtual ~Req_SKF_ImportSessionKey();

  Req_SKF_ImportSessionKey(const Req_SKF_ImportSessionKey& from);

  inline Req_SKF_ImportSessionKey& operator=(const Req_SKF_ImportSessionKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_ImportSessionKey(Req_SKF_ImportSessionKey&& from) noexcept
    : Req_SKF_ImportSessionKey() {
    *this = ::std::move(from);
  }

  inline Req_SKF_ImportSessionKey& operator=(Req_SKF_ImportSessionKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_ImportSessionKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_ImportSessionKey* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_ImportSessionKey*>(
               &_Req_SKF_ImportSessionKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  void Swap(Req_SKF_ImportSessionKey* other);
  friend void swap(Req_SKF_ImportSessionKey& a, Req_SKF_ImportSessionKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_ImportSessionKey* New() const final {
    return CreateMaybeMessage<Req_SKF_ImportSessionKey>(nullptr);
  }

  Req_SKF_ImportSessionKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_ImportSessionKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_ImportSessionKey& from);
  void MergeFrom(const Req_SKF_ImportSessionKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_ImportSessionKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbWrappedData = 3;
  void clear_pbwrappeddata();
  static const int kPbWrappedDataFieldNumber = 3;
  const ::std::string& pbwrappeddata() const;
  void set_pbwrappeddata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbwrappeddata(::std::string&& value);
  #endif
  void set_pbwrappeddata(const char* value);
  void set_pbwrappeddata(const void* value, size_t size);
  ::std::string* mutable_pbwrappeddata();
  ::std::string* release_pbwrappeddata();
  void set_allocated_pbwrappeddata(::std::string* pbwrappeddata);

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  bool has_hcontainer() const;
  void clear_hcontainer();
  static const int kHContainerFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hcontainer() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hcontainer();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hcontainer();
  void set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer);

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
  bool has_ulalgid() const;
  void clear_ulalgid();
  static const int kUlAlgIDFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& ulalgid() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulalgid();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulalgid();
  void set_allocated_ulalgid(::com::westone::skf::WST_PROTO_UINT32* ulalgid);

  // .com.westone.skf.WST_PROTO_UINT32 ulWrappedLen = 4;
  bool has_ulwrappedlen() const;
  void clear_ulwrappedlen();
  static const int kUlWrappedLenFieldNumber = 4;
  const ::com::westone::skf::WST_PROTO_UINT32& ulwrappedlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulwrappedlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulwrappedlen();
  void set_allocated_ulwrappedlen(::com::westone::skf::WST_PROTO_UINT32* ulwrappedlen);

  // .com.westone.skf.WST_PROTO_UINT32 phKey = 5;
  bool has_phkey() const;
  void clear_phkey();
  static const int kPhKeyFieldNumber = 5;
  const ::com::westone::skf::WST_PROTO_UINT32& phkey() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_phkey();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_phkey();
  void set_allocated_phkey(::com::westone::skf::WST_PROTO_UINT32* phkey);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_ImportSessionKey)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbwrappeddata_;
  ::com::westone::skf::WST_PROTO_UINT32* hcontainer_;
  ::com::westone::skf::WST_PROTO_UINT32* ulalgid_;
  ::com::westone::skf::WST_PROTO_UINT32* ulwrappedlen_;
  ::com::westone::skf::WST_PROTO_UINT32* phkey_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_ImportSessionKey final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_ImportSessionKey) */ {
 public:
  Rsp_SKF_ImportSessionKey();
  virtual ~Rsp_SKF_ImportSessionKey();

  Rsp_SKF_ImportSessionKey(const Rsp_SKF_ImportSessionKey& from);

  inline Rsp_SKF_ImportSessionKey& operator=(const Rsp_SKF_ImportSessionKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_ImportSessionKey(Rsp_SKF_ImportSessionKey&& from) noexcept
    : Rsp_SKF_ImportSessionKey() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_ImportSessionKey& operator=(Rsp_SKF_ImportSessionKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_ImportSessionKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_ImportSessionKey* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_ImportSessionKey*>(
               &_Rsp_SKF_ImportSessionKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  void Swap(Rsp_SKF_ImportSessionKey* other);
  friend void swap(Rsp_SKF_ImportSessionKey& a, Rsp_SKF_ImportSessionKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_ImportSessionKey* New() const final {
    return CreateMaybeMessage<Rsp_SKF_ImportSessionKey>(nullptr);
  }

  Rsp_SKF_ImportSessionKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_ImportSessionKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_ImportSessionKey& from);
  void MergeFrom(const Rsp_SKF_ImportSessionKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_ImportSessionKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 phKey = 1;
  bool has_phkey() const;
  void clear_phkey();
  static const int kPhKeyFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& phkey() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_phkey();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_phkey();
  void set_allocated_phkey(::com::westone::skf::WST_PROTO_UINT32* phkey);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_ImportSessionKey)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* phkey_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_SetSymmKey final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_SetSymmKey) */ {
 public:
  Req_SKF_SetSymmKey();
  virtual ~Req_SKF_SetSymmKey();

  Req_SKF_SetSymmKey(const Req_SKF_SetSymmKey& from);

  inline Req_SKF_SetSymmKey& operator=(const Req_SKF_SetSymmKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_SetSymmKey(Req_SKF_SetSymmKey&& from) noexcept
    : Req_SKF_SetSymmKey() {
    *this = ::std::move(from);
  }

  inline Req_SKF_SetSymmKey& operator=(Req_SKF_SetSymmKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_SetSymmKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_SetSymmKey* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_SetSymmKey*>(
               &_Req_SKF_SetSymmKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  void Swap(Req_SKF_SetSymmKey* other);
  friend void swap(Req_SKF_SetSymmKey& a, Req_SKF_SetSymmKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_SetSymmKey* New() const final {
    return CreateMaybeMessage<Req_SKF_SetSymmKey>(nullptr);
  }

  Req_SKF_SetSymmKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_SetSymmKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_SetSymmKey& from);
  void MergeFrom(const Req_SKF_SetSymmKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_SetSymmKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbKey = 2;
  void clear_pbkey();
  static const int kPbKeyFieldNumber = 2;
  const ::std::string& pbkey() const;
  void set_pbkey(const ::std::string& value);
  #if LANG_CXX11
  void set_pbkey(::std::string&& value);
  #endif
  void set_pbkey(const char* value);
  void set_pbkey(const void* value, size_t size);
  ::std::string* mutable_pbkey();
  ::std::string* release_pbkey();
  void set_allocated_pbkey(::std::string* pbkey);

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  bool has_hdev() const;
  void clear_hdev();
  static const int kHDevFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hdev() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hdev();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hdev();
  void set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev);

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 3;
  bool has_ulalgid() const;
  void clear_ulalgid();
  static const int kUlAlgIDFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& ulalgid() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulalgid();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulalgid();
  void set_allocated_ulalgid(::com::westone::skf::WST_PROTO_UINT32* ulalgid);

  // .com.westone.skf.WST_PROTO_UINT32 phKey = 4;
  bool has_phkey() const;
  void clear_phkey();
  static const int kPhKeyFieldNumber = 4;
  const ::com::westone::skf::WST_PROTO_UINT32& phkey() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_phkey();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_phkey();
  void set_allocated_phkey(::com::westone::skf::WST_PROTO_UINT32* phkey);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_SetSymmKey)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbkey_;
  ::com::westone::skf::WST_PROTO_UINT32* hdev_;
  ::com::westone::skf::WST_PROTO_UINT32* ulalgid_;
  ::com::westone::skf::WST_PROTO_UINT32* phkey_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_SetSymmKey final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_SetSymmKey) */ {
 public:
  Rsp_SKF_SetSymmKey();
  virtual ~Rsp_SKF_SetSymmKey();

  Rsp_SKF_SetSymmKey(const Rsp_SKF_SetSymmKey& from);

  inline Rsp_SKF_SetSymmKey& operator=(const Rsp_SKF_SetSymmKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_SetSymmKey(Rsp_SKF_SetSymmKey&& from) noexcept
    : Rsp_SKF_SetSymmKey() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_SetSymmKey& operator=(Rsp_SKF_SetSymmKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_SetSymmKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_SetSymmKey* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_SetSymmKey*>(
               &_Rsp_SKF_SetSymmKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  void Swap(Rsp_SKF_SetSymmKey* other);
  friend void swap(Rsp_SKF_SetSymmKey& a, Rsp_SKF_SetSymmKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_SetSymmKey* New() const final {
    return CreateMaybeMessage<Rsp_SKF_SetSymmKey>(nullptr);
  }

  Rsp_SKF_SetSymmKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_SetSymmKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_SetSymmKey& from);
  void MergeFrom(const Rsp_SKF_SetSymmKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_SetSymmKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 phKey = 1;
  bool has_phkey() const;
  void clear_phkey();
  static const int kPhKeyFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& phkey() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_phkey();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_phkey();
  void set_allocated_phkey(::com::westone::skf::WST_PROTO_UINT32* phkey);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_SetSymmKey)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* phkey_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_EncryptInit final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_EncryptInit) */ {
 public:
  Req_SKF_EncryptInit();
  virtual ~Req_SKF_EncryptInit();

  Req_SKF_EncryptInit(const Req_SKF_EncryptInit& from);

  inline Req_SKF_EncryptInit& operator=(const Req_SKF_EncryptInit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_EncryptInit(Req_SKF_EncryptInit&& from) noexcept
    : Req_SKF_EncryptInit() {
    *this = ::std::move(from);
  }

  inline Req_SKF_EncryptInit& operator=(Req_SKF_EncryptInit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_EncryptInit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_EncryptInit* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_EncryptInit*>(
               &_Req_SKF_EncryptInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  void Swap(Req_SKF_EncryptInit* other);
  friend void swap(Req_SKF_EncryptInit& a, Req_SKF_EncryptInit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_EncryptInit* New() const final {
    return CreateMaybeMessage<Req_SKF_EncryptInit>(nullptr);
  }

  Req_SKF_EncryptInit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_EncryptInit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_EncryptInit& from);
  void MergeFrom(const Req_SKF_EncryptInit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_EncryptInit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  bool has_hkey() const;
  void clear_hkey();
  static const int kHKeyFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hkey() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hkey();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hkey();
  void set_allocated_hkey(::com::westone::skf::WST_PROTO_UINT32* hkey);

  // .com.westone.skf.SKF_BLOCKCIPHERPARAM EncryptParam = 2;
  bool has_encryptparam() const;
  void clear_encryptparam();
  static const int kEncryptParamFieldNumber = 2;
  const ::com::westone::skf::SKF_BLOCKCIPHERPARAM& encryptparam() const;
  ::com::westone::skf::SKF_BLOCKCIPHERPARAM* release_encryptparam();
  ::com::westone::skf::SKF_BLOCKCIPHERPARAM* mutable_encryptparam();
  void set_allocated_encryptparam(::com::westone::skf::SKF_BLOCKCIPHERPARAM* encryptparam);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_EncryptInit)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* hkey_;
  ::com::westone::skf::SKF_BLOCKCIPHERPARAM* encryptparam_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_EncryptInit final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_EncryptInit) */ {
 public:
  Rsp_SKF_EncryptInit();
  virtual ~Rsp_SKF_EncryptInit();

  Rsp_SKF_EncryptInit(const Rsp_SKF_EncryptInit& from);

  inline Rsp_SKF_EncryptInit& operator=(const Rsp_SKF_EncryptInit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_EncryptInit(Rsp_SKF_EncryptInit&& from) noexcept
    : Rsp_SKF_EncryptInit() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_EncryptInit& operator=(Rsp_SKF_EncryptInit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_EncryptInit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_EncryptInit* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_EncryptInit*>(
               &_Rsp_SKF_EncryptInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  void Swap(Rsp_SKF_EncryptInit* other);
  friend void swap(Rsp_SKF_EncryptInit& a, Rsp_SKF_EncryptInit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_EncryptInit* New() const final {
    return CreateMaybeMessage<Rsp_SKF_EncryptInit>(nullptr);
  }

  Rsp_SKF_EncryptInit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_EncryptInit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_EncryptInit& from);
  void MergeFrom(const Rsp_SKF_EncryptInit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_EncryptInit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_EncryptInit)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_Encrypt final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_Encrypt) */ {
 public:
  Req_SKF_Encrypt();
  virtual ~Req_SKF_Encrypt();

  Req_SKF_Encrypt(const Req_SKF_Encrypt& from);

  inline Req_SKF_Encrypt& operator=(const Req_SKF_Encrypt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_Encrypt(Req_SKF_Encrypt&& from) noexcept
    : Req_SKF_Encrypt() {
    *this = ::std::move(from);
  }

  inline Req_SKF_Encrypt& operator=(Req_SKF_Encrypt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_Encrypt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_Encrypt* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_Encrypt*>(
               &_Req_SKF_Encrypt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  void Swap(Req_SKF_Encrypt* other);
  friend void swap(Req_SKF_Encrypt& a, Req_SKF_Encrypt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_Encrypt* New() const final {
    return CreateMaybeMessage<Req_SKF_Encrypt>(nullptr);
  }

  Req_SKF_Encrypt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_Encrypt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_Encrypt& from);
  void MergeFrom(const Req_SKF_Encrypt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_Encrypt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbData = 2;
  void clear_pbdata();
  static const int kPbDataFieldNumber = 2;
  const ::std::string& pbdata() const;
  void set_pbdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbdata(::std::string&& value);
  #endif
  void set_pbdata(const char* value);
  void set_pbdata(const void* value, size_t size);
  ::std::string* mutable_pbdata();
  ::std::string* release_pbdata();
  void set_allocated_pbdata(::std::string* pbdata);

  // bytes pbEncryptedData = 4;
  void clear_pbencrypteddata();
  static const int kPbEncryptedDataFieldNumber = 4;
  const ::std::string& pbencrypteddata() const;
  void set_pbencrypteddata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbencrypteddata(::std::string&& value);
  #endif
  void set_pbencrypteddata(const char* value);
  void set_pbencrypteddata(const void* value, size_t size);
  ::std::string* mutable_pbencrypteddata();
  ::std::string* release_pbencrypteddata();
  void set_allocated_pbencrypteddata(::std::string* pbencrypteddata);

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  bool has_hkey() const;
  void clear_hkey();
  static const int kHKeyFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hkey() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hkey();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hkey();
  void set_allocated_hkey(::com::westone::skf::WST_PROTO_UINT32* hkey);

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  bool has_uldatalen() const;
  void clear_uldatalen();
  static const int kUlDataLenFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& uldatalen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_uldatalen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_uldatalen();
  void set_allocated_uldatalen(::com::westone::skf::WST_PROTO_UINT32* uldatalen);

  // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedLen = 5;
  bool has_pulencryptedlen() const;
  void clear_pulencryptedlen();
  static const int kPulEncryptedLenFieldNumber = 5;
  const ::com::westone::skf::WST_PROTO_UINT32& pulencryptedlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulencryptedlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulencryptedlen();
  void set_allocated_pulencryptedlen(::com::westone::skf::WST_PROTO_UINT32* pulencryptedlen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_Encrypt)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbdata_;
  ::google::protobuf::internal::ArenaStringPtr pbencrypteddata_;
  ::com::westone::skf::WST_PROTO_UINT32* hkey_;
  ::com::westone::skf::WST_PROTO_UINT32* uldatalen_;
  ::com::westone::skf::WST_PROTO_UINT32* pulencryptedlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_Encrypt final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_Encrypt) */ {
 public:
  Rsp_SKF_Encrypt();
  virtual ~Rsp_SKF_Encrypt();

  Rsp_SKF_Encrypt(const Rsp_SKF_Encrypt& from);

  inline Rsp_SKF_Encrypt& operator=(const Rsp_SKF_Encrypt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_Encrypt(Rsp_SKF_Encrypt&& from) noexcept
    : Rsp_SKF_Encrypt() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_Encrypt& operator=(Rsp_SKF_Encrypt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_Encrypt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_Encrypt* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_Encrypt*>(
               &_Rsp_SKF_Encrypt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  void Swap(Rsp_SKF_Encrypt* other);
  friend void swap(Rsp_SKF_Encrypt& a, Rsp_SKF_Encrypt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_Encrypt* New() const final {
    return CreateMaybeMessage<Rsp_SKF_Encrypt>(nullptr);
  }

  Rsp_SKF_Encrypt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_Encrypt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_Encrypt& from);
  void MergeFrom(const Rsp_SKF_Encrypt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_Encrypt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbEncryptedData = 1;
  void clear_pbencrypteddata();
  static const int kPbEncryptedDataFieldNumber = 1;
  const ::std::string& pbencrypteddata() const;
  void set_pbencrypteddata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbencrypteddata(::std::string&& value);
  #endif
  void set_pbencrypteddata(const char* value);
  void set_pbencrypteddata(const void* value, size_t size);
  ::std::string* mutable_pbencrypteddata();
  ::std::string* release_pbencrypteddata();
  void set_allocated_pbencrypteddata(::std::string* pbencrypteddata);

  // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedLen = 2;
  bool has_pulencryptedlen() const;
  void clear_pulencryptedlen();
  static const int kPulEncryptedLenFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& pulencryptedlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulencryptedlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulencryptedlen();
  void set_allocated_pulencryptedlen(::com::westone::skf::WST_PROTO_UINT32* pulencryptedlen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_Encrypt)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbencrypteddata_;
  ::com::westone::skf::WST_PROTO_UINT32* pulencryptedlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_EncryptUpdate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_EncryptUpdate) */ {
 public:
  Req_SKF_EncryptUpdate();
  virtual ~Req_SKF_EncryptUpdate();

  Req_SKF_EncryptUpdate(const Req_SKF_EncryptUpdate& from);

  inline Req_SKF_EncryptUpdate& operator=(const Req_SKF_EncryptUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_EncryptUpdate(Req_SKF_EncryptUpdate&& from) noexcept
    : Req_SKF_EncryptUpdate() {
    *this = ::std::move(from);
  }

  inline Req_SKF_EncryptUpdate& operator=(Req_SKF_EncryptUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_EncryptUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_EncryptUpdate* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_EncryptUpdate*>(
               &_Req_SKF_EncryptUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  void Swap(Req_SKF_EncryptUpdate* other);
  friend void swap(Req_SKF_EncryptUpdate& a, Req_SKF_EncryptUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_EncryptUpdate* New() const final {
    return CreateMaybeMessage<Req_SKF_EncryptUpdate>(nullptr);
  }

  Req_SKF_EncryptUpdate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_EncryptUpdate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_EncryptUpdate& from);
  void MergeFrom(const Req_SKF_EncryptUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_EncryptUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbData = 2;
  void clear_pbdata();
  static const int kPbDataFieldNumber = 2;
  const ::std::string& pbdata() const;
  void set_pbdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbdata(::std::string&& value);
  #endif
  void set_pbdata(const char* value);
  void set_pbdata(const void* value, size_t size);
  ::std::string* mutable_pbdata();
  ::std::string* release_pbdata();
  void set_allocated_pbdata(::std::string* pbdata);

  // bytes pbEncryptedData = 4;
  void clear_pbencrypteddata();
  static const int kPbEncryptedDataFieldNumber = 4;
  const ::std::string& pbencrypteddata() const;
  void set_pbencrypteddata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbencrypteddata(::std::string&& value);
  #endif
  void set_pbencrypteddata(const char* value);
  void set_pbencrypteddata(const void* value, size_t size);
  ::std::string* mutable_pbencrypteddata();
  ::std::string* release_pbencrypteddata();
  void set_allocated_pbencrypteddata(::std::string* pbencrypteddata);

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  bool has_hkey() const;
  void clear_hkey();
  static const int kHKeyFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hkey() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hkey();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hkey();
  void set_allocated_hkey(::com::westone::skf::WST_PROTO_UINT32* hkey);

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  bool has_uldatalen() const;
  void clear_uldatalen();
  static const int kUlDataLenFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& uldatalen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_uldatalen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_uldatalen();
  void set_allocated_uldatalen(::com::westone::skf::WST_PROTO_UINT32* uldatalen);

  // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedLen = 5;
  bool has_pulencryptedlen() const;
  void clear_pulencryptedlen();
  static const int kPulEncryptedLenFieldNumber = 5;
  const ::com::westone::skf::WST_PROTO_UINT32& pulencryptedlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulencryptedlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulencryptedlen();
  void set_allocated_pulencryptedlen(::com::westone::skf::WST_PROTO_UINT32* pulencryptedlen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_EncryptUpdate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbdata_;
  ::google::protobuf::internal::ArenaStringPtr pbencrypteddata_;
  ::com::westone::skf::WST_PROTO_UINT32* hkey_;
  ::com::westone::skf::WST_PROTO_UINT32* uldatalen_;
  ::com::westone::skf::WST_PROTO_UINT32* pulencryptedlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_EncryptUpdate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_EncryptUpdate) */ {
 public:
  Rsp_SKF_EncryptUpdate();
  virtual ~Rsp_SKF_EncryptUpdate();

  Rsp_SKF_EncryptUpdate(const Rsp_SKF_EncryptUpdate& from);

  inline Rsp_SKF_EncryptUpdate& operator=(const Rsp_SKF_EncryptUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_EncryptUpdate(Rsp_SKF_EncryptUpdate&& from) noexcept
    : Rsp_SKF_EncryptUpdate() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_EncryptUpdate& operator=(Rsp_SKF_EncryptUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_EncryptUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_EncryptUpdate* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_EncryptUpdate*>(
               &_Rsp_SKF_EncryptUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  void Swap(Rsp_SKF_EncryptUpdate* other);
  friend void swap(Rsp_SKF_EncryptUpdate& a, Rsp_SKF_EncryptUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_EncryptUpdate* New() const final {
    return CreateMaybeMessage<Rsp_SKF_EncryptUpdate>(nullptr);
  }

  Rsp_SKF_EncryptUpdate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_EncryptUpdate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_EncryptUpdate& from);
  void MergeFrom(const Rsp_SKF_EncryptUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_EncryptUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbEncryptedData = 1;
  void clear_pbencrypteddata();
  static const int kPbEncryptedDataFieldNumber = 1;
  const ::std::string& pbencrypteddata() const;
  void set_pbencrypteddata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbencrypteddata(::std::string&& value);
  #endif
  void set_pbencrypteddata(const char* value);
  void set_pbencrypteddata(const void* value, size_t size);
  ::std::string* mutable_pbencrypteddata();
  ::std::string* release_pbencrypteddata();
  void set_allocated_pbencrypteddata(::std::string* pbencrypteddata);

  // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedLen = 2;
  bool has_pulencryptedlen() const;
  void clear_pulencryptedlen();
  static const int kPulEncryptedLenFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& pulencryptedlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulencryptedlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulencryptedlen();
  void set_allocated_pulencryptedlen(::com::westone::skf::WST_PROTO_UINT32* pulencryptedlen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_EncryptUpdate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbencrypteddata_;
  ::com::westone::skf::WST_PROTO_UINT32* pulencryptedlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_EncryptFinal final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_EncryptFinal) */ {
 public:
  Req_SKF_EncryptFinal();
  virtual ~Req_SKF_EncryptFinal();

  Req_SKF_EncryptFinal(const Req_SKF_EncryptFinal& from);

  inline Req_SKF_EncryptFinal& operator=(const Req_SKF_EncryptFinal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_EncryptFinal(Req_SKF_EncryptFinal&& from) noexcept
    : Req_SKF_EncryptFinal() {
    *this = ::std::move(from);
  }

  inline Req_SKF_EncryptFinal& operator=(Req_SKF_EncryptFinal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_EncryptFinal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_EncryptFinal* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_EncryptFinal*>(
               &_Req_SKF_EncryptFinal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  void Swap(Req_SKF_EncryptFinal* other);
  friend void swap(Req_SKF_EncryptFinal& a, Req_SKF_EncryptFinal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_EncryptFinal* New() const final {
    return CreateMaybeMessage<Req_SKF_EncryptFinal>(nullptr);
  }

  Req_SKF_EncryptFinal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_EncryptFinal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_EncryptFinal& from);
  void MergeFrom(const Req_SKF_EncryptFinal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_EncryptFinal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbEncryptedData = 2;
  void clear_pbencrypteddata();
  static const int kPbEncryptedDataFieldNumber = 2;
  const ::std::string& pbencrypteddata() const;
  void set_pbencrypteddata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbencrypteddata(::std::string&& value);
  #endif
  void set_pbencrypteddata(const char* value);
  void set_pbencrypteddata(const void* value, size_t size);
  ::std::string* mutable_pbencrypteddata();
  ::std::string* release_pbencrypteddata();
  void set_allocated_pbencrypteddata(::std::string* pbencrypteddata);

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  bool has_hkey() const;
  void clear_hkey();
  static const int kHKeyFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hkey() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hkey();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hkey();
  void set_allocated_hkey(::com::westone::skf::WST_PROTO_UINT32* hkey);

  // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedDataLen = 3;
  bool has_pulencrypteddatalen() const;
  void clear_pulencrypteddatalen();
  static const int kPulEncryptedDataLenFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& pulencrypteddatalen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulencrypteddatalen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulencrypteddatalen();
  void set_allocated_pulencrypteddatalen(::com::westone::skf::WST_PROTO_UINT32* pulencrypteddatalen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_EncryptFinal)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbencrypteddata_;
  ::com::westone::skf::WST_PROTO_UINT32* hkey_;
  ::com::westone::skf::WST_PROTO_UINT32* pulencrypteddatalen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_EncryptFinal final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_EncryptFinal) */ {
 public:
  Rsp_SKF_EncryptFinal();
  virtual ~Rsp_SKF_EncryptFinal();

  Rsp_SKF_EncryptFinal(const Rsp_SKF_EncryptFinal& from);

  inline Rsp_SKF_EncryptFinal& operator=(const Rsp_SKF_EncryptFinal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_EncryptFinal(Rsp_SKF_EncryptFinal&& from) noexcept
    : Rsp_SKF_EncryptFinal() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_EncryptFinal& operator=(Rsp_SKF_EncryptFinal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_EncryptFinal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_EncryptFinal* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_EncryptFinal*>(
               &_Rsp_SKF_EncryptFinal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  void Swap(Rsp_SKF_EncryptFinal* other);
  friend void swap(Rsp_SKF_EncryptFinal& a, Rsp_SKF_EncryptFinal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_EncryptFinal* New() const final {
    return CreateMaybeMessage<Rsp_SKF_EncryptFinal>(nullptr);
  }

  Rsp_SKF_EncryptFinal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_EncryptFinal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_EncryptFinal& from);
  void MergeFrom(const Rsp_SKF_EncryptFinal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_EncryptFinal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbEncryptedData = 1;
  void clear_pbencrypteddata();
  static const int kPbEncryptedDataFieldNumber = 1;
  const ::std::string& pbencrypteddata() const;
  void set_pbencrypteddata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbencrypteddata(::std::string&& value);
  #endif
  void set_pbencrypteddata(const char* value);
  void set_pbencrypteddata(const void* value, size_t size);
  ::std::string* mutable_pbencrypteddata();
  ::std::string* release_pbencrypteddata();
  void set_allocated_pbencrypteddata(::std::string* pbencrypteddata);

  // .com.westone.skf.WST_PROTO_UINT32 pulEncryptedDataLen = 2;
  bool has_pulencrypteddatalen() const;
  void clear_pulencrypteddatalen();
  static const int kPulEncryptedDataLenFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& pulencrypteddatalen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulencrypteddatalen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulencrypteddatalen();
  void set_allocated_pulencrypteddatalen(::com::westone::skf::WST_PROTO_UINT32* pulencrypteddatalen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_EncryptFinal)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbencrypteddata_;
  ::com::westone::skf::WST_PROTO_UINT32* pulencrypteddatalen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_DecryptInit final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_DecryptInit) */ {
 public:
  Req_SKF_DecryptInit();
  virtual ~Req_SKF_DecryptInit();

  Req_SKF_DecryptInit(const Req_SKF_DecryptInit& from);

  inline Req_SKF_DecryptInit& operator=(const Req_SKF_DecryptInit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_DecryptInit(Req_SKF_DecryptInit&& from) noexcept
    : Req_SKF_DecryptInit() {
    *this = ::std::move(from);
  }

  inline Req_SKF_DecryptInit& operator=(Req_SKF_DecryptInit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_DecryptInit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_DecryptInit* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_DecryptInit*>(
               &_Req_SKF_DecryptInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  void Swap(Req_SKF_DecryptInit* other);
  friend void swap(Req_SKF_DecryptInit& a, Req_SKF_DecryptInit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_DecryptInit* New() const final {
    return CreateMaybeMessage<Req_SKF_DecryptInit>(nullptr);
  }

  Req_SKF_DecryptInit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_DecryptInit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_DecryptInit& from);
  void MergeFrom(const Req_SKF_DecryptInit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_DecryptInit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  bool has_hkey() const;
  void clear_hkey();
  static const int kHKeyFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hkey() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hkey();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hkey();
  void set_allocated_hkey(::com::westone::skf::WST_PROTO_UINT32* hkey);

  // .com.westone.skf.SKF_BLOCKCIPHERPARAM DecryptParam = 2;
  bool has_decryptparam() const;
  void clear_decryptparam();
  static const int kDecryptParamFieldNumber = 2;
  const ::com::westone::skf::SKF_BLOCKCIPHERPARAM& decryptparam() const;
  ::com::westone::skf::SKF_BLOCKCIPHERPARAM* release_decryptparam();
  ::com::westone::skf::SKF_BLOCKCIPHERPARAM* mutable_decryptparam();
  void set_allocated_decryptparam(::com::westone::skf::SKF_BLOCKCIPHERPARAM* decryptparam);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_DecryptInit)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* hkey_;
  ::com::westone::skf::SKF_BLOCKCIPHERPARAM* decryptparam_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_DecryptInit final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_DecryptInit) */ {
 public:
  Rsp_SKF_DecryptInit();
  virtual ~Rsp_SKF_DecryptInit();

  Rsp_SKF_DecryptInit(const Rsp_SKF_DecryptInit& from);

  inline Rsp_SKF_DecryptInit& operator=(const Rsp_SKF_DecryptInit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_DecryptInit(Rsp_SKF_DecryptInit&& from) noexcept
    : Rsp_SKF_DecryptInit() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_DecryptInit& operator=(Rsp_SKF_DecryptInit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_DecryptInit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_DecryptInit* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_DecryptInit*>(
               &_Rsp_SKF_DecryptInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  void Swap(Rsp_SKF_DecryptInit* other);
  friend void swap(Rsp_SKF_DecryptInit& a, Rsp_SKF_DecryptInit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_DecryptInit* New() const final {
    return CreateMaybeMessage<Rsp_SKF_DecryptInit>(nullptr);
  }

  Rsp_SKF_DecryptInit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_DecryptInit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_DecryptInit& from);
  void MergeFrom(const Rsp_SKF_DecryptInit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_DecryptInit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_DecryptInit)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_Decrypt final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_Decrypt) */ {
 public:
  Req_SKF_Decrypt();
  virtual ~Req_SKF_Decrypt();

  Req_SKF_Decrypt(const Req_SKF_Decrypt& from);

  inline Req_SKF_Decrypt& operator=(const Req_SKF_Decrypt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_Decrypt(Req_SKF_Decrypt&& from) noexcept
    : Req_SKF_Decrypt() {
    *this = ::std::move(from);
  }

  inline Req_SKF_Decrypt& operator=(Req_SKF_Decrypt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_Decrypt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_Decrypt* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_Decrypt*>(
               &_Req_SKF_Decrypt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  void Swap(Req_SKF_Decrypt* other);
  friend void swap(Req_SKF_Decrypt& a, Req_SKF_Decrypt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_Decrypt* New() const final {
    return CreateMaybeMessage<Req_SKF_Decrypt>(nullptr);
  }

  Req_SKF_Decrypt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_Decrypt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_Decrypt& from);
  void MergeFrom(const Req_SKF_Decrypt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_Decrypt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbEncryptedData = 2;
  void clear_pbencrypteddata();
  static const int kPbEncryptedDataFieldNumber = 2;
  const ::std::string& pbencrypteddata() const;
  void set_pbencrypteddata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbencrypteddata(::std::string&& value);
  #endif
  void set_pbencrypteddata(const char* value);
  void set_pbencrypteddata(const void* value, size_t size);
  ::std::string* mutable_pbencrypteddata();
  ::std::string* release_pbencrypteddata();
  void set_allocated_pbencrypteddata(::std::string* pbencrypteddata);

  // bytes pbData = 4;
  void clear_pbdata();
  static const int kPbDataFieldNumber = 4;
  const ::std::string& pbdata() const;
  void set_pbdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbdata(::std::string&& value);
  #endif
  void set_pbdata(const char* value);
  void set_pbdata(const void* value, size_t size);
  ::std::string* mutable_pbdata();
  ::std::string* release_pbdata();
  void set_allocated_pbdata(::std::string* pbdata);

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  bool has_hkey() const;
  void clear_hkey();
  static const int kHKeyFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hkey() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hkey();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hkey();
  void set_allocated_hkey(::com::westone::skf::WST_PROTO_UINT32* hkey);

  // .com.westone.skf.WST_PROTO_UINT32 ulEncryptedLen = 3;
  bool has_ulencryptedlen() const;
  void clear_ulencryptedlen();
  static const int kUlEncryptedLenFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& ulencryptedlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulencryptedlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulencryptedlen();
  void set_allocated_ulencryptedlen(::com::westone::skf::WST_PROTO_UINT32* ulencryptedlen);

  // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 5;
  bool has_puldatalen() const;
  void clear_puldatalen();
  static const int kPulDataLenFieldNumber = 5;
  const ::com::westone::skf::WST_PROTO_UINT32& puldatalen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_puldatalen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_puldatalen();
  void set_allocated_puldatalen(::com::westone::skf::WST_PROTO_UINT32* puldatalen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_Decrypt)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbencrypteddata_;
  ::google::protobuf::internal::ArenaStringPtr pbdata_;
  ::com::westone::skf::WST_PROTO_UINT32* hkey_;
  ::com::westone::skf::WST_PROTO_UINT32* ulencryptedlen_;
  ::com::westone::skf::WST_PROTO_UINT32* puldatalen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_Decrypt final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_Decrypt) */ {
 public:
  Rsp_SKF_Decrypt();
  virtual ~Rsp_SKF_Decrypt();

  Rsp_SKF_Decrypt(const Rsp_SKF_Decrypt& from);

  inline Rsp_SKF_Decrypt& operator=(const Rsp_SKF_Decrypt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_Decrypt(Rsp_SKF_Decrypt&& from) noexcept
    : Rsp_SKF_Decrypt() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_Decrypt& operator=(Rsp_SKF_Decrypt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_Decrypt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_Decrypt* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_Decrypt*>(
               &_Rsp_SKF_Decrypt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  void Swap(Rsp_SKF_Decrypt* other);
  friend void swap(Rsp_SKF_Decrypt& a, Rsp_SKF_Decrypt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_Decrypt* New() const final {
    return CreateMaybeMessage<Rsp_SKF_Decrypt>(nullptr);
  }

  Rsp_SKF_Decrypt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_Decrypt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_Decrypt& from);
  void MergeFrom(const Rsp_SKF_Decrypt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_Decrypt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbData = 1;
  void clear_pbdata();
  static const int kPbDataFieldNumber = 1;
  const ::std::string& pbdata() const;
  void set_pbdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbdata(::std::string&& value);
  #endif
  void set_pbdata(const char* value);
  void set_pbdata(const void* value, size_t size);
  ::std::string* mutable_pbdata();
  ::std::string* release_pbdata();
  void set_allocated_pbdata(::std::string* pbdata);

  // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 2;
  bool has_puldatalen() const;
  void clear_puldatalen();
  static const int kPulDataLenFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& puldatalen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_puldatalen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_puldatalen();
  void set_allocated_puldatalen(::com::westone::skf::WST_PROTO_UINT32* puldatalen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_Decrypt)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbdata_;
  ::com::westone::skf::WST_PROTO_UINT32* puldatalen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_DecryptUpdate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_DecryptUpdate) */ {
 public:
  Req_SKF_DecryptUpdate();
  virtual ~Req_SKF_DecryptUpdate();

  Req_SKF_DecryptUpdate(const Req_SKF_DecryptUpdate& from);

  inline Req_SKF_DecryptUpdate& operator=(const Req_SKF_DecryptUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_DecryptUpdate(Req_SKF_DecryptUpdate&& from) noexcept
    : Req_SKF_DecryptUpdate() {
    *this = ::std::move(from);
  }

  inline Req_SKF_DecryptUpdate& operator=(Req_SKF_DecryptUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_DecryptUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_DecryptUpdate* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_DecryptUpdate*>(
               &_Req_SKF_DecryptUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  void Swap(Req_SKF_DecryptUpdate* other);
  friend void swap(Req_SKF_DecryptUpdate& a, Req_SKF_DecryptUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_DecryptUpdate* New() const final {
    return CreateMaybeMessage<Req_SKF_DecryptUpdate>(nullptr);
  }

  Req_SKF_DecryptUpdate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_DecryptUpdate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_DecryptUpdate& from);
  void MergeFrom(const Req_SKF_DecryptUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_DecryptUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbEncryptedData = 2;
  void clear_pbencrypteddata();
  static const int kPbEncryptedDataFieldNumber = 2;
  const ::std::string& pbencrypteddata() const;
  void set_pbencrypteddata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbencrypteddata(::std::string&& value);
  #endif
  void set_pbencrypteddata(const char* value);
  void set_pbencrypteddata(const void* value, size_t size);
  ::std::string* mutable_pbencrypteddata();
  ::std::string* release_pbencrypteddata();
  void set_allocated_pbencrypteddata(::std::string* pbencrypteddata);

  // bytes pbData = 4;
  void clear_pbdata();
  static const int kPbDataFieldNumber = 4;
  const ::std::string& pbdata() const;
  void set_pbdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbdata(::std::string&& value);
  #endif
  void set_pbdata(const char* value);
  void set_pbdata(const void* value, size_t size);
  ::std::string* mutable_pbdata();
  ::std::string* release_pbdata();
  void set_allocated_pbdata(::std::string* pbdata);

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  bool has_hkey() const;
  void clear_hkey();
  static const int kHKeyFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hkey() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hkey();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hkey();
  void set_allocated_hkey(::com::westone::skf::WST_PROTO_UINT32* hkey);

  // .com.westone.skf.WST_PROTO_UINT32 ulEncryptedLen = 3;
  bool has_ulencryptedlen() const;
  void clear_ulencryptedlen();
  static const int kUlEncryptedLenFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& ulencryptedlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulencryptedlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulencryptedlen();
  void set_allocated_ulencryptedlen(::com::westone::skf::WST_PROTO_UINT32* ulencryptedlen);

  // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 5;
  bool has_puldatalen() const;
  void clear_puldatalen();
  static const int kPulDataLenFieldNumber = 5;
  const ::com::westone::skf::WST_PROTO_UINT32& puldatalen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_puldatalen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_puldatalen();
  void set_allocated_puldatalen(::com::westone::skf::WST_PROTO_UINT32* puldatalen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_DecryptUpdate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbencrypteddata_;
  ::google::protobuf::internal::ArenaStringPtr pbdata_;
  ::com::westone::skf::WST_PROTO_UINT32* hkey_;
  ::com::westone::skf::WST_PROTO_UINT32* ulencryptedlen_;
  ::com::westone::skf::WST_PROTO_UINT32* puldatalen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_DecryptUpdate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_DecryptUpdate) */ {
 public:
  Rsp_SKF_DecryptUpdate();
  virtual ~Rsp_SKF_DecryptUpdate();

  Rsp_SKF_DecryptUpdate(const Rsp_SKF_DecryptUpdate& from);

  inline Rsp_SKF_DecryptUpdate& operator=(const Rsp_SKF_DecryptUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_DecryptUpdate(Rsp_SKF_DecryptUpdate&& from) noexcept
    : Rsp_SKF_DecryptUpdate() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_DecryptUpdate& operator=(Rsp_SKF_DecryptUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_DecryptUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_DecryptUpdate* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_DecryptUpdate*>(
               &_Rsp_SKF_DecryptUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  void Swap(Rsp_SKF_DecryptUpdate* other);
  friend void swap(Rsp_SKF_DecryptUpdate& a, Rsp_SKF_DecryptUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_DecryptUpdate* New() const final {
    return CreateMaybeMessage<Rsp_SKF_DecryptUpdate>(nullptr);
  }

  Rsp_SKF_DecryptUpdate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_DecryptUpdate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_DecryptUpdate& from);
  void MergeFrom(const Rsp_SKF_DecryptUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_DecryptUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbData = 1;
  void clear_pbdata();
  static const int kPbDataFieldNumber = 1;
  const ::std::string& pbdata() const;
  void set_pbdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbdata(::std::string&& value);
  #endif
  void set_pbdata(const char* value);
  void set_pbdata(const void* value, size_t size);
  ::std::string* mutable_pbdata();
  ::std::string* release_pbdata();
  void set_allocated_pbdata(::std::string* pbdata);

  // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 2;
  bool has_puldatalen() const;
  void clear_puldatalen();
  static const int kPulDataLenFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& puldatalen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_puldatalen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_puldatalen();
  void set_allocated_puldatalen(::com::westone::skf::WST_PROTO_UINT32* puldatalen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_DecryptUpdate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbdata_;
  ::com::westone::skf::WST_PROTO_UINT32* puldatalen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_DecryptFinal final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_DecryptFinal) */ {
 public:
  Req_SKF_DecryptFinal();
  virtual ~Req_SKF_DecryptFinal();

  Req_SKF_DecryptFinal(const Req_SKF_DecryptFinal& from);

  inline Req_SKF_DecryptFinal& operator=(const Req_SKF_DecryptFinal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_DecryptFinal(Req_SKF_DecryptFinal&& from) noexcept
    : Req_SKF_DecryptFinal() {
    *this = ::std::move(from);
  }

  inline Req_SKF_DecryptFinal& operator=(Req_SKF_DecryptFinal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_DecryptFinal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_DecryptFinal* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_DecryptFinal*>(
               &_Req_SKF_DecryptFinal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  void Swap(Req_SKF_DecryptFinal* other);
  friend void swap(Req_SKF_DecryptFinal& a, Req_SKF_DecryptFinal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_DecryptFinal* New() const final {
    return CreateMaybeMessage<Req_SKF_DecryptFinal>(nullptr);
  }

  Req_SKF_DecryptFinal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_DecryptFinal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_DecryptFinal& from);
  void MergeFrom(const Req_SKF_DecryptFinal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_DecryptFinal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbPlainText = 2;
  void clear_pbplaintext();
  static const int kPbPlainTextFieldNumber = 2;
  const ::std::string& pbplaintext() const;
  void set_pbplaintext(const ::std::string& value);
  #if LANG_CXX11
  void set_pbplaintext(::std::string&& value);
  #endif
  void set_pbplaintext(const char* value);
  void set_pbplaintext(const void* value, size_t size);
  ::std::string* mutable_pbplaintext();
  ::std::string* release_pbplaintext();
  void set_allocated_pbplaintext(::std::string* pbplaintext);

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  bool has_hkey() const;
  void clear_hkey();
  static const int kHKeyFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hkey() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hkey();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hkey();
  void set_allocated_hkey(::com::westone::skf::WST_PROTO_UINT32* hkey);

  // .com.westone.skf.WST_PROTO_UINT32 pulPlainTextLen = 3;
  bool has_pulplaintextlen() const;
  void clear_pulplaintextlen();
  static const int kPulPlainTextLenFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& pulplaintextlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulplaintextlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulplaintextlen();
  void set_allocated_pulplaintextlen(::com::westone::skf::WST_PROTO_UINT32* pulplaintextlen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_DecryptFinal)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbplaintext_;
  ::com::westone::skf::WST_PROTO_UINT32* hkey_;
  ::com::westone::skf::WST_PROTO_UINT32* pulplaintextlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_DecryptFinal final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_DecryptFinal) */ {
 public:
  Rsp_SKF_DecryptFinal();
  virtual ~Rsp_SKF_DecryptFinal();

  Rsp_SKF_DecryptFinal(const Rsp_SKF_DecryptFinal& from);

  inline Rsp_SKF_DecryptFinal& operator=(const Rsp_SKF_DecryptFinal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_DecryptFinal(Rsp_SKF_DecryptFinal&& from) noexcept
    : Rsp_SKF_DecryptFinal() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_DecryptFinal& operator=(Rsp_SKF_DecryptFinal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_DecryptFinal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_DecryptFinal* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_DecryptFinal*>(
               &_Rsp_SKF_DecryptFinal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  void Swap(Rsp_SKF_DecryptFinal* other);
  friend void swap(Rsp_SKF_DecryptFinal& a, Rsp_SKF_DecryptFinal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_DecryptFinal* New() const final {
    return CreateMaybeMessage<Rsp_SKF_DecryptFinal>(nullptr);
  }

  Rsp_SKF_DecryptFinal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_DecryptFinal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_DecryptFinal& from);
  void MergeFrom(const Rsp_SKF_DecryptFinal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_DecryptFinal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbPlainText = 1;
  void clear_pbplaintext();
  static const int kPbPlainTextFieldNumber = 1;
  const ::std::string& pbplaintext() const;
  void set_pbplaintext(const ::std::string& value);
  #if LANG_CXX11
  void set_pbplaintext(::std::string&& value);
  #endif
  void set_pbplaintext(const char* value);
  void set_pbplaintext(const void* value, size_t size);
  ::std::string* mutable_pbplaintext();
  ::std::string* release_pbplaintext();
  void set_allocated_pbplaintext(::std::string* pbplaintext);

  // .com.westone.skf.WST_PROTO_UINT32 pulPlainTextLen = 2;
  bool has_pulplaintextlen() const;
  void clear_pulplaintextlen();
  static const int kPulPlainTextLenFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& pulplaintextlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulplaintextlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulplaintextlen();
  void set_allocated_pulplaintextlen(::com::westone::skf::WST_PROTO_UINT32* pulplaintextlen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_DecryptFinal)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbplaintext_;
  ::com::westone::skf::WST_PROTO_UINT32* pulplaintextlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_DigestInit final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_DigestInit) */ {
 public:
  Req_SKF_DigestInit();
  virtual ~Req_SKF_DigestInit();

  Req_SKF_DigestInit(const Req_SKF_DigestInit& from);

  inline Req_SKF_DigestInit& operator=(const Req_SKF_DigestInit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_DigestInit(Req_SKF_DigestInit&& from) noexcept
    : Req_SKF_DigestInit() {
    *this = ::std::move(from);
  }

  inline Req_SKF_DigestInit& operator=(Req_SKF_DigestInit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_DigestInit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_DigestInit* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_DigestInit*>(
               &_Req_SKF_DigestInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  void Swap(Req_SKF_DigestInit* other);
  friend void swap(Req_SKF_DigestInit& a, Req_SKF_DigestInit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_DigestInit* New() const final {
    return CreateMaybeMessage<Req_SKF_DigestInit>(nullptr);
  }

  Req_SKF_DigestInit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_DigestInit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_DigestInit& from);
  void MergeFrom(const Req_SKF_DigestInit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_DigestInit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pucID = 4;
  void clear_pucid();
  static const int kPucIDFieldNumber = 4;
  const ::std::string& pucid() const;
  void set_pucid(const ::std::string& value);
  #if LANG_CXX11
  void set_pucid(::std::string&& value);
  #endif
  void set_pucid(const char* value);
  void set_pucid(const void* value, size_t size);
  ::std::string* mutable_pucid();
  ::std::string* release_pucid();
  void set_allocated_pucid(::std::string* pucid);

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  bool has_hdev() const;
  void clear_hdev();
  static const int kHDevFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hdev() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hdev();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hdev();
  void set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev);

  // .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
  bool has_ulalgid() const;
  void clear_ulalgid();
  static const int kUlAlgIDFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& ulalgid() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulalgid();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulalgid();
  void set_allocated_ulalgid(::com::westone::skf::WST_PROTO_UINT32* ulalgid);

  // .com.westone.skf.SKF_ECCPUBLICKEYBLOB pPubKey = 3;
  bool has_ppubkey() const;
  void clear_ppubkey();
  static const int kPPubKeyFieldNumber = 3;
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& ppubkey() const;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* release_ppubkey();
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* mutable_ppubkey();
  void set_allocated_ppubkey(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* ppubkey);

  // .com.westone.skf.WST_PROTO_UINT32 ulIDLen = 5;
  bool has_ulidlen() const;
  void clear_ulidlen();
  static const int kUlIDLenFieldNumber = 5;
  const ::com::westone::skf::WST_PROTO_UINT32& ulidlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulidlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulidlen();
  void set_allocated_ulidlen(::com::westone::skf::WST_PROTO_UINT32* ulidlen);

  // .com.westone.skf.WST_PROTO_UINT32 phHash = 6;
  bool has_phhash() const;
  void clear_phhash();
  static const int kPhHashFieldNumber = 6;
  const ::com::westone::skf::WST_PROTO_UINT32& phhash() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_phhash();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_phhash();
  void set_allocated_phhash(::com::westone::skf::WST_PROTO_UINT32* phhash);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_DigestInit)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pucid_;
  ::com::westone::skf::WST_PROTO_UINT32* hdev_;
  ::com::westone::skf::WST_PROTO_UINT32* ulalgid_;
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* ppubkey_;
  ::com::westone::skf::WST_PROTO_UINT32* ulidlen_;
  ::com::westone::skf::WST_PROTO_UINT32* phhash_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_DigestInit final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_DigestInit) */ {
 public:
  Rsp_SKF_DigestInit();
  virtual ~Rsp_SKF_DigestInit();

  Rsp_SKF_DigestInit(const Rsp_SKF_DigestInit& from);

  inline Rsp_SKF_DigestInit& operator=(const Rsp_SKF_DigestInit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_DigestInit(Rsp_SKF_DigestInit&& from) noexcept
    : Rsp_SKF_DigestInit() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_DigestInit& operator=(Rsp_SKF_DigestInit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_DigestInit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_DigestInit* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_DigestInit*>(
               &_Rsp_SKF_DigestInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  void Swap(Rsp_SKF_DigestInit* other);
  friend void swap(Rsp_SKF_DigestInit& a, Rsp_SKF_DigestInit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_DigestInit* New() const final {
    return CreateMaybeMessage<Rsp_SKF_DigestInit>(nullptr);
  }

  Rsp_SKF_DigestInit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_DigestInit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_DigestInit& from);
  void MergeFrom(const Rsp_SKF_DigestInit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_DigestInit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 phHash = 1;
  bool has_phhash() const;
  void clear_phhash();
  static const int kPhHashFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& phhash() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_phhash();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_phhash();
  void set_allocated_phhash(::com::westone::skf::WST_PROTO_UINT32* phhash);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_DigestInit)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* phhash_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_Digest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_Digest) */ {
 public:
  Req_SKF_Digest();
  virtual ~Req_SKF_Digest();

  Req_SKF_Digest(const Req_SKF_Digest& from);

  inline Req_SKF_Digest& operator=(const Req_SKF_Digest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_Digest(Req_SKF_Digest&& from) noexcept
    : Req_SKF_Digest() {
    *this = ::std::move(from);
  }

  inline Req_SKF_Digest& operator=(Req_SKF_Digest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_Digest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_Digest* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_Digest*>(
               &_Req_SKF_Digest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  void Swap(Req_SKF_Digest* other);
  friend void swap(Req_SKF_Digest& a, Req_SKF_Digest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_Digest* New() const final {
    return CreateMaybeMessage<Req_SKF_Digest>(nullptr);
  }

  Req_SKF_Digest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_Digest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_Digest& from);
  void MergeFrom(const Req_SKF_Digest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_Digest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbData = 2;
  void clear_pbdata();
  static const int kPbDataFieldNumber = 2;
  const ::std::string& pbdata() const;
  void set_pbdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbdata(::std::string&& value);
  #endif
  void set_pbdata(const char* value);
  void set_pbdata(const void* value, size_t size);
  ::std::string* mutable_pbdata();
  ::std::string* release_pbdata();
  void set_allocated_pbdata(::std::string* pbdata);

  // bytes pbHashData = 4;
  void clear_pbhashdata();
  static const int kPbHashDataFieldNumber = 4;
  const ::std::string& pbhashdata() const;
  void set_pbhashdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbhashdata(::std::string&& value);
  #endif
  void set_pbhashdata(const char* value);
  void set_pbhashdata(const void* value, size_t size);
  ::std::string* mutable_pbhashdata();
  ::std::string* release_pbhashdata();
  void set_allocated_pbhashdata(::std::string* pbhashdata);

  // .com.westone.skf.WST_PROTO_UINT32 hHash = 1;
  bool has_hhash() const;
  void clear_hhash();
  static const int kHHashFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hhash() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hhash();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hhash();
  void set_allocated_hhash(::com::westone::skf::WST_PROTO_UINT32* hhash);

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  bool has_uldatalen() const;
  void clear_uldatalen();
  static const int kUlDataLenFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& uldatalen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_uldatalen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_uldatalen();
  void set_allocated_uldatalen(::com::westone::skf::WST_PROTO_UINT32* uldatalen);

  // .com.westone.skf.WST_PROTO_UINT32 pulHashLen = 5;
  bool has_pulhashlen() const;
  void clear_pulhashlen();
  static const int kPulHashLenFieldNumber = 5;
  const ::com::westone::skf::WST_PROTO_UINT32& pulhashlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulhashlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulhashlen();
  void set_allocated_pulhashlen(::com::westone::skf::WST_PROTO_UINT32* pulhashlen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_Digest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbdata_;
  ::google::protobuf::internal::ArenaStringPtr pbhashdata_;
  ::com::westone::skf::WST_PROTO_UINT32* hhash_;
  ::com::westone::skf::WST_PROTO_UINT32* uldatalen_;
  ::com::westone::skf::WST_PROTO_UINT32* pulhashlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_Digest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_Digest) */ {
 public:
  Rsp_SKF_Digest();
  virtual ~Rsp_SKF_Digest();

  Rsp_SKF_Digest(const Rsp_SKF_Digest& from);

  inline Rsp_SKF_Digest& operator=(const Rsp_SKF_Digest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_Digest(Rsp_SKF_Digest&& from) noexcept
    : Rsp_SKF_Digest() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_Digest& operator=(Rsp_SKF_Digest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_Digest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_Digest* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_Digest*>(
               &_Rsp_SKF_Digest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  void Swap(Rsp_SKF_Digest* other);
  friend void swap(Rsp_SKF_Digest& a, Rsp_SKF_Digest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_Digest* New() const final {
    return CreateMaybeMessage<Rsp_SKF_Digest>(nullptr);
  }

  Rsp_SKF_Digest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_Digest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_Digest& from);
  void MergeFrom(const Rsp_SKF_Digest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_Digest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbHashData = 1;
  void clear_pbhashdata();
  static const int kPbHashDataFieldNumber = 1;
  const ::std::string& pbhashdata() const;
  void set_pbhashdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbhashdata(::std::string&& value);
  #endif
  void set_pbhashdata(const char* value);
  void set_pbhashdata(const void* value, size_t size);
  ::std::string* mutable_pbhashdata();
  ::std::string* release_pbhashdata();
  void set_allocated_pbhashdata(::std::string* pbhashdata);

  // .com.westone.skf.WST_PROTO_UINT32 pulHashLen = 2;
  bool has_pulhashlen() const;
  void clear_pulhashlen();
  static const int kPulHashLenFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& pulhashlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulhashlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulhashlen();
  void set_allocated_pulhashlen(::com::westone::skf::WST_PROTO_UINT32* pulhashlen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_Digest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbhashdata_;
  ::com::westone::skf::WST_PROTO_UINT32* pulhashlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_DigestUpdate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_DigestUpdate) */ {
 public:
  Req_SKF_DigestUpdate();
  virtual ~Req_SKF_DigestUpdate();

  Req_SKF_DigestUpdate(const Req_SKF_DigestUpdate& from);

  inline Req_SKF_DigestUpdate& operator=(const Req_SKF_DigestUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_DigestUpdate(Req_SKF_DigestUpdate&& from) noexcept
    : Req_SKF_DigestUpdate() {
    *this = ::std::move(from);
  }

  inline Req_SKF_DigestUpdate& operator=(Req_SKF_DigestUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_DigestUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_DigestUpdate* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_DigestUpdate*>(
               &_Req_SKF_DigestUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    149;

  void Swap(Req_SKF_DigestUpdate* other);
  friend void swap(Req_SKF_DigestUpdate& a, Req_SKF_DigestUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_DigestUpdate* New() const final {
    return CreateMaybeMessage<Req_SKF_DigestUpdate>(nullptr);
  }

  Req_SKF_DigestUpdate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_DigestUpdate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_DigestUpdate& from);
  void MergeFrom(const Req_SKF_DigestUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_DigestUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbData = 2;
  void clear_pbdata();
  static const int kPbDataFieldNumber = 2;
  const ::std::string& pbdata() const;
  void set_pbdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbdata(::std::string&& value);
  #endif
  void set_pbdata(const char* value);
  void set_pbdata(const void* value, size_t size);
  ::std::string* mutable_pbdata();
  ::std::string* release_pbdata();
  void set_allocated_pbdata(::std::string* pbdata);

  // .com.westone.skf.WST_PROTO_UINT32 hHash = 1;
  bool has_hhash() const;
  void clear_hhash();
  static const int kHHashFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hhash() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hhash();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hhash();
  void set_allocated_hhash(::com::westone::skf::WST_PROTO_UINT32* hhash);

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  bool has_uldatalen() const;
  void clear_uldatalen();
  static const int kUlDataLenFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& uldatalen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_uldatalen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_uldatalen();
  void set_allocated_uldatalen(::com::westone::skf::WST_PROTO_UINT32* uldatalen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_DigestUpdate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbdata_;
  ::com::westone::skf::WST_PROTO_UINT32* hhash_;
  ::com::westone::skf::WST_PROTO_UINT32* uldatalen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_DigestUpdate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_DigestUpdate) */ {
 public:
  Rsp_SKF_DigestUpdate();
  virtual ~Rsp_SKF_DigestUpdate();

  Rsp_SKF_DigestUpdate(const Rsp_SKF_DigestUpdate& from);

  inline Rsp_SKF_DigestUpdate& operator=(const Rsp_SKF_DigestUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_DigestUpdate(Rsp_SKF_DigestUpdate&& from) noexcept
    : Rsp_SKF_DigestUpdate() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_DigestUpdate& operator=(Rsp_SKF_DigestUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_DigestUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_DigestUpdate* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_DigestUpdate*>(
               &_Rsp_SKF_DigestUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  void Swap(Rsp_SKF_DigestUpdate* other);
  friend void swap(Rsp_SKF_DigestUpdate& a, Rsp_SKF_DigestUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_DigestUpdate* New() const final {
    return CreateMaybeMessage<Rsp_SKF_DigestUpdate>(nullptr);
  }

  Rsp_SKF_DigestUpdate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_DigestUpdate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_DigestUpdate& from);
  void MergeFrom(const Rsp_SKF_DigestUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_DigestUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_DigestUpdate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_DigestFinal final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_DigestFinal) */ {
 public:
  Req_SKF_DigestFinal();
  virtual ~Req_SKF_DigestFinal();

  Req_SKF_DigestFinal(const Req_SKF_DigestFinal& from);

  inline Req_SKF_DigestFinal& operator=(const Req_SKF_DigestFinal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_DigestFinal(Req_SKF_DigestFinal&& from) noexcept
    : Req_SKF_DigestFinal() {
    *this = ::std::move(from);
  }

  inline Req_SKF_DigestFinal& operator=(Req_SKF_DigestFinal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_DigestFinal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_DigestFinal* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_DigestFinal*>(
               &_Req_SKF_DigestFinal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    151;

  void Swap(Req_SKF_DigestFinal* other);
  friend void swap(Req_SKF_DigestFinal& a, Req_SKF_DigestFinal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_DigestFinal* New() const final {
    return CreateMaybeMessage<Req_SKF_DigestFinal>(nullptr);
  }

  Req_SKF_DigestFinal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_DigestFinal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_DigestFinal& from);
  void MergeFrom(const Req_SKF_DigestFinal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_DigestFinal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pHashData = 2;
  void clear_phashdata();
  static const int kPHashDataFieldNumber = 2;
  const ::std::string& phashdata() const;
  void set_phashdata(const ::std::string& value);
  #if LANG_CXX11
  void set_phashdata(::std::string&& value);
  #endif
  void set_phashdata(const char* value);
  void set_phashdata(const void* value, size_t size);
  ::std::string* mutable_phashdata();
  ::std::string* release_phashdata();
  void set_allocated_phashdata(::std::string* phashdata);

  // .com.westone.skf.WST_PROTO_UINT32 hHash = 1;
  bool has_hhash() const;
  void clear_hhash();
  static const int kHHashFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hhash() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hhash();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hhash();
  void set_allocated_hhash(::com::westone::skf::WST_PROTO_UINT32* hhash);

  // .com.westone.skf.WST_PROTO_UINT32 pulHashLen = 3;
  bool has_pulhashlen() const;
  void clear_pulhashlen();
  static const int kPulHashLenFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& pulhashlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulhashlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulhashlen();
  void set_allocated_pulhashlen(::com::westone::skf::WST_PROTO_UINT32* pulhashlen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_DigestFinal)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr phashdata_;
  ::com::westone::skf::WST_PROTO_UINT32* hhash_;
  ::com::westone::skf::WST_PROTO_UINT32* pulhashlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_DigestFinal final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_DigestFinal) */ {
 public:
  Rsp_SKF_DigestFinal();
  virtual ~Rsp_SKF_DigestFinal();

  Rsp_SKF_DigestFinal(const Rsp_SKF_DigestFinal& from);

  inline Rsp_SKF_DigestFinal& operator=(const Rsp_SKF_DigestFinal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_DigestFinal(Rsp_SKF_DigestFinal&& from) noexcept
    : Rsp_SKF_DigestFinal() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_DigestFinal& operator=(Rsp_SKF_DigestFinal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_DigestFinal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_DigestFinal* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_DigestFinal*>(
               &_Rsp_SKF_DigestFinal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    152;

  void Swap(Rsp_SKF_DigestFinal* other);
  friend void swap(Rsp_SKF_DigestFinal& a, Rsp_SKF_DigestFinal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_DigestFinal* New() const final {
    return CreateMaybeMessage<Rsp_SKF_DigestFinal>(nullptr);
  }

  Rsp_SKF_DigestFinal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_DigestFinal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_DigestFinal& from);
  void MergeFrom(const Rsp_SKF_DigestFinal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_DigestFinal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pHashData = 1;
  void clear_phashdata();
  static const int kPHashDataFieldNumber = 1;
  const ::std::string& phashdata() const;
  void set_phashdata(const ::std::string& value);
  #if LANG_CXX11
  void set_phashdata(::std::string&& value);
  #endif
  void set_phashdata(const char* value);
  void set_phashdata(const void* value, size_t size);
  ::std::string* mutable_phashdata();
  ::std::string* release_phashdata();
  void set_allocated_phashdata(::std::string* phashdata);

  // .com.westone.skf.WST_PROTO_UINT32 pulHashLen = 2;
  bool has_pulhashlen() const;
  void clear_pulhashlen();
  static const int kPulHashLenFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& pulhashlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulhashlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulhashlen();
  void set_allocated_pulhashlen(::com::westone::skf::WST_PROTO_UINT32* pulhashlen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_DigestFinal)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr phashdata_;
  ::com::westone::skf::WST_PROTO_UINT32* pulhashlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_MacInit final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_MacInit) */ {
 public:
  Req_SKF_MacInit();
  virtual ~Req_SKF_MacInit();

  Req_SKF_MacInit(const Req_SKF_MacInit& from);

  inline Req_SKF_MacInit& operator=(const Req_SKF_MacInit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_MacInit(Req_SKF_MacInit&& from) noexcept
    : Req_SKF_MacInit() {
    *this = ::std::move(from);
  }

  inline Req_SKF_MacInit& operator=(Req_SKF_MacInit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_MacInit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_MacInit* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_MacInit*>(
               &_Req_SKF_MacInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    153;

  void Swap(Req_SKF_MacInit* other);
  friend void swap(Req_SKF_MacInit& a, Req_SKF_MacInit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_MacInit* New() const final {
    return CreateMaybeMessage<Req_SKF_MacInit>(nullptr);
  }

  Req_SKF_MacInit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_MacInit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_MacInit& from);
  void MergeFrom(const Req_SKF_MacInit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_MacInit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
  bool has_hkey() const;
  void clear_hkey();
  static const int kHKeyFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hkey() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hkey();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hkey();
  void set_allocated_hkey(::com::westone::skf::WST_PROTO_UINT32* hkey);

  // .com.westone.skf.SKF_BLOCKCIPHERPARAM MacParam = 2;
  bool has_macparam() const;
  void clear_macparam();
  static const int kMacParamFieldNumber = 2;
  const ::com::westone::skf::SKF_BLOCKCIPHERPARAM& macparam() const;
  ::com::westone::skf::SKF_BLOCKCIPHERPARAM* release_macparam();
  ::com::westone::skf::SKF_BLOCKCIPHERPARAM* mutable_macparam();
  void set_allocated_macparam(::com::westone::skf::SKF_BLOCKCIPHERPARAM* macparam);

  // .com.westone.skf.WST_PROTO_UINT32 phMac = 3;
  bool has_phmac() const;
  void clear_phmac();
  static const int kPhMacFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& phmac() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_phmac();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_phmac();
  void set_allocated_phmac(::com::westone::skf::WST_PROTO_UINT32* phmac);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_MacInit)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* hkey_;
  ::com::westone::skf::SKF_BLOCKCIPHERPARAM* macparam_;
  ::com::westone::skf::WST_PROTO_UINT32* phmac_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_MacInit final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_MacInit) */ {
 public:
  Rsp_SKF_MacInit();
  virtual ~Rsp_SKF_MacInit();

  Rsp_SKF_MacInit(const Rsp_SKF_MacInit& from);

  inline Rsp_SKF_MacInit& operator=(const Rsp_SKF_MacInit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_MacInit(Rsp_SKF_MacInit&& from) noexcept
    : Rsp_SKF_MacInit() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_MacInit& operator=(Rsp_SKF_MacInit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_MacInit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_MacInit* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_MacInit*>(
               &_Rsp_SKF_MacInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    154;

  void Swap(Rsp_SKF_MacInit* other);
  friend void swap(Rsp_SKF_MacInit& a, Rsp_SKF_MacInit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_MacInit* New() const final {
    return CreateMaybeMessage<Rsp_SKF_MacInit>(nullptr);
  }

  Rsp_SKF_MacInit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_MacInit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_MacInit& from);
  void MergeFrom(const Rsp_SKF_MacInit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_MacInit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 phMac = 1;
  bool has_phmac() const;
  void clear_phmac();
  static const int kPhMacFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& phmac() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_phmac();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_phmac();
  void set_allocated_phmac(::com::westone::skf::WST_PROTO_UINT32* phmac);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_MacInit)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* phmac_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_Mac final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_Mac) */ {
 public:
  Req_SKF_Mac();
  virtual ~Req_SKF_Mac();

  Req_SKF_Mac(const Req_SKF_Mac& from);

  inline Req_SKF_Mac& operator=(const Req_SKF_Mac& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_Mac(Req_SKF_Mac&& from) noexcept
    : Req_SKF_Mac() {
    *this = ::std::move(from);
  }

  inline Req_SKF_Mac& operator=(Req_SKF_Mac&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_Mac& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_Mac* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_Mac*>(
               &_Req_SKF_Mac_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    155;

  void Swap(Req_SKF_Mac* other);
  friend void swap(Req_SKF_Mac& a, Req_SKF_Mac& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_Mac* New() const final {
    return CreateMaybeMessage<Req_SKF_Mac>(nullptr);
  }

  Req_SKF_Mac* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_Mac>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_Mac& from);
  void MergeFrom(const Req_SKF_Mac& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_Mac* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbData = 2;
  void clear_pbdata();
  static const int kPbDataFieldNumber = 2;
  const ::std::string& pbdata() const;
  void set_pbdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbdata(::std::string&& value);
  #endif
  void set_pbdata(const char* value);
  void set_pbdata(const void* value, size_t size);
  ::std::string* mutable_pbdata();
  ::std::string* release_pbdata();
  void set_allocated_pbdata(::std::string* pbdata);

  // bytes pbMacData = 4;
  void clear_pbmacdata();
  static const int kPbMacDataFieldNumber = 4;
  const ::std::string& pbmacdata() const;
  void set_pbmacdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbmacdata(::std::string&& value);
  #endif
  void set_pbmacdata(const char* value);
  void set_pbmacdata(const void* value, size_t size);
  ::std::string* mutable_pbmacdata();
  ::std::string* release_pbmacdata();
  void set_allocated_pbmacdata(::std::string* pbmacdata);

  // .com.westone.skf.WST_PROTO_UINT32 hMac = 1;
  bool has_hmac() const;
  void clear_hmac();
  static const int kHMacFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hmac() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hmac();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hmac();
  void set_allocated_hmac(::com::westone::skf::WST_PROTO_UINT32* hmac);

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  bool has_uldatalen() const;
  void clear_uldatalen();
  static const int kUlDataLenFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& uldatalen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_uldatalen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_uldatalen();
  void set_allocated_uldatalen(::com::westone::skf::WST_PROTO_UINT32* uldatalen);

  // .com.westone.skf.WST_PROTO_UINT32 pulMacLen = 5;
  bool has_pulmaclen() const;
  void clear_pulmaclen();
  static const int kPulMacLenFieldNumber = 5;
  const ::com::westone::skf::WST_PROTO_UINT32& pulmaclen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulmaclen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulmaclen();
  void set_allocated_pulmaclen(::com::westone::skf::WST_PROTO_UINT32* pulmaclen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_Mac)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbdata_;
  ::google::protobuf::internal::ArenaStringPtr pbmacdata_;
  ::com::westone::skf::WST_PROTO_UINT32* hmac_;
  ::com::westone::skf::WST_PROTO_UINT32* uldatalen_;
  ::com::westone::skf::WST_PROTO_UINT32* pulmaclen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_Mac final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_Mac) */ {
 public:
  Rsp_SKF_Mac();
  virtual ~Rsp_SKF_Mac();

  Rsp_SKF_Mac(const Rsp_SKF_Mac& from);

  inline Rsp_SKF_Mac& operator=(const Rsp_SKF_Mac& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_Mac(Rsp_SKF_Mac&& from) noexcept
    : Rsp_SKF_Mac() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_Mac& operator=(Rsp_SKF_Mac&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_Mac& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_Mac* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_Mac*>(
               &_Rsp_SKF_Mac_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    156;

  void Swap(Rsp_SKF_Mac* other);
  friend void swap(Rsp_SKF_Mac& a, Rsp_SKF_Mac& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_Mac* New() const final {
    return CreateMaybeMessage<Rsp_SKF_Mac>(nullptr);
  }

  Rsp_SKF_Mac* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_Mac>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_Mac& from);
  void MergeFrom(const Rsp_SKF_Mac& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_Mac* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbMacData = 1;
  void clear_pbmacdata();
  static const int kPbMacDataFieldNumber = 1;
  const ::std::string& pbmacdata() const;
  void set_pbmacdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbmacdata(::std::string&& value);
  #endif
  void set_pbmacdata(const char* value);
  void set_pbmacdata(const void* value, size_t size);
  ::std::string* mutable_pbmacdata();
  ::std::string* release_pbmacdata();
  void set_allocated_pbmacdata(::std::string* pbmacdata);

  // .com.westone.skf.WST_PROTO_UINT32 pulMacLen = 2;
  bool has_pulmaclen() const;
  void clear_pulmaclen();
  static const int kPulMacLenFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& pulmaclen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulmaclen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulmaclen();
  void set_allocated_pulmaclen(::com::westone::skf::WST_PROTO_UINT32* pulmaclen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_Mac)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbmacdata_;
  ::com::westone::skf::WST_PROTO_UINT32* pulmaclen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_MacUpdate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_MacUpdate) */ {
 public:
  Req_SKF_MacUpdate();
  virtual ~Req_SKF_MacUpdate();

  Req_SKF_MacUpdate(const Req_SKF_MacUpdate& from);

  inline Req_SKF_MacUpdate& operator=(const Req_SKF_MacUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_MacUpdate(Req_SKF_MacUpdate&& from) noexcept
    : Req_SKF_MacUpdate() {
    *this = ::std::move(from);
  }

  inline Req_SKF_MacUpdate& operator=(Req_SKF_MacUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_MacUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_MacUpdate* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_MacUpdate*>(
               &_Req_SKF_MacUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    157;

  void Swap(Req_SKF_MacUpdate* other);
  friend void swap(Req_SKF_MacUpdate& a, Req_SKF_MacUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_MacUpdate* New() const final {
    return CreateMaybeMessage<Req_SKF_MacUpdate>(nullptr);
  }

  Req_SKF_MacUpdate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_MacUpdate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_MacUpdate& from);
  void MergeFrom(const Req_SKF_MacUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_MacUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbData = 2;
  void clear_pbdata();
  static const int kPbDataFieldNumber = 2;
  const ::std::string& pbdata() const;
  void set_pbdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbdata(::std::string&& value);
  #endif
  void set_pbdata(const char* value);
  void set_pbdata(const void* value, size_t size);
  ::std::string* mutable_pbdata();
  ::std::string* release_pbdata();
  void set_allocated_pbdata(::std::string* pbdata);

  // .com.westone.skf.WST_PROTO_UINT32 hMac = 1;
  bool has_hmac() const;
  void clear_hmac();
  static const int kHMacFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hmac() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hmac();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hmac();
  void set_allocated_hmac(::com::westone::skf::WST_PROTO_UINT32* hmac);

  // .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
  bool has_uldatalen() const;
  void clear_uldatalen();
  static const int kUlDataLenFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& uldatalen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_uldatalen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_uldatalen();
  void set_allocated_uldatalen(::com::westone::skf::WST_PROTO_UINT32* uldatalen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_MacUpdate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbdata_;
  ::com::westone::skf::WST_PROTO_UINT32* hmac_;
  ::com::westone::skf::WST_PROTO_UINT32* uldatalen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_MacUpdate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_MacUpdate) */ {
 public:
  Rsp_SKF_MacUpdate();
  virtual ~Rsp_SKF_MacUpdate();

  Rsp_SKF_MacUpdate(const Rsp_SKF_MacUpdate& from);

  inline Rsp_SKF_MacUpdate& operator=(const Rsp_SKF_MacUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_MacUpdate(Rsp_SKF_MacUpdate&& from) noexcept
    : Rsp_SKF_MacUpdate() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_MacUpdate& operator=(Rsp_SKF_MacUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_MacUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_MacUpdate* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_MacUpdate*>(
               &_Rsp_SKF_MacUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    158;

  void Swap(Rsp_SKF_MacUpdate* other);
  friend void swap(Rsp_SKF_MacUpdate& a, Rsp_SKF_MacUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_MacUpdate* New() const final {
    return CreateMaybeMessage<Rsp_SKF_MacUpdate>(nullptr);
  }

  Rsp_SKF_MacUpdate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_MacUpdate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_MacUpdate& from);
  void MergeFrom(const Rsp_SKF_MacUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_MacUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_MacUpdate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_MacFinal final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_MacFinal) */ {
 public:
  Req_SKF_MacFinal();
  virtual ~Req_SKF_MacFinal();

  Req_SKF_MacFinal(const Req_SKF_MacFinal& from);

  inline Req_SKF_MacFinal& operator=(const Req_SKF_MacFinal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_MacFinal(Req_SKF_MacFinal&& from) noexcept
    : Req_SKF_MacFinal() {
    *this = ::std::move(from);
  }

  inline Req_SKF_MacFinal& operator=(Req_SKF_MacFinal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_MacFinal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_MacFinal* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_MacFinal*>(
               &_Req_SKF_MacFinal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    159;

  void Swap(Req_SKF_MacFinal* other);
  friend void swap(Req_SKF_MacFinal& a, Req_SKF_MacFinal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_MacFinal* New() const final {
    return CreateMaybeMessage<Req_SKF_MacFinal>(nullptr);
  }

  Req_SKF_MacFinal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_MacFinal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_MacFinal& from);
  void MergeFrom(const Req_SKF_MacFinal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_MacFinal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbMacData = 2;
  void clear_pbmacdata();
  static const int kPbMacDataFieldNumber = 2;
  const ::std::string& pbmacdata() const;
  void set_pbmacdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbmacdata(::std::string&& value);
  #endif
  void set_pbmacdata(const char* value);
  void set_pbmacdata(const void* value, size_t size);
  ::std::string* mutable_pbmacdata();
  ::std::string* release_pbmacdata();
  void set_allocated_pbmacdata(::std::string* pbmacdata);

  // .com.westone.skf.WST_PROTO_UINT32 hMac = 1;
  bool has_hmac() const;
  void clear_hmac();
  static const int kHMacFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hmac() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hmac();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hmac();
  void set_allocated_hmac(::com::westone::skf::WST_PROTO_UINT32* hmac);

  // .com.westone.skf.WST_PROTO_UINT32 pulMacDataLen = 3;
  bool has_pulmacdatalen() const;
  void clear_pulmacdatalen();
  static const int kPulMacDataLenFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& pulmacdatalen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulmacdatalen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulmacdatalen();
  void set_allocated_pulmacdatalen(::com::westone::skf::WST_PROTO_UINT32* pulmacdatalen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_MacFinal)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbmacdata_;
  ::com::westone::skf::WST_PROTO_UINT32* hmac_;
  ::com::westone::skf::WST_PROTO_UINT32* pulmacdatalen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_MacFinal final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_MacFinal) */ {
 public:
  Rsp_SKF_MacFinal();
  virtual ~Rsp_SKF_MacFinal();

  Rsp_SKF_MacFinal(const Rsp_SKF_MacFinal& from);

  inline Rsp_SKF_MacFinal& operator=(const Rsp_SKF_MacFinal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_MacFinal(Rsp_SKF_MacFinal&& from) noexcept
    : Rsp_SKF_MacFinal() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_MacFinal& operator=(Rsp_SKF_MacFinal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_MacFinal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_MacFinal* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_MacFinal*>(
               &_Rsp_SKF_MacFinal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    160;

  void Swap(Rsp_SKF_MacFinal* other);
  friend void swap(Rsp_SKF_MacFinal& a, Rsp_SKF_MacFinal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_MacFinal* New() const final {
    return CreateMaybeMessage<Rsp_SKF_MacFinal>(nullptr);
  }

  Rsp_SKF_MacFinal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_MacFinal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_MacFinal& from);
  void MergeFrom(const Rsp_SKF_MacFinal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_MacFinal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbMacData = 2;
  void clear_pbmacdata();
  static const int kPbMacDataFieldNumber = 2;
  const ::std::string& pbmacdata() const;
  void set_pbmacdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbmacdata(::std::string&& value);
  #endif
  void set_pbmacdata(const char* value);
  void set_pbmacdata(const void* value, size_t size);
  ::std::string* mutable_pbmacdata();
  ::std::string* release_pbmacdata();
  void set_allocated_pbmacdata(::std::string* pbmacdata);

  // .com.westone.skf.WST_PROTO_UINT32 pulMacDataLen = 3;
  bool has_pulmacdatalen() const;
  void clear_pulmacdatalen();
  static const int kPulMacDataLenFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& pulmacdatalen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulmacdatalen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulmacdatalen();
  void set_allocated_pulmacdatalen(::com::westone::skf::WST_PROTO_UINT32* pulmacdatalen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_MacFinal)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbmacdata_;
  ::com::westone::skf::WST_PROTO_UINT32* pulmacdatalen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_CloseHandle final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_CloseHandle) */ {
 public:
  Req_SKF_CloseHandle();
  virtual ~Req_SKF_CloseHandle();

  Req_SKF_CloseHandle(const Req_SKF_CloseHandle& from);

  inline Req_SKF_CloseHandle& operator=(const Req_SKF_CloseHandle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_CloseHandle(Req_SKF_CloseHandle&& from) noexcept
    : Req_SKF_CloseHandle() {
    *this = ::std::move(from);
  }

  inline Req_SKF_CloseHandle& operator=(Req_SKF_CloseHandle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_CloseHandle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_CloseHandle* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_CloseHandle*>(
               &_Req_SKF_CloseHandle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    161;

  void Swap(Req_SKF_CloseHandle* other);
  friend void swap(Req_SKF_CloseHandle& a, Req_SKF_CloseHandle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_CloseHandle* New() const final {
    return CreateMaybeMessage<Req_SKF_CloseHandle>(nullptr);
  }

  Req_SKF_CloseHandle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_CloseHandle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_CloseHandle& from);
  void MergeFrom(const Req_SKF_CloseHandle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_CloseHandle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 hHandle = 1;
  bool has_hhandle() const;
  void clear_hhandle();
  static const int kHHandleFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hhandle() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hhandle();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hhandle();
  void set_allocated_hhandle(::com::westone::skf::WST_PROTO_UINT32* hhandle);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_CloseHandle)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* hhandle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_CloseHandle final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_CloseHandle) */ {
 public:
  Rsp_SKF_CloseHandle();
  virtual ~Rsp_SKF_CloseHandle();

  Rsp_SKF_CloseHandle(const Rsp_SKF_CloseHandle& from);

  inline Rsp_SKF_CloseHandle& operator=(const Rsp_SKF_CloseHandle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_CloseHandle(Rsp_SKF_CloseHandle&& from) noexcept
    : Rsp_SKF_CloseHandle() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_CloseHandle& operator=(Rsp_SKF_CloseHandle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_CloseHandle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_CloseHandle* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_CloseHandle*>(
               &_Rsp_SKF_CloseHandle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    162;

  void Swap(Rsp_SKF_CloseHandle* other);
  friend void swap(Rsp_SKF_CloseHandle& a, Rsp_SKF_CloseHandle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_CloseHandle* New() const final {
    return CreateMaybeMessage<Rsp_SKF_CloseHandle>(nullptr);
  }

  Rsp_SKF_CloseHandle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_CloseHandle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_CloseHandle& from);
  void MergeFrom(const Rsp_SKF_CloseHandle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_CloseHandle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_CloseHandle)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_Transmit final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_Transmit) */ {
 public:
  Req_SKF_Transmit();
  virtual ~Req_SKF_Transmit();

  Req_SKF_Transmit(const Req_SKF_Transmit& from);

  inline Req_SKF_Transmit& operator=(const Req_SKF_Transmit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_Transmit(Req_SKF_Transmit&& from) noexcept
    : Req_SKF_Transmit() {
    *this = ::std::move(from);
  }

  inline Req_SKF_Transmit& operator=(Req_SKF_Transmit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_Transmit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_Transmit* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_Transmit*>(
               &_Req_SKF_Transmit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    163;

  void Swap(Req_SKF_Transmit* other);
  friend void swap(Req_SKF_Transmit& a, Req_SKF_Transmit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_Transmit* New() const final {
    return CreateMaybeMessage<Req_SKF_Transmit>(nullptr);
  }

  Req_SKF_Transmit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_Transmit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_Transmit& from);
  void MergeFrom(const Req_SKF_Transmit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_Transmit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbCommand = 2;
  void clear_pbcommand();
  static const int kPbCommandFieldNumber = 2;
  const ::std::string& pbcommand() const;
  void set_pbcommand(const ::std::string& value);
  #if LANG_CXX11
  void set_pbcommand(::std::string&& value);
  #endif
  void set_pbcommand(const char* value);
  void set_pbcommand(const void* value, size_t size);
  ::std::string* mutable_pbcommand();
  ::std::string* release_pbcommand();
  void set_allocated_pbcommand(::std::string* pbcommand);

  // bytes pbData = 4;
  void clear_pbdata();
  static const int kPbDataFieldNumber = 4;
  const ::std::string& pbdata() const;
  void set_pbdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbdata(::std::string&& value);
  #endif
  void set_pbdata(const char* value);
  void set_pbdata(const void* value, size_t size);
  ::std::string* mutable_pbdata();
  ::std::string* release_pbdata();
  void set_allocated_pbdata(::std::string* pbdata);

  // .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
  bool has_hdev() const;
  void clear_hdev();
  static const int kHDevFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hdev() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hdev();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hdev();
  void set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev);

  // .com.westone.skf.WST_PROTO_UINT32 ulCommandLen = 3;
  bool has_ulcommandlen() const;
  void clear_ulcommandlen();
  static const int kUlCommandLenFieldNumber = 3;
  const ::com::westone::skf::WST_PROTO_UINT32& ulcommandlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulcommandlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulcommandlen();
  void set_allocated_ulcommandlen(::com::westone::skf::WST_PROTO_UINT32* ulcommandlen);

  // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 5;
  bool has_puldatalen() const;
  void clear_puldatalen();
  static const int kPulDataLenFieldNumber = 5;
  const ::com::westone::skf::WST_PROTO_UINT32& puldatalen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_puldatalen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_puldatalen();
  void set_allocated_puldatalen(::com::westone::skf::WST_PROTO_UINT32* puldatalen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_Transmit)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbcommand_;
  ::google::protobuf::internal::ArenaStringPtr pbdata_;
  ::com::westone::skf::WST_PROTO_UINT32* hdev_;
  ::com::westone::skf::WST_PROTO_UINT32* ulcommandlen_;
  ::com::westone::skf::WST_PROTO_UINT32* puldatalen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_Transmit final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_Transmit) */ {
 public:
  Rsp_SKF_Transmit();
  virtual ~Rsp_SKF_Transmit();

  Rsp_SKF_Transmit(const Rsp_SKF_Transmit& from);

  inline Rsp_SKF_Transmit& operator=(const Rsp_SKF_Transmit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_Transmit(Rsp_SKF_Transmit&& from) noexcept
    : Rsp_SKF_Transmit() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_Transmit& operator=(Rsp_SKF_Transmit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_Transmit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_Transmit* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_Transmit*>(
               &_Rsp_SKF_Transmit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    164;

  void Swap(Rsp_SKF_Transmit* other);
  friend void swap(Rsp_SKF_Transmit& a, Rsp_SKF_Transmit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_Transmit* New() const final {
    return CreateMaybeMessage<Rsp_SKF_Transmit>(nullptr);
  }

  Rsp_SKF_Transmit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_Transmit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_Transmit& from);
  void MergeFrom(const Rsp_SKF_Transmit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_Transmit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbData = 1;
  void clear_pbdata();
  static const int kPbDataFieldNumber = 1;
  const ::std::string& pbdata() const;
  void set_pbdata(const ::std::string& value);
  #if LANG_CXX11
  void set_pbdata(::std::string&& value);
  #endif
  void set_pbdata(const char* value);
  void set_pbdata(const void* value, size_t size);
  ::std::string* mutable_pbdata();
  ::std::string* release_pbdata();
  void set_allocated_pbdata(::std::string* pbdata);

  // .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 2;
  bool has_puldatalen() const;
  void clear_puldatalen();
  static const int kPulDataLenFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& puldatalen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_puldatalen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_puldatalen();
  void set_allocated_puldatalen(::com::westone::skf::WST_PROTO_UINT32* puldatalen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_Transmit)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbdata_;
  ::com::westone::skf::WST_PROTO_UINT32* puldatalen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_ImportCertificate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_ImportCertificate) */ {
 public:
  Req_SKF_ImportCertificate();
  virtual ~Req_SKF_ImportCertificate();

  Req_SKF_ImportCertificate(const Req_SKF_ImportCertificate& from);

  inline Req_SKF_ImportCertificate& operator=(const Req_SKF_ImportCertificate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_ImportCertificate(Req_SKF_ImportCertificate&& from) noexcept
    : Req_SKF_ImportCertificate() {
    *this = ::std::move(from);
  }

  inline Req_SKF_ImportCertificate& operator=(Req_SKF_ImportCertificate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_ImportCertificate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_ImportCertificate* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_ImportCertificate*>(
               &_Req_SKF_ImportCertificate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    165;

  void Swap(Req_SKF_ImportCertificate* other);
  friend void swap(Req_SKF_ImportCertificate& a, Req_SKF_ImportCertificate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_ImportCertificate* New() const final {
    return CreateMaybeMessage<Req_SKF_ImportCertificate>(nullptr);
  }

  Req_SKF_ImportCertificate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_ImportCertificate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_ImportCertificate& from);
  void MergeFrom(const Req_SKF_ImportCertificate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_ImportCertificate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbCert = 3;
  void clear_pbcert();
  static const int kPbCertFieldNumber = 3;
  const ::std::string& pbcert() const;
  void set_pbcert(const ::std::string& value);
  #if LANG_CXX11
  void set_pbcert(::std::string&& value);
  #endif
  void set_pbcert(const char* value);
  void set_pbcert(const void* value, size_t size);
  ::std::string* mutable_pbcert();
  ::std::string* release_pbcert();
  void set_allocated_pbcert(::std::string* pbcert);

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  bool has_hcontainer() const;
  void clear_hcontainer();
  static const int kHContainerFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hcontainer() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hcontainer();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hcontainer();
  void set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer);

  // .com.westone.skf.WST_PROTO_BOOL bSignFlag = 2;
  bool has_bsignflag() const;
  void clear_bsignflag();
  static const int kBSignFlagFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_BOOL& bsignflag() const;
  ::com::westone::skf::WST_PROTO_BOOL* release_bsignflag();
  ::com::westone::skf::WST_PROTO_BOOL* mutable_bsignflag();
  void set_allocated_bsignflag(::com::westone::skf::WST_PROTO_BOOL* bsignflag);

  // .com.westone.skf.WST_PROTO_UINT32 ulCertLen = 4;
  bool has_ulcertlen() const;
  void clear_ulcertlen();
  static const int kUlCertLenFieldNumber = 4;
  const ::com::westone::skf::WST_PROTO_UINT32& ulcertlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_ulcertlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_ulcertlen();
  void set_allocated_ulcertlen(::com::westone::skf::WST_PROTO_UINT32* ulcertlen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_ImportCertificate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbcert_;
  ::com::westone::skf::WST_PROTO_UINT32* hcontainer_;
  ::com::westone::skf::WST_PROTO_BOOL* bsignflag_;
  ::com::westone::skf::WST_PROTO_UINT32* ulcertlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_ImportCertificate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_ImportCertificate) */ {
 public:
  Rsp_SKF_ImportCertificate();
  virtual ~Rsp_SKF_ImportCertificate();

  Rsp_SKF_ImportCertificate(const Rsp_SKF_ImportCertificate& from);

  inline Rsp_SKF_ImportCertificate& operator=(const Rsp_SKF_ImportCertificate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_ImportCertificate(Rsp_SKF_ImportCertificate&& from) noexcept
    : Rsp_SKF_ImportCertificate() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_ImportCertificate& operator=(Rsp_SKF_ImportCertificate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_ImportCertificate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_ImportCertificate* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_ImportCertificate*>(
               &_Rsp_SKF_ImportCertificate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    166;

  void Swap(Rsp_SKF_ImportCertificate* other);
  friend void swap(Rsp_SKF_ImportCertificate& a, Rsp_SKF_ImportCertificate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_ImportCertificate* New() const final {
    return CreateMaybeMessage<Rsp_SKF_ImportCertificate>(nullptr);
  }

  Rsp_SKF_ImportCertificate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_ImportCertificate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_ImportCertificate& from);
  void MergeFrom(const Rsp_SKF_ImportCertificate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_ImportCertificate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_ImportCertificate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_ExportCertificate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_ExportCertificate) */ {
 public:
  Req_SKF_ExportCertificate();
  virtual ~Req_SKF_ExportCertificate();

  Req_SKF_ExportCertificate(const Req_SKF_ExportCertificate& from);

  inline Req_SKF_ExportCertificate& operator=(const Req_SKF_ExportCertificate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_ExportCertificate(Req_SKF_ExportCertificate&& from) noexcept
    : Req_SKF_ExportCertificate() {
    *this = ::std::move(from);
  }

  inline Req_SKF_ExportCertificate& operator=(Req_SKF_ExportCertificate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_ExportCertificate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_ExportCertificate* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_ExportCertificate*>(
               &_Req_SKF_ExportCertificate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    167;

  void Swap(Req_SKF_ExportCertificate* other);
  friend void swap(Req_SKF_ExportCertificate& a, Req_SKF_ExportCertificate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_ExportCertificate* New() const final {
    return CreateMaybeMessage<Req_SKF_ExportCertificate>(nullptr);
  }

  Req_SKF_ExportCertificate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_ExportCertificate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_ExportCertificate& from);
  void MergeFrom(const Req_SKF_ExportCertificate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_ExportCertificate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbCert = 4;
  void clear_pbcert();
  static const int kPbCertFieldNumber = 4;
  const ::std::string& pbcert() const;
  void set_pbcert(const ::std::string& value);
  #if LANG_CXX11
  void set_pbcert(::std::string&& value);
  #endif
  void set_pbcert(const char* value);
  void set_pbcert(const void* value, size_t size);
  ::std::string* mutable_pbcert();
  ::std::string* release_pbcert();
  void set_allocated_pbcert(::std::string* pbcert);

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  bool has_hcontainer() const;
  void clear_hcontainer();
  static const int kHContainerFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hcontainer() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hcontainer();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hcontainer();
  void set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer);

  // .com.westone.skf.WST_PROTO_BOOL bSignFlag = 2;
  bool has_bsignflag() const;
  void clear_bsignflag();
  static const int kBSignFlagFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_BOOL& bsignflag() const;
  ::com::westone::skf::WST_PROTO_BOOL* release_bsignflag();
  ::com::westone::skf::WST_PROTO_BOOL* mutable_bsignflag();
  void set_allocated_bsignflag(::com::westone::skf::WST_PROTO_BOOL* bsignflag);

  // .com.westone.skf.WST_PROTO_UINT32 pulCertLen = 5;
  bool has_pulcertlen() const;
  void clear_pulcertlen();
  static const int kPulCertLenFieldNumber = 5;
  const ::com::westone::skf::WST_PROTO_UINT32& pulcertlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulcertlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulcertlen();
  void set_allocated_pulcertlen(::com::westone::skf::WST_PROTO_UINT32* pulcertlen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_ExportCertificate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbcert_;
  ::com::westone::skf::WST_PROTO_UINT32* hcontainer_;
  ::com::westone::skf::WST_PROTO_BOOL* bsignflag_;
  ::com::westone::skf::WST_PROTO_UINT32* pulcertlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_ExportCertificate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_ExportCertificate) */ {
 public:
  Rsp_SKF_ExportCertificate();
  virtual ~Rsp_SKF_ExportCertificate();

  Rsp_SKF_ExportCertificate(const Rsp_SKF_ExportCertificate& from);

  inline Rsp_SKF_ExportCertificate& operator=(const Rsp_SKF_ExportCertificate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_ExportCertificate(Rsp_SKF_ExportCertificate&& from) noexcept
    : Rsp_SKF_ExportCertificate() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_ExportCertificate& operator=(Rsp_SKF_ExportCertificate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_ExportCertificate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_ExportCertificate* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_ExportCertificate*>(
               &_Rsp_SKF_ExportCertificate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    168;

  void Swap(Rsp_SKF_ExportCertificate* other);
  friend void swap(Rsp_SKF_ExportCertificate& a, Rsp_SKF_ExportCertificate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_ExportCertificate* New() const final {
    return CreateMaybeMessage<Rsp_SKF_ExportCertificate>(nullptr);
  }

  Rsp_SKF_ExportCertificate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_ExportCertificate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_ExportCertificate& from);
  void MergeFrom(const Rsp_SKF_ExportCertificate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_ExportCertificate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes pbCert = 1;
  void clear_pbcert();
  static const int kPbCertFieldNumber = 1;
  const ::std::string& pbcert() const;
  void set_pbcert(const ::std::string& value);
  #if LANG_CXX11
  void set_pbcert(::std::string&& value);
  #endif
  void set_pbcert(const char* value);
  void set_pbcert(const void* value, size_t size);
  ::std::string* mutable_pbcert();
  ::std::string* release_pbcert();
  void set_allocated_pbcert(::std::string* pbcert);

  // .com.westone.skf.WST_PROTO_UINT32 pulCertLen = 2;
  bool has_pulcertlen() const;
  void clear_pulcertlen();
  static const int kPulCertLenFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& pulcertlen() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulcertlen();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulcertlen();
  void set_allocated_pulcertlen(::com::westone::skf::WST_PROTO_UINT32* pulcertlen);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_ExportCertificate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr pbcert_;
  ::com::westone::skf::WST_PROTO_UINT32* pulcertlen_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Req_SKF_GetContainerProperty final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Req_SKF_GetContainerProperty) */ {
 public:
  Req_SKF_GetContainerProperty();
  virtual ~Req_SKF_GetContainerProperty();

  Req_SKF_GetContainerProperty(const Req_SKF_GetContainerProperty& from);

  inline Req_SKF_GetContainerProperty& operator=(const Req_SKF_GetContainerProperty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Req_SKF_GetContainerProperty(Req_SKF_GetContainerProperty&& from) noexcept
    : Req_SKF_GetContainerProperty() {
    *this = ::std::move(from);
  }

  inline Req_SKF_GetContainerProperty& operator=(Req_SKF_GetContainerProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Req_SKF_GetContainerProperty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Req_SKF_GetContainerProperty* internal_default_instance() {
    return reinterpret_cast<const Req_SKF_GetContainerProperty*>(
               &_Req_SKF_GetContainerProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    169;

  void Swap(Req_SKF_GetContainerProperty* other);
  friend void swap(Req_SKF_GetContainerProperty& a, Req_SKF_GetContainerProperty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Req_SKF_GetContainerProperty* New() const final {
    return CreateMaybeMessage<Req_SKF_GetContainerProperty>(nullptr);
  }

  Req_SKF_GetContainerProperty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Req_SKF_GetContainerProperty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Req_SKF_GetContainerProperty& from);
  void MergeFrom(const Req_SKF_GetContainerProperty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Req_SKF_GetContainerProperty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
  bool has_hcontainer() const;
  void clear_hcontainer();
  static const int kHContainerFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& hcontainer() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_hcontainer();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_hcontainer();
  void set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer);

  // .com.westone.skf.WST_PROTO_UINT32 pulConProperty = 2;
  bool has_pulconproperty() const;
  void clear_pulconproperty();
  static const int kPulConPropertyFieldNumber = 2;
  const ::com::westone::skf::WST_PROTO_UINT32& pulconproperty() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulconproperty();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulconproperty();
  void set_allocated_pulconproperty(::com::westone::skf::WST_PROTO_UINT32* pulconproperty);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Req_SKF_GetContainerProperty)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* hcontainer_;
  ::com::westone::skf::WST_PROTO_UINT32* pulconproperty_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// -------------------------------------------------------------------

class Rsp_SKF_GetContainerProperty final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.westone.skf.Rsp_SKF_GetContainerProperty) */ {
 public:
  Rsp_SKF_GetContainerProperty();
  virtual ~Rsp_SKF_GetContainerProperty();

  Rsp_SKF_GetContainerProperty(const Rsp_SKF_GetContainerProperty& from);

  inline Rsp_SKF_GetContainerProperty& operator=(const Rsp_SKF_GetContainerProperty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rsp_SKF_GetContainerProperty(Rsp_SKF_GetContainerProperty&& from) noexcept
    : Rsp_SKF_GetContainerProperty() {
    *this = ::std::move(from);
  }

  inline Rsp_SKF_GetContainerProperty& operator=(Rsp_SKF_GetContainerProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Rsp_SKF_GetContainerProperty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rsp_SKF_GetContainerProperty* internal_default_instance() {
    return reinterpret_cast<const Rsp_SKF_GetContainerProperty*>(
               &_Rsp_SKF_GetContainerProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    170;

  void Swap(Rsp_SKF_GetContainerProperty* other);
  friend void swap(Rsp_SKF_GetContainerProperty& a, Rsp_SKF_GetContainerProperty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rsp_SKF_GetContainerProperty* New() const final {
    return CreateMaybeMessage<Rsp_SKF_GetContainerProperty>(nullptr);
  }

  Rsp_SKF_GetContainerProperty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rsp_SKF_GetContainerProperty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rsp_SKF_GetContainerProperty& from);
  void MergeFrom(const Rsp_SKF_GetContainerProperty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rsp_SKF_GetContainerProperty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.westone.skf.WST_PROTO_UINT32 pulConProperty = 1;
  bool has_pulconproperty() const;
  void clear_pulconproperty();
  static const int kPulConPropertyFieldNumber = 1;
  const ::com::westone::skf::WST_PROTO_UINT32& pulconproperty() const;
  ::com::westone::skf::WST_PROTO_UINT32* release_pulconproperty();
  ::com::westone::skf::WST_PROTO_UINT32* mutable_pulconproperty();
  void set_allocated_pulconproperty(::com::westone::skf::WST_PROTO_UINT32* pulconproperty);

  // @@protoc_insertion_point(class_scope:com.westone.skf.Rsp_SKF_GetContainerProperty)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::westone::skf::WST_PROTO_UINT32* pulconproperty_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_skf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WST_PROTO_UINT32

// uint32 u32value = 1;
inline void WST_PROTO_UINT32::clear_u32value() {
  u32value_ = 0u;
}
inline ::google::protobuf::uint32 WST_PROTO_UINT32::u32value() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.WST_PROTO_UINT32.u32value)
  return u32value_;
}
inline void WST_PROTO_UINT32::set_u32value(::google::protobuf::uint32 value) {
  
  u32value_ = value;
  // @@protoc_insertion_point(field_set:com.westone.skf.WST_PROTO_UINT32.u32value)
}

// -------------------------------------------------------------------

// WST_PROTO_BOOL

// bool boolvalue = 1;
inline void WST_PROTO_BOOL::clear_boolvalue() {
  boolvalue_ = false;
}
inline bool WST_PROTO_BOOL::boolvalue() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.WST_PROTO_BOOL.boolvalue)
  return boolvalue_;
}
inline void WST_PROTO_BOOL::set_boolvalue(bool value) {
  
  boolvalue_ = value;
  // @@protoc_insertion_point(field_set:com.westone.skf.WST_PROTO_BOOL.boolvalue)
}

// -------------------------------------------------------------------

// SKF_Version

// .com.westone.skf.WST_PROTO_UINT32 major = 1;
inline bool SKF_Version::has_major() const {
  return this != internal_default_instance() && major_ != nullptr;
}
inline void SKF_Version::clear_major() {
  if (GetArenaNoVirtual() == nullptr && major_ != nullptr) {
    delete major_;
  }
  major_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& SKF_Version::major() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = major_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_Version.major)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_Version::release_major() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_Version.major)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = major_;
  major_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_Version::mutable_major() {
  
  if (major_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    major_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_Version.major)
  return major_;
}
inline void SKF_Version::set_allocated_major(::com::westone::skf::WST_PROTO_UINT32* major) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete major_;
  }
  if (major) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      major = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, major, submessage_arena);
    }
    
  } else {
    
  }
  major_ = major;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_Version.major)
}

// .com.westone.skf.WST_PROTO_UINT32 minor = 2;
inline bool SKF_Version::has_minor() const {
  return this != internal_default_instance() && minor_ != nullptr;
}
inline void SKF_Version::clear_minor() {
  if (GetArenaNoVirtual() == nullptr && minor_ != nullptr) {
    delete minor_;
  }
  minor_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& SKF_Version::minor() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = minor_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_Version.minor)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_Version::release_minor() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_Version.minor)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = minor_;
  minor_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_Version::mutable_minor() {
  
  if (minor_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    minor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_Version.minor)
  return minor_;
}
inline void SKF_Version::set_allocated_minor(::com::westone::skf::WST_PROTO_UINT32* minor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete minor_;
  }
  if (minor) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      minor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, minor, submessage_arena);
    }
    
  } else {
    
  }
  minor_ = minor;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_Version.minor)
}

// -------------------------------------------------------------------

// SKF_DevInfo

// .com.westone.skf.SKF_Version version = 1;
inline bool SKF_DevInfo::has_version() const {
  return this != internal_default_instance() && version_ != nullptr;
}
inline void SKF_DevInfo::clear_version() {
  if (GetArenaNoVirtual() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
}
inline const ::com::westone::skf::SKF_Version& SKF_DevInfo::version() const {
  const ::com::westone::skf::SKF_Version* p = version_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_DevInfo.version)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_Version*>(
      &::com::westone::skf::_SKF_Version_default_instance_);
}
inline ::com::westone::skf::SKF_Version* SKF_DevInfo::release_version() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_DevInfo.version)
  
  ::com::westone::skf::SKF_Version* temp = version_;
  version_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_Version* SKF_DevInfo::mutable_version() {
  
  if (version_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_Version>(GetArenaNoVirtual());
    version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_DevInfo.version)
  return version_;
}
inline void SKF_DevInfo::set_allocated_version(::com::westone::skf::SKF_Version* version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete version_;
  }
  if (version) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_DevInfo.version)
}

// bytes Manufacturer = 2;
inline void SKF_DevInfo::clear_manufacturer() {
  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SKF_DevInfo::manufacturer() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_DevInfo.Manufacturer)
  return manufacturer_.GetNoArena();
}
inline void SKF_DevInfo::set_manufacturer(const ::std::string& value) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.SKF_DevInfo.Manufacturer)
}
#if LANG_CXX11
inline void SKF_DevInfo::set_manufacturer(::std::string&& value) {
  
  manufacturer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.SKF_DevInfo.Manufacturer)
}
#endif
inline void SKF_DevInfo::set_manufacturer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.SKF_DevInfo.Manufacturer)
}
inline void SKF_DevInfo::set_manufacturer(const void* value, size_t size) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.SKF_DevInfo.Manufacturer)
}
inline ::std::string* SKF_DevInfo::mutable_manufacturer() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_DevInfo.Manufacturer)
  return manufacturer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SKF_DevInfo::release_manufacturer() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_DevInfo.Manufacturer)
  
  return manufacturer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SKF_DevInfo::set_allocated_manufacturer(::std::string* manufacturer) {
  if (manufacturer != nullptr) {
    
  } else {
    
  }
  manufacturer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacturer);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_DevInfo.Manufacturer)
}

// bytes Issuer = 3;
inline void SKF_DevInfo::clear_issuer() {
  issuer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SKF_DevInfo::issuer() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_DevInfo.Issuer)
  return issuer_.GetNoArena();
}
inline void SKF_DevInfo::set_issuer(const ::std::string& value) {
  
  issuer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.SKF_DevInfo.Issuer)
}
#if LANG_CXX11
inline void SKF_DevInfo::set_issuer(::std::string&& value) {
  
  issuer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.SKF_DevInfo.Issuer)
}
#endif
inline void SKF_DevInfo::set_issuer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  issuer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.SKF_DevInfo.Issuer)
}
inline void SKF_DevInfo::set_issuer(const void* value, size_t size) {
  
  issuer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.SKF_DevInfo.Issuer)
}
inline ::std::string* SKF_DevInfo::mutable_issuer() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_DevInfo.Issuer)
  return issuer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SKF_DevInfo::release_issuer() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_DevInfo.Issuer)
  
  return issuer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SKF_DevInfo::set_allocated_issuer(::std::string* issuer) {
  if (issuer != nullptr) {
    
  } else {
    
  }
  issuer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issuer);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_DevInfo.Issuer)
}

// bytes Label = 4;
inline void SKF_DevInfo::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SKF_DevInfo::label() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_DevInfo.Label)
  return label_.GetNoArena();
}
inline void SKF_DevInfo::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.SKF_DevInfo.Label)
}
#if LANG_CXX11
inline void SKF_DevInfo::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.SKF_DevInfo.Label)
}
#endif
inline void SKF_DevInfo::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.SKF_DevInfo.Label)
}
inline void SKF_DevInfo::set_label(const void* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.SKF_DevInfo.Label)
}
inline ::std::string* SKF_DevInfo::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_DevInfo.Label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SKF_DevInfo::release_label() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_DevInfo.Label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SKF_DevInfo::set_allocated_label(::std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_DevInfo.Label)
}

// bytes SerialNumber = 5;
inline void SKF_DevInfo::clear_serialnumber() {
  serialnumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SKF_DevInfo::serialnumber() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_DevInfo.SerialNumber)
  return serialnumber_.GetNoArena();
}
inline void SKF_DevInfo::set_serialnumber(const ::std::string& value) {
  
  serialnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.SKF_DevInfo.SerialNumber)
}
#if LANG_CXX11
inline void SKF_DevInfo::set_serialnumber(::std::string&& value) {
  
  serialnumber_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.SKF_DevInfo.SerialNumber)
}
#endif
inline void SKF_DevInfo::set_serialnumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serialnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.SKF_DevInfo.SerialNumber)
}
inline void SKF_DevInfo::set_serialnumber(const void* value, size_t size) {
  
  serialnumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.SKF_DevInfo.SerialNumber)
}
inline ::std::string* SKF_DevInfo::mutable_serialnumber() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_DevInfo.SerialNumber)
  return serialnumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SKF_DevInfo::release_serialnumber() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_DevInfo.SerialNumber)
  
  return serialnumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SKF_DevInfo::set_allocated_serialnumber(::std::string* serialnumber) {
  if (serialnumber != nullptr) {
    
  } else {
    
  }
  serialnumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialnumber);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_DevInfo.SerialNumber)
}

// .com.westone.skf.SKF_Version HWVersion = 6;
inline bool SKF_DevInfo::has_hwversion() const {
  return this != internal_default_instance() && hwversion_ != nullptr;
}
inline void SKF_DevInfo::clear_hwversion() {
  if (GetArenaNoVirtual() == nullptr && hwversion_ != nullptr) {
    delete hwversion_;
  }
  hwversion_ = nullptr;
}
inline const ::com::westone::skf::SKF_Version& SKF_DevInfo::hwversion() const {
  const ::com::westone::skf::SKF_Version* p = hwversion_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_DevInfo.HWVersion)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_Version*>(
      &::com::westone::skf::_SKF_Version_default_instance_);
}
inline ::com::westone::skf::SKF_Version* SKF_DevInfo::release_hwversion() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_DevInfo.HWVersion)
  
  ::com::westone::skf::SKF_Version* temp = hwversion_;
  hwversion_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_Version* SKF_DevInfo::mutable_hwversion() {
  
  if (hwversion_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_Version>(GetArenaNoVirtual());
    hwversion_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_DevInfo.HWVersion)
  return hwversion_;
}
inline void SKF_DevInfo::set_allocated_hwversion(::com::westone::skf::SKF_Version* hwversion) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hwversion_;
  }
  if (hwversion) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hwversion = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hwversion, submessage_arena);
    }
    
  } else {
    
  }
  hwversion_ = hwversion;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_DevInfo.HWVersion)
}

// .com.westone.skf.SKF_Version FirmwareVersion = 7;
inline bool SKF_DevInfo::has_firmwareversion() const {
  return this != internal_default_instance() && firmwareversion_ != nullptr;
}
inline void SKF_DevInfo::clear_firmwareversion() {
  if (GetArenaNoVirtual() == nullptr && firmwareversion_ != nullptr) {
    delete firmwareversion_;
  }
  firmwareversion_ = nullptr;
}
inline const ::com::westone::skf::SKF_Version& SKF_DevInfo::firmwareversion() const {
  const ::com::westone::skf::SKF_Version* p = firmwareversion_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_DevInfo.FirmwareVersion)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_Version*>(
      &::com::westone::skf::_SKF_Version_default_instance_);
}
inline ::com::westone::skf::SKF_Version* SKF_DevInfo::release_firmwareversion() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_DevInfo.FirmwareVersion)
  
  ::com::westone::skf::SKF_Version* temp = firmwareversion_;
  firmwareversion_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_Version* SKF_DevInfo::mutable_firmwareversion() {
  
  if (firmwareversion_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_Version>(GetArenaNoVirtual());
    firmwareversion_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_DevInfo.FirmwareVersion)
  return firmwareversion_;
}
inline void SKF_DevInfo::set_allocated_firmwareversion(::com::westone::skf::SKF_Version* firmwareversion) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete firmwareversion_;
  }
  if (firmwareversion) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      firmwareversion = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, firmwareversion, submessage_arena);
    }
    
  } else {
    
  }
  firmwareversion_ = firmwareversion;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_DevInfo.FirmwareVersion)
}

// .com.westone.skf.WST_PROTO_UINT32 AlgSymCap = 8;
inline bool SKF_DevInfo::has_algsymcap() const {
  return this != internal_default_instance() && algsymcap_ != nullptr;
}
inline void SKF_DevInfo::clear_algsymcap() {
  if (GetArenaNoVirtual() == nullptr && algsymcap_ != nullptr) {
    delete algsymcap_;
  }
  algsymcap_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& SKF_DevInfo::algsymcap() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = algsymcap_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_DevInfo.AlgSymCap)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_DevInfo::release_algsymcap() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_DevInfo.AlgSymCap)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = algsymcap_;
  algsymcap_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_DevInfo::mutable_algsymcap() {
  
  if (algsymcap_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    algsymcap_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_DevInfo.AlgSymCap)
  return algsymcap_;
}
inline void SKF_DevInfo::set_allocated_algsymcap(::com::westone::skf::WST_PROTO_UINT32* algsymcap) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete algsymcap_;
  }
  if (algsymcap) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      algsymcap = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, algsymcap, submessage_arena);
    }
    
  } else {
    
  }
  algsymcap_ = algsymcap;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_DevInfo.AlgSymCap)
}

// .com.westone.skf.WST_PROTO_UINT32 AlgAsymCap = 9;
inline bool SKF_DevInfo::has_algasymcap() const {
  return this != internal_default_instance() && algasymcap_ != nullptr;
}
inline void SKF_DevInfo::clear_algasymcap() {
  if (GetArenaNoVirtual() == nullptr && algasymcap_ != nullptr) {
    delete algasymcap_;
  }
  algasymcap_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& SKF_DevInfo::algasymcap() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = algasymcap_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_DevInfo.AlgAsymCap)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_DevInfo::release_algasymcap() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_DevInfo.AlgAsymCap)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = algasymcap_;
  algasymcap_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_DevInfo::mutable_algasymcap() {
  
  if (algasymcap_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    algasymcap_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_DevInfo.AlgAsymCap)
  return algasymcap_;
}
inline void SKF_DevInfo::set_allocated_algasymcap(::com::westone::skf::WST_PROTO_UINT32* algasymcap) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete algasymcap_;
  }
  if (algasymcap) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      algasymcap = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, algasymcap, submessage_arena);
    }
    
  } else {
    
  }
  algasymcap_ = algasymcap;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_DevInfo.AlgAsymCap)
}

// .com.westone.skf.WST_PROTO_UINT32 AlgHashCap = 10;
inline bool SKF_DevInfo::has_alghashcap() const {
  return this != internal_default_instance() && alghashcap_ != nullptr;
}
inline void SKF_DevInfo::clear_alghashcap() {
  if (GetArenaNoVirtual() == nullptr && alghashcap_ != nullptr) {
    delete alghashcap_;
  }
  alghashcap_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& SKF_DevInfo::alghashcap() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = alghashcap_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_DevInfo.AlgHashCap)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_DevInfo::release_alghashcap() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_DevInfo.AlgHashCap)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = alghashcap_;
  alghashcap_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_DevInfo::mutable_alghashcap() {
  
  if (alghashcap_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    alghashcap_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_DevInfo.AlgHashCap)
  return alghashcap_;
}
inline void SKF_DevInfo::set_allocated_alghashcap(::com::westone::skf::WST_PROTO_UINT32* alghashcap) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete alghashcap_;
  }
  if (alghashcap) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      alghashcap = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, alghashcap, submessage_arena);
    }
    
  } else {
    
  }
  alghashcap_ = alghashcap;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_DevInfo.AlgHashCap)
}

// .com.westone.skf.WST_PROTO_UINT32 DevAuthAlgId = 11;
inline bool SKF_DevInfo::has_devauthalgid() const {
  return this != internal_default_instance() && devauthalgid_ != nullptr;
}
inline void SKF_DevInfo::clear_devauthalgid() {
  if (GetArenaNoVirtual() == nullptr && devauthalgid_ != nullptr) {
    delete devauthalgid_;
  }
  devauthalgid_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& SKF_DevInfo::devauthalgid() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = devauthalgid_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_DevInfo.DevAuthAlgId)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_DevInfo::release_devauthalgid() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_DevInfo.DevAuthAlgId)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = devauthalgid_;
  devauthalgid_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_DevInfo::mutable_devauthalgid() {
  
  if (devauthalgid_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    devauthalgid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_DevInfo.DevAuthAlgId)
  return devauthalgid_;
}
inline void SKF_DevInfo::set_allocated_devauthalgid(::com::westone::skf::WST_PROTO_UINT32* devauthalgid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete devauthalgid_;
  }
  if (devauthalgid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      devauthalgid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, devauthalgid, submessage_arena);
    }
    
  } else {
    
  }
  devauthalgid_ = devauthalgid;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_DevInfo.DevAuthAlgId)
}

// .com.westone.skf.WST_PROTO_UINT32 TotalSpace = 12;
inline bool SKF_DevInfo::has_totalspace() const {
  return this != internal_default_instance() && totalspace_ != nullptr;
}
inline void SKF_DevInfo::clear_totalspace() {
  if (GetArenaNoVirtual() == nullptr && totalspace_ != nullptr) {
    delete totalspace_;
  }
  totalspace_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& SKF_DevInfo::totalspace() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = totalspace_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_DevInfo.TotalSpace)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_DevInfo::release_totalspace() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_DevInfo.TotalSpace)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = totalspace_;
  totalspace_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_DevInfo::mutable_totalspace() {
  
  if (totalspace_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    totalspace_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_DevInfo.TotalSpace)
  return totalspace_;
}
inline void SKF_DevInfo::set_allocated_totalspace(::com::westone::skf::WST_PROTO_UINT32* totalspace) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete totalspace_;
  }
  if (totalspace) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      totalspace = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, totalspace, submessage_arena);
    }
    
  } else {
    
  }
  totalspace_ = totalspace;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_DevInfo.TotalSpace)
}

// .com.westone.skf.WST_PROTO_UINT32 FreeSpace = 13;
inline bool SKF_DevInfo::has_freespace() const {
  return this != internal_default_instance() && freespace_ != nullptr;
}
inline void SKF_DevInfo::clear_freespace() {
  if (GetArenaNoVirtual() == nullptr && freespace_ != nullptr) {
    delete freespace_;
  }
  freespace_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& SKF_DevInfo::freespace() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = freespace_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_DevInfo.FreeSpace)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_DevInfo::release_freespace() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_DevInfo.FreeSpace)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = freespace_;
  freespace_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_DevInfo::mutable_freespace() {
  
  if (freespace_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    freespace_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_DevInfo.FreeSpace)
  return freespace_;
}
inline void SKF_DevInfo::set_allocated_freespace(::com::westone::skf::WST_PROTO_UINT32* freespace) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete freespace_;
  }
  if (freespace) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      freespace = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, freespace, submessage_arena);
    }
    
  } else {
    
  }
  freespace_ = freespace;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_DevInfo.FreeSpace)
}

// .com.westone.skf.WST_PROTO_UINT32 MaxEccBufferSize = 14;
inline bool SKF_DevInfo::has_maxeccbuffersize() const {
  return this != internal_default_instance() && maxeccbuffersize_ != nullptr;
}
inline void SKF_DevInfo::clear_maxeccbuffersize() {
  if (GetArenaNoVirtual() == nullptr && maxeccbuffersize_ != nullptr) {
    delete maxeccbuffersize_;
  }
  maxeccbuffersize_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& SKF_DevInfo::maxeccbuffersize() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = maxeccbuffersize_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_DevInfo.MaxEccBufferSize)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_DevInfo::release_maxeccbuffersize() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_DevInfo.MaxEccBufferSize)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = maxeccbuffersize_;
  maxeccbuffersize_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_DevInfo::mutable_maxeccbuffersize() {
  
  if (maxeccbuffersize_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    maxeccbuffersize_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_DevInfo.MaxEccBufferSize)
  return maxeccbuffersize_;
}
inline void SKF_DevInfo::set_allocated_maxeccbuffersize(::com::westone::skf::WST_PROTO_UINT32* maxeccbuffersize) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete maxeccbuffersize_;
  }
  if (maxeccbuffersize) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      maxeccbuffersize = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, maxeccbuffersize, submessage_arena);
    }
    
  } else {
    
  }
  maxeccbuffersize_ = maxeccbuffersize;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_DevInfo.MaxEccBufferSize)
}

// .com.westone.skf.WST_PROTO_UINT32 MaxBufferSize = 15;
inline bool SKF_DevInfo::has_maxbuffersize() const {
  return this != internal_default_instance() && maxbuffersize_ != nullptr;
}
inline void SKF_DevInfo::clear_maxbuffersize() {
  if (GetArenaNoVirtual() == nullptr && maxbuffersize_ != nullptr) {
    delete maxbuffersize_;
  }
  maxbuffersize_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& SKF_DevInfo::maxbuffersize() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = maxbuffersize_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_DevInfo.MaxBufferSize)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_DevInfo::release_maxbuffersize() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_DevInfo.MaxBufferSize)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = maxbuffersize_;
  maxbuffersize_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_DevInfo::mutable_maxbuffersize() {
  
  if (maxbuffersize_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    maxbuffersize_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_DevInfo.MaxBufferSize)
  return maxbuffersize_;
}
inline void SKF_DevInfo::set_allocated_maxbuffersize(::com::westone::skf::WST_PROTO_UINT32* maxbuffersize) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete maxbuffersize_;
  }
  if (maxbuffersize) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      maxbuffersize = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, maxbuffersize, submessage_arena);
    }
    
  } else {
    
  }
  maxbuffersize_ = maxbuffersize;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_DevInfo.MaxBufferSize)
}

// bytes Reserved = 16;
inline void SKF_DevInfo::clear_reserved() {
  reserved_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SKF_DevInfo::reserved() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_DevInfo.Reserved)
  return reserved_.GetNoArena();
}
inline void SKF_DevInfo::set_reserved(const ::std::string& value) {
  
  reserved_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.SKF_DevInfo.Reserved)
}
#if LANG_CXX11
inline void SKF_DevInfo::set_reserved(::std::string&& value) {
  
  reserved_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.SKF_DevInfo.Reserved)
}
#endif
inline void SKF_DevInfo::set_reserved(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reserved_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.SKF_DevInfo.Reserved)
}
inline void SKF_DevInfo::set_reserved(const void* value, size_t size) {
  
  reserved_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.SKF_DevInfo.Reserved)
}
inline ::std::string* SKF_DevInfo::mutable_reserved() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_DevInfo.Reserved)
  return reserved_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SKF_DevInfo::release_reserved() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_DevInfo.Reserved)
  
  return reserved_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SKF_DevInfo::set_allocated_reserved(::std::string* reserved) {
  if (reserved != nullptr) {
    
  } else {
    
  }
  reserved_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reserved);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_DevInfo.Reserved)
}

// -------------------------------------------------------------------

// SKF_RSAPUBLICKEYBLOB

// .com.westone.skf.WST_PROTO_UINT32 AlgID = 1;
inline bool SKF_RSAPUBLICKEYBLOB::has_algid() const {
  return this != internal_default_instance() && algid_ != nullptr;
}
inline void SKF_RSAPUBLICKEYBLOB::clear_algid() {
  if (GetArenaNoVirtual() == nullptr && algid_ != nullptr) {
    delete algid_;
  }
  algid_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& SKF_RSAPUBLICKEYBLOB::algid() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = algid_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_RSAPUBLICKEYBLOB.AlgID)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_RSAPUBLICKEYBLOB::release_algid() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_RSAPUBLICKEYBLOB.AlgID)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = algid_;
  algid_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_RSAPUBLICKEYBLOB::mutable_algid() {
  
  if (algid_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    algid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_RSAPUBLICKEYBLOB.AlgID)
  return algid_;
}
inline void SKF_RSAPUBLICKEYBLOB::set_allocated_algid(::com::westone::skf::WST_PROTO_UINT32* algid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete algid_;
  }
  if (algid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      algid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, algid, submessage_arena);
    }
    
  } else {
    
  }
  algid_ = algid;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_RSAPUBLICKEYBLOB.AlgID)
}

// .com.westone.skf.WST_PROTO_UINT32 BitLen = 2;
inline bool SKF_RSAPUBLICKEYBLOB::has_bitlen() const {
  return this != internal_default_instance() && bitlen_ != nullptr;
}
inline void SKF_RSAPUBLICKEYBLOB::clear_bitlen() {
  if (GetArenaNoVirtual() == nullptr && bitlen_ != nullptr) {
    delete bitlen_;
  }
  bitlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& SKF_RSAPUBLICKEYBLOB::bitlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = bitlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_RSAPUBLICKEYBLOB.BitLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_RSAPUBLICKEYBLOB::release_bitlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_RSAPUBLICKEYBLOB.BitLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = bitlen_;
  bitlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_RSAPUBLICKEYBLOB::mutable_bitlen() {
  
  if (bitlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    bitlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_RSAPUBLICKEYBLOB.BitLen)
  return bitlen_;
}
inline void SKF_RSAPUBLICKEYBLOB::set_allocated_bitlen(::com::westone::skf::WST_PROTO_UINT32* bitlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bitlen_;
  }
  if (bitlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bitlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bitlen, submessage_arena);
    }
    
  } else {
    
  }
  bitlen_ = bitlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_RSAPUBLICKEYBLOB.BitLen)
}

// bytes Modulus = 3;
inline void SKF_RSAPUBLICKEYBLOB::clear_modulus() {
  modulus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SKF_RSAPUBLICKEYBLOB::modulus() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_RSAPUBLICKEYBLOB.Modulus)
  return modulus_.GetNoArena();
}
inline void SKF_RSAPUBLICKEYBLOB::set_modulus(const ::std::string& value) {
  
  modulus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.SKF_RSAPUBLICKEYBLOB.Modulus)
}
#if LANG_CXX11
inline void SKF_RSAPUBLICKEYBLOB::set_modulus(::std::string&& value) {
  
  modulus_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.SKF_RSAPUBLICKEYBLOB.Modulus)
}
#endif
inline void SKF_RSAPUBLICKEYBLOB::set_modulus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modulus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.SKF_RSAPUBLICKEYBLOB.Modulus)
}
inline void SKF_RSAPUBLICKEYBLOB::set_modulus(const void* value, size_t size) {
  
  modulus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.SKF_RSAPUBLICKEYBLOB.Modulus)
}
inline ::std::string* SKF_RSAPUBLICKEYBLOB::mutable_modulus() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_RSAPUBLICKEYBLOB.Modulus)
  return modulus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SKF_RSAPUBLICKEYBLOB::release_modulus() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_RSAPUBLICKEYBLOB.Modulus)
  
  return modulus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SKF_RSAPUBLICKEYBLOB::set_allocated_modulus(::std::string* modulus) {
  if (modulus != nullptr) {
    
  } else {
    
  }
  modulus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modulus);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_RSAPUBLICKEYBLOB.Modulus)
}

// bytes PublicExponent = 4;
inline void SKF_RSAPUBLICKEYBLOB::clear_publicexponent() {
  publicexponent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SKF_RSAPUBLICKEYBLOB::publicexponent() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_RSAPUBLICKEYBLOB.PublicExponent)
  return publicexponent_.GetNoArena();
}
inline void SKF_RSAPUBLICKEYBLOB::set_publicexponent(const ::std::string& value) {
  
  publicexponent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.SKF_RSAPUBLICKEYBLOB.PublicExponent)
}
#if LANG_CXX11
inline void SKF_RSAPUBLICKEYBLOB::set_publicexponent(::std::string&& value) {
  
  publicexponent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.SKF_RSAPUBLICKEYBLOB.PublicExponent)
}
#endif
inline void SKF_RSAPUBLICKEYBLOB::set_publicexponent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  publicexponent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.SKF_RSAPUBLICKEYBLOB.PublicExponent)
}
inline void SKF_RSAPUBLICKEYBLOB::set_publicexponent(const void* value, size_t size) {
  
  publicexponent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.SKF_RSAPUBLICKEYBLOB.PublicExponent)
}
inline ::std::string* SKF_RSAPUBLICKEYBLOB::mutable_publicexponent() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_RSAPUBLICKEYBLOB.PublicExponent)
  return publicexponent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SKF_RSAPUBLICKEYBLOB::release_publicexponent() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_RSAPUBLICKEYBLOB.PublicExponent)
  
  return publicexponent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SKF_RSAPUBLICKEYBLOB::set_allocated_publicexponent(::std::string* publicexponent) {
  if (publicexponent != nullptr) {
    
  } else {
    
  }
  publicexponent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publicexponent);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_RSAPUBLICKEYBLOB.PublicExponent)
}

// -------------------------------------------------------------------

// SKF_RSAPRIVATEKEYBLOB

// .com.westone.skf.WST_PROTO_UINT32 AlgID = 1;
inline bool SKF_RSAPRIVATEKEYBLOB::has_algid() const {
  return this != internal_default_instance() && algid_ != nullptr;
}
inline void SKF_RSAPRIVATEKEYBLOB::clear_algid() {
  if (GetArenaNoVirtual() == nullptr && algid_ != nullptr) {
    delete algid_;
  }
  algid_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& SKF_RSAPRIVATEKEYBLOB::algid() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = algid_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.AlgID)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_RSAPRIVATEKEYBLOB::release_algid() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.AlgID)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = algid_;
  algid_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_RSAPRIVATEKEYBLOB::mutable_algid() {
  
  if (algid_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    algid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.AlgID)
  return algid_;
}
inline void SKF_RSAPRIVATEKEYBLOB::set_allocated_algid(::com::westone::skf::WST_PROTO_UINT32* algid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete algid_;
  }
  if (algid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      algid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, algid, submessage_arena);
    }
    
  } else {
    
  }
  algid_ = algid;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.AlgID)
}

// .com.westone.skf.WST_PROTO_UINT32 BitLen = 2;
inline bool SKF_RSAPRIVATEKEYBLOB::has_bitlen() const {
  return this != internal_default_instance() && bitlen_ != nullptr;
}
inline void SKF_RSAPRIVATEKEYBLOB::clear_bitlen() {
  if (GetArenaNoVirtual() == nullptr && bitlen_ != nullptr) {
    delete bitlen_;
  }
  bitlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& SKF_RSAPRIVATEKEYBLOB::bitlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = bitlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.BitLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_RSAPRIVATEKEYBLOB::release_bitlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.BitLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = bitlen_;
  bitlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_RSAPRIVATEKEYBLOB::mutable_bitlen() {
  
  if (bitlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    bitlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.BitLen)
  return bitlen_;
}
inline void SKF_RSAPRIVATEKEYBLOB::set_allocated_bitlen(::com::westone::skf::WST_PROTO_UINT32* bitlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bitlen_;
  }
  if (bitlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bitlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bitlen, submessage_arena);
    }
    
  } else {
    
  }
  bitlen_ = bitlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.BitLen)
}

// bytes Modulus = 3;
inline void SKF_RSAPRIVATEKEYBLOB::clear_modulus() {
  modulus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SKF_RSAPRIVATEKEYBLOB::modulus() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Modulus)
  return modulus_.GetNoArena();
}
inline void SKF_RSAPRIVATEKEYBLOB::set_modulus(const ::std::string& value) {
  
  modulus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Modulus)
}
#if LANG_CXX11
inline void SKF_RSAPRIVATEKEYBLOB::set_modulus(::std::string&& value) {
  
  modulus_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Modulus)
}
#endif
inline void SKF_RSAPRIVATEKEYBLOB::set_modulus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modulus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Modulus)
}
inline void SKF_RSAPRIVATEKEYBLOB::set_modulus(const void* value, size_t size) {
  
  modulus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Modulus)
}
inline ::std::string* SKF_RSAPRIVATEKEYBLOB::mutable_modulus() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Modulus)
  return modulus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SKF_RSAPRIVATEKEYBLOB::release_modulus() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Modulus)
  
  return modulus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SKF_RSAPRIVATEKEYBLOB::set_allocated_modulus(::std::string* modulus) {
  if (modulus != nullptr) {
    
  } else {
    
  }
  modulus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modulus);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Modulus)
}

// bytes PublicExponent = 4;
inline void SKF_RSAPRIVATEKEYBLOB::clear_publicexponent() {
  publicexponent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SKF_RSAPRIVATEKEYBLOB::publicexponent() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.PublicExponent)
  return publicexponent_.GetNoArena();
}
inline void SKF_RSAPRIVATEKEYBLOB::set_publicexponent(const ::std::string& value) {
  
  publicexponent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.PublicExponent)
}
#if LANG_CXX11
inline void SKF_RSAPRIVATEKEYBLOB::set_publicexponent(::std::string&& value) {
  
  publicexponent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.PublicExponent)
}
#endif
inline void SKF_RSAPRIVATEKEYBLOB::set_publicexponent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  publicexponent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.PublicExponent)
}
inline void SKF_RSAPRIVATEKEYBLOB::set_publicexponent(const void* value, size_t size) {
  
  publicexponent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.PublicExponent)
}
inline ::std::string* SKF_RSAPRIVATEKEYBLOB::mutable_publicexponent() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.PublicExponent)
  return publicexponent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SKF_RSAPRIVATEKEYBLOB::release_publicexponent() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.PublicExponent)
  
  return publicexponent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SKF_RSAPRIVATEKEYBLOB::set_allocated_publicexponent(::std::string* publicexponent) {
  if (publicexponent != nullptr) {
    
  } else {
    
  }
  publicexponent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publicexponent);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.PublicExponent)
}

// bytes PrivateExponent = 5;
inline void SKF_RSAPRIVATEKEYBLOB::clear_privateexponent() {
  privateexponent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SKF_RSAPRIVATEKEYBLOB::privateexponent() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.PrivateExponent)
  return privateexponent_.GetNoArena();
}
inline void SKF_RSAPRIVATEKEYBLOB::set_privateexponent(const ::std::string& value) {
  
  privateexponent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.PrivateExponent)
}
#if LANG_CXX11
inline void SKF_RSAPRIVATEKEYBLOB::set_privateexponent(::std::string&& value) {
  
  privateexponent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.PrivateExponent)
}
#endif
inline void SKF_RSAPRIVATEKEYBLOB::set_privateexponent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  privateexponent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.PrivateExponent)
}
inline void SKF_RSAPRIVATEKEYBLOB::set_privateexponent(const void* value, size_t size) {
  
  privateexponent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.PrivateExponent)
}
inline ::std::string* SKF_RSAPRIVATEKEYBLOB::mutable_privateexponent() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.PrivateExponent)
  return privateexponent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SKF_RSAPRIVATEKEYBLOB::release_privateexponent() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.PrivateExponent)
  
  return privateexponent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SKF_RSAPRIVATEKEYBLOB::set_allocated_privateexponent(::std::string* privateexponent) {
  if (privateexponent != nullptr) {
    
  } else {
    
  }
  privateexponent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), privateexponent);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.PrivateExponent)
}

// bytes Prime1 = 6;
inline void SKF_RSAPRIVATEKEYBLOB::clear_prime1() {
  prime1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SKF_RSAPRIVATEKEYBLOB::prime1() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime1)
  return prime1_.GetNoArena();
}
inline void SKF_RSAPRIVATEKEYBLOB::set_prime1(const ::std::string& value) {
  
  prime1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime1)
}
#if LANG_CXX11
inline void SKF_RSAPRIVATEKEYBLOB::set_prime1(::std::string&& value) {
  
  prime1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime1)
}
#endif
inline void SKF_RSAPRIVATEKEYBLOB::set_prime1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prime1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime1)
}
inline void SKF_RSAPRIVATEKEYBLOB::set_prime1(const void* value, size_t size) {
  
  prime1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime1)
}
inline ::std::string* SKF_RSAPRIVATEKEYBLOB::mutable_prime1() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime1)
  return prime1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SKF_RSAPRIVATEKEYBLOB::release_prime1() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime1)
  
  return prime1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SKF_RSAPRIVATEKEYBLOB::set_allocated_prime1(::std::string* prime1) {
  if (prime1 != nullptr) {
    
  } else {
    
  }
  prime1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prime1);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime1)
}

// bytes Prime2 = 7;
inline void SKF_RSAPRIVATEKEYBLOB::clear_prime2() {
  prime2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SKF_RSAPRIVATEKEYBLOB::prime2() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime2)
  return prime2_.GetNoArena();
}
inline void SKF_RSAPRIVATEKEYBLOB::set_prime2(const ::std::string& value) {
  
  prime2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime2)
}
#if LANG_CXX11
inline void SKF_RSAPRIVATEKEYBLOB::set_prime2(::std::string&& value) {
  
  prime2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime2)
}
#endif
inline void SKF_RSAPRIVATEKEYBLOB::set_prime2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prime2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime2)
}
inline void SKF_RSAPRIVATEKEYBLOB::set_prime2(const void* value, size_t size) {
  
  prime2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime2)
}
inline ::std::string* SKF_RSAPRIVATEKEYBLOB::mutable_prime2() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime2)
  return prime2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SKF_RSAPRIVATEKEYBLOB::release_prime2() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime2)
  
  return prime2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SKF_RSAPRIVATEKEYBLOB::set_allocated_prime2(::std::string* prime2) {
  if (prime2 != nullptr) {
    
  } else {
    
  }
  prime2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prime2);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime2)
}

// bytes Prime1Exponent = 8;
inline void SKF_RSAPRIVATEKEYBLOB::clear_prime1exponent() {
  prime1exponent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SKF_RSAPRIVATEKEYBLOB::prime1exponent() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime1Exponent)
  return prime1exponent_.GetNoArena();
}
inline void SKF_RSAPRIVATEKEYBLOB::set_prime1exponent(const ::std::string& value) {
  
  prime1exponent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime1Exponent)
}
#if LANG_CXX11
inline void SKF_RSAPRIVATEKEYBLOB::set_prime1exponent(::std::string&& value) {
  
  prime1exponent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime1Exponent)
}
#endif
inline void SKF_RSAPRIVATEKEYBLOB::set_prime1exponent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prime1exponent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime1Exponent)
}
inline void SKF_RSAPRIVATEKEYBLOB::set_prime1exponent(const void* value, size_t size) {
  
  prime1exponent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime1Exponent)
}
inline ::std::string* SKF_RSAPRIVATEKEYBLOB::mutable_prime1exponent() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime1Exponent)
  return prime1exponent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SKF_RSAPRIVATEKEYBLOB::release_prime1exponent() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime1Exponent)
  
  return prime1exponent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SKF_RSAPRIVATEKEYBLOB::set_allocated_prime1exponent(::std::string* prime1exponent) {
  if (prime1exponent != nullptr) {
    
  } else {
    
  }
  prime1exponent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prime1exponent);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime1Exponent)
}

// bytes Prime2Exponent = 9;
inline void SKF_RSAPRIVATEKEYBLOB::clear_prime2exponent() {
  prime2exponent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SKF_RSAPRIVATEKEYBLOB::prime2exponent() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime2Exponent)
  return prime2exponent_.GetNoArena();
}
inline void SKF_RSAPRIVATEKEYBLOB::set_prime2exponent(const ::std::string& value) {
  
  prime2exponent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime2Exponent)
}
#if LANG_CXX11
inline void SKF_RSAPRIVATEKEYBLOB::set_prime2exponent(::std::string&& value) {
  
  prime2exponent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime2Exponent)
}
#endif
inline void SKF_RSAPRIVATEKEYBLOB::set_prime2exponent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prime2exponent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime2Exponent)
}
inline void SKF_RSAPRIVATEKEYBLOB::set_prime2exponent(const void* value, size_t size) {
  
  prime2exponent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime2Exponent)
}
inline ::std::string* SKF_RSAPRIVATEKEYBLOB::mutable_prime2exponent() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime2Exponent)
  return prime2exponent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SKF_RSAPRIVATEKEYBLOB::release_prime2exponent() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime2Exponent)
  
  return prime2exponent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SKF_RSAPRIVATEKEYBLOB::set_allocated_prime2exponent(::std::string* prime2exponent) {
  if (prime2exponent != nullptr) {
    
  } else {
    
  }
  prime2exponent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), prime2exponent);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Prime2Exponent)
}

// bytes Coefficient = 10;
inline void SKF_RSAPRIVATEKEYBLOB::clear_coefficient() {
  coefficient_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SKF_RSAPRIVATEKEYBLOB::coefficient() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Coefficient)
  return coefficient_.GetNoArena();
}
inline void SKF_RSAPRIVATEKEYBLOB::set_coefficient(const ::std::string& value) {
  
  coefficient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Coefficient)
}
#if LANG_CXX11
inline void SKF_RSAPRIVATEKEYBLOB::set_coefficient(::std::string&& value) {
  
  coefficient_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Coefficient)
}
#endif
inline void SKF_RSAPRIVATEKEYBLOB::set_coefficient(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  coefficient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Coefficient)
}
inline void SKF_RSAPRIVATEKEYBLOB::set_coefficient(const void* value, size_t size) {
  
  coefficient_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Coefficient)
}
inline ::std::string* SKF_RSAPRIVATEKEYBLOB::mutable_coefficient() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Coefficient)
  return coefficient_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SKF_RSAPRIVATEKEYBLOB::release_coefficient() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Coefficient)
  
  return coefficient_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SKF_RSAPRIVATEKEYBLOB::set_allocated_coefficient(::std::string* coefficient) {
  if (coefficient != nullptr) {
    
  } else {
    
  }
  coefficient_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), coefficient);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_RSAPRIVATEKEYBLOB.Coefficient)
}

// -------------------------------------------------------------------

// SKF_ECCPUBLICKEYBLOB

// .com.westone.skf.WST_PROTO_UINT32 BitLen = 1;
inline bool SKF_ECCPUBLICKEYBLOB::has_bitlen() const {
  return this != internal_default_instance() && bitlen_ != nullptr;
}
inline void SKF_ECCPUBLICKEYBLOB::clear_bitlen() {
  if (GetArenaNoVirtual() == nullptr && bitlen_ != nullptr) {
    delete bitlen_;
  }
  bitlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& SKF_ECCPUBLICKEYBLOB::bitlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = bitlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_ECCPUBLICKEYBLOB.BitLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_ECCPUBLICKEYBLOB::release_bitlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_ECCPUBLICKEYBLOB.BitLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = bitlen_;
  bitlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_ECCPUBLICKEYBLOB::mutable_bitlen() {
  
  if (bitlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    bitlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_ECCPUBLICKEYBLOB.BitLen)
  return bitlen_;
}
inline void SKF_ECCPUBLICKEYBLOB::set_allocated_bitlen(::com::westone::skf::WST_PROTO_UINT32* bitlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bitlen_;
  }
  if (bitlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bitlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bitlen, submessage_arena);
    }
    
  } else {
    
  }
  bitlen_ = bitlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_ECCPUBLICKEYBLOB.BitLen)
}

// bytes XCoordinate = 2;
inline void SKF_ECCPUBLICKEYBLOB::clear_xcoordinate() {
  xcoordinate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SKF_ECCPUBLICKEYBLOB::xcoordinate() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_ECCPUBLICKEYBLOB.XCoordinate)
  return xcoordinate_.GetNoArena();
}
inline void SKF_ECCPUBLICKEYBLOB::set_xcoordinate(const ::std::string& value) {
  
  xcoordinate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.SKF_ECCPUBLICKEYBLOB.XCoordinate)
}
#if LANG_CXX11
inline void SKF_ECCPUBLICKEYBLOB::set_xcoordinate(::std::string&& value) {
  
  xcoordinate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.SKF_ECCPUBLICKEYBLOB.XCoordinate)
}
#endif
inline void SKF_ECCPUBLICKEYBLOB::set_xcoordinate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  xcoordinate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.SKF_ECCPUBLICKEYBLOB.XCoordinate)
}
inline void SKF_ECCPUBLICKEYBLOB::set_xcoordinate(const void* value, size_t size) {
  
  xcoordinate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.SKF_ECCPUBLICKEYBLOB.XCoordinate)
}
inline ::std::string* SKF_ECCPUBLICKEYBLOB::mutable_xcoordinate() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_ECCPUBLICKEYBLOB.XCoordinate)
  return xcoordinate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SKF_ECCPUBLICKEYBLOB::release_xcoordinate() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_ECCPUBLICKEYBLOB.XCoordinate)
  
  return xcoordinate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SKF_ECCPUBLICKEYBLOB::set_allocated_xcoordinate(::std::string* xcoordinate) {
  if (xcoordinate != nullptr) {
    
  } else {
    
  }
  xcoordinate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xcoordinate);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_ECCPUBLICKEYBLOB.XCoordinate)
}

// bytes YCoordinate = 3;
inline void SKF_ECCPUBLICKEYBLOB::clear_ycoordinate() {
  ycoordinate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SKF_ECCPUBLICKEYBLOB::ycoordinate() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_ECCPUBLICKEYBLOB.YCoordinate)
  return ycoordinate_.GetNoArena();
}
inline void SKF_ECCPUBLICKEYBLOB::set_ycoordinate(const ::std::string& value) {
  
  ycoordinate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.SKF_ECCPUBLICKEYBLOB.YCoordinate)
}
#if LANG_CXX11
inline void SKF_ECCPUBLICKEYBLOB::set_ycoordinate(::std::string&& value) {
  
  ycoordinate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.SKF_ECCPUBLICKEYBLOB.YCoordinate)
}
#endif
inline void SKF_ECCPUBLICKEYBLOB::set_ycoordinate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ycoordinate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.SKF_ECCPUBLICKEYBLOB.YCoordinate)
}
inline void SKF_ECCPUBLICKEYBLOB::set_ycoordinate(const void* value, size_t size) {
  
  ycoordinate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.SKF_ECCPUBLICKEYBLOB.YCoordinate)
}
inline ::std::string* SKF_ECCPUBLICKEYBLOB::mutable_ycoordinate() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_ECCPUBLICKEYBLOB.YCoordinate)
  return ycoordinate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SKF_ECCPUBLICKEYBLOB::release_ycoordinate() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_ECCPUBLICKEYBLOB.YCoordinate)
  
  return ycoordinate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SKF_ECCPUBLICKEYBLOB::set_allocated_ycoordinate(::std::string* ycoordinate) {
  if (ycoordinate != nullptr) {
    
  } else {
    
  }
  ycoordinate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ycoordinate);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_ECCPUBLICKEYBLOB.YCoordinate)
}

// -------------------------------------------------------------------

// SKF_ECCPRIVATEKEYBLOB

// .com.westone.skf.WST_PROTO_UINT32 BitLen = 1;
inline bool SKF_ECCPRIVATEKEYBLOB::has_bitlen() const {
  return this != internal_default_instance() && bitlen_ != nullptr;
}
inline void SKF_ECCPRIVATEKEYBLOB::clear_bitlen() {
  if (GetArenaNoVirtual() == nullptr && bitlen_ != nullptr) {
    delete bitlen_;
  }
  bitlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& SKF_ECCPRIVATEKEYBLOB::bitlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = bitlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_ECCPRIVATEKEYBLOB.BitLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_ECCPRIVATEKEYBLOB::release_bitlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_ECCPRIVATEKEYBLOB.BitLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = bitlen_;
  bitlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_ECCPRIVATEKEYBLOB::mutable_bitlen() {
  
  if (bitlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    bitlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_ECCPRIVATEKEYBLOB.BitLen)
  return bitlen_;
}
inline void SKF_ECCPRIVATEKEYBLOB::set_allocated_bitlen(::com::westone::skf::WST_PROTO_UINT32* bitlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bitlen_;
  }
  if (bitlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bitlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bitlen, submessage_arena);
    }
    
  } else {
    
  }
  bitlen_ = bitlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_ECCPRIVATEKEYBLOB.BitLen)
}

// bytes PrivateKey = 2;
inline void SKF_ECCPRIVATEKEYBLOB::clear_privatekey() {
  privatekey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SKF_ECCPRIVATEKEYBLOB::privatekey() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_ECCPRIVATEKEYBLOB.PrivateKey)
  return privatekey_.GetNoArena();
}
inline void SKF_ECCPRIVATEKEYBLOB::set_privatekey(const ::std::string& value) {
  
  privatekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.SKF_ECCPRIVATEKEYBLOB.PrivateKey)
}
#if LANG_CXX11
inline void SKF_ECCPRIVATEKEYBLOB::set_privatekey(::std::string&& value) {
  
  privatekey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.SKF_ECCPRIVATEKEYBLOB.PrivateKey)
}
#endif
inline void SKF_ECCPRIVATEKEYBLOB::set_privatekey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  privatekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.SKF_ECCPRIVATEKEYBLOB.PrivateKey)
}
inline void SKF_ECCPRIVATEKEYBLOB::set_privatekey(const void* value, size_t size) {
  
  privatekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.SKF_ECCPRIVATEKEYBLOB.PrivateKey)
}
inline ::std::string* SKF_ECCPRIVATEKEYBLOB::mutable_privatekey() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_ECCPRIVATEKEYBLOB.PrivateKey)
  return privatekey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SKF_ECCPRIVATEKEYBLOB::release_privatekey() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_ECCPRIVATEKEYBLOB.PrivateKey)
  
  return privatekey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SKF_ECCPRIVATEKEYBLOB::set_allocated_privatekey(::std::string* privatekey) {
  if (privatekey != nullptr) {
    
  } else {
    
  }
  privatekey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), privatekey);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_ECCPRIVATEKEYBLOB.PrivateKey)
}

// -------------------------------------------------------------------

// SKF_ECCCIPHERBLOB

// bytes XCoordinate = 1;
inline void SKF_ECCCIPHERBLOB::clear_xcoordinate() {
  xcoordinate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SKF_ECCCIPHERBLOB::xcoordinate() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_ECCCIPHERBLOB.XCoordinate)
  return xcoordinate_.GetNoArena();
}
inline void SKF_ECCCIPHERBLOB::set_xcoordinate(const ::std::string& value) {
  
  xcoordinate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.SKF_ECCCIPHERBLOB.XCoordinate)
}
#if LANG_CXX11
inline void SKF_ECCCIPHERBLOB::set_xcoordinate(::std::string&& value) {
  
  xcoordinate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.SKF_ECCCIPHERBLOB.XCoordinate)
}
#endif
inline void SKF_ECCCIPHERBLOB::set_xcoordinate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  xcoordinate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.SKF_ECCCIPHERBLOB.XCoordinate)
}
inline void SKF_ECCCIPHERBLOB::set_xcoordinate(const void* value, size_t size) {
  
  xcoordinate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.SKF_ECCCIPHERBLOB.XCoordinate)
}
inline ::std::string* SKF_ECCCIPHERBLOB::mutable_xcoordinate() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_ECCCIPHERBLOB.XCoordinate)
  return xcoordinate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SKF_ECCCIPHERBLOB::release_xcoordinate() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_ECCCIPHERBLOB.XCoordinate)
  
  return xcoordinate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SKF_ECCCIPHERBLOB::set_allocated_xcoordinate(::std::string* xcoordinate) {
  if (xcoordinate != nullptr) {
    
  } else {
    
  }
  xcoordinate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), xcoordinate);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_ECCCIPHERBLOB.XCoordinate)
}

// bytes YCoordinate = 2;
inline void SKF_ECCCIPHERBLOB::clear_ycoordinate() {
  ycoordinate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SKF_ECCCIPHERBLOB::ycoordinate() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_ECCCIPHERBLOB.YCoordinate)
  return ycoordinate_.GetNoArena();
}
inline void SKF_ECCCIPHERBLOB::set_ycoordinate(const ::std::string& value) {
  
  ycoordinate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.SKF_ECCCIPHERBLOB.YCoordinate)
}
#if LANG_CXX11
inline void SKF_ECCCIPHERBLOB::set_ycoordinate(::std::string&& value) {
  
  ycoordinate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.SKF_ECCCIPHERBLOB.YCoordinate)
}
#endif
inline void SKF_ECCCIPHERBLOB::set_ycoordinate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ycoordinate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.SKF_ECCCIPHERBLOB.YCoordinate)
}
inline void SKF_ECCCIPHERBLOB::set_ycoordinate(const void* value, size_t size) {
  
  ycoordinate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.SKF_ECCCIPHERBLOB.YCoordinate)
}
inline ::std::string* SKF_ECCCIPHERBLOB::mutable_ycoordinate() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_ECCCIPHERBLOB.YCoordinate)
  return ycoordinate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SKF_ECCCIPHERBLOB::release_ycoordinate() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_ECCCIPHERBLOB.YCoordinate)
  
  return ycoordinate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SKF_ECCCIPHERBLOB::set_allocated_ycoordinate(::std::string* ycoordinate) {
  if (ycoordinate != nullptr) {
    
  } else {
    
  }
  ycoordinate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ycoordinate);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_ECCCIPHERBLOB.YCoordinate)
}

// bytes HASH = 3;
inline void SKF_ECCCIPHERBLOB::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SKF_ECCCIPHERBLOB::hash() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_ECCCIPHERBLOB.HASH)
  return hash_.GetNoArena();
}
inline void SKF_ECCCIPHERBLOB::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.SKF_ECCCIPHERBLOB.HASH)
}
#if LANG_CXX11
inline void SKF_ECCCIPHERBLOB::set_hash(::std::string&& value) {
  
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.SKF_ECCCIPHERBLOB.HASH)
}
#endif
inline void SKF_ECCCIPHERBLOB::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.SKF_ECCCIPHERBLOB.HASH)
}
inline void SKF_ECCCIPHERBLOB::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.SKF_ECCCIPHERBLOB.HASH)
}
inline ::std::string* SKF_ECCCIPHERBLOB::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_ECCCIPHERBLOB.HASH)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SKF_ECCCIPHERBLOB::release_hash() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_ECCCIPHERBLOB.HASH)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SKF_ECCCIPHERBLOB::set_allocated_hash(::std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_ECCCIPHERBLOB.HASH)
}

// .com.westone.skf.WST_PROTO_UINT32 CipherLen = 4;
inline bool SKF_ECCCIPHERBLOB::has_cipherlen() const {
  return this != internal_default_instance() && cipherlen_ != nullptr;
}
inline void SKF_ECCCIPHERBLOB::clear_cipherlen() {
  if (GetArenaNoVirtual() == nullptr && cipherlen_ != nullptr) {
    delete cipherlen_;
  }
  cipherlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& SKF_ECCCIPHERBLOB::cipherlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = cipherlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_ECCCIPHERBLOB.CipherLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_ECCCIPHERBLOB::release_cipherlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_ECCCIPHERBLOB.CipherLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = cipherlen_;
  cipherlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_ECCCIPHERBLOB::mutable_cipherlen() {
  
  if (cipherlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    cipherlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_ECCCIPHERBLOB.CipherLen)
  return cipherlen_;
}
inline void SKF_ECCCIPHERBLOB::set_allocated_cipherlen(::com::westone::skf::WST_PROTO_UINT32* cipherlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cipherlen_;
  }
  if (cipherlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cipherlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cipherlen, submessage_arena);
    }
    
  } else {
    
  }
  cipherlen_ = cipherlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_ECCCIPHERBLOB.CipherLen)
}

// bytes Cipher = 5;
inline void SKF_ECCCIPHERBLOB::clear_cipher() {
  cipher_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SKF_ECCCIPHERBLOB::cipher() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_ECCCIPHERBLOB.Cipher)
  return cipher_.GetNoArena();
}
inline void SKF_ECCCIPHERBLOB::set_cipher(const ::std::string& value) {
  
  cipher_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.SKF_ECCCIPHERBLOB.Cipher)
}
#if LANG_CXX11
inline void SKF_ECCCIPHERBLOB::set_cipher(::std::string&& value) {
  
  cipher_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.SKF_ECCCIPHERBLOB.Cipher)
}
#endif
inline void SKF_ECCCIPHERBLOB::set_cipher(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cipher_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.SKF_ECCCIPHERBLOB.Cipher)
}
inline void SKF_ECCCIPHERBLOB::set_cipher(const void* value, size_t size) {
  
  cipher_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.SKF_ECCCIPHERBLOB.Cipher)
}
inline ::std::string* SKF_ECCCIPHERBLOB::mutable_cipher() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_ECCCIPHERBLOB.Cipher)
  return cipher_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SKF_ECCCIPHERBLOB::release_cipher() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_ECCCIPHERBLOB.Cipher)
  
  return cipher_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SKF_ECCCIPHERBLOB::set_allocated_cipher(::std::string* cipher) {
  if (cipher != nullptr) {
    
  } else {
    
  }
  cipher_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cipher);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_ECCCIPHERBLOB.Cipher)
}

// -------------------------------------------------------------------

// SKF_ECCSIGNATUREBLOB

// bytes r = 1;
inline void SKF_ECCSIGNATUREBLOB::clear_r() {
  r_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SKF_ECCSIGNATUREBLOB::r() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_ECCSIGNATUREBLOB.r)
  return r_.GetNoArena();
}
inline void SKF_ECCSIGNATUREBLOB::set_r(const ::std::string& value) {
  
  r_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.SKF_ECCSIGNATUREBLOB.r)
}
#if LANG_CXX11
inline void SKF_ECCSIGNATUREBLOB::set_r(::std::string&& value) {
  
  r_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.SKF_ECCSIGNATUREBLOB.r)
}
#endif
inline void SKF_ECCSIGNATUREBLOB::set_r(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  r_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.SKF_ECCSIGNATUREBLOB.r)
}
inline void SKF_ECCSIGNATUREBLOB::set_r(const void* value, size_t size) {
  
  r_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.SKF_ECCSIGNATUREBLOB.r)
}
inline ::std::string* SKF_ECCSIGNATUREBLOB::mutable_r() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_ECCSIGNATUREBLOB.r)
  return r_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SKF_ECCSIGNATUREBLOB::release_r() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_ECCSIGNATUREBLOB.r)
  
  return r_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SKF_ECCSIGNATUREBLOB::set_allocated_r(::std::string* r) {
  if (r != nullptr) {
    
  } else {
    
  }
  r_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), r);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_ECCSIGNATUREBLOB.r)
}

// bytes s = 2;
inline void SKF_ECCSIGNATUREBLOB::clear_s() {
  s_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SKF_ECCSIGNATUREBLOB::s() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_ECCSIGNATUREBLOB.s)
  return s_.GetNoArena();
}
inline void SKF_ECCSIGNATUREBLOB::set_s(const ::std::string& value) {
  
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.SKF_ECCSIGNATUREBLOB.s)
}
#if LANG_CXX11
inline void SKF_ECCSIGNATUREBLOB::set_s(::std::string&& value) {
  
  s_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.SKF_ECCSIGNATUREBLOB.s)
}
#endif
inline void SKF_ECCSIGNATUREBLOB::set_s(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.SKF_ECCSIGNATUREBLOB.s)
}
inline void SKF_ECCSIGNATUREBLOB::set_s(const void* value, size_t size) {
  
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.SKF_ECCSIGNATUREBLOB.s)
}
inline ::std::string* SKF_ECCSIGNATUREBLOB::mutable_s() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_ECCSIGNATUREBLOB.s)
  return s_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SKF_ECCSIGNATUREBLOB::release_s() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_ECCSIGNATUREBLOB.s)
  
  return s_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SKF_ECCSIGNATUREBLOB::set_allocated_s(::std::string* s) {
  if (s != nullptr) {
    
  } else {
    
  }
  s_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), s);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_ECCSIGNATUREBLOB.s)
}

// -------------------------------------------------------------------

// SKF_BLOCKCIPHERPARAM

// bytes IV = 1;
inline void SKF_BLOCKCIPHERPARAM::clear_iv() {
  iv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SKF_BLOCKCIPHERPARAM::iv() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_BLOCKCIPHERPARAM.IV)
  return iv_.GetNoArena();
}
inline void SKF_BLOCKCIPHERPARAM::set_iv(const ::std::string& value) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.SKF_BLOCKCIPHERPARAM.IV)
}
#if LANG_CXX11
inline void SKF_BLOCKCIPHERPARAM::set_iv(::std::string&& value) {
  
  iv_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.SKF_BLOCKCIPHERPARAM.IV)
}
#endif
inline void SKF_BLOCKCIPHERPARAM::set_iv(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.SKF_BLOCKCIPHERPARAM.IV)
}
inline void SKF_BLOCKCIPHERPARAM::set_iv(const void* value, size_t size) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.SKF_BLOCKCIPHERPARAM.IV)
}
inline ::std::string* SKF_BLOCKCIPHERPARAM::mutable_iv() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_BLOCKCIPHERPARAM.IV)
  return iv_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SKF_BLOCKCIPHERPARAM::release_iv() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_BLOCKCIPHERPARAM.IV)
  
  return iv_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SKF_BLOCKCIPHERPARAM::set_allocated_iv(::std::string* iv) {
  if (iv != nullptr) {
    
  } else {
    
  }
  iv_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iv);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_BLOCKCIPHERPARAM.IV)
}

// .com.westone.skf.WST_PROTO_UINT32 IVLen = 2;
inline bool SKF_BLOCKCIPHERPARAM::has_ivlen() const {
  return this != internal_default_instance() && ivlen_ != nullptr;
}
inline void SKF_BLOCKCIPHERPARAM::clear_ivlen() {
  if (GetArenaNoVirtual() == nullptr && ivlen_ != nullptr) {
    delete ivlen_;
  }
  ivlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& SKF_BLOCKCIPHERPARAM::ivlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ivlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_BLOCKCIPHERPARAM.IVLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_BLOCKCIPHERPARAM::release_ivlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_BLOCKCIPHERPARAM.IVLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ivlen_;
  ivlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_BLOCKCIPHERPARAM::mutable_ivlen() {
  
  if (ivlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ivlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_BLOCKCIPHERPARAM.IVLen)
  return ivlen_;
}
inline void SKF_BLOCKCIPHERPARAM::set_allocated_ivlen(::com::westone::skf::WST_PROTO_UINT32* ivlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ivlen_;
  }
  if (ivlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ivlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ivlen, submessage_arena);
    }
    
  } else {
    
  }
  ivlen_ = ivlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_BLOCKCIPHERPARAM.IVLen)
}

// .com.westone.skf.WST_PROTO_UINT32 PaddingType = 3;
inline bool SKF_BLOCKCIPHERPARAM::has_paddingtype() const {
  return this != internal_default_instance() && paddingtype_ != nullptr;
}
inline void SKF_BLOCKCIPHERPARAM::clear_paddingtype() {
  if (GetArenaNoVirtual() == nullptr && paddingtype_ != nullptr) {
    delete paddingtype_;
  }
  paddingtype_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& SKF_BLOCKCIPHERPARAM::paddingtype() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = paddingtype_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_BLOCKCIPHERPARAM.PaddingType)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_BLOCKCIPHERPARAM::release_paddingtype() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_BLOCKCIPHERPARAM.PaddingType)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = paddingtype_;
  paddingtype_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_BLOCKCIPHERPARAM::mutable_paddingtype() {
  
  if (paddingtype_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    paddingtype_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_BLOCKCIPHERPARAM.PaddingType)
  return paddingtype_;
}
inline void SKF_BLOCKCIPHERPARAM::set_allocated_paddingtype(::com::westone::skf::WST_PROTO_UINT32* paddingtype) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete paddingtype_;
  }
  if (paddingtype) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      paddingtype = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, paddingtype, submessage_arena);
    }
    
  } else {
    
  }
  paddingtype_ = paddingtype;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_BLOCKCIPHERPARAM.PaddingType)
}

// .com.westone.skf.WST_PROTO_UINT32 FeedBitLen = 4;
inline bool SKF_BLOCKCIPHERPARAM::has_feedbitlen() const {
  return this != internal_default_instance() && feedbitlen_ != nullptr;
}
inline void SKF_BLOCKCIPHERPARAM::clear_feedbitlen() {
  if (GetArenaNoVirtual() == nullptr && feedbitlen_ != nullptr) {
    delete feedbitlen_;
  }
  feedbitlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& SKF_BLOCKCIPHERPARAM::feedbitlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = feedbitlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_BLOCKCIPHERPARAM.FeedBitLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_BLOCKCIPHERPARAM::release_feedbitlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_BLOCKCIPHERPARAM.FeedBitLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = feedbitlen_;
  feedbitlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_BLOCKCIPHERPARAM::mutable_feedbitlen() {
  
  if (feedbitlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    feedbitlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_BLOCKCIPHERPARAM.FeedBitLen)
  return feedbitlen_;
}
inline void SKF_BLOCKCIPHERPARAM::set_allocated_feedbitlen(::com::westone::skf::WST_PROTO_UINT32* feedbitlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete feedbitlen_;
  }
  if (feedbitlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      feedbitlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, feedbitlen, submessage_arena);
    }
    
  } else {
    
  }
  feedbitlen_ = feedbitlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_BLOCKCIPHERPARAM.FeedBitLen)
}

// -------------------------------------------------------------------

// SKF_ENVELOPEDKEYBLOB

// .com.westone.skf.WST_PROTO_UINT32 Version = 1;
inline bool SKF_ENVELOPEDKEYBLOB::has_version() const {
  return this != internal_default_instance() && version_ != nullptr;
}
inline void SKF_ENVELOPEDKEYBLOB::clear_version() {
  if (GetArenaNoVirtual() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& SKF_ENVELOPEDKEYBLOB::version() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = version_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_ENVELOPEDKEYBLOB.Version)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_ENVELOPEDKEYBLOB::release_version() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_ENVELOPEDKEYBLOB.Version)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = version_;
  version_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_ENVELOPEDKEYBLOB::mutable_version() {
  
  if (version_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_ENVELOPEDKEYBLOB.Version)
  return version_;
}
inline void SKF_ENVELOPEDKEYBLOB::set_allocated_version(::com::westone::skf::WST_PROTO_UINT32* version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete version_;
  }
  if (version) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_ENVELOPEDKEYBLOB.Version)
}

// .com.westone.skf.WST_PROTO_UINT32 ulSymmAlgID = 2;
inline bool SKF_ENVELOPEDKEYBLOB::has_ulsymmalgid() const {
  return this != internal_default_instance() && ulsymmalgid_ != nullptr;
}
inline void SKF_ENVELOPEDKEYBLOB::clear_ulsymmalgid() {
  if (GetArenaNoVirtual() == nullptr && ulsymmalgid_ != nullptr) {
    delete ulsymmalgid_;
  }
  ulsymmalgid_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& SKF_ENVELOPEDKEYBLOB::ulsymmalgid() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulsymmalgid_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_ENVELOPEDKEYBLOB.ulSymmAlgID)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_ENVELOPEDKEYBLOB::release_ulsymmalgid() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_ENVELOPEDKEYBLOB.ulSymmAlgID)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulsymmalgid_;
  ulsymmalgid_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_ENVELOPEDKEYBLOB::mutable_ulsymmalgid() {
  
  if (ulsymmalgid_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulsymmalgid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_ENVELOPEDKEYBLOB.ulSymmAlgID)
  return ulsymmalgid_;
}
inline void SKF_ENVELOPEDKEYBLOB::set_allocated_ulsymmalgid(::com::westone::skf::WST_PROTO_UINT32* ulsymmalgid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulsymmalgid_;
  }
  if (ulsymmalgid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulsymmalgid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulsymmalgid, submessage_arena);
    }
    
  } else {
    
  }
  ulsymmalgid_ = ulsymmalgid;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_ENVELOPEDKEYBLOB.ulSymmAlgID)
}

// .com.westone.skf.WST_PROTO_UINT32 ulBits = 3;
inline bool SKF_ENVELOPEDKEYBLOB::has_ulbits() const {
  return this != internal_default_instance() && ulbits_ != nullptr;
}
inline void SKF_ENVELOPEDKEYBLOB::clear_ulbits() {
  if (GetArenaNoVirtual() == nullptr && ulbits_ != nullptr) {
    delete ulbits_;
  }
  ulbits_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& SKF_ENVELOPEDKEYBLOB::ulbits() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulbits_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_ENVELOPEDKEYBLOB.ulBits)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_ENVELOPEDKEYBLOB::release_ulbits() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_ENVELOPEDKEYBLOB.ulBits)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulbits_;
  ulbits_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_ENVELOPEDKEYBLOB::mutable_ulbits() {
  
  if (ulbits_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulbits_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_ENVELOPEDKEYBLOB.ulBits)
  return ulbits_;
}
inline void SKF_ENVELOPEDKEYBLOB::set_allocated_ulbits(::com::westone::skf::WST_PROTO_UINT32* ulbits) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulbits_;
  }
  if (ulbits) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulbits = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulbits, submessage_arena);
    }
    
  } else {
    
  }
  ulbits_ = ulbits;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_ENVELOPEDKEYBLOB.ulBits)
}

// bytes cbEncryptedPriKey = 4;
inline void SKF_ENVELOPEDKEYBLOB::clear_cbencryptedprikey() {
  cbencryptedprikey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SKF_ENVELOPEDKEYBLOB::cbencryptedprikey() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_ENVELOPEDKEYBLOB.cbEncryptedPriKey)
  return cbencryptedprikey_.GetNoArena();
}
inline void SKF_ENVELOPEDKEYBLOB::set_cbencryptedprikey(const ::std::string& value) {
  
  cbencryptedprikey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.SKF_ENVELOPEDKEYBLOB.cbEncryptedPriKey)
}
#if LANG_CXX11
inline void SKF_ENVELOPEDKEYBLOB::set_cbencryptedprikey(::std::string&& value) {
  
  cbencryptedprikey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.SKF_ENVELOPEDKEYBLOB.cbEncryptedPriKey)
}
#endif
inline void SKF_ENVELOPEDKEYBLOB::set_cbencryptedprikey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cbencryptedprikey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.SKF_ENVELOPEDKEYBLOB.cbEncryptedPriKey)
}
inline void SKF_ENVELOPEDKEYBLOB::set_cbencryptedprikey(const void* value, size_t size) {
  
  cbencryptedprikey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.SKF_ENVELOPEDKEYBLOB.cbEncryptedPriKey)
}
inline ::std::string* SKF_ENVELOPEDKEYBLOB::mutable_cbencryptedprikey() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_ENVELOPEDKEYBLOB.cbEncryptedPriKey)
  return cbencryptedprikey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SKF_ENVELOPEDKEYBLOB::release_cbencryptedprikey() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_ENVELOPEDKEYBLOB.cbEncryptedPriKey)
  
  return cbencryptedprikey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SKF_ENVELOPEDKEYBLOB::set_allocated_cbencryptedprikey(::std::string* cbencryptedprikey) {
  if (cbencryptedprikey != nullptr) {
    
  } else {
    
  }
  cbencryptedprikey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cbencryptedprikey);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_ENVELOPEDKEYBLOB.cbEncryptedPriKey)
}

// .com.westone.skf.SKF_ECCPUBLICKEYBLOB PubKey = 5;
inline bool SKF_ENVELOPEDKEYBLOB::has_pubkey() const {
  return this != internal_default_instance() && pubkey_ != nullptr;
}
inline void SKF_ENVELOPEDKEYBLOB::clear_pubkey() {
  if (GetArenaNoVirtual() == nullptr && pubkey_ != nullptr) {
    delete pubkey_;
  }
  pubkey_ = nullptr;
}
inline const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& SKF_ENVELOPEDKEYBLOB::pubkey() const {
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* p = pubkey_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_ENVELOPEDKEYBLOB.PubKey)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      &::com::westone::skf::_SKF_ECCPUBLICKEYBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* SKF_ENVELOPEDKEYBLOB::release_pubkey() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_ENVELOPEDKEYBLOB.PubKey)
  
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* temp = pubkey_;
  pubkey_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* SKF_ENVELOPEDKEYBLOB::mutable_pubkey() {
  
  if (pubkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ECCPUBLICKEYBLOB>(GetArenaNoVirtual());
    pubkey_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_ENVELOPEDKEYBLOB.PubKey)
  return pubkey_;
}
inline void SKF_ENVELOPEDKEYBLOB::set_allocated_pubkey(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* pubkey) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pubkey_;
  }
  if (pubkey) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pubkey = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pubkey, submessage_arena);
    }
    
  } else {
    
  }
  pubkey_ = pubkey;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_ENVELOPEDKEYBLOB.PubKey)
}

// .com.westone.skf.SKF_ECCCIPHERBLOB ECCCipherBlob = 6;
inline bool SKF_ENVELOPEDKEYBLOB::has_ecccipherblob() const {
  return this != internal_default_instance() && ecccipherblob_ != nullptr;
}
inline void SKF_ENVELOPEDKEYBLOB::clear_ecccipherblob() {
  if (GetArenaNoVirtual() == nullptr && ecccipherblob_ != nullptr) {
    delete ecccipherblob_;
  }
  ecccipherblob_ = nullptr;
}
inline const ::com::westone::skf::SKF_ECCCIPHERBLOB& SKF_ENVELOPEDKEYBLOB::ecccipherblob() const {
  const ::com::westone::skf::SKF_ECCCIPHERBLOB* p = ecccipherblob_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_ENVELOPEDKEYBLOB.ECCCipherBlob)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ECCCIPHERBLOB*>(
      &::com::westone::skf::_SKF_ECCCIPHERBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ECCCIPHERBLOB* SKF_ENVELOPEDKEYBLOB::release_ecccipherblob() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_ENVELOPEDKEYBLOB.ECCCipherBlob)
  
  ::com::westone::skf::SKF_ECCCIPHERBLOB* temp = ecccipherblob_;
  ecccipherblob_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ECCCIPHERBLOB* SKF_ENVELOPEDKEYBLOB::mutable_ecccipherblob() {
  
  if (ecccipherblob_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ECCCIPHERBLOB>(GetArenaNoVirtual());
    ecccipherblob_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_ENVELOPEDKEYBLOB.ECCCipherBlob)
  return ecccipherblob_;
}
inline void SKF_ENVELOPEDKEYBLOB::set_allocated_ecccipherblob(::com::westone::skf::SKF_ECCCIPHERBLOB* ecccipherblob) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ecccipherblob_;
  }
  if (ecccipherblob) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ecccipherblob = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ecccipherblob, submessage_arena);
    }
    
  } else {
    
  }
  ecccipherblob_ = ecccipherblob;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_ENVELOPEDKEYBLOB.ECCCipherBlob)
}

// -------------------------------------------------------------------

// SKF_FILEATTRIBUTES

// bytes FileName = 1;
inline void SKF_FILEATTRIBUTES::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SKF_FILEATTRIBUTES::filename() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_FILEATTRIBUTES.FileName)
  return filename_.GetNoArena();
}
inline void SKF_FILEATTRIBUTES::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.SKF_FILEATTRIBUTES.FileName)
}
#if LANG_CXX11
inline void SKF_FILEATTRIBUTES::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.SKF_FILEATTRIBUTES.FileName)
}
#endif
inline void SKF_FILEATTRIBUTES::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.SKF_FILEATTRIBUTES.FileName)
}
inline void SKF_FILEATTRIBUTES::set_filename(const void* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.SKF_FILEATTRIBUTES.FileName)
}
inline ::std::string* SKF_FILEATTRIBUTES::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_FILEATTRIBUTES.FileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SKF_FILEATTRIBUTES::release_filename() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_FILEATTRIBUTES.FileName)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SKF_FILEATTRIBUTES::set_allocated_filename(::std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_FILEATTRIBUTES.FileName)
}

// .com.westone.skf.WST_PROTO_UINT32 FileSize = 2;
inline bool SKF_FILEATTRIBUTES::has_filesize() const {
  return this != internal_default_instance() && filesize_ != nullptr;
}
inline void SKF_FILEATTRIBUTES::clear_filesize() {
  if (GetArenaNoVirtual() == nullptr && filesize_ != nullptr) {
    delete filesize_;
  }
  filesize_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& SKF_FILEATTRIBUTES::filesize() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = filesize_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_FILEATTRIBUTES.FileSize)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_FILEATTRIBUTES::release_filesize() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_FILEATTRIBUTES.FileSize)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = filesize_;
  filesize_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_FILEATTRIBUTES::mutable_filesize() {
  
  if (filesize_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    filesize_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_FILEATTRIBUTES.FileSize)
  return filesize_;
}
inline void SKF_FILEATTRIBUTES::set_allocated_filesize(::com::westone::skf::WST_PROTO_UINT32* filesize) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete filesize_;
  }
  if (filesize) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      filesize = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, filesize, submessage_arena);
    }
    
  } else {
    
  }
  filesize_ = filesize;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_FILEATTRIBUTES.FileSize)
}

// .com.westone.skf.WST_PROTO_UINT32 ReadRights = 3;
inline bool SKF_FILEATTRIBUTES::has_readrights() const {
  return this != internal_default_instance() && readrights_ != nullptr;
}
inline void SKF_FILEATTRIBUTES::clear_readrights() {
  if (GetArenaNoVirtual() == nullptr && readrights_ != nullptr) {
    delete readrights_;
  }
  readrights_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& SKF_FILEATTRIBUTES::readrights() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = readrights_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_FILEATTRIBUTES.ReadRights)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_FILEATTRIBUTES::release_readrights() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_FILEATTRIBUTES.ReadRights)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = readrights_;
  readrights_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_FILEATTRIBUTES::mutable_readrights() {
  
  if (readrights_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    readrights_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_FILEATTRIBUTES.ReadRights)
  return readrights_;
}
inline void SKF_FILEATTRIBUTES::set_allocated_readrights(::com::westone::skf::WST_PROTO_UINT32* readrights) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete readrights_;
  }
  if (readrights) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      readrights = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, readrights, submessage_arena);
    }
    
  } else {
    
  }
  readrights_ = readrights;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_FILEATTRIBUTES.ReadRights)
}

// .com.westone.skf.WST_PROTO_UINT32 WriteRights = 4;
inline bool SKF_FILEATTRIBUTES::has_writerights() const {
  return this != internal_default_instance() && writerights_ != nullptr;
}
inline void SKF_FILEATTRIBUTES::clear_writerights() {
  if (GetArenaNoVirtual() == nullptr && writerights_ != nullptr) {
    delete writerights_;
  }
  writerights_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& SKF_FILEATTRIBUTES::writerights() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = writerights_;
  // @@protoc_insertion_point(field_get:com.westone.skf.SKF_FILEATTRIBUTES.WriteRights)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_FILEATTRIBUTES::release_writerights() {
  // @@protoc_insertion_point(field_release:com.westone.skf.SKF_FILEATTRIBUTES.WriteRights)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = writerights_;
  writerights_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* SKF_FILEATTRIBUTES::mutable_writerights() {
  
  if (writerights_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    writerights_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.SKF_FILEATTRIBUTES.WriteRights)
  return writerights_;
}
inline void SKF_FILEATTRIBUTES::set_allocated_writerights(::com::westone::skf::WST_PROTO_UINT32* writerights) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete writerights_;
  }
  if (writerights) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      writerights = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, writerights, submessage_arena);
    }
    
  } else {
    
  }
  writerights_ = writerights;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.SKF_FILEATTRIBUTES.WriteRights)
}

// -------------------------------------------------------------------

// Req_SKF_WaitForDevEvent

// bytes szDevName = 1;
inline void Req_SKF_WaitForDevEvent::clear_szdevname() {
  szdevname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_WaitForDevEvent::szdevname() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_WaitForDevEvent.szDevName)
  return szdevname_.GetNoArena();
}
inline void Req_SKF_WaitForDevEvent::set_szdevname(const ::std::string& value) {
  
  szdevname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_WaitForDevEvent.szDevName)
}
#if LANG_CXX11
inline void Req_SKF_WaitForDevEvent::set_szdevname(::std::string&& value) {
  
  szdevname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_WaitForDevEvent.szDevName)
}
#endif
inline void Req_SKF_WaitForDevEvent::set_szdevname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  szdevname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_WaitForDevEvent.szDevName)
}
inline void Req_SKF_WaitForDevEvent::set_szdevname(const void* value, size_t size) {
  
  szdevname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_WaitForDevEvent.szDevName)
}
inline ::std::string* Req_SKF_WaitForDevEvent::mutable_szdevname() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_WaitForDevEvent.szDevName)
  return szdevname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_WaitForDevEvent::release_szdevname() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_WaitForDevEvent.szDevName)
  
  return szdevname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_WaitForDevEvent::set_allocated_szdevname(::std::string* szdevname) {
  if (szdevname != nullptr) {
    
  } else {
    
  }
  szdevname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szdevname);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_WaitForDevEvent.szDevName)
}

// .com.westone.skf.WST_PROTO_UINT32 pulDevNameLen = 2;
inline bool Req_SKF_WaitForDevEvent::has_puldevnamelen() const {
  return this != internal_default_instance() && puldevnamelen_ != nullptr;
}
inline void Req_SKF_WaitForDevEvent::clear_puldevnamelen() {
  if (GetArenaNoVirtual() == nullptr && puldevnamelen_ != nullptr) {
    delete puldevnamelen_;
  }
  puldevnamelen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_WaitForDevEvent::puldevnamelen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = puldevnamelen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_WaitForDevEvent.pulDevNameLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_WaitForDevEvent::release_puldevnamelen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_WaitForDevEvent.pulDevNameLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = puldevnamelen_;
  puldevnamelen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_WaitForDevEvent::mutable_puldevnamelen() {
  
  if (puldevnamelen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    puldevnamelen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_WaitForDevEvent.pulDevNameLen)
  return puldevnamelen_;
}
inline void Req_SKF_WaitForDevEvent::set_allocated_puldevnamelen(::com::westone::skf::WST_PROTO_UINT32* puldevnamelen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete puldevnamelen_;
  }
  if (puldevnamelen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      puldevnamelen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, puldevnamelen, submessage_arena);
    }
    
  } else {
    
  }
  puldevnamelen_ = puldevnamelen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_WaitForDevEvent.pulDevNameLen)
}

// .com.westone.skf.WST_PROTO_UINT32 pulEvent = 3;
inline bool Req_SKF_WaitForDevEvent::has_pulevent() const {
  return this != internal_default_instance() && pulevent_ != nullptr;
}
inline void Req_SKF_WaitForDevEvent::clear_pulevent() {
  if (GetArenaNoVirtual() == nullptr && pulevent_ != nullptr) {
    delete pulevent_;
  }
  pulevent_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_WaitForDevEvent::pulevent() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulevent_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_WaitForDevEvent.pulEvent)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_WaitForDevEvent::release_pulevent() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_WaitForDevEvent.pulEvent)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulevent_;
  pulevent_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_WaitForDevEvent::mutable_pulevent() {
  
  if (pulevent_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulevent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_WaitForDevEvent.pulEvent)
  return pulevent_;
}
inline void Req_SKF_WaitForDevEvent::set_allocated_pulevent(::com::westone::skf::WST_PROTO_UINT32* pulevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulevent_;
  }
  if (pulevent) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulevent, submessage_arena);
    }
    
  } else {
    
  }
  pulevent_ = pulevent;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_WaitForDevEvent.pulEvent)
}

// -------------------------------------------------------------------

// Rsp_SKF_WaitForDevEvent

// bytes szDevName = 1;
inline void Rsp_SKF_WaitForDevEvent::clear_szdevname() {
  szdevname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rsp_SKF_WaitForDevEvent::szdevname() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_WaitForDevEvent.szDevName)
  return szdevname_.GetNoArena();
}
inline void Rsp_SKF_WaitForDevEvent::set_szdevname(const ::std::string& value) {
  
  szdevname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Rsp_SKF_WaitForDevEvent.szDevName)
}
#if LANG_CXX11
inline void Rsp_SKF_WaitForDevEvent::set_szdevname(::std::string&& value) {
  
  szdevname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Rsp_SKF_WaitForDevEvent.szDevName)
}
#endif
inline void Rsp_SKF_WaitForDevEvent::set_szdevname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  szdevname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Rsp_SKF_WaitForDevEvent.szDevName)
}
inline void Rsp_SKF_WaitForDevEvent::set_szdevname(const void* value, size_t size) {
  
  szdevname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Rsp_SKF_WaitForDevEvent.szDevName)
}
inline ::std::string* Rsp_SKF_WaitForDevEvent::mutable_szdevname() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_WaitForDevEvent.szDevName)
  return szdevname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rsp_SKF_WaitForDevEvent::release_szdevname() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_WaitForDevEvent.szDevName)
  
  return szdevname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rsp_SKF_WaitForDevEvent::set_allocated_szdevname(::std::string* szdevname) {
  if (szdevname != nullptr) {
    
  } else {
    
  }
  szdevname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szdevname);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_WaitForDevEvent.szDevName)
}

// .com.westone.skf.WST_PROTO_UINT32 pulDevNameLen = 2;
inline bool Rsp_SKF_WaitForDevEvent::has_puldevnamelen() const {
  return this != internal_default_instance() && puldevnamelen_ != nullptr;
}
inline void Rsp_SKF_WaitForDevEvent::clear_puldevnamelen() {
  if (GetArenaNoVirtual() == nullptr && puldevnamelen_ != nullptr) {
    delete puldevnamelen_;
  }
  puldevnamelen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_WaitForDevEvent::puldevnamelen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = puldevnamelen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_WaitForDevEvent.pulDevNameLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_WaitForDevEvent::release_puldevnamelen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_WaitForDevEvent.pulDevNameLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = puldevnamelen_;
  puldevnamelen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_WaitForDevEvent::mutable_puldevnamelen() {
  
  if (puldevnamelen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    puldevnamelen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_WaitForDevEvent.pulDevNameLen)
  return puldevnamelen_;
}
inline void Rsp_SKF_WaitForDevEvent::set_allocated_puldevnamelen(::com::westone::skf::WST_PROTO_UINT32* puldevnamelen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete puldevnamelen_;
  }
  if (puldevnamelen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      puldevnamelen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, puldevnamelen, submessage_arena);
    }
    
  } else {
    
  }
  puldevnamelen_ = puldevnamelen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_WaitForDevEvent.pulDevNameLen)
}

// .com.westone.skf.WST_PROTO_UINT32 pulEvent = 3;
inline bool Rsp_SKF_WaitForDevEvent::has_pulevent() const {
  return this != internal_default_instance() && pulevent_ != nullptr;
}
inline void Rsp_SKF_WaitForDevEvent::clear_pulevent() {
  if (GetArenaNoVirtual() == nullptr && pulevent_ != nullptr) {
    delete pulevent_;
  }
  pulevent_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_WaitForDevEvent::pulevent() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulevent_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_WaitForDevEvent.pulEvent)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_WaitForDevEvent::release_pulevent() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_WaitForDevEvent.pulEvent)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulevent_;
  pulevent_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_WaitForDevEvent::mutable_pulevent() {
  
  if (pulevent_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulevent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_WaitForDevEvent.pulEvent)
  return pulevent_;
}
inline void Rsp_SKF_WaitForDevEvent::set_allocated_pulevent(::com::westone::skf::WST_PROTO_UINT32* pulevent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulevent_;
  }
  if (pulevent) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulevent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulevent, submessage_arena);
    }
    
  } else {
    
  }
  pulevent_ = pulevent;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_WaitForDevEvent.pulEvent)
}

// -------------------------------------------------------------------

// Req_SKF_CancelWaitForDevEvent

// -------------------------------------------------------------------

// Rsp_SKF_CancelWaitForDevEvent

// -------------------------------------------------------------------

// Req_SKF_EnumDev

// .com.westone.skf.WST_PROTO_BOOL bPresent = 1;
inline bool Req_SKF_EnumDev::has_bpresent() const {
  return this != internal_default_instance() && bpresent_ != nullptr;
}
inline void Req_SKF_EnumDev::clear_bpresent() {
  if (GetArenaNoVirtual() == nullptr && bpresent_ != nullptr) {
    delete bpresent_;
  }
  bpresent_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_BOOL& Req_SKF_EnumDev::bpresent() const {
  const ::com::westone::skf::WST_PROTO_BOOL* p = bpresent_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_EnumDev.bPresent)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_BOOL*>(
      &::com::westone::skf::_WST_PROTO_BOOL_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_BOOL* Req_SKF_EnumDev::release_bpresent() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_EnumDev.bPresent)
  
  ::com::westone::skf::WST_PROTO_BOOL* temp = bpresent_;
  bpresent_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_BOOL* Req_SKF_EnumDev::mutable_bpresent() {
  
  if (bpresent_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_BOOL>(GetArenaNoVirtual());
    bpresent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_EnumDev.bPresent)
  return bpresent_;
}
inline void Req_SKF_EnumDev::set_allocated_bpresent(::com::westone::skf::WST_PROTO_BOOL* bpresent) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bpresent_;
  }
  if (bpresent) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bpresent = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bpresent, submessage_arena);
    }
    
  } else {
    
  }
  bpresent_ = bpresent;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_EnumDev.bPresent)
}

// bytes szNameList = 2;
inline void Req_SKF_EnumDev::clear_sznamelist() {
  sznamelist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_EnumDev::sznamelist() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_EnumDev.szNameList)
  return sznamelist_.GetNoArena();
}
inline void Req_SKF_EnumDev::set_sznamelist(const ::std::string& value) {
  
  sznamelist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_EnumDev.szNameList)
}
#if LANG_CXX11
inline void Req_SKF_EnumDev::set_sznamelist(::std::string&& value) {
  
  sznamelist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_EnumDev.szNameList)
}
#endif
inline void Req_SKF_EnumDev::set_sznamelist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sznamelist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_EnumDev.szNameList)
}
inline void Req_SKF_EnumDev::set_sznamelist(const void* value, size_t size) {
  
  sznamelist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_EnumDev.szNameList)
}
inline ::std::string* Req_SKF_EnumDev::mutable_sznamelist() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_EnumDev.szNameList)
  return sznamelist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_EnumDev::release_sznamelist() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_EnumDev.szNameList)
  
  return sznamelist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_EnumDev::set_allocated_sznamelist(::std::string* sznamelist) {
  if (sznamelist != nullptr) {
    
  } else {
    
  }
  sznamelist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sznamelist);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_EnumDev.szNameList)
}

// .com.westone.skf.WST_PROTO_UINT32 pulSize = 3;
inline bool Req_SKF_EnumDev::has_pulsize() const {
  return this != internal_default_instance() && pulsize_ != nullptr;
}
inline void Req_SKF_EnumDev::clear_pulsize() {
  if (GetArenaNoVirtual() == nullptr && pulsize_ != nullptr) {
    delete pulsize_;
  }
  pulsize_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_EnumDev::pulsize() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulsize_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_EnumDev.pulSize)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_EnumDev::release_pulsize() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_EnumDev.pulSize)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulsize_;
  pulsize_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_EnumDev::mutable_pulsize() {
  
  if (pulsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulsize_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_EnumDev.pulSize)
  return pulsize_;
}
inline void Req_SKF_EnumDev::set_allocated_pulsize(::com::westone::skf::WST_PROTO_UINT32* pulsize) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulsize_;
  }
  if (pulsize) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulsize = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulsize, submessage_arena);
    }
    
  } else {
    
  }
  pulsize_ = pulsize;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_EnumDev.pulSize)
}

// -------------------------------------------------------------------

// Rsp_SKF_EnumDev

// bytes szNameList = 1;
inline void Rsp_SKF_EnumDev::clear_sznamelist() {
  sznamelist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rsp_SKF_EnumDev::sznamelist() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_EnumDev.szNameList)
  return sznamelist_.GetNoArena();
}
inline void Rsp_SKF_EnumDev::set_sznamelist(const ::std::string& value) {
  
  sznamelist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Rsp_SKF_EnumDev.szNameList)
}
#if LANG_CXX11
inline void Rsp_SKF_EnumDev::set_sznamelist(::std::string&& value) {
  
  sznamelist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Rsp_SKF_EnumDev.szNameList)
}
#endif
inline void Rsp_SKF_EnumDev::set_sznamelist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sznamelist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Rsp_SKF_EnumDev.szNameList)
}
inline void Rsp_SKF_EnumDev::set_sznamelist(const void* value, size_t size) {
  
  sznamelist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Rsp_SKF_EnumDev.szNameList)
}
inline ::std::string* Rsp_SKF_EnumDev::mutable_sznamelist() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_EnumDev.szNameList)
  return sznamelist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rsp_SKF_EnumDev::release_sznamelist() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_EnumDev.szNameList)
  
  return sznamelist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rsp_SKF_EnumDev::set_allocated_sznamelist(::std::string* sznamelist) {
  if (sznamelist != nullptr) {
    
  } else {
    
  }
  sznamelist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sznamelist);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_EnumDev.szNameList)
}

// .com.westone.skf.WST_PROTO_UINT32 pulSize = 2;
inline bool Rsp_SKF_EnumDev::has_pulsize() const {
  return this != internal_default_instance() && pulsize_ != nullptr;
}
inline void Rsp_SKF_EnumDev::clear_pulsize() {
  if (GetArenaNoVirtual() == nullptr && pulsize_ != nullptr) {
    delete pulsize_;
  }
  pulsize_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_EnumDev::pulsize() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulsize_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_EnumDev.pulSize)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_EnumDev::release_pulsize() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_EnumDev.pulSize)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulsize_;
  pulsize_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_EnumDev::mutable_pulsize() {
  
  if (pulsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulsize_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_EnumDev.pulSize)
  return pulsize_;
}
inline void Rsp_SKF_EnumDev::set_allocated_pulsize(::com::westone::skf::WST_PROTO_UINT32* pulsize) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulsize_;
  }
  if (pulsize) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulsize = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulsize, submessage_arena);
    }
    
  } else {
    
  }
  pulsize_ = pulsize;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_EnumDev.pulSize)
}

// -------------------------------------------------------------------

// Req_SKF_ConnectDev

// string szName = 1;
inline void Req_SKF_ConnectDev::clear_szname() {
  szname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_ConnectDev::szname() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ConnectDev.szName)
  return szname_.GetNoArena();
}
inline void Req_SKF_ConnectDev::set_szname(const ::std::string& value) {
  
  szname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_ConnectDev.szName)
}
#if LANG_CXX11
inline void Req_SKF_ConnectDev::set_szname(::std::string&& value) {
  
  szname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_ConnectDev.szName)
}
#endif
inline void Req_SKF_ConnectDev::set_szname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  szname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_ConnectDev.szName)
}
inline void Req_SKF_ConnectDev::set_szname(const char* value, size_t size) {
  
  szname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_ConnectDev.szName)
}
inline ::std::string* Req_SKF_ConnectDev::mutable_szname() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ConnectDev.szName)
  return szname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_ConnectDev::release_szname() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ConnectDev.szName)
  
  return szname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_ConnectDev::set_allocated_szname(::std::string* szname) {
  if (szname != nullptr) {
    
  } else {
    
  }
  szname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szname);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ConnectDev.szName)
}

// .com.westone.skf.WST_PROTO_UINT32 phDev = 2;
inline bool Req_SKF_ConnectDev::has_phdev() const {
  return this != internal_default_instance() && phdev_ != nullptr;
}
inline void Req_SKF_ConnectDev::clear_phdev() {
  if (GetArenaNoVirtual() == nullptr && phdev_ != nullptr) {
    delete phdev_;
  }
  phdev_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ConnectDev::phdev() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = phdev_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ConnectDev.phDev)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ConnectDev::release_phdev() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ConnectDev.phDev)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = phdev_;
  phdev_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ConnectDev::mutable_phdev() {
  
  if (phdev_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    phdev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ConnectDev.phDev)
  return phdev_;
}
inline void Req_SKF_ConnectDev::set_allocated_phdev(::com::westone::skf::WST_PROTO_UINT32* phdev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete phdev_;
  }
  if (phdev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phdev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phdev, submessage_arena);
    }
    
  } else {
    
  }
  phdev_ = phdev;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ConnectDev.phDev)
}

// -------------------------------------------------------------------

// Rsp_SKF_ConnectDev

// .com.westone.skf.WST_PROTO_UINT32 phDev = 1;
inline bool Rsp_SKF_ConnectDev::has_phdev() const {
  return this != internal_default_instance() && phdev_ != nullptr;
}
inline void Rsp_SKF_ConnectDev::clear_phdev() {
  if (GetArenaNoVirtual() == nullptr && phdev_ != nullptr) {
    delete phdev_;
  }
  phdev_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_ConnectDev::phdev() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = phdev_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_ConnectDev.phDev)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_ConnectDev::release_phdev() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_ConnectDev.phDev)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = phdev_;
  phdev_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_ConnectDev::mutable_phdev() {
  
  if (phdev_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    phdev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_ConnectDev.phDev)
  return phdev_;
}
inline void Rsp_SKF_ConnectDev::set_allocated_phdev(::com::westone::skf::WST_PROTO_UINT32* phdev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete phdev_;
  }
  if (phdev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phdev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phdev, submessage_arena);
    }
    
  } else {
    
  }
  phdev_ = phdev;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_ConnectDev.phDev)
}

// -------------------------------------------------------------------

// Req_SKF_DisConnectDev

// .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
inline bool Req_SKF_DisConnectDev::has_hdev() const {
  return this != internal_default_instance() && hdev_ != nullptr;
}
inline void Req_SKF_DisConnectDev::clear_hdev() {
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_DisConnectDev::hdev() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hdev_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DisConnectDev.hDev)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DisConnectDev::release_hdev() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DisConnectDev.hDev)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hdev_;
  hdev_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DisConnectDev::mutable_hdev() {
  
  if (hdev_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hdev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DisConnectDev.hDev)
  return hdev_;
}
inline void Req_SKF_DisConnectDev::set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hdev_;
  }
  if (hdev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hdev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdev, submessage_arena);
    }
    
  } else {
    
  }
  hdev_ = hdev;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DisConnectDev.hDev)
}

// -------------------------------------------------------------------

// Rsp_SKF_DisConnectDev

// -------------------------------------------------------------------

// Req_SKF_GetDevState

// string szDevName = 1;
inline void Req_SKF_GetDevState::clear_szdevname() {
  szdevname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_GetDevState::szdevname() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GetDevState.szDevName)
  return szdevname_.GetNoArena();
}
inline void Req_SKF_GetDevState::set_szdevname(const ::std::string& value) {
  
  szdevname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_GetDevState.szDevName)
}
#if LANG_CXX11
inline void Req_SKF_GetDevState::set_szdevname(::std::string&& value) {
  
  szdevname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_GetDevState.szDevName)
}
#endif
inline void Req_SKF_GetDevState::set_szdevname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  szdevname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_GetDevState.szDevName)
}
inline void Req_SKF_GetDevState::set_szdevname(const char* value, size_t size) {
  
  szdevname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_GetDevState.szDevName)
}
inline ::std::string* Req_SKF_GetDevState::mutable_szdevname() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GetDevState.szDevName)
  return szdevname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_GetDevState::release_szdevname() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GetDevState.szDevName)
  
  return szdevname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_GetDevState::set_allocated_szdevname(::std::string* szdevname) {
  if (szdevname != nullptr) {
    
  } else {
    
  }
  szdevname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szdevname);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GetDevState.szDevName)
}

// .com.westone.skf.WST_PROTO_UINT32 pulDevState = 2;
inline bool Req_SKF_GetDevState::has_puldevstate() const {
  return this != internal_default_instance() && puldevstate_ != nullptr;
}
inline void Req_SKF_GetDevState::clear_puldevstate() {
  if (GetArenaNoVirtual() == nullptr && puldevstate_ != nullptr) {
    delete puldevstate_;
  }
  puldevstate_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GetDevState::puldevstate() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = puldevstate_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GetDevState.pulDevState)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GetDevState::release_puldevstate() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GetDevState.pulDevState)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = puldevstate_;
  puldevstate_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GetDevState::mutable_puldevstate() {
  
  if (puldevstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    puldevstate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GetDevState.pulDevState)
  return puldevstate_;
}
inline void Req_SKF_GetDevState::set_allocated_puldevstate(::com::westone::skf::WST_PROTO_UINT32* puldevstate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete puldevstate_;
  }
  if (puldevstate) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      puldevstate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, puldevstate, submessage_arena);
    }
    
  } else {
    
  }
  puldevstate_ = puldevstate;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GetDevState.pulDevState)
}

// -------------------------------------------------------------------

// Rsp_SKF_GetDevState

// .com.westone.skf.WST_PROTO_UINT32 pulDevState = 1;
inline bool Rsp_SKF_GetDevState::has_puldevstate() const {
  return this != internal_default_instance() && puldevstate_ != nullptr;
}
inline void Rsp_SKF_GetDevState::clear_puldevstate() {
  if (GetArenaNoVirtual() == nullptr && puldevstate_ != nullptr) {
    delete puldevstate_;
  }
  puldevstate_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_GetDevState::puldevstate() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = puldevstate_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_GetDevState.pulDevState)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_GetDevState::release_puldevstate() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_GetDevState.pulDevState)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = puldevstate_;
  puldevstate_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_GetDevState::mutable_puldevstate() {
  
  if (puldevstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    puldevstate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_GetDevState.pulDevState)
  return puldevstate_;
}
inline void Rsp_SKF_GetDevState::set_allocated_puldevstate(::com::westone::skf::WST_PROTO_UINT32* puldevstate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete puldevstate_;
  }
  if (puldevstate) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      puldevstate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, puldevstate, submessage_arena);
    }
    
  } else {
    
  }
  puldevstate_ = puldevstate;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_GetDevState.pulDevState)
}

// -------------------------------------------------------------------

// Req_SKF_SetLabel

// .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
inline bool Req_SKF_SetLabel::has_hdev() const {
  return this != internal_default_instance() && hdev_ != nullptr;
}
inline void Req_SKF_SetLabel::clear_hdev() {
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_SetLabel::hdev() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hdev_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_SetLabel.hDev)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_SetLabel::release_hdev() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_SetLabel.hDev)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hdev_;
  hdev_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_SetLabel::mutable_hdev() {
  
  if (hdev_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hdev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_SetLabel.hDev)
  return hdev_;
}
inline void Req_SKF_SetLabel::set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hdev_;
  }
  if (hdev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hdev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdev, submessage_arena);
    }
    
  } else {
    
  }
  hdev_ = hdev;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_SetLabel.hDev)
}

// string szLabel = 2;
inline void Req_SKF_SetLabel::clear_szlabel() {
  szlabel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_SetLabel::szlabel() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_SetLabel.szLabel)
  return szlabel_.GetNoArena();
}
inline void Req_SKF_SetLabel::set_szlabel(const ::std::string& value) {
  
  szlabel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_SetLabel.szLabel)
}
#if LANG_CXX11
inline void Req_SKF_SetLabel::set_szlabel(::std::string&& value) {
  
  szlabel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_SetLabel.szLabel)
}
#endif
inline void Req_SKF_SetLabel::set_szlabel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  szlabel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_SetLabel.szLabel)
}
inline void Req_SKF_SetLabel::set_szlabel(const char* value, size_t size) {
  
  szlabel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_SetLabel.szLabel)
}
inline ::std::string* Req_SKF_SetLabel::mutable_szlabel() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_SetLabel.szLabel)
  return szlabel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_SetLabel::release_szlabel() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_SetLabel.szLabel)
  
  return szlabel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_SetLabel::set_allocated_szlabel(::std::string* szlabel) {
  if (szlabel != nullptr) {
    
  } else {
    
  }
  szlabel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szlabel);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_SetLabel.szLabel)
}

// -------------------------------------------------------------------

// Rsp_SKF_SetLabel

// -------------------------------------------------------------------

// Req_SKF_GetDevInfo

// .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
inline bool Req_SKF_GetDevInfo::has_hdev() const {
  return this != internal_default_instance() && hdev_ != nullptr;
}
inline void Req_SKF_GetDevInfo::clear_hdev() {
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GetDevInfo::hdev() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hdev_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GetDevInfo.hDev)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GetDevInfo::release_hdev() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GetDevInfo.hDev)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hdev_;
  hdev_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GetDevInfo::mutable_hdev() {
  
  if (hdev_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hdev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GetDevInfo.hDev)
  return hdev_;
}
inline void Req_SKF_GetDevInfo::set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hdev_;
  }
  if (hdev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hdev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdev, submessage_arena);
    }
    
  } else {
    
  }
  hdev_ = hdev;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GetDevInfo.hDev)
}

// .com.westone.skf.SKF_DevInfo pDevInfo = 2;
inline bool Req_SKF_GetDevInfo::has_pdevinfo() const {
  return this != internal_default_instance() && pdevinfo_ != nullptr;
}
inline void Req_SKF_GetDevInfo::clear_pdevinfo() {
  if (GetArenaNoVirtual() == nullptr && pdevinfo_ != nullptr) {
    delete pdevinfo_;
  }
  pdevinfo_ = nullptr;
}
inline const ::com::westone::skf::SKF_DevInfo& Req_SKF_GetDevInfo::pdevinfo() const {
  const ::com::westone::skf::SKF_DevInfo* p = pdevinfo_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GetDevInfo.pDevInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_DevInfo*>(
      &::com::westone::skf::_SKF_DevInfo_default_instance_);
}
inline ::com::westone::skf::SKF_DevInfo* Req_SKF_GetDevInfo::release_pdevinfo() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GetDevInfo.pDevInfo)
  
  ::com::westone::skf::SKF_DevInfo* temp = pdevinfo_;
  pdevinfo_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_DevInfo* Req_SKF_GetDevInfo::mutable_pdevinfo() {
  
  if (pdevinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_DevInfo>(GetArenaNoVirtual());
    pdevinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GetDevInfo.pDevInfo)
  return pdevinfo_;
}
inline void Req_SKF_GetDevInfo::set_allocated_pdevinfo(::com::westone::skf::SKF_DevInfo* pdevinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pdevinfo_;
  }
  if (pdevinfo) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pdevinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pdevinfo, submessage_arena);
    }
    
  } else {
    
  }
  pdevinfo_ = pdevinfo;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GetDevInfo.pDevInfo)
}

// -------------------------------------------------------------------

// Rsp_SKF_GetDevInfo

// .com.westone.skf.SKF_DevInfo pDevInfo = 1;
inline bool Rsp_SKF_GetDevInfo::has_pdevinfo() const {
  return this != internal_default_instance() && pdevinfo_ != nullptr;
}
inline void Rsp_SKF_GetDevInfo::clear_pdevinfo() {
  if (GetArenaNoVirtual() == nullptr && pdevinfo_ != nullptr) {
    delete pdevinfo_;
  }
  pdevinfo_ = nullptr;
}
inline const ::com::westone::skf::SKF_DevInfo& Rsp_SKF_GetDevInfo::pdevinfo() const {
  const ::com::westone::skf::SKF_DevInfo* p = pdevinfo_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_GetDevInfo.pDevInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_DevInfo*>(
      &::com::westone::skf::_SKF_DevInfo_default_instance_);
}
inline ::com::westone::skf::SKF_DevInfo* Rsp_SKF_GetDevInfo::release_pdevinfo() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_GetDevInfo.pDevInfo)
  
  ::com::westone::skf::SKF_DevInfo* temp = pdevinfo_;
  pdevinfo_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_DevInfo* Rsp_SKF_GetDevInfo::mutable_pdevinfo() {
  
  if (pdevinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_DevInfo>(GetArenaNoVirtual());
    pdevinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_GetDevInfo.pDevInfo)
  return pdevinfo_;
}
inline void Rsp_SKF_GetDevInfo::set_allocated_pdevinfo(::com::westone::skf::SKF_DevInfo* pdevinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pdevinfo_;
  }
  if (pdevinfo) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pdevinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pdevinfo, submessage_arena);
    }
    
  } else {
    
  }
  pdevinfo_ = pdevinfo;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_GetDevInfo.pDevInfo)
}

// -------------------------------------------------------------------

// Req_SKF_LockDev

// .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
inline bool Req_SKF_LockDev::has_hdev() const {
  return this != internal_default_instance() && hdev_ != nullptr;
}
inline void Req_SKF_LockDev::clear_hdev() {
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_LockDev::hdev() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hdev_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_LockDev.hDev)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_LockDev::release_hdev() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_LockDev.hDev)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hdev_;
  hdev_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_LockDev::mutable_hdev() {
  
  if (hdev_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hdev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_LockDev.hDev)
  return hdev_;
}
inline void Req_SKF_LockDev::set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hdev_;
  }
  if (hdev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hdev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdev, submessage_arena);
    }
    
  } else {
    
  }
  hdev_ = hdev;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_LockDev.hDev)
}

// .com.westone.skf.WST_PROTO_UINT32 ulTimeOut = 2;
inline bool Req_SKF_LockDev::has_ultimeout() const {
  return this != internal_default_instance() && ultimeout_ != nullptr;
}
inline void Req_SKF_LockDev::clear_ultimeout() {
  if (GetArenaNoVirtual() == nullptr && ultimeout_ != nullptr) {
    delete ultimeout_;
  }
  ultimeout_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_LockDev::ultimeout() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ultimeout_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_LockDev.ulTimeOut)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_LockDev::release_ultimeout() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_LockDev.ulTimeOut)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ultimeout_;
  ultimeout_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_LockDev::mutable_ultimeout() {
  
  if (ultimeout_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ultimeout_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_LockDev.ulTimeOut)
  return ultimeout_;
}
inline void Req_SKF_LockDev::set_allocated_ultimeout(::com::westone::skf::WST_PROTO_UINT32* ultimeout) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ultimeout_;
  }
  if (ultimeout) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ultimeout = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ultimeout, submessage_arena);
    }
    
  } else {
    
  }
  ultimeout_ = ultimeout;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_LockDev.ulTimeOut)
}

// -------------------------------------------------------------------

// Rsp_SKF_LockDev

// -------------------------------------------------------------------

// Req_SKF_UnlockDev

// .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
inline bool Req_SKF_UnlockDev::has_hdev() const {
  return this != internal_default_instance() && hdev_ != nullptr;
}
inline void Req_SKF_UnlockDev::clear_hdev() {
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_UnlockDev::hdev() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hdev_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_UnlockDev.hDev)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_UnlockDev::release_hdev() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_UnlockDev.hDev)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hdev_;
  hdev_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_UnlockDev::mutable_hdev() {
  
  if (hdev_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hdev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_UnlockDev.hDev)
  return hdev_;
}
inline void Req_SKF_UnlockDev::set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hdev_;
  }
  if (hdev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hdev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdev, submessage_arena);
    }
    
  } else {
    
  }
  hdev_ = hdev;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_UnlockDev.hDev)
}

// -------------------------------------------------------------------

// Rsp_SKF_UnlockDev

// -------------------------------------------------------------------

// Req_SKF_ChangeDevAuthKey

// .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
inline bool Req_SKF_ChangeDevAuthKey::has_hdev() const {
  return this != internal_default_instance() && hdev_ != nullptr;
}
inline void Req_SKF_ChangeDevAuthKey::clear_hdev() {
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ChangeDevAuthKey::hdev() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hdev_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ChangeDevAuthKey.hDev)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ChangeDevAuthKey::release_hdev() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ChangeDevAuthKey.hDev)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hdev_;
  hdev_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ChangeDevAuthKey::mutable_hdev() {
  
  if (hdev_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hdev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ChangeDevAuthKey.hDev)
  return hdev_;
}
inline void Req_SKF_ChangeDevAuthKey::set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hdev_;
  }
  if (hdev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hdev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdev, submessage_arena);
    }
    
  } else {
    
  }
  hdev_ = hdev;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ChangeDevAuthKey.hDev)
}

// bytes pbKeyValue = 2;
inline void Req_SKF_ChangeDevAuthKey::clear_pbkeyvalue() {
  pbkeyvalue_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_ChangeDevAuthKey::pbkeyvalue() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ChangeDevAuthKey.pbKeyValue)
  return pbkeyvalue_.GetNoArena();
}
inline void Req_SKF_ChangeDevAuthKey::set_pbkeyvalue(const ::std::string& value) {
  
  pbkeyvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_ChangeDevAuthKey.pbKeyValue)
}
#if LANG_CXX11
inline void Req_SKF_ChangeDevAuthKey::set_pbkeyvalue(::std::string&& value) {
  
  pbkeyvalue_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_ChangeDevAuthKey.pbKeyValue)
}
#endif
inline void Req_SKF_ChangeDevAuthKey::set_pbkeyvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbkeyvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_ChangeDevAuthKey.pbKeyValue)
}
inline void Req_SKF_ChangeDevAuthKey::set_pbkeyvalue(const void* value, size_t size) {
  
  pbkeyvalue_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_ChangeDevAuthKey.pbKeyValue)
}
inline ::std::string* Req_SKF_ChangeDevAuthKey::mutable_pbkeyvalue() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ChangeDevAuthKey.pbKeyValue)
  return pbkeyvalue_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_ChangeDevAuthKey::release_pbkeyvalue() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ChangeDevAuthKey.pbKeyValue)
  
  return pbkeyvalue_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_ChangeDevAuthKey::set_allocated_pbkeyvalue(::std::string* pbkeyvalue) {
  if (pbkeyvalue != nullptr) {
    
  } else {
    
  }
  pbkeyvalue_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbkeyvalue);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ChangeDevAuthKey.pbKeyValue)
}

// .com.westone.skf.WST_PROTO_UINT32 ulKeyLen = 3;
inline bool Req_SKF_ChangeDevAuthKey::has_ulkeylen() const {
  return this != internal_default_instance() && ulkeylen_ != nullptr;
}
inline void Req_SKF_ChangeDevAuthKey::clear_ulkeylen() {
  if (GetArenaNoVirtual() == nullptr && ulkeylen_ != nullptr) {
    delete ulkeylen_;
  }
  ulkeylen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ChangeDevAuthKey::ulkeylen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulkeylen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ChangeDevAuthKey.ulKeyLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ChangeDevAuthKey::release_ulkeylen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ChangeDevAuthKey.ulKeyLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulkeylen_;
  ulkeylen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ChangeDevAuthKey::mutable_ulkeylen() {
  
  if (ulkeylen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulkeylen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ChangeDevAuthKey.ulKeyLen)
  return ulkeylen_;
}
inline void Req_SKF_ChangeDevAuthKey::set_allocated_ulkeylen(::com::westone::skf::WST_PROTO_UINT32* ulkeylen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulkeylen_;
  }
  if (ulkeylen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulkeylen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulkeylen, submessage_arena);
    }
    
  } else {
    
  }
  ulkeylen_ = ulkeylen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ChangeDevAuthKey.ulKeyLen)
}

// -------------------------------------------------------------------

// Rsp_SKF_ChangeDevAuthKey

// -------------------------------------------------------------------

// Req_SKF_DevAuth

// .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
inline bool Req_SKF_DevAuth::has_hdev() const {
  return this != internal_default_instance() && hdev_ != nullptr;
}
inline void Req_SKF_DevAuth::clear_hdev() {
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_DevAuth::hdev() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hdev_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DevAuth.hDev)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DevAuth::release_hdev() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DevAuth.hDev)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hdev_;
  hdev_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DevAuth::mutable_hdev() {
  
  if (hdev_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hdev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DevAuth.hDev)
  return hdev_;
}
inline void Req_SKF_DevAuth::set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hdev_;
  }
  if (hdev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hdev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdev, submessage_arena);
    }
    
  } else {
    
  }
  hdev_ = hdev;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DevAuth.hDev)
}

// bytes pbAuthData = 2;
inline void Req_SKF_DevAuth::clear_pbauthdata() {
  pbauthdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_DevAuth::pbauthdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DevAuth.pbAuthData)
  return pbauthdata_.GetNoArena();
}
inline void Req_SKF_DevAuth::set_pbauthdata(const ::std::string& value) {
  
  pbauthdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_DevAuth.pbAuthData)
}
#if LANG_CXX11
inline void Req_SKF_DevAuth::set_pbauthdata(::std::string&& value) {
  
  pbauthdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_DevAuth.pbAuthData)
}
#endif
inline void Req_SKF_DevAuth::set_pbauthdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbauthdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_DevAuth.pbAuthData)
}
inline void Req_SKF_DevAuth::set_pbauthdata(const void* value, size_t size) {
  
  pbauthdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_DevAuth.pbAuthData)
}
inline ::std::string* Req_SKF_DevAuth::mutable_pbauthdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DevAuth.pbAuthData)
  return pbauthdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_DevAuth::release_pbauthdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DevAuth.pbAuthData)
  
  return pbauthdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_DevAuth::set_allocated_pbauthdata(::std::string* pbauthdata) {
  if (pbauthdata != nullptr) {
    
  } else {
    
  }
  pbauthdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbauthdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DevAuth.pbAuthData)
}

// .com.westone.skf.WST_PROTO_UINT32 ulLen = 3;
inline bool Req_SKF_DevAuth::has_ullen() const {
  return this != internal_default_instance() && ullen_ != nullptr;
}
inline void Req_SKF_DevAuth::clear_ullen() {
  if (GetArenaNoVirtual() == nullptr && ullen_ != nullptr) {
    delete ullen_;
  }
  ullen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_DevAuth::ullen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ullen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DevAuth.ulLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DevAuth::release_ullen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DevAuth.ulLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ullen_;
  ullen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DevAuth::mutable_ullen() {
  
  if (ullen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ullen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DevAuth.ulLen)
  return ullen_;
}
inline void Req_SKF_DevAuth::set_allocated_ullen(::com::westone::skf::WST_PROTO_UINT32* ullen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ullen_;
  }
  if (ullen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ullen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ullen, submessage_arena);
    }
    
  } else {
    
  }
  ullen_ = ullen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DevAuth.ulLen)
}

// -------------------------------------------------------------------

// Rsp_SKF_DevAuth

// -------------------------------------------------------------------

// Req_SKF_ChangePIN

// .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
inline bool Req_SKF_ChangePIN::has_happlication() const {
  return this != internal_default_instance() && happlication_ != nullptr;
}
inline void Req_SKF_ChangePIN::clear_happlication() {
  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ChangePIN::happlication() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = happlication_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ChangePIN.hApplication)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ChangePIN::release_happlication() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ChangePIN.hApplication)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = happlication_;
  happlication_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ChangePIN::mutable_happlication() {
  
  if (happlication_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    happlication_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ChangePIN.hApplication)
  return happlication_;
}
inline void Req_SKF_ChangePIN::set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete happlication_;
  }
  if (happlication) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      happlication = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, happlication, submessage_arena);
    }
    
  } else {
    
  }
  happlication_ = happlication;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ChangePIN.hApplication)
}

// .com.westone.skf.WST_PROTO_UINT32 ulPINType = 2;
inline bool Req_SKF_ChangePIN::has_ulpintype() const {
  return this != internal_default_instance() && ulpintype_ != nullptr;
}
inline void Req_SKF_ChangePIN::clear_ulpintype() {
  if (GetArenaNoVirtual() == nullptr && ulpintype_ != nullptr) {
    delete ulpintype_;
  }
  ulpintype_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ChangePIN::ulpintype() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulpintype_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ChangePIN.ulPINType)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ChangePIN::release_ulpintype() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ChangePIN.ulPINType)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulpintype_;
  ulpintype_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ChangePIN::mutable_ulpintype() {
  
  if (ulpintype_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulpintype_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ChangePIN.ulPINType)
  return ulpintype_;
}
inline void Req_SKF_ChangePIN::set_allocated_ulpintype(::com::westone::skf::WST_PROTO_UINT32* ulpintype) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulpintype_;
  }
  if (ulpintype) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulpintype = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulpintype, submessage_arena);
    }
    
  } else {
    
  }
  ulpintype_ = ulpintype;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ChangePIN.ulPINType)
}

// string szOldPIN = 3;
inline void Req_SKF_ChangePIN::clear_szoldpin() {
  szoldpin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_ChangePIN::szoldpin() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ChangePIN.szOldPIN)
  return szoldpin_.GetNoArena();
}
inline void Req_SKF_ChangePIN::set_szoldpin(const ::std::string& value) {
  
  szoldpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_ChangePIN.szOldPIN)
}
#if LANG_CXX11
inline void Req_SKF_ChangePIN::set_szoldpin(::std::string&& value) {
  
  szoldpin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_ChangePIN.szOldPIN)
}
#endif
inline void Req_SKF_ChangePIN::set_szoldpin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  szoldpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_ChangePIN.szOldPIN)
}
inline void Req_SKF_ChangePIN::set_szoldpin(const char* value, size_t size) {
  
  szoldpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_ChangePIN.szOldPIN)
}
inline ::std::string* Req_SKF_ChangePIN::mutable_szoldpin() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ChangePIN.szOldPIN)
  return szoldpin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_ChangePIN::release_szoldpin() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ChangePIN.szOldPIN)
  
  return szoldpin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_ChangePIN::set_allocated_szoldpin(::std::string* szoldpin) {
  if (szoldpin != nullptr) {
    
  } else {
    
  }
  szoldpin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szoldpin);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ChangePIN.szOldPIN)
}

// string szNewPIN = 4;
inline void Req_SKF_ChangePIN::clear_sznewpin() {
  sznewpin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_ChangePIN::sznewpin() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ChangePIN.szNewPIN)
  return sznewpin_.GetNoArena();
}
inline void Req_SKF_ChangePIN::set_sznewpin(const ::std::string& value) {
  
  sznewpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_ChangePIN.szNewPIN)
}
#if LANG_CXX11
inline void Req_SKF_ChangePIN::set_sznewpin(::std::string&& value) {
  
  sznewpin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_ChangePIN.szNewPIN)
}
#endif
inline void Req_SKF_ChangePIN::set_sznewpin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sznewpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_ChangePIN.szNewPIN)
}
inline void Req_SKF_ChangePIN::set_sznewpin(const char* value, size_t size) {
  
  sznewpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_ChangePIN.szNewPIN)
}
inline ::std::string* Req_SKF_ChangePIN::mutable_sznewpin() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ChangePIN.szNewPIN)
  return sznewpin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_ChangePIN::release_sznewpin() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ChangePIN.szNewPIN)
  
  return sznewpin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_ChangePIN::set_allocated_sznewpin(::std::string* sznewpin) {
  if (sznewpin != nullptr) {
    
  } else {
    
  }
  sznewpin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sznewpin);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ChangePIN.szNewPIN)
}

// .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 5;
inline bool Req_SKF_ChangePIN::has_pulretrycount() const {
  return this != internal_default_instance() && pulretrycount_ != nullptr;
}
inline void Req_SKF_ChangePIN::clear_pulretrycount() {
  if (GetArenaNoVirtual() == nullptr && pulretrycount_ != nullptr) {
    delete pulretrycount_;
  }
  pulretrycount_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ChangePIN::pulretrycount() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulretrycount_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ChangePIN.pulRetryCount)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ChangePIN::release_pulretrycount() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ChangePIN.pulRetryCount)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulretrycount_;
  pulretrycount_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ChangePIN::mutable_pulretrycount() {
  
  if (pulretrycount_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulretrycount_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ChangePIN.pulRetryCount)
  return pulretrycount_;
}
inline void Req_SKF_ChangePIN::set_allocated_pulretrycount(::com::westone::skf::WST_PROTO_UINT32* pulretrycount) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulretrycount_;
  }
  if (pulretrycount) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulretrycount = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulretrycount, submessage_arena);
    }
    
  } else {
    
  }
  pulretrycount_ = pulretrycount;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ChangePIN.pulRetryCount)
}

// -------------------------------------------------------------------

// Rsp_SKF_ChangePIN

// .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 1;
inline bool Rsp_SKF_ChangePIN::has_pulretrycount() const {
  return this != internal_default_instance() && pulretrycount_ != nullptr;
}
inline void Rsp_SKF_ChangePIN::clear_pulretrycount() {
  if (GetArenaNoVirtual() == nullptr && pulretrycount_ != nullptr) {
    delete pulretrycount_;
  }
  pulretrycount_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_ChangePIN::pulretrycount() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulretrycount_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_ChangePIN.pulRetryCount)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_ChangePIN::release_pulretrycount() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_ChangePIN.pulRetryCount)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulretrycount_;
  pulretrycount_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_ChangePIN::mutable_pulretrycount() {
  
  if (pulretrycount_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulretrycount_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_ChangePIN.pulRetryCount)
  return pulretrycount_;
}
inline void Rsp_SKF_ChangePIN::set_allocated_pulretrycount(::com::westone::skf::WST_PROTO_UINT32* pulretrycount) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulretrycount_;
  }
  if (pulretrycount) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulretrycount = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulretrycount, submessage_arena);
    }
    
  } else {
    
  }
  pulretrycount_ = pulretrycount;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_ChangePIN.pulRetryCount)
}

// -------------------------------------------------------------------

// Req_SKF_GetPINInfo

// .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
inline bool Req_SKF_GetPINInfo::has_happlication() const {
  return this != internal_default_instance() && happlication_ != nullptr;
}
inline void Req_SKF_GetPINInfo::clear_happlication() {
  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GetPINInfo::happlication() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = happlication_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GetPINInfo.hApplication)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GetPINInfo::release_happlication() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GetPINInfo.hApplication)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = happlication_;
  happlication_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GetPINInfo::mutable_happlication() {
  
  if (happlication_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    happlication_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GetPINInfo.hApplication)
  return happlication_;
}
inline void Req_SKF_GetPINInfo::set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete happlication_;
  }
  if (happlication) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      happlication = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, happlication, submessage_arena);
    }
    
  } else {
    
  }
  happlication_ = happlication;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GetPINInfo.hApplication)
}

// .com.westone.skf.WST_PROTO_UINT32 ulPINType = 2;
inline bool Req_SKF_GetPINInfo::has_ulpintype() const {
  return this != internal_default_instance() && ulpintype_ != nullptr;
}
inline void Req_SKF_GetPINInfo::clear_ulpintype() {
  if (GetArenaNoVirtual() == nullptr && ulpintype_ != nullptr) {
    delete ulpintype_;
  }
  ulpintype_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GetPINInfo::ulpintype() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulpintype_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GetPINInfo.ulPINType)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GetPINInfo::release_ulpintype() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GetPINInfo.ulPINType)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulpintype_;
  ulpintype_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GetPINInfo::mutable_ulpintype() {
  
  if (ulpintype_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulpintype_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GetPINInfo.ulPINType)
  return ulpintype_;
}
inline void Req_SKF_GetPINInfo::set_allocated_ulpintype(::com::westone::skf::WST_PROTO_UINT32* ulpintype) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulpintype_;
  }
  if (ulpintype) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulpintype = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulpintype, submessage_arena);
    }
    
  } else {
    
  }
  ulpintype_ = ulpintype;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GetPINInfo.ulPINType)
}

// .com.westone.skf.WST_PROTO_UINT32 pulMaxRetryCount = 3;
inline bool Req_SKF_GetPINInfo::has_pulmaxretrycount() const {
  return this != internal_default_instance() && pulmaxretrycount_ != nullptr;
}
inline void Req_SKF_GetPINInfo::clear_pulmaxretrycount() {
  if (GetArenaNoVirtual() == nullptr && pulmaxretrycount_ != nullptr) {
    delete pulmaxretrycount_;
  }
  pulmaxretrycount_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GetPINInfo::pulmaxretrycount() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulmaxretrycount_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GetPINInfo.pulMaxRetryCount)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GetPINInfo::release_pulmaxretrycount() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GetPINInfo.pulMaxRetryCount)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulmaxretrycount_;
  pulmaxretrycount_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GetPINInfo::mutable_pulmaxretrycount() {
  
  if (pulmaxretrycount_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulmaxretrycount_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GetPINInfo.pulMaxRetryCount)
  return pulmaxretrycount_;
}
inline void Req_SKF_GetPINInfo::set_allocated_pulmaxretrycount(::com::westone::skf::WST_PROTO_UINT32* pulmaxretrycount) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulmaxretrycount_;
  }
  if (pulmaxretrycount) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulmaxretrycount = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulmaxretrycount, submessage_arena);
    }
    
  } else {
    
  }
  pulmaxretrycount_ = pulmaxretrycount;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GetPINInfo.pulMaxRetryCount)
}

// .com.westone.skf.WST_PROTO_UINT32 pulRemainRetryCount = 4;
inline bool Req_SKF_GetPINInfo::has_pulremainretrycount() const {
  return this != internal_default_instance() && pulremainretrycount_ != nullptr;
}
inline void Req_SKF_GetPINInfo::clear_pulremainretrycount() {
  if (GetArenaNoVirtual() == nullptr && pulremainretrycount_ != nullptr) {
    delete pulremainretrycount_;
  }
  pulremainretrycount_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GetPINInfo::pulremainretrycount() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulremainretrycount_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GetPINInfo.pulRemainRetryCount)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GetPINInfo::release_pulremainretrycount() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GetPINInfo.pulRemainRetryCount)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulremainretrycount_;
  pulremainretrycount_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GetPINInfo::mutable_pulremainretrycount() {
  
  if (pulremainretrycount_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulremainretrycount_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GetPINInfo.pulRemainRetryCount)
  return pulremainretrycount_;
}
inline void Req_SKF_GetPINInfo::set_allocated_pulremainretrycount(::com::westone::skf::WST_PROTO_UINT32* pulremainretrycount) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulremainretrycount_;
  }
  if (pulremainretrycount) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulremainretrycount = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulremainretrycount, submessage_arena);
    }
    
  } else {
    
  }
  pulremainretrycount_ = pulremainretrycount;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GetPINInfo.pulRemainRetryCount)
}

// .com.westone.skf.WST_PROTO_BOOL pbDefaultPin = 5;
inline bool Req_SKF_GetPINInfo::has_pbdefaultpin() const {
  return this != internal_default_instance() && pbdefaultpin_ != nullptr;
}
inline void Req_SKF_GetPINInfo::clear_pbdefaultpin() {
  if (GetArenaNoVirtual() == nullptr && pbdefaultpin_ != nullptr) {
    delete pbdefaultpin_;
  }
  pbdefaultpin_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_BOOL& Req_SKF_GetPINInfo::pbdefaultpin() const {
  const ::com::westone::skf::WST_PROTO_BOOL* p = pbdefaultpin_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GetPINInfo.pbDefaultPin)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_BOOL*>(
      &::com::westone::skf::_WST_PROTO_BOOL_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_BOOL* Req_SKF_GetPINInfo::release_pbdefaultpin() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GetPINInfo.pbDefaultPin)
  
  ::com::westone::skf::WST_PROTO_BOOL* temp = pbdefaultpin_;
  pbdefaultpin_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_BOOL* Req_SKF_GetPINInfo::mutable_pbdefaultpin() {
  
  if (pbdefaultpin_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_BOOL>(GetArenaNoVirtual());
    pbdefaultpin_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GetPINInfo.pbDefaultPin)
  return pbdefaultpin_;
}
inline void Req_SKF_GetPINInfo::set_allocated_pbdefaultpin(::com::westone::skf::WST_PROTO_BOOL* pbdefaultpin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pbdefaultpin_;
  }
  if (pbdefaultpin) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pbdefaultpin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pbdefaultpin, submessage_arena);
    }
    
  } else {
    
  }
  pbdefaultpin_ = pbdefaultpin;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GetPINInfo.pbDefaultPin)
}

// -------------------------------------------------------------------

// Rsp_SKF_GetPINInfo

// .com.westone.skf.WST_PROTO_UINT32 pulMaxRetryCount = 1;
inline bool Rsp_SKF_GetPINInfo::has_pulmaxretrycount() const {
  return this != internal_default_instance() && pulmaxretrycount_ != nullptr;
}
inline void Rsp_SKF_GetPINInfo::clear_pulmaxretrycount() {
  if (GetArenaNoVirtual() == nullptr && pulmaxretrycount_ != nullptr) {
    delete pulmaxretrycount_;
  }
  pulmaxretrycount_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_GetPINInfo::pulmaxretrycount() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulmaxretrycount_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_GetPINInfo.pulMaxRetryCount)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_GetPINInfo::release_pulmaxretrycount() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_GetPINInfo.pulMaxRetryCount)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulmaxretrycount_;
  pulmaxretrycount_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_GetPINInfo::mutable_pulmaxretrycount() {
  
  if (pulmaxretrycount_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulmaxretrycount_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_GetPINInfo.pulMaxRetryCount)
  return pulmaxretrycount_;
}
inline void Rsp_SKF_GetPINInfo::set_allocated_pulmaxretrycount(::com::westone::skf::WST_PROTO_UINT32* pulmaxretrycount) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulmaxretrycount_;
  }
  if (pulmaxretrycount) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulmaxretrycount = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulmaxretrycount, submessage_arena);
    }
    
  } else {
    
  }
  pulmaxretrycount_ = pulmaxretrycount;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_GetPINInfo.pulMaxRetryCount)
}

// .com.westone.skf.WST_PROTO_UINT32 pulRemainRetryCount = 2;
inline bool Rsp_SKF_GetPINInfo::has_pulremainretrycount() const {
  return this != internal_default_instance() && pulremainretrycount_ != nullptr;
}
inline void Rsp_SKF_GetPINInfo::clear_pulremainretrycount() {
  if (GetArenaNoVirtual() == nullptr && pulremainretrycount_ != nullptr) {
    delete pulremainretrycount_;
  }
  pulremainretrycount_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_GetPINInfo::pulremainretrycount() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulremainretrycount_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_GetPINInfo.pulRemainRetryCount)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_GetPINInfo::release_pulremainretrycount() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_GetPINInfo.pulRemainRetryCount)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulremainretrycount_;
  pulremainretrycount_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_GetPINInfo::mutable_pulremainretrycount() {
  
  if (pulremainretrycount_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulremainretrycount_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_GetPINInfo.pulRemainRetryCount)
  return pulremainretrycount_;
}
inline void Rsp_SKF_GetPINInfo::set_allocated_pulremainretrycount(::com::westone::skf::WST_PROTO_UINT32* pulremainretrycount) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulremainretrycount_;
  }
  if (pulremainretrycount) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulremainretrycount = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulremainretrycount, submessage_arena);
    }
    
  } else {
    
  }
  pulremainretrycount_ = pulremainretrycount;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_GetPINInfo.pulRemainRetryCount)
}

// .com.westone.skf.WST_PROTO_BOOL pbDefaultPin = 3;
inline bool Rsp_SKF_GetPINInfo::has_pbdefaultpin() const {
  return this != internal_default_instance() && pbdefaultpin_ != nullptr;
}
inline void Rsp_SKF_GetPINInfo::clear_pbdefaultpin() {
  if (GetArenaNoVirtual() == nullptr && pbdefaultpin_ != nullptr) {
    delete pbdefaultpin_;
  }
  pbdefaultpin_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_BOOL& Rsp_SKF_GetPINInfo::pbdefaultpin() const {
  const ::com::westone::skf::WST_PROTO_BOOL* p = pbdefaultpin_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_GetPINInfo.pbDefaultPin)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_BOOL*>(
      &::com::westone::skf::_WST_PROTO_BOOL_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_BOOL* Rsp_SKF_GetPINInfo::release_pbdefaultpin() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_GetPINInfo.pbDefaultPin)
  
  ::com::westone::skf::WST_PROTO_BOOL* temp = pbdefaultpin_;
  pbdefaultpin_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_BOOL* Rsp_SKF_GetPINInfo::mutable_pbdefaultpin() {
  
  if (pbdefaultpin_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_BOOL>(GetArenaNoVirtual());
    pbdefaultpin_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_GetPINInfo.pbDefaultPin)
  return pbdefaultpin_;
}
inline void Rsp_SKF_GetPINInfo::set_allocated_pbdefaultpin(::com::westone::skf::WST_PROTO_BOOL* pbdefaultpin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pbdefaultpin_;
  }
  if (pbdefaultpin) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pbdefaultpin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pbdefaultpin, submessage_arena);
    }
    
  } else {
    
  }
  pbdefaultpin_ = pbdefaultpin;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_GetPINInfo.pbDefaultPin)
}

// -------------------------------------------------------------------

// Req_SKF_VerifyPIN

// .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
inline bool Req_SKF_VerifyPIN::has_happlication() const {
  return this != internal_default_instance() && happlication_ != nullptr;
}
inline void Req_SKF_VerifyPIN::clear_happlication() {
  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_VerifyPIN::happlication() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = happlication_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_VerifyPIN.hApplication)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_VerifyPIN::release_happlication() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_VerifyPIN.hApplication)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = happlication_;
  happlication_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_VerifyPIN::mutable_happlication() {
  
  if (happlication_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    happlication_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_VerifyPIN.hApplication)
  return happlication_;
}
inline void Req_SKF_VerifyPIN::set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete happlication_;
  }
  if (happlication) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      happlication = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, happlication, submessage_arena);
    }
    
  } else {
    
  }
  happlication_ = happlication;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_VerifyPIN.hApplication)
}

// .com.westone.skf.WST_PROTO_UINT32 ulPINType = 2;
inline bool Req_SKF_VerifyPIN::has_ulpintype() const {
  return this != internal_default_instance() && ulpintype_ != nullptr;
}
inline void Req_SKF_VerifyPIN::clear_ulpintype() {
  if (GetArenaNoVirtual() == nullptr && ulpintype_ != nullptr) {
    delete ulpintype_;
  }
  ulpintype_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_VerifyPIN::ulpintype() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulpintype_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_VerifyPIN.ulPINType)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_VerifyPIN::release_ulpintype() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_VerifyPIN.ulPINType)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulpintype_;
  ulpintype_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_VerifyPIN::mutable_ulpintype() {
  
  if (ulpintype_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulpintype_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_VerifyPIN.ulPINType)
  return ulpintype_;
}
inline void Req_SKF_VerifyPIN::set_allocated_ulpintype(::com::westone::skf::WST_PROTO_UINT32* ulpintype) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulpintype_;
  }
  if (ulpintype) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulpintype = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulpintype, submessage_arena);
    }
    
  } else {
    
  }
  ulpintype_ = ulpintype;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_VerifyPIN.ulPINType)
}

// string szPIN = 3;
inline void Req_SKF_VerifyPIN::clear_szpin() {
  szpin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_VerifyPIN::szpin() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_VerifyPIN.szPIN)
  return szpin_.GetNoArena();
}
inline void Req_SKF_VerifyPIN::set_szpin(const ::std::string& value) {
  
  szpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_VerifyPIN.szPIN)
}
#if LANG_CXX11
inline void Req_SKF_VerifyPIN::set_szpin(::std::string&& value) {
  
  szpin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_VerifyPIN.szPIN)
}
#endif
inline void Req_SKF_VerifyPIN::set_szpin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  szpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_VerifyPIN.szPIN)
}
inline void Req_SKF_VerifyPIN::set_szpin(const char* value, size_t size) {
  
  szpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_VerifyPIN.szPIN)
}
inline ::std::string* Req_SKF_VerifyPIN::mutable_szpin() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_VerifyPIN.szPIN)
  return szpin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_VerifyPIN::release_szpin() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_VerifyPIN.szPIN)
  
  return szpin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_VerifyPIN::set_allocated_szpin(::std::string* szpin) {
  if (szpin != nullptr) {
    
  } else {
    
  }
  szpin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szpin);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_VerifyPIN.szPIN)
}

// .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 4;
inline bool Req_SKF_VerifyPIN::has_pulretrycount() const {
  return this != internal_default_instance() && pulretrycount_ != nullptr;
}
inline void Req_SKF_VerifyPIN::clear_pulretrycount() {
  if (GetArenaNoVirtual() == nullptr && pulretrycount_ != nullptr) {
    delete pulretrycount_;
  }
  pulretrycount_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_VerifyPIN::pulretrycount() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulretrycount_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_VerifyPIN.pulRetryCount)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_VerifyPIN::release_pulretrycount() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_VerifyPIN.pulRetryCount)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulretrycount_;
  pulretrycount_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_VerifyPIN::mutable_pulretrycount() {
  
  if (pulretrycount_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulretrycount_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_VerifyPIN.pulRetryCount)
  return pulretrycount_;
}
inline void Req_SKF_VerifyPIN::set_allocated_pulretrycount(::com::westone::skf::WST_PROTO_UINT32* pulretrycount) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulretrycount_;
  }
  if (pulretrycount) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulretrycount = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulretrycount, submessage_arena);
    }
    
  } else {
    
  }
  pulretrycount_ = pulretrycount;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_VerifyPIN.pulRetryCount)
}

// -------------------------------------------------------------------

// Rsp_SKF_VerifyPIN

// .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 1;
inline bool Rsp_SKF_VerifyPIN::has_pulretrycount() const {
  return this != internal_default_instance() && pulretrycount_ != nullptr;
}
inline void Rsp_SKF_VerifyPIN::clear_pulretrycount() {
  if (GetArenaNoVirtual() == nullptr && pulretrycount_ != nullptr) {
    delete pulretrycount_;
  }
  pulretrycount_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_VerifyPIN::pulretrycount() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulretrycount_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_VerifyPIN.pulRetryCount)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_VerifyPIN::release_pulretrycount() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_VerifyPIN.pulRetryCount)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulretrycount_;
  pulretrycount_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_VerifyPIN::mutable_pulretrycount() {
  
  if (pulretrycount_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulretrycount_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_VerifyPIN.pulRetryCount)
  return pulretrycount_;
}
inline void Rsp_SKF_VerifyPIN::set_allocated_pulretrycount(::com::westone::skf::WST_PROTO_UINT32* pulretrycount) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulretrycount_;
  }
  if (pulretrycount) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulretrycount = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulretrycount, submessage_arena);
    }
    
  } else {
    
  }
  pulretrycount_ = pulretrycount;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_VerifyPIN.pulRetryCount)
}

// -------------------------------------------------------------------

// Req_SKF_UnblockPIN

// .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
inline bool Req_SKF_UnblockPIN::has_happlication() const {
  return this != internal_default_instance() && happlication_ != nullptr;
}
inline void Req_SKF_UnblockPIN::clear_happlication() {
  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_UnblockPIN::happlication() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = happlication_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_UnblockPIN.hApplication)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_UnblockPIN::release_happlication() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_UnblockPIN.hApplication)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = happlication_;
  happlication_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_UnblockPIN::mutable_happlication() {
  
  if (happlication_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    happlication_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_UnblockPIN.hApplication)
  return happlication_;
}
inline void Req_SKF_UnblockPIN::set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete happlication_;
  }
  if (happlication) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      happlication = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, happlication, submessage_arena);
    }
    
  } else {
    
  }
  happlication_ = happlication;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_UnblockPIN.hApplication)
}

// string szAdminPIN = 2;
inline void Req_SKF_UnblockPIN::clear_szadminpin() {
  szadminpin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_UnblockPIN::szadminpin() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_UnblockPIN.szAdminPIN)
  return szadminpin_.GetNoArena();
}
inline void Req_SKF_UnblockPIN::set_szadminpin(const ::std::string& value) {
  
  szadminpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_UnblockPIN.szAdminPIN)
}
#if LANG_CXX11
inline void Req_SKF_UnblockPIN::set_szadminpin(::std::string&& value) {
  
  szadminpin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_UnblockPIN.szAdminPIN)
}
#endif
inline void Req_SKF_UnblockPIN::set_szadminpin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  szadminpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_UnblockPIN.szAdminPIN)
}
inline void Req_SKF_UnblockPIN::set_szadminpin(const char* value, size_t size) {
  
  szadminpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_UnblockPIN.szAdminPIN)
}
inline ::std::string* Req_SKF_UnblockPIN::mutable_szadminpin() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_UnblockPIN.szAdminPIN)
  return szadminpin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_UnblockPIN::release_szadminpin() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_UnblockPIN.szAdminPIN)
  
  return szadminpin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_UnblockPIN::set_allocated_szadminpin(::std::string* szadminpin) {
  if (szadminpin != nullptr) {
    
  } else {
    
  }
  szadminpin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szadminpin);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_UnblockPIN.szAdminPIN)
}

// string szNewUserPIN = 3;
inline void Req_SKF_UnblockPIN::clear_sznewuserpin() {
  sznewuserpin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_UnblockPIN::sznewuserpin() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_UnblockPIN.szNewUserPIN)
  return sznewuserpin_.GetNoArena();
}
inline void Req_SKF_UnblockPIN::set_sznewuserpin(const ::std::string& value) {
  
  sznewuserpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_UnblockPIN.szNewUserPIN)
}
#if LANG_CXX11
inline void Req_SKF_UnblockPIN::set_sznewuserpin(::std::string&& value) {
  
  sznewuserpin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_UnblockPIN.szNewUserPIN)
}
#endif
inline void Req_SKF_UnblockPIN::set_sznewuserpin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sznewuserpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_UnblockPIN.szNewUserPIN)
}
inline void Req_SKF_UnblockPIN::set_sznewuserpin(const char* value, size_t size) {
  
  sznewuserpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_UnblockPIN.szNewUserPIN)
}
inline ::std::string* Req_SKF_UnblockPIN::mutable_sznewuserpin() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_UnblockPIN.szNewUserPIN)
  return sznewuserpin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_UnblockPIN::release_sznewuserpin() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_UnblockPIN.szNewUserPIN)
  
  return sznewuserpin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_UnblockPIN::set_allocated_sznewuserpin(::std::string* sznewuserpin) {
  if (sznewuserpin != nullptr) {
    
  } else {
    
  }
  sznewuserpin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sznewuserpin);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_UnblockPIN.szNewUserPIN)
}

// .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 4;
inline bool Req_SKF_UnblockPIN::has_pulretrycount() const {
  return this != internal_default_instance() && pulretrycount_ != nullptr;
}
inline void Req_SKF_UnblockPIN::clear_pulretrycount() {
  if (GetArenaNoVirtual() == nullptr && pulretrycount_ != nullptr) {
    delete pulretrycount_;
  }
  pulretrycount_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_UnblockPIN::pulretrycount() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulretrycount_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_UnblockPIN.pulRetryCount)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_UnblockPIN::release_pulretrycount() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_UnblockPIN.pulRetryCount)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulretrycount_;
  pulretrycount_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_UnblockPIN::mutable_pulretrycount() {
  
  if (pulretrycount_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulretrycount_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_UnblockPIN.pulRetryCount)
  return pulretrycount_;
}
inline void Req_SKF_UnblockPIN::set_allocated_pulretrycount(::com::westone::skf::WST_PROTO_UINT32* pulretrycount) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulretrycount_;
  }
  if (pulretrycount) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulretrycount = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulretrycount, submessage_arena);
    }
    
  } else {
    
  }
  pulretrycount_ = pulretrycount;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_UnblockPIN.pulRetryCount)
}

// -------------------------------------------------------------------

// Rsp_SKF_UnblockPIN

// .com.westone.skf.WST_PROTO_UINT32 pulRetryCount = 1;
inline bool Rsp_SKF_UnblockPIN::has_pulretrycount() const {
  return this != internal_default_instance() && pulretrycount_ != nullptr;
}
inline void Rsp_SKF_UnblockPIN::clear_pulretrycount() {
  if (GetArenaNoVirtual() == nullptr && pulretrycount_ != nullptr) {
    delete pulretrycount_;
  }
  pulretrycount_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_UnblockPIN::pulretrycount() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulretrycount_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_UnblockPIN.pulRetryCount)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_UnblockPIN::release_pulretrycount() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_UnblockPIN.pulRetryCount)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulretrycount_;
  pulretrycount_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_UnblockPIN::mutable_pulretrycount() {
  
  if (pulretrycount_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulretrycount_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_UnblockPIN.pulRetryCount)
  return pulretrycount_;
}
inline void Rsp_SKF_UnblockPIN::set_allocated_pulretrycount(::com::westone::skf::WST_PROTO_UINT32* pulretrycount) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulretrycount_;
  }
  if (pulretrycount) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulretrycount = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulretrycount, submessage_arena);
    }
    
  } else {
    
  }
  pulretrycount_ = pulretrycount;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_UnblockPIN.pulRetryCount)
}

// -------------------------------------------------------------------

// Req_SKF_ClearSecureState

// .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
inline bool Req_SKF_ClearSecureState::has_happlication() const {
  return this != internal_default_instance() && happlication_ != nullptr;
}
inline void Req_SKF_ClearSecureState::clear_happlication() {
  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ClearSecureState::happlication() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = happlication_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ClearSecureState.hApplication)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ClearSecureState::release_happlication() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ClearSecureState.hApplication)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = happlication_;
  happlication_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ClearSecureState::mutable_happlication() {
  
  if (happlication_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    happlication_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ClearSecureState.hApplication)
  return happlication_;
}
inline void Req_SKF_ClearSecureState::set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete happlication_;
  }
  if (happlication) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      happlication = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, happlication, submessage_arena);
    }
    
  } else {
    
  }
  happlication_ = happlication;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ClearSecureState.hApplication)
}

// -------------------------------------------------------------------

// Rsp_SKF_ClearSecureState

// -------------------------------------------------------------------

// Req_SKF_CreateApplication

// .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
inline bool Req_SKF_CreateApplication::has_hdev() const {
  return this != internal_default_instance() && hdev_ != nullptr;
}
inline void Req_SKF_CreateApplication::clear_hdev() {
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_CreateApplication::hdev() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hdev_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_CreateApplication.hDev)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_CreateApplication::release_hdev() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_CreateApplication.hDev)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hdev_;
  hdev_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_CreateApplication::mutable_hdev() {
  
  if (hdev_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hdev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_CreateApplication.hDev)
  return hdev_;
}
inline void Req_SKF_CreateApplication::set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hdev_;
  }
  if (hdev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hdev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdev, submessage_arena);
    }
    
  } else {
    
  }
  hdev_ = hdev;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_CreateApplication.hDev)
}

// string szAppName = 2;
inline void Req_SKF_CreateApplication::clear_szappname() {
  szappname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_CreateApplication::szappname() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_CreateApplication.szAppName)
  return szappname_.GetNoArena();
}
inline void Req_SKF_CreateApplication::set_szappname(const ::std::string& value) {
  
  szappname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_CreateApplication.szAppName)
}
#if LANG_CXX11
inline void Req_SKF_CreateApplication::set_szappname(::std::string&& value) {
  
  szappname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_CreateApplication.szAppName)
}
#endif
inline void Req_SKF_CreateApplication::set_szappname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  szappname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_CreateApplication.szAppName)
}
inline void Req_SKF_CreateApplication::set_szappname(const char* value, size_t size) {
  
  szappname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_CreateApplication.szAppName)
}
inline ::std::string* Req_SKF_CreateApplication::mutable_szappname() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_CreateApplication.szAppName)
  return szappname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_CreateApplication::release_szappname() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_CreateApplication.szAppName)
  
  return szappname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_CreateApplication::set_allocated_szappname(::std::string* szappname) {
  if (szappname != nullptr) {
    
  } else {
    
  }
  szappname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szappname);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_CreateApplication.szAppName)
}

// string szAdminPIN = 3;
inline void Req_SKF_CreateApplication::clear_szadminpin() {
  szadminpin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_CreateApplication::szadminpin() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_CreateApplication.szAdminPIN)
  return szadminpin_.GetNoArena();
}
inline void Req_SKF_CreateApplication::set_szadminpin(const ::std::string& value) {
  
  szadminpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_CreateApplication.szAdminPIN)
}
#if LANG_CXX11
inline void Req_SKF_CreateApplication::set_szadminpin(::std::string&& value) {
  
  szadminpin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_CreateApplication.szAdminPIN)
}
#endif
inline void Req_SKF_CreateApplication::set_szadminpin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  szadminpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_CreateApplication.szAdminPIN)
}
inline void Req_SKF_CreateApplication::set_szadminpin(const char* value, size_t size) {
  
  szadminpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_CreateApplication.szAdminPIN)
}
inline ::std::string* Req_SKF_CreateApplication::mutable_szadminpin() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_CreateApplication.szAdminPIN)
  return szadminpin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_CreateApplication::release_szadminpin() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_CreateApplication.szAdminPIN)
  
  return szadminpin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_CreateApplication::set_allocated_szadminpin(::std::string* szadminpin) {
  if (szadminpin != nullptr) {
    
  } else {
    
  }
  szadminpin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szadminpin);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_CreateApplication.szAdminPIN)
}

// .com.westone.skf.WST_PROTO_UINT32 dwAdminPinRetryCount = 4;
inline bool Req_SKF_CreateApplication::has_dwadminpinretrycount() const {
  return this != internal_default_instance() && dwadminpinretrycount_ != nullptr;
}
inline void Req_SKF_CreateApplication::clear_dwadminpinretrycount() {
  if (GetArenaNoVirtual() == nullptr && dwadminpinretrycount_ != nullptr) {
    delete dwadminpinretrycount_;
  }
  dwadminpinretrycount_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_CreateApplication::dwadminpinretrycount() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = dwadminpinretrycount_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_CreateApplication.dwAdminPinRetryCount)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_CreateApplication::release_dwadminpinretrycount() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_CreateApplication.dwAdminPinRetryCount)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = dwadminpinretrycount_;
  dwadminpinretrycount_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_CreateApplication::mutable_dwadminpinretrycount() {
  
  if (dwadminpinretrycount_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    dwadminpinretrycount_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_CreateApplication.dwAdminPinRetryCount)
  return dwadminpinretrycount_;
}
inline void Req_SKF_CreateApplication::set_allocated_dwadminpinretrycount(::com::westone::skf::WST_PROTO_UINT32* dwadminpinretrycount) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dwadminpinretrycount_;
  }
  if (dwadminpinretrycount) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dwadminpinretrycount = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dwadminpinretrycount, submessage_arena);
    }
    
  } else {
    
  }
  dwadminpinretrycount_ = dwadminpinretrycount;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_CreateApplication.dwAdminPinRetryCount)
}

// string szUserPIN = 5;
inline void Req_SKF_CreateApplication::clear_szuserpin() {
  szuserpin_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_CreateApplication::szuserpin() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_CreateApplication.szUserPIN)
  return szuserpin_.GetNoArena();
}
inline void Req_SKF_CreateApplication::set_szuserpin(const ::std::string& value) {
  
  szuserpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_CreateApplication.szUserPIN)
}
#if LANG_CXX11
inline void Req_SKF_CreateApplication::set_szuserpin(::std::string&& value) {
  
  szuserpin_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_CreateApplication.szUserPIN)
}
#endif
inline void Req_SKF_CreateApplication::set_szuserpin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  szuserpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_CreateApplication.szUserPIN)
}
inline void Req_SKF_CreateApplication::set_szuserpin(const char* value, size_t size) {
  
  szuserpin_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_CreateApplication.szUserPIN)
}
inline ::std::string* Req_SKF_CreateApplication::mutable_szuserpin() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_CreateApplication.szUserPIN)
  return szuserpin_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_CreateApplication::release_szuserpin() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_CreateApplication.szUserPIN)
  
  return szuserpin_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_CreateApplication::set_allocated_szuserpin(::std::string* szuserpin) {
  if (szuserpin != nullptr) {
    
  } else {
    
  }
  szuserpin_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szuserpin);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_CreateApplication.szUserPIN)
}

// .com.westone.skf.WST_PROTO_UINT32 dwUserPinRetryCount = 6;
inline bool Req_SKF_CreateApplication::has_dwuserpinretrycount() const {
  return this != internal_default_instance() && dwuserpinretrycount_ != nullptr;
}
inline void Req_SKF_CreateApplication::clear_dwuserpinretrycount() {
  if (GetArenaNoVirtual() == nullptr && dwuserpinretrycount_ != nullptr) {
    delete dwuserpinretrycount_;
  }
  dwuserpinretrycount_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_CreateApplication::dwuserpinretrycount() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = dwuserpinretrycount_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_CreateApplication.dwUserPinRetryCount)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_CreateApplication::release_dwuserpinretrycount() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_CreateApplication.dwUserPinRetryCount)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = dwuserpinretrycount_;
  dwuserpinretrycount_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_CreateApplication::mutable_dwuserpinretrycount() {
  
  if (dwuserpinretrycount_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    dwuserpinretrycount_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_CreateApplication.dwUserPinRetryCount)
  return dwuserpinretrycount_;
}
inline void Req_SKF_CreateApplication::set_allocated_dwuserpinretrycount(::com::westone::skf::WST_PROTO_UINT32* dwuserpinretrycount) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dwuserpinretrycount_;
  }
  if (dwuserpinretrycount) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dwuserpinretrycount = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dwuserpinretrycount, submessage_arena);
    }
    
  } else {
    
  }
  dwuserpinretrycount_ = dwuserpinretrycount;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_CreateApplication.dwUserPinRetryCount)
}

// .com.westone.skf.WST_PROTO_UINT32 dwCreateFileRights = 7;
inline bool Req_SKF_CreateApplication::has_dwcreatefilerights() const {
  return this != internal_default_instance() && dwcreatefilerights_ != nullptr;
}
inline void Req_SKF_CreateApplication::clear_dwcreatefilerights() {
  if (GetArenaNoVirtual() == nullptr && dwcreatefilerights_ != nullptr) {
    delete dwcreatefilerights_;
  }
  dwcreatefilerights_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_CreateApplication::dwcreatefilerights() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = dwcreatefilerights_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_CreateApplication.dwCreateFileRights)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_CreateApplication::release_dwcreatefilerights() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_CreateApplication.dwCreateFileRights)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = dwcreatefilerights_;
  dwcreatefilerights_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_CreateApplication::mutable_dwcreatefilerights() {
  
  if (dwcreatefilerights_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    dwcreatefilerights_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_CreateApplication.dwCreateFileRights)
  return dwcreatefilerights_;
}
inline void Req_SKF_CreateApplication::set_allocated_dwcreatefilerights(::com::westone::skf::WST_PROTO_UINT32* dwcreatefilerights) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dwcreatefilerights_;
  }
  if (dwcreatefilerights) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dwcreatefilerights = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dwcreatefilerights, submessage_arena);
    }
    
  } else {
    
  }
  dwcreatefilerights_ = dwcreatefilerights;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_CreateApplication.dwCreateFileRights)
}

// .com.westone.skf.WST_PROTO_UINT32 phApplication = 8;
inline bool Req_SKF_CreateApplication::has_phapplication() const {
  return this != internal_default_instance() && phapplication_ != nullptr;
}
inline void Req_SKF_CreateApplication::clear_phapplication() {
  if (GetArenaNoVirtual() == nullptr && phapplication_ != nullptr) {
    delete phapplication_;
  }
  phapplication_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_CreateApplication::phapplication() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = phapplication_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_CreateApplication.phApplication)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_CreateApplication::release_phapplication() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_CreateApplication.phApplication)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = phapplication_;
  phapplication_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_CreateApplication::mutable_phapplication() {
  
  if (phapplication_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    phapplication_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_CreateApplication.phApplication)
  return phapplication_;
}
inline void Req_SKF_CreateApplication::set_allocated_phapplication(::com::westone::skf::WST_PROTO_UINT32* phapplication) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete phapplication_;
  }
  if (phapplication) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phapplication = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phapplication, submessage_arena);
    }
    
  } else {
    
  }
  phapplication_ = phapplication;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_CreateApplication.phApplication)
}

// -------------------------------------------------------------------

// Rsp_SKF_CreateApplication

// .com.westone.skf.WST_PROTO_UINT32 phApplication = 1;
inline bool Rsp_SKF_CreateApplication::has_phapplication() const {
  return this != internal_default_instance() && phapplication_ != nullptr;
}
inline void Rsp_SKF_CreateApplication::clear_phapplication() {
  if (GetArenaNoVirtual() == nullptr && phapplication_ != nullptr) {
    delete phapplication_;
  }
  phapplication_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_CreateApplication::phapplication() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = phapplication_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_CreateApplication.phApplication)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_CreateApplication::release_phapplication() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_CreateApplication.phApplication)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = phapplication_;
  phapplication_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_CreateApplication::mutable_phapplication() {
  
  if (phapplication_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    phapplication_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_CreateApplication.phApplication)
  return phapplication_;
}
inline void Rsp_SKF_CreateApplication::set_allocated_phapplication(::com::westone::skf::WST_PROTO_UINT32* phapplication) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete phapplication_;
  }
  if (phapplication) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phapplication = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phapplication, submessage_arena);
    }
    
  } else {
    
  }
  phapplication_ = phapplication;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_CreateApplication.phApplication)
}

// -------------------------------------------------------------------

// Req_SKF_EnumApplication

// .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
inline bool Req_SKF_EnumApplication::has_hdev() const {
  return this != internal_default_instance() && hdev_ != nullptr;
}
inline void Req_SKF_EnumApplication::clear_hdev() {
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_EnumApplication::hdev() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hdev_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_EnumApplication.hDev)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_EnumApplication::release_hdev() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_EnumApplication.hDev)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hdev_;
  hdev_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_EnumApplication::mutable_hdev() {
  
  if (hdev_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hdev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_EnumApplication.hDev)
  return hdev_;
}
inline void Req_SKF_EnumApplication::set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hdev_;
  }
  if (hdev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hdev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdev, submessage_arena);
    }
    
  } else {
    
  }
  hdev_ = hdev;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_EnumApplication.hDev)
}

// bytes szAppName = 2;
inline void Req_SKF_EnumApplication::clear_szappname() {
  szappname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_EnumApplication::szappname() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_EnumApplication.szAppName)
  return szappname_.GetNoArena();
}
inline void Req_SKF_EnumApplication::set_szappname(const ::std::string& value) {
  
  szappname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_EnumApplication.szAppName)
}
#if LANG_CXX11
inline void Req_SKF_EnumApplication::set_szappname(::std::string&& value) {
  
  szappname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_EnumApplication.szAppName)
}
#endif
inline void Req_SKF_EnumApplication::set_szappname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  szappname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_EnumApplication.szAppName)
}
inline void Req_SKF_EnumApplication::set_szappname(const void* value, size_t size) {
  
  szappname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_EnumApplication.szAppName)
}
inline ::std::string* Req_SKF_EnumApplication::mutable_szappname() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_EnumApplication.szAppName)
  return szappname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_EnumApplication::release_szappname() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_EnumApplication.szAppName)
  
  return szappname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_EnumApplication::set_allocated_szappname(::std::string* szappname) {
  if (szappname != nullptr) {
    
  } else {
    
  }
  szappname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szappname);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_EnumApplication.szAppName)
}

// .com.westone.skf.WST_PROTO_UINT32 pulSize = 3;
inline bool Req_SKF_EnumApplication::has_pulsize() const {
  return this != internal_default_instance() && pulsize_ != nullptr;
}
inline void Req_SKF_EnumApplication::clear_pulsize() {
  if (GetArenaNoVirtual() == nullptr && pulsize_ != nullptr) {
    delete pulsize_;
  }
  pulsize_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_EnumApplication::pulsize() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulsize_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_EnumApplication.pulSize)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_EnumApplication::release_pulsize() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_EnumApplication.pulSize)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulsize_;
  pulsize_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_EnumApplication::mutable_pulsize() {
  
  if (pulsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulsize_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_EnumApplication.pulSize)
  return pulsize_;
}
inline void Req_SKF_EnumApplication::set_allocated_pulsize(::com::westone::skf::WST_PROTO_UINT32* pulsize) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulsize_;
  }
  if (pulsize) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulsize = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulsize, submessage_arena);
    }
    
  } else {
    
  }
  pulsize_ = pulsize;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_EnumApplication.pulSize)
}

// -------------------------------------------------------------------

// Rsp_SKF_EnumApplication

// bytes szAppName = 1;
inline void Rsp_SKF_EnumApplication::clear_szappname() {
  szappname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rsp_SKF_EnumApplication::szappname() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_EnumApplication.szAppName)
  return szappname_.GetNoArena();
}
inline void Rsp_SKF_EnumApplication::set_szappname(const ::std::string& value) {
  
  szappname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Rsp_SKF_EnumApplication.szAppName)
}
#if LANG_CXX11
inline void Rsp_SKF_EnumApplication::set_szappname(::std::string&& value) {
  
  szappname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Rsp_SKF_EnumApplication.szAppName)
}
#endif
inline void Rsp_SKF_EnumApplication::set_szappname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  szappname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Rsp_SKF_EnumApplication.szAppName)
}
inline void Rsp_SKF_EnumApplication::set_szappname(const void* value, size_t size) {
  
  szappname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Rsp_SKF_EnumApplication.szAppName)
}
inline ::std::string* Rsp_SKF_EnumApplication::mutable_szappname() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_EnumApplication.szAppName)
  return szappname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rsp_SKF_EnumApplication::release_szappname() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_EnumApplication.szAppName)
  
  return szappname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rsp_SKF_EnumApplication::set_allocated_szappname(::std::string* szappname) {
  if (szappname != nullptr) {
    
  } else {
    
  }
  szappname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szappname);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_EnumApplication.szAppName)
}

// .com.westone.skf.WST_PROTO_UINT32 pulSize = 2;
inline bool Rsp_SKF_EnumApplication::has_pulsize() const {
  return this != internal_default_instance() && pulsize_ != nullptr;
}
inline void Rsp_SKF_EnumApplication::clear_pulsize() {
  if (GetArenaNoVirtual() == nullptr && pulsize_ != nullptr) {
    delete pulsize_;
  }
  pulsize_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_EnumApplication::pulsize() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulsize_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_EnumApplication.pulSize)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_EnumApplication::release_pulsize() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_EnumApplication.pulSize)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulsize_;
  pulsize_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_EnumApplication::mutable_pulsize() {
  
  if (pulsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulsize_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_EnumApplication.pulSize)
  return pulsize_;
}
inline void Rsp_SKF_EnumApplication::set_allocated_pulsize(::com::westone::skf::WST_PROTO_UINT32* pulsize) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulsize_;
  }
  if (pulsize) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulsize = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulsize, submessage_arena);
    }
    
  } else {
    
  }
  pulsize_ = pulsize;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_EnumApplication.pulSize)
}

// -------------------------------------------------------------------

// Req_SKF_DeleteApplication

// .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
inline bool Req_SKF_DeleteApplication::has_hdev() const {
  return this != internal_default_instance() && hdev_ != nullptr;
}
inline void Req_SKF_DeleteApplication::clear_hdev() {
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_DeleteApplication::hdev() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hdev_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DeleteApplication.hDev)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DeleteApplication::release_hdev() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DeleteApplication.hDev)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hdev_;
  hdev_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DeleteApplication::mutable_hdev() {
  
  if (hdev_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hdev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DeleteApplication.hDev)
  return hdev_;
}
inline void Req_SKF_DeleteApplication::set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hdev_;
  }
  if (hdev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hdev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdev, submessage_arena);
    }
    
  } else {
    
  }
  hdev_ = hdev;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DeleteApplication.hDev)
}

// string szAppName = 2;
inline void Req_SKF_DeleteApplication::clear_szappname() {
  szappname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_DeleteApplication::szappname() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DeleteApplication.szAppName)
  return szappname_.GetNoArena();
}
inline void Req_SKF_DeleteApplication::set_szappname(const ::std::string& value) {
  
  szappname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_DeleteApplication.szAppName)
}
#if LANG_CXX11
inline void Req_SKF_DeleteApplication::set_szappname(::std::string&& value) {
  
  szappname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_DeleteApplication.szAppName)
}
#endif
inline void Req_SKF_DeleteApplication::set_szappname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  szappname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_DeleteApplication.szAppName)
}
inline void Req_SKF_DeleteApplication::set_szappname(const char* value, size_t size) {
  
  szappname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_DeleteApplication.szAppName)
}
inline ::std::string* Req_SKF_DeleteApplication::mutable_szappname() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DeleteApplication.szAppName)
  return szappname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_DeleteApplication::release_szappname() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DeleteApplication.szAppName)
  
  return szappname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_DeleteApplication::set_allocated_szappname(::std::string* szappname) {
  if (szappname != nullptr) {
    
  } else {
    
  }
  szappname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szappname);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DeleteApplication.szAppName)
}

// -------------------------------------------------------------------

// Rsp_SKF_DeleteApplication

// -------------------------------------------------------------------

// Req_SKF_OpenApplication

// .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
inline bool Req_SKF_OpenApplication::has_hdev() const {
  return this != internal_default_instance() && hdev_ != nullptr;
}
inline void Req_SKF_OpenApplication::clear_hdev() {
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_OpenApplication::hdev() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hdev_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_OpenApplication.hDev)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_OpenApplication::release_hdev() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_OpenApplication.hDev)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hdev_;
  hdev_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_OpenApplication::mutable_hdev() {
  
  if (hdev_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hdev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_OpenApplication.hDev)
  return hdev_;
}
inline void Req_SKF_OpenApplication::set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hdev_;
  }
  if (hdev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hdev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdev, submessage_arena);
    }
    
  } else {
    
  }
  hdev_ = hdev;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_OpenApplication.hDev)
}

// string szAppName = 2;
inline void Req_SKF_OpenApplication::clear_szappname() {
  szappname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_OpenApplication::szappname() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_OpenApplication.szAppName)
  return szappname_.GetNoArena();
}
inline void Req_SKF_OpenApplication::set_szappname(const ::std::string& value) {
  
  szappname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_OpenApplication.szAppName)
}
#if LANG_CXX11
inline void Req_SKF_OpenApplication::set_szappname(::std::string&& value) {
  
  szappname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_OpenApplication.szAppName)
}
#endif
inline void Req_SKF_OpenApplication::set_szappname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  szappname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_OpenApplication.szAppName)
}
inline void Req_SKF_OpenApplication::set_szappname(const char* value, size_t size) {
  
  szappname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_OpenApplication.szAppName)
}
inline ::std::string* Req_SKF_OpenApplication::mutable_szappname() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_OpenApplication.szAppName)
  return szappname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_OpenApplication::release_szappname() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_OpenApplication.szAppName)
  
  return szappname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_OpenApplication::set_allocated_szappname(::std::string* szappname) {
  if (szappname != nullptr) {
    
  } else {
    
  }
  szappname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szappname);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_OpenApplication.szAppName)
}

// .com.westone.skf.WST_PROTO_UINT32 phApplication = 3;
inline bool Req_SKF_OpenApplication::has_phapplication() const {
  return this != internal_default_instance() && phapplication_ != nullptr;
}
inline void Req_SKF_OpenApplication::clear_phapplication() {
  if (GetArenaNoVirtual() == nullptr && phapplication_ != nullptr) {
    delete phapplication_;
  }
  phapplication_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_OpenApplication::phapplication() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = phapplication_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_OpenApplication.phApplication)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_OpenApplication::release_phapplication() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_OpenApplication.phApplication)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = phapplication_;
  phapplication_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_OpenApplication::mutable_phapplication() {
  
  if (phapplication_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    phapplication_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_OpenApplication.phApplication)
  return phapplication_;
}
inline void Req_SKF_OpenApplication::set_allocated_phapplication(::com::westone::skf::WST_PROTO_UINT32* phapplication) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete phapplication_;
  }
  if (phapplication) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phapplication = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phapplication, submessage_arena);
    }
    
  } else {
    
  }
  phapplication_ = phapplication;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_OpenApplication.phApplication)
}

// -------------------------------------------------------------------

// Rsp_SKF_OpenApplication

// .com.westone.skf.WST_PROTO_UINT32 phApplication = 1;
inline bool Rsp_SKF_OpenApplication::has_phapplication() const {
  return this != internal_default_instance() && phapplication_ != nullptr;
}
inline void Rsp_SKF_OpenApplication::clear_phapplication() {
  if (GetArenaNoVirtual() == nullptr && phapplication_ != nullptr) {
    delete phapplication_;
  }
  phapplication_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_OpenApplication::phapplication() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = phapplication_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_OpenApplication.phApplication)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_OpenApplication::release_phapplication() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_OpenApplication.phApplication)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = phapplication_;
  phapplication_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_OpenApplication::mutable_phapplication() {
  
  if (phapplication_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    phapplication_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_OpenApplication.phApplication)
  return phapplication_;
}
inline void Rsp_SKF_OpenApplication::set_allocated_phapplication(::com::westone::skf::WST_PROTO_UINT32* phapplication) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete phapplication_;
  }
  if (phapplication) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phapplication = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phapplication, submessage_arena);
    }
    
  } else {
    
  }
  phapplication_ = phapplication;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_OpenApplication.phApplication)
}

// -------------------------------------------------------------------

// Req_SKF_CloseApplication

// .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
inline bool Req_SKF_CloseApplication::has_happlication() const {
  return this != internal_default_instance() && happlication_ != nullptr;
}
inline void Req_SKF_CloseApplication::clear_happlication() {
  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_CloseApplication::happlication() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = happlication_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_CloseApplication.hApplication)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_CloseApplication::release_happlication() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_CloseApplication.hApplication)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = happlication_;
  happlication_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_CloseApplication::mutable_happlication() {
  
  if (happlication_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    happlication_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_CloseApplication.hApplication)
  return happlication_;
}
inline void Req_SKF_CloseApplication::set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete happlication_;
  }
  if (happlication) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      happlication = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, happlication, submessage_arena);
    }
    
  } else {
    
  }
  happlication_ = happlication;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_CloseApplication.hApplication)
}

// -------------------------------------------------------------------

// Rsp_SKF_CloseApplication

// -------------------------------------------------------------------

// Req_SKF_CreateFile

// .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
inline bool Req_SKF_CreateFile::has_happlication() const {
  return this != internal_default_instance() && happlication_ != nullptr;
}
inline void Req_SKF_CreateFile::clear_happlication() {
  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_CreateFile::happlication() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = happlication_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_CreateFile.hApplication)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_CreateFile::release_happlication() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_CreateFile.hApplication)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = happlication_;
  happlication_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_CreateFile::mutable_happlication() {
  
  if (happlication_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    happlication_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_CreateFile.hApplication)
  return happlication_;
}
inline void Req_SKF_CreateFile::set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete happlication_;
  }
  if (happlication) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      happlication = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, happlication, submessage_arena);
    }
    
  } else {
    
  }
  happlication_ = happlication;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_CreateFile.hApplication)
}

// string szFileName = 2;
inline void Req_SKF_CreateFile::clear_szfilename() {
  szfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_CreateFile::szfilename() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_CreateFile.szFileName)
  return szfilename_.GetNoArena();
}
inline void Req_SKF_CreateFile::set_szfilename(const ::std::string& value) {
  
  szfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_CreateFile.szFileName)
}
#if LANG_CXX11
inline void Req_SKF_CreateFile::set_szfilename(::std::string&& value) {
  
  szfilename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_CreateFile.szFileName)
}
#endif
inline void Req_SKF_CreateFile::set_szfilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  szfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_CreateFile.szFileName)
}
inline void Req_SKF_CreateFile::set_szfilename(const char* value, size_t size) {
  
  szfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_CreateFile.szFileName)
}
inline ::std::string* Req_SKF_CreateFile::mutable_szfilename() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_CreateFile.szFileName)
  return szfilename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_CreateFile::release_szfilename() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_CreateFile.szFileName)
  
  return szfilename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_CreateFile::set_allocated_szfilename(::std::string* szfilename) {
  if (szfilename != nullptr) {
    
  } else {
    
  }
  szfilename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szfilename);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_CreateFile.szFileName)
}

// .com.westone.skf.WST_PROTO_UINT32 ulFileSize = 3;
inline bool Req_SKF_CreateFile::has_ulfilesize() const {
  return this != internal_default_instance() && ulfilesize_ != nullptr;
}
inline void Req_SKF_CreateFile::clear_ulfilesize() {
  if (GetArenaNoVirtual() == nullptr && ulfilesize_ != nullptr) {
    delete ulfilesize_;
  }
  ulfilesize_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_CreateFile::ulfilesize() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulfilesize_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_CreateFile.ulFileSize)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_CreateFile::release_ulfilesize() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_CreateFile.ulFileSize)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulfilesize_;
  ulfilesize_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_CreateFile::mutable_ulfilesize() {
  
  if (ulfilesize_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulfilesize_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_CreateFile.ulFileSize)
  return ulfilesize_;
}
inline void Req_SKF_CreateFile::set_allocated_ulfilesize(::com::westone::skf::WST_PROTO_UINT32* ulfilesize) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulfilesize_;
  }
  if (ulfilesize) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulfilesize = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulfilesize, submessage_arena);
    }
    
  } else {
    
  }
  ulfilesize_ = ulfilesize;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_CreateFile.ulFileSize)
}

// .com.westone.skf.WST_PROTO_UINT32 ulReadRights = 4;
inline bool Req_SKF_CreateFile::has_ulreadrights() const {
  return this != internal_default_instance() && ulreadrights_ != nullptr;
}
inline void Req_SKF_CreateFile::clear_ulreadrights() {
  if (GetArenaNoVirtual() == nullptr && ulreadrights_ != nullptr) {
    delete ulreadrights_;
  }
  ulreadrights_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_CreateFile::ulreadrights() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulreadrights_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_CreateFile.ulReadRights)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_CreateFile::release_ulreadrights() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_CreateFile.ulReadRights)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulreadrights_;
  ulreadrights_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_CreateFile::mutable_ulreadrights() {
  
  if (ulreadrights_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulreadrights_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_CreateFile.ulReadRights)
  return ulreadrights_;
}
inline void Req_SKF_CreateFile::set_allocated_ulreadrights(::com::westone::skf::WST_PROTO_UINT32* ulreadrights) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulreadrights_;
  }
  if (ulreadrights) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulreadrights = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulreadrights, submessage_arena);
    }
    
  } else {
    
  }
  ulreadrights_ = ulreadrights;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_CreateFile.ulReadRights)
}

// .com.westone.skf.WST_PROTO_UINT32 ulWriteRights = 5;
inline bool Req_SKF_CreateFile::has_ulwriterights() const {
  return this != internal_default_instance() && ulwriterights_ != nullptr;
}
inline void Req_SKF_CreateFile::clear_ulwriterights() {
  if (GetArenaNoVirtual() == nullptr && ulwriterights_ != nullptr) {
    delete ulwriterights_;
  }
  ulwriterights_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_CreateFile::ulwriterights() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulwriterights_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_CreateFile.ulWriteRights)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_CreateFile::release_ulwriterights() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_CreateFile.ulWriteRights)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulwriterights_;
  ulwriterights_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_CreateFile::mutable_ulwriterights() {
  
  if (ulwriterights_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulwriterights_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_CreateFile.ulWriteRights)
  return ulwriterights_;
}
inline void Req_SKF_CreateFile::set_allocated_ulwriterights(::com::westone::skf::WST_PROTO_UINT32* ulwriterights) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulwriterights_;
  }
  if (ulwriterights) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulwriterights = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulwriterights, submessage_arena);
    }
    
  } else {
    
  }
  ulwriterights_ = ulwriterights;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_CreateFile.ulWriteRights)
}

// -------------------------------------------------------------------

// Rsp_SKF_CreateFile

// -------------------------------------------------------------------

// Req_SKF_DeleteFile

// .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
inline bool Req_SKF_DeleteFile::has_happlication() const {
  return this != internal_default_instance() && happlication_ != nullptr;
}
inline void Req_SKF_DeleteFile::clear_happlication() {
  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_DeleteFile::happlication() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = happlication_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DeleteFile.hApplication)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DeleteFile::release_happlication() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DeleteFile.hApplication)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = happlication_;
  happlication_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DeleteFile::mutable_happlication() {
  
  if (happlication_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    happlication_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DeleteFile.hApplication)
  return happlication_;
}
inline void Req_SKF_DeleteFile::set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete happlication_;
  }
  if (happlication) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      happlication = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, happlication, submessage_arena);
    }
    
  } else {
    
  }
  happlication_ = happlication;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DeleteFile.hApplication)
}

// string szFileName = 2;
inline void Req_SKF_DeleteFile::clear_szfilename() {
  szfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_DeleteFile::szfilename() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DeleteFile.szFileName)
  return szfilename_.GetNoArena();
}
inline void Req_SKF_DeleteFile::set_szfilename(const ::std::string& value) {
  
  szfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_DeleteFile.szFileName)
}
#if LANG_CXX11
inline void Req_SKF_DeleteFile::set_szfilename(::std::string&& value) {
  
  szfilename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_DeleteFile.szFileName)
}
#endif
inline void Req_SKF_DeleteFile::set_szfilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  szfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_DeleteFile.szFileName)
}
inline void Req_SKF_DeleteFile::set_szfilename(const char* value, size_t size) {
  
  szfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_DeleteFile.szFileName)
}
inline ::std::string* Req_SKF_DeleteFile::mutable_szfilename() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DeleteFile.szFileName)
  return szfilename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_DeleteFile::release_szfilename() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DeleteFile.szFileName)
  
  return szfilename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_DeleteFile::set_allocated_szfilename(::std::string* szfilename) {
  if (szfilename != nullptr) {
    
  } else {
    
  }
  szfilename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szfilename);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DeleteFile.szFileName)
}

// -------------------------------------------------------------------

// Rsp_SKF_DeleteFile

// -------------------------------------------------------------------

// Req_SKF_EnumFiles

// .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
inline bool Req_SKF_EnumFiles::has_happlication() const {
  return this != internal_default_instance() && happlication_ != nullptr;
}
inline void Req_SKF_EnumFiles::clear_happlication() {
  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_EnumFiles::happlication() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = happlication_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_EnumFiles.hApplication)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_EnumFiles::release_happlication() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_EnumFiles.hApplication)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = happlication_;
  happlication_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_EnumFiles::mutable_happlication() {
  
  if (happlication_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    happlication_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_EnumFiles.hApplication)
  return happlication_;
}
inline void Req_SKF_EnumFiles::set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete happlication_;
  }
  if (happlication) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      happlication = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, happlication, submessage_arena);
    }
    
  } else {
    
  }
  happlication_ = happlication;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_EnumFiles.hApplication)
}

// string szFileName = 2;
inline void Req_SKF_EnumFiles::clear_szfilename() {
  szfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_EnumFiles::szfilename() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_EnumFiles.szFileName)
  return szfilename_.GetNoArena();
}
inline void Req_SKF_EnumFiles::set_szfilename(const ::std::string& value) {
  
  szfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_EnumFiles.szFileName)
}
#if LANG_CXX11
inline void Req_SKF_EnumFiles::set_szfilename(::std::string&& value) {
  
  szfilename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_EnumFiles.szFileName)
}
#endif
inline void Req_SKF_EnumFiles::set_szfilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  szfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_EnumFiles.szFileName)
}
inline void Req_SKF_EnumFiles::set_szfilename(const char* value, size_t size) {
  
  szfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_EnumFiles.szFileName)
}
inline ::std::string* Req_SKF_EnumFiles::mutable_szfilename() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_EnumFiles.szFileName)
  return szfilename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_EnumFiles::release_szfilename() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_EnumFiles.szFileName)
  
  return szfilename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_EnumFiles::set_allocated_szfilename(::std::string* szfilename) {
  if (szfilename != nullptr) {
    
  } else {
    
  }
  szfilename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szfilename);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_EnumFiles.szFileName)
}

// .com.westone.skf.WST_PROTO_UINT32 pulSize = 3;
inline bool Req_SKF_EnumFiles::has_pulsize() const {
  return this != internal_default_instance() && pulsize_ != nullptr;
}
inline void Req_SKF_EnumFiles::clear_pulsize() {
  if (GetArenaNoVirtual() == nullptr && pulsize_ != nullptr) {
    delete pulsize_;
  }
  pulsize_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_EnumFiles::pulsize() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulsize_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_EnumFiles.pulSize)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_EnumFiles::release_pulsize() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_EnumFiles.pulSize)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulsize_;
  pulsize_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_EnumFiles::mutable_pulsize() {
  
  if (pulsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulsize_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_EnumFiles.pulSize)
  return pulsize_;
}
inline void Req_SKF_EnumFiles::set_allocated_pulsize(::com::westone::skf::WST_PROTO_UINT32* pulsize) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulsize_;
  }
  if (pulsize) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulsize = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulsize, submessage_arena);
    }
    
  } else {
    
  }
  pulsize_ = pulsize;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_EnumFiles.pulSize)
}

// -------------------------------------------------------------------

// Rsp_SKF_EnumFiles

// string szFileName = 1;
inline void Rsp_SKF_EnumFiles::clear_szfilename() {
  szfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rsp_SKF_EnumFiles::szfilename() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_EnumFiles.szFileName)
  return szfilename_.GetNoArena();
}
inline void Rsp_SKF_EnumFiles::set_szfilename(const ::std::string& value) {
  
  szfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Rsp_SKF_EnumFiles.szFileName)
}
#if LANG_CXX11
inline void Rsp_SKF_EnumFiles::set_szfilename(::std::string&& value) {
  
  szfilename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Rsp_SKF_EnumFiles.szFileName)
}
#endif
inline void Rsp_SKF_EnumFiles::set_szfilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  szfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Rsp_SKF_EnumFiles.szFileName)
}
inline void Rsp_SKF_EnumFiles::set_szfilename(const char* value, size_t size) {
  
  szfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Rsp_SKF_EnumFiles.szFileName)
}
inline ::std::string* Rsp_SKF_EnumFiles::mutable_szfilename() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_EnumFiles.szFileName)
  return szfilename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rsp_SKF_EnumFiles::release_szfilename() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_EnumFiles.szFileName)
  
  return szfilename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rsp_SKF_EnumFiles::set_allocated_szfilename(::std::string* szfilename) {
  if (szfilename != nullptr) {
    
  } else {
    
  }
  szfilename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szfilename);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_EnumFiles.szFileName)
}

// .com.westone.skf.WST_PROTO_UINT32 pulSize = 2;
inline bool Rsp_SKF_EnumFiles::has_pulsize() const {
  return this != internal_default_instance() && pulsize_ != nullptr;
}
inline void Rsp_SKF_EnumFiles::clear_pulsize() {
  if (GetArenaNoVirtual() == nullptr && pulsize_ != nullptr) {
    delete pulsize_;
  }
  pulsize_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_EnumFiles::pulsize() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulsize_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_EnumFiles.pulSize)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_EnumFiles::release_pulsize() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_EnumFiles.pulSize)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulsize_;
  pulsize_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_EnumFiles::mutable_pulsize() {
  
  if (pulsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulsize_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_EnumFiles.pulSize)
  return pulsize_;
}
inline void Rsp_SKF_EnumFiles::set_allocated_pulsize(::com::westone::skf::WST_PROTO_UINT32* pulsize) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulsize_;
  }
  if (pulsize) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulsize = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulsize, submessage_arena);
    }
    
  } else {
    
  }
  pulsize_ = pulsize;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_EnumFiles.pulSize)
}

// -------------------------------------------------------------------

// Req_SKF_GetFileInfo

// .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
inline bool Req_SKF_GetFileInfo::has_happlication() const {
  return this != internal_default_instance() && happlication_ != nullptr;
}
inline void Req_SKF_GetFileInfo::clear_happlication() {
  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GetFileInfo::happlication() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = happlication_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GetFileInfo.hApplication)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GetFileInfo::release_happlication() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GetFileInfo.hApplication)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = happlication_;
  happlication_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GetFileInfo::mutable_happlication() {
  
  if (happlication_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    happlication_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GetFileInfo.hApplication)
  return happlication_;
}
inline void Req_SKF_GetFileInfo::set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete happlication_;
  }
  if (happlication) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      happlication = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, happlication, submessage_arena);
    }
    
  } else {
    
  }
  happlication_ = happlication;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GetFileInfo.hApplication)
}

// string szFileName = 2;
inline void Req_SKF_GetFileInfo::clear_szfilename() {
  szfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_GetFileInfo::szfilename() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GetFileInfo.szFileName)
  return szfilename_.GetNoArena();
}
inline void Req_SKF_GetFileInfo::set_szfilename(const ::std::string& value) {
  
  szfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_GetFileInfo.szFileName)
}
#if LANG_CXX11
inline void Req_SKF_GetFileInfo::set_szfilename(::std::string&& value) {
  
  szfilename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_GetFileInfo.szFileName)
}
#endif
inline void Req_SKF_GetFileInfo::set_szfilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  szfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_GetFileInfo.szFileName)
}
inline void Req_SKF_GetFileInfo::set_szfilename(const char* value, size_t size) {
  
  szfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_GetFileInfo.szFileName)
}
inline ::std::string* Req_SKF_GetFileInfo::mutable_szfilename() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GetFileInfo.szFileName)
  return szfilename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_GetFileInfo::release_szfilename() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GetFileInfo.szFileName)
  
  return szfilename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_GetFileInfo::set_allocated_szfilename(::std::string* szfilename) {
  if (szfilename != nullptr) {
    
  } else {
    
  }
  szfilename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szfilename);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GetFileInfo.szFileName)
}

// .com.westone.skf.SKF_FILEATTRIBUTES pFileInfo = 3;
inline bool Req_SKF_GetFileInfo::has_pfileinfo() const {
  return this != internal_default_instance() && pfileinfo_ != nullptr;
}
inline void Req_SKF_GetFileInfo::clear_pfileinfo() {
  if (GetArenaNoVirtual() == nullptr && pfileinfo_ != nullptr) {
    delete pfileinfo_;
  }
  pfileinfo_ = nullptr;
}
inline const ::com::westone::skf::SKF_FILEATTRIBUTES& Req_SKF_GetFileInfo::pfileinfo() const {
  const ::com::westone::skf::SKF_FILEATTRIBUTES* p = pfileinfo_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GetFileInfo.pFileInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_FILEATTRIBUTES*>(
      &::com::westone::skf::_SKF_FILEATTRIBUTES_default_instance_);
}
inline ::com::westone::skf::SKF_FILEATTRIBUTES* Req_SKF_GetFileInfo::release_pfileinfo() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GetFileInfo.pFileInfo)
  
  ::com::westone::skf::SKF_FILEATTRIBUTES* temp = pfileinfo_;
  pfileinfo_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_FILEATTRIBUTES* Req_SKF_GetFileInfo::mutable_pfileinfo() {
  
  if (pfileinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_FILEATTRIBUTES>(GetArenaNoVirtual());
    pfileinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GetFileInfo.pFileInfo)
  return pfileinfo_;
}
inline void Req_SKF_GetFileInfo::set_allocated_pfileinfo(::com::westone::skf::SKF_FILEATTRIBUTES* pfileinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pfileinfo_;
  }
  if (pfileinfo) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pfileinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pfileinfo, submessage_arena);
    }
    
  } else {
    
  }
  pfileinfo_ = pfileinfo;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GetFileInfo.pFileInfo)
}

// -------------------------------------------------------------------

// Rsp_SKF_GetFileInfo

// .com.westone.skf.SKF_FILEATTRIBUTES pFileInfo = 1;
inline bool Rsp_SKF_GetFileInfo::has_pfileinfo() const {
  return this != internal_default_instance() && pfileinfo_ != nullptr;
}
inline void Rsp_SKF_GetFileInfo::clear_pfileinfo() {
  if (GetArenaNoVirtual() == nullptr && pfileinfo_ != nullptr) {
    delete pfileinfo_;
  }
  pfileinfo_ = nullptr;
}
inline const ::com::westone::skf::SKF_FILEATTRIBUTES& Rsp_SKF_GetFileInfo::pfileinfo() const {
  const ::com::westone::skf::SKF_FILEATTRIBUTES* p = pfileinfo_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_GetFileInfo.pFileInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_FILEATTRIBUTES*>(
      &::com::westone::skf::_SKF_FILEATTRIBUTES_default_instance_);
}
inline ::com::westone::skf::SKF_FILEATTRIBUTES* Rsp_SKF_GetFileInfo::release_pfileinfo() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_GetFileInfo.pFileInfo)
  
  ::com::westone::skf::SKF_FILEATTRIBUTES* temp = pfileinfo_;
  pfileinfo_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_FILEATTRIBUTES* Rsp_SKF_GetFileInfo::mutable_pfileinfo() {
  
  if (pfileinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_FILEATTRIBUTES>(GetArenaNoVirtual());
    pfileinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_GetFileInfo.pFileInfo)
  return pfileinfo_;
}
inline void Rsp_SKF_GetFileInfo::set_allocated_pfileinfo(::com::westone::skf::SKF_FILEATTRIBUTES* pfileinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pfileinfo_;
  }
  if (pfileinfo) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pfileinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pfileinfo, submessage_arena);
    }
    
  } else {
    
  }
  pfileinfo_ = pfileinfo;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_GetFileInfo.pFileInfo)
}

// -------------------------------------------------------------------

// Req_SKF_ReadFile

// .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
inline bool Req_SKF_ReadFile::has_happlication() const {
  return this != internal_default_instance() && happlication_ != nullptr;
}
inline void Req_SKF_ReadFile::clear_happlication() {
  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ReadFile::happlication() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = happlication_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ReadFile.hApplication)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ReadFile::release_happlication() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ReadFile.hApplication)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = happlication_;
  happlication_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ReadFile::mutable_happlication() {
  
  if (happlication_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    happlication_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ReadFile.hApplication)
  return happlication_;
}
inline void Req_SKF_ReadFile::set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete happlication_;
  }
  if (happlication) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      happlication = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, happlication, submessage_arena);
    }
    
  } else {
    
  }
  happlication_ = happlication;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ReadFile.hApplication)
}

// string szFileName = 2;
inline void Req_SKF_ReadFile::clear_szfilename() {
  szfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_ReadFile::szfilename() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ReadFile.szFileName)
  return szfilename_.GetNoArena();
}
inline void Req_SKF_ReadFile::set_szfilename(const ::std::string& value) {
  
  szfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_ReadFile.szFileName)
}
#if LANG_CXX11
inline void Req_SKF_ReadFile::set_szfilename(::std::string&& value) {
  
  szfilename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_ReadFile.szFileName)
}
#endif
inline void Req_SKF_ReadFile::set_szfilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  szfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_ReadFile.szFileName)
}
inline void Req_SKF_ReadFile::set_szfilename(const char* value, size_t size) {
  
  szfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_ReadFile.szFileName)
}
inline ::std::string* Req_SKF_ReadFile::mutable_szfilename() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ReadFile.szFileName)
  return szfilename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_ReadFile::release_szfilename() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ReadFile.szFileName)
  
  return szfilename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_ReadFile::set_allocated_szfilename(::std::string* szfilename) {
  if (szfilename != nullptr) {
    
  } else {
    
  }
  szfilename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szfilename);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ReadFile.szFileName)
}

// .com.westone.skf.WST_PROTO_UINT32 ulOffset = 3;
inline bool Req_SKF_ReadFile::has_uloffset() const {
  return this != internal_default_instance() && uloffset_ != nullptr;
}
inline void Req_SKF_ReadFile::clear_uloffset() {
  if (GetArenaNoVirtual() == nullptr && uloffset_ != nullptr) {
    delete uloffset_;
  }
  uloffset_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ReadFile::uloffset() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = uloffset_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ReadFile.ulOffset)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ReadFile::release_uloffset() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ReadFile.ulOffset)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = uloffset_;
  uloffset_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ReadFile::mutable_uloffset() {
  
  if (uloffset_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    uloffset_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ReadFile.ulOffset)
  return uloffset_;
}
inline void Req_SKF_ReadFile::set_allocated_uloffset(::com::westone::skf::WST_PROTO_UINT32* uloffset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete uloffset_;
  }
  if (uloffset) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uloffset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uloffset, submessage_arena);
    }
    
  } else {
    
  }
  uloffset_ = uloffset;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ReadFile.ulOffset)
}

// .com.westone.skf.WST_PROTO_UINT32 ulSize = 4;
inline bool Req_SKF_ReadFile::has_ulsize() const {
  return this != internal_default_instance() && ulsize_ != nullptr;
}
inline void Req_SKF_ReadFile::clear_ulsize() {
  if (GetArenaNoVirtual() == nullptr && ulsize_ != nullptr) {
    delete ulsize_;
  }
  ulsize_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ReadFile::ulsize() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulsize_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ReadFile.ulSize)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ReadFile::release_ulsize() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ReadFile.ulSize)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulsize_;
  ulsize_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ReadFile::mutable_ulsize() {
  
  if (ulsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulsize_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ReadFile.ulSize)
  return ulsize_;
}
inline void Req_SKF_ReadFile::set_allocated_ulsize(::com::westone::skf::WST_PROTO_UINT32* ulsize) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulsize_;
  }
  if (ulsize) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulsize = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulsize, submessage_arena);
    }
    
  } else {
    
  }
  ulsize_ = ulsize;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ReadFile.ulSize)
}

// bytes pbOutData = 5;
inline void Req_SKF_ReadFile::clear_pboutdata() {
  pboutdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_ReadFile::pboutdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ReadFile.pbOutData)
  return pboutdata_.GetNoArena();
}
inline void Req_SKF_ReadFile::set_pboutdata(const ::std::string& value) {
  
  pboutdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_ReadFile.pbOutData)
}
#if LANG_CXX11
inline void Req_SKF_ReadFile::set_pboutdata(::std::string&& value) {
  
  pboutdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_ReadFile.pbOutData)
}
#endif
inline void Req_SKF_ReadFile::set_pboutdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pboutdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_ReadFile.pbOutData)
}
inline void Req_SKF_ReadFile::set_pboutdata(const void* value, size_t size) {
  
  pboutdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_ReadFile.pbOutData)
}
inline ::std::string* Req_SKF_ReadFile::mutable_pboutdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ReadFile.pbOutData)
  return pboutdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_ReadFile::release_pboutdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ReadFile.pbOutData)
  
  return pboutdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_ReadFile::set_allocated_pboutdata(::std::string* pboutdata) {
  if (pboutdata != nullptr) {
    
  } else {
    
  }
  pboutdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pboutdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ReadFile.pbOutData)
}

// .com.westone.skf.WST_PROTO_UINT32 pulOutLen = 6;
inline bool Req_SKF_ReadFile::has_puloutlen() const {
  return this != internal_default_instance() && puloutlen_ != nullptr;
}
inline void Req_SKF_ReadFile::clear_puloutlen() {
  if (GetArenaNoVirtual() == nullptr && puloutlen_ != nullptr) {
    delete puloutlen_;
  }
  puloutlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ReadFile::puloutlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = puloutlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ReadFile.pulOutLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ReadFile::release_puloutlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ReadFile.pulOutLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = puloutlen_;
  puloutlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ReadFile::mutable_puloutlen() {
  
  if (puloutlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    puloutlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ReadFile.pulOutLen)
  return puloutlen_;
}
inline void Req_SKF_ReadFile::set_allocated_puloutlen(::com::westone::skf::WST_PROTO_UINT32* puloutlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete puloutlen_;
  }
  if (puloutlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      puloutlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, puloutlen, submessage_arena);
    }
    
  } else {
    
  }
  puloutlen_ = puloutlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ReadFile.pulOutLen)
}

// -------------------------------------------------------------------

// Rsp_SKF_ReadFile

// bytes pbOutData = 1;
inline void Rsp_SKF_ReadFile::clear_pboutdata() {
  pboutdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rsp_SKF_ReadFile::pboutdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_ReadFile.pbOutData)
  return pboutdata_.GetNoArena();
}
inline void Rsp_SKF_ReadFile::set_pboutdata(const ::std::string& value) {
  
  pboutdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Rsp_SKF_ReadFile.pbOutData)
}
#if LANG_CXX11
inline void Rsp_SKF_ReadFile::set_pboutdata(::std::string&& value) {
  
  pboutdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Rsp_SKF_ReadFile.pbOutData)
}
#endif
inline void Rsp_SKF_ReadFile::set_pboutdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pboutdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Rsp_SKF_ReadFile.pbOutData)
}
inline void Rsp_SKF_ReadFile::set_pboutdata(const void* value, size_t size) {
  
  pboutdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Rsp_SKF_ReadFile.pbOutData)
}
inline ::std::string* Rsp_SKF_ReadFile::mutable_pboutdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_ReadFile.pbOutData)
  return pboutdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rsp_SKF_ReadFile::release_pboutdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_ReadFile.pbOutData)
  
  return pboutdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rsp_SKF_ReadFile::set_allocated_pboutdata(::std::string* pboutdata) {
  if (pboutdata != nullptr) {
    
  } else {
    
  }
  pboutdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pboutdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_ReadFile.pbOutData)
}

// .com.westone.skf.WST_PROTO_UINT32 pulOutLen = 2;
inline bool Rsp_SKF_ReadFile::has_puloutlen() const {
  return this != internal_default_instance() && puloutlen_ != nullptr;
}
inline void Rsp_SKF_ReadFile::clear_puloutlen() {
  if (GetArenaNoVirtual() == nullptr && puloutlen_ != nullptr) {
    delete puloutlen_;
  }
  puloutlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_ReadFile::puloutlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = puloutlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_ReadFile.pulOutLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_ReadFile::release_puloutlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_ReadFile.pulOutLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = puloutlen_;
  puloutlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_ReadFile::mutable_puloutlen() {
  
  if (puloutlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    puloutlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_ReadFile.pulOutLen)
  return puloutlen_;
}
inline void Rsp_SKF_ReadFile::set_allocated_puloutlen(::com::westone::skf::WST_PROTO_UINT32* puloutlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete puloutlen_;
  }
  if (puloutlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      puloutlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, puloutlen, submessage_arena);
    }
    
  } else {
    
  }
  puloutlen_ = puloutlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_ReadFile.pulOutLen)
}

// -------------------------------------------------------------------

// Req_SKF_WriteFile

// .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
inline bool Req_SKF_WriteFile::has_happlication() const {
  return this != internal_default_instance() && happlication_ != nullptr;
}
inline void Req_SKF_WriteFile::clear_happlication() {
  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_WriteFile::happlication() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = happlication_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_WriteFile.hApplication)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_WriteFile::release_happlication() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_WriteFile.hApplication)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = happlication_;
  happlication_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_WriteFile::mutable_happlication() {
  
  if (happlication_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    happlication_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_WriteFile.hApplication)
  return happlication_;
}
inline void Req_SKF_WriteFile::set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete happlication_;
  }
  if (happlication) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      happlication = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, happlication, submessage_arena);
    }
    
  } else {
    
  }
  happlication_ = happlication;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_WriteFile.hApplication)
}

// string szFileName = 2;
inline void Req_SKF_WriteFile::clear_szfilename() {
  szfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_WriteFile::szfilename() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_WriteFile.szFileName)
  return szfilename_.GetNoArena();
}
inline void Req_SKF_WriteFile::set_szfilename(const ::std::string& value) {
  
  szfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_WriteFile.szFileName)
}
#if LANG_CXX11
inline void Req_SKF_WriteFile::set_szfilename(::std::string&& value) {
  
  szfilename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_WriteFile.szFileName)
}
#endif
inline void Req_SKF_WriteFile::set_szfilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  szfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_WriteFile.szFileName)
}
inline void Req_SKF_WriteFile::set_szfilename(const char* value, size_t size) {
  
  szfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_WriteFile.szFileName)
}
inline ::std::string* Req_SKF_WriteFile::mutable_szfilename() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_WriteFile.szFileName)
  return szfilename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_WriteFile::release_szfilename() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_WriteFile.szFileName)
  
  return szfilename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_WriteFile::set_allocated_szfilename(::std::string* szfilename) {
  if (szfilename != nullptr) {
    
  } else {
    
  }
  szfilename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szfilename);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_WriteFile.szFileName)
}

// .com.westone.skf.WST_PROTO_UINT32 ulOffset = 3;
inline bool Req_SKF_WriteFile::has_uloffset() const {
  return this != internal_default_instance() && uloffset_ != nullptr;
}
inline void Req_SKF_WriteFile::clear_uloffset() {
  if (GetArenaNoVirtual() == nullptr && uloffset_ != nullptr) {
    delete uloffset_;
  }
  uloffset_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_WriteFile::uloffset() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = uloffset_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_WriteFile.ulOffset)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_WriteFile::release_uloffset() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_WriteFile.ulOffset)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = uloffset_;
  uloffset_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_WriteFile::mutable_uloffset() {
  
  if (uloffset_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    uloffset_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_WriteFile.ulOffset)
  return uloffset_;
}
inline void Req_SKF_WriteFile::set_allocated_uloffset(::com::westone::skf::WST_PROTO_UINT32* uloffset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete uloffset_;
  }
  if (uloffset) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uloffset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uloffset, submessage_arena);
    }
    
  } else {
    
  }
  uloffset_ = uloffset;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_WriteFile.ulOffset)
}

// bytes pbData = 4;
inline void Req_SKF_WriteFile::clear_pbdata() {
  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_WriteFile::pbdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_WriteFile.pbData)
  return pbdata_.GetNoArena();
}
inline void Req_SKF_WriteFile::set_pbdata(const ::std::string& value) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_WriteFile.pbData)
}
#if LANG_CXX11
inline void Req_SKF_WriteFile::set_pbdata(::std::string&& value) {
  
  pbdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_WriteFile.pbData)
}
#endif
inline void Req_SKF_WriteFile::set_pbdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_WriteFile.pbData)
}
inline void Req_SKF_WriteFile::set_pbdata(const void* value, size_t size) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_WriteFile.pbData)
}
inline ::std::string* Req_SKF_WriteFile::mutable_pbdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_WriteFile.pbData)
  return pbdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_WriteFile::release_pbdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_WriteFile.pbData)
  
  return pbdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_WriteFile::set_allocated_pbdata(::std::string* pbdata) {
  if (pbdata != nullptr) {
    
  } else {
    
  }
  pbdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_WriteFile.pbData)
}

// .com.westone.skf.WST_PROTO_UINT32 ulSize = 5;
inline bool Req_SKF_WriteFile::has_ulsize() const {
  return this != internal_default_instance() && ulsize_ != nullptr;
}
inline void Req_SKF_WriteFile::clear_ulsize() {
  if (GetArenaNoVirtual() == nullptr && ulsize_ != nullptr) {
    delete ulsize_;
  }
  ulsize_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_WriteFile::ulsize() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulsize_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_WriteFile.ulSize)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_WriteFile::release_ulsize() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_WriteFile.ulSize)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulsize_;
  ulsize_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_WriteFile::mutable_ulsize() {
  
  if (ulsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulsize_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_WriteFile.ulSize)
  return ulsize_;
}
inline void Req_SKF_WriteFile::set_allocated_ulsize(::com::westone::skf::WST_PROTO_UINT32* ulsize) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulsize_;
  }
  if (ulsize) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulsize = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulsize, submessage_arena);
    }
    
  } else {
    
  }
  ulsize_ = ulsize;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_WriteFile.ulSize)
}

// -------------------------------------------------------------------

// Rsp_SKF_WriteFile

// -------------------------------------------------------------------

// Req_SKF_CreateContainer

// .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
inline bool Req_SKF_CreateContainer::has_happlication() const {
  return this != internal_default_instance() && happlication_ != nullptr;
}
inline void Req_SKF_CreateContainer::clear_happlication() {
  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_CreateContainer::happlication() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = happlication_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_CreateContainer.hApplication)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_CreateContainer::release_happlication() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_CreateContainer.hApplication)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = happlication_;
  happlication_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_CreateContainer::mutable_happlication() {
  
  if (happlication_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    happlication_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_CreateContainer.hApplication)
  return happlication_;
}
inline void Req_SKF_CreateContainer::set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete happlication_;
  }
  if (happlication) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      happlication = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, happlication, submessage_arena);
    }
    
  } else {
    
  }
  happlication_ = happlication;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_CreateContainer.hApplication)
}

// string szContainerName = 2;
inline void Req_SKF_CreateContainer::clear_szcontainername() {
  szcontainername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_CreateContainer::szcontainername() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_CreateContainer.szContainerName)
  return szcontainername_.GetNoArena();
}
inline void Req_SKF_CreateContainer::set_szcontainername(const ::std::string& value) {
  
  szcontainername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_CreateContainer.szContainerName)
}
#if LANG_CXX11
inline void Req_SKF_CreateContainer::set_szcontainername(::std::string&& value) {
  
  szcontainername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_CreateContainer.szContainerName)
}
#endif
inline void Req_SKF_CreateContainer::set_szcontainername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  szcontainername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_CreateContainer.szContainerName)
}
inline void Req_SKF_CreateContainer::set_szcontainername(const char* value, size_t size) {
  
  szcontainername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_CreateContainer.szContainerName)
}
inline ::std::string* Req_SKF_CreateContainer::mutable_szcontainername() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_CreateContainer.szContainerName)
  return szcontainername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_CreateContainer::release_szcontainername() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_CreateContainer.szContainerName)
  
  return szcontainername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_CreateContainer::set_allocated_szcontainername(::std::string* szcontainername) {
  if (szcontainername != nullptr) {
    
  } else {
    
  }
  szcontainername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szcontainername);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_CreateContainer.szContainerName)
}

// .com.westone.skf.WST_PROTO_UINT32 phContainer = 3;
inline bool Req_SKF_CreateContainer::has_phcontainer() const {
  return this != internal_default_instance() && phcontainer_ != nullptr;
}
inline void Req_SKF_CreateContainer::clear_phcontainer() {
  if (GetArenaNoVirtual() == nullptr && phcontainer_ != nullptr) {
    delete phcontainer_;
  }
  phcontainer_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_CreateContainer::phcontainer() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = phcontainer_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_CreateContainer.phContainer)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_CreateContainer::release_phcontainer() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_CreateContainer.phContainer)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = phcontainer_;
  phcontainer_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_CreateContainer::mutable_phcontainer() {
  
  if (phcontainer_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    phcontainer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_CreateContainer.phContainer)
  return phcontainer_;
}
inline void Req_SKF_CreateContainer::set_allocated_phcontainer(::com::westone::skf::WST_PROTO_UINT32* phcontainer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete phcontainer_;
  }
  if (phcontainer) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phcontainer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phcontainer, submessage_arena);
    }
    
  } else {
    
  }
  phcontainer_ = phcontainer;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_CreateContainer.phContainer)
}

// -------------------------------------------------------------------

// Rsp_SKF_CreateContainer

// .com.westone.skf.WST_PROTO_UINT32 phContainer = 1;
inline bool Rsp_SKF_CreateContainer::has_phcontainer() const {
  return this != internal_default_instance() && phcontainer_ != nullptr;
}
inline void Rsp_SKF_CreateContainer::clear_phcontainer() {
  if (GetArenaNoVirtual() == nullptr && phcontainer_ != nullptr) {
    delete phcontainer_;
  }
  phcontainer_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_CreateContainer::phcontainer() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = phcontainer_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_CreateContainer.phContainer)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_CreateContainer::release_phcontainer() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_CreateContainer.phContainer)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = phcontainer_;
  phcontainer_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_CreateContainer::mutable_phcontainer() {
  
  if (phcontainer_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    phcontainer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_CreateContainer.phContainer)
  return phcontainer_;
}
inline void Rsp_SKF_CreateContainer::set_allocated_phcontainer(::com::westone::skf::WST_PROTO_UINT32* phcontainer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete phcontainer_;
  }
  if (phcontainer) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phcontainer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phcontainer, submessage_arena);
    }
    
  } else {
    
  }
  phcontainer_ = phcontainer;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_CreateContainer.phContainer)
}

// -------------------------------------------------------------------

// Req_SKF_DeleteContainer

// .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
inline bool Req_SKF_DeleteContainer::has_happlication() const {
  return this != internal_default_instance() && happlication_ != nullptr;
}
inline void Req_SKF_DeleteContainer::clear_happlication() {
  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_DeleteContainer::happlication() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = happlication_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DeleteContainer.hApplication)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DeleteContainer::release_happlication() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DeleteContainer.hApplication)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = happlication_;
  happlication_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DeleteContainer::mutable_happlication() {
  
  if (happlication_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    happlication_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DeleteContainer.hApplication)
  return happlication_;
}
inline void Req_SKF_DeleteContainer::set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete happlication_;
  }
  if (happlication) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      happlication = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, happlication, submessage_arena);
    }
    
  } else {
    
  }
  happlication_ = happlication;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DeleteContainer.hApplication)
}

// string szContainerName = 2;
inline void Req_SKF_DeleteContainer::clear_szcontainername() {
  szcontainername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_DeleteContainer::szcontainername() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DeleteContainer.szContainerName)
  return szcontainername_.GetNoArena();
}
inline void Req_SKF_DeleteContainer::set_szcontainername(const ::std::string& value) {
  
  szcontainername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_DeleteContainer.szContainerName)
}
#if LANG_CXX11
inline void Req_SKF_DeleteContainer::set_szcontainername(::std::string&& value) {
  
  szcontainername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_DeleteContainer.szContainerName)
}
#endif
inline void Req_SKF_DeleteContainer::set_szcontainername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  szcontainername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_DeleteContainer.szContainerName)
}
inline void Req_SKF_DeleteContainer::set_szcontainername(const char* value, size_t size) {
  
  szcontainername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_DeleteContainer.szContainerName)
}
inline ::std::string* Req_SKF_DeleteContainer::mutable_szcontainername() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DeleteContainer.szContainerName)
  return szcontainername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_DeleteContainer::release_szcontainername() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DeleteContainer.szContainerName)
  
  return szcontainername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_DeleteContainer::set_allocated_szcontainername(::std::string* szcontainername) {
  if (szcontainername != nullptr) {
    
  } else {
    
  }
  szcontainername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szcontainername);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DeleteContainer.szContainerName)
}

// -------------------------------------------------------------------

// Rsp_SKF_DeleteContainer

// -------------------------------------------------------------------

// Req_SKF_OpenContainer

// .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
inline bool Req_SKF_OpenContainer::has_happlication() const {
  return this != internal_default_instance() && happlication_ != nullptr;
}
inline void Req_SKF_OpenContainer::clear_happlication() {
  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_OpenContainer::happlication() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = happlication_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_OpenContainer.hApplication)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_OpenContainer::release_happlication() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_OpenContainer.hApplication)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = happlication_;
  happlication_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_OpenContainer::mutable_happlication() {
  
  if (happlication_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    happlication_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_OpenContainer.hApplication)
  return happlication_;
}
inline void Req_SKF_OpenContainer::set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete happlication_;
  }
  if (happlication) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      happlication = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, happlication, submessage_arena);
    }
    
  } else {
    
  }
  happlication_ = happlication;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_OpenContainer.hApplication)
}

// string szContainerName = 2;
inline void Req_SKF_OpenContainer::clear_szcontainername() {
  szcontainername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_OpenContainer::szcontainername() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_OpenContainer.szContainerName)
  return szcontainername_.GetNoArena();
}
inline void Req_SKF_OpenContainer::set_szcontainername(const ::std::string& value) {
  
  szcontainername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_OpenContainer.szContainerName)
}
#if LANG_CXX11
inline void Req_SKF_OpenContainer::set_szcontainername(::std::string&& value) {
  
  szcontainername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_OpenContainer.szContainerName)
}
#endif
inline void Req_SKF_OpenContainer::set_szcontainername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  szcontainername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_OpenContainer.szContainerName)
}
inline void Req_SKF_OpenContainer::set_szcontainername(const char* value, size_t size) {
  
  szcontainername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_OpenContainer.szContainerName)
}
inline ::std::string* Req_SKF_OpenContainer::mutable_szcontainername() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_OpenContainer.szContainerName)
  return szcontainername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_OpenContainer::release_szcontainername() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_OpenContainer.szContainerName)
  
  return szcontainername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_OpenContainer::set_allocated_szcontainername(::std::string* szcontainername) {
  if (szcontainername != nullptr) {
    
  } else {
    
  }
  szcontainername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szcontainername);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_OpenContainer.szContainerName)
}

// .com.westone.skf.WST_PROTO_UINT32 phContainer = 3;
inline bool Req_SKF_OpenContainer::has_phcontainer() const {
  return this != internal_default_instance() && phcontainer_ != nullptr;
}
inline void Req_SKF_OpenContainer::clear_phcontainer() {
  if (GetArenaNoVirtual() == nullptr && phcontainer_ != nullptr) {
    delete phcontainer_;
  }
  phcontainer_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_OpenContainer::phcontainer() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = phcontainer_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_OpenContainer.phContainer)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_OpenContainer::release_phcontainer() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_OpenContainer.phContainer)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = phcontainer_;
  phcontainer_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_OpenContainer::mutable_phcontainer() {
  
  if (phcontainer_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    phcontainer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_OpenContainer.phContainer)
  return phcontainer_;
}
inline void Req_SKF_OpenContainer::set_allocated_phcontainer(::com::westone::skf::WST_PROTO_UINT32* phcontainer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete phcontainer_;
  }
  if (phcontainer) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phcontainer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phcontainer, submessage_arena);
    }
    
  } else {
    
  }
  phcontainer_ = phcontainer;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_OpenContainer.phContainer)
}

// -------------------------------------------------------------------

// Rsp_SKF_OpenContainer

// .com.westone.skf.WST_PROTO_UINT32 phContainer = 1;
inline bool Rsp_SKF_OpenContainer::has_phcontainer() const {
  return this != internal_default_instance() && phcontainer_ != nullptr;
}
inline void Rsp_SKF_OpenContainer::clear_phcontainer() {
  if (GetArenaNoVirtual() == nullptr && phcontainer_ != nullptr) {
    delete phcontainer_;
  }
  phcontainer_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_OpenContainer::phcontainer() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = phcontainer_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_OpenContainer.phContainer)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_OpenContainer::release_phcontainer() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_OpenContainer.phContainer)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = phcontainer_;
  phcontainer_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_OpenContainer::mutable_phcontainer() {
  
  if (phcontainer_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    phcontainer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_OpenContainer.phContainer)
  return phcontainer_;
}
inline void Rsp_SKF_OpenContainer::set_allocated_phcontainer(::com::westone::skf::WST_PROTO_UINT32* phcontainer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete phcontainer_;
  }
  if (phcontainer) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phcontainer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phcontainer, submessage_arena);
    }
    
  } else {
    
  }
  phcontainer_ = phcontainer;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_OpenContainer.phContainer)
}

// -------------------------------------------------------------------

// Req_SKF_CloseContainer

// .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
inline bool Req_SKF_CloseContainer::has_hcontainer() const {
  return this != internal_default_instance() && hcontainer_ != nullptr;
}
inline void Req_SKF_CloseContainer::clear_hcontainer() {
  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_CloseContainer::hcontainer() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hcontainer_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_CloseContainer.hContainer)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_CloseContainer::release_hcontainer() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_CloseContainer.hContainer)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hcontainer_;
  hcontainer_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_CloseContainer::mutable_hcontainer() {
  
  if (hcontainer_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hcontainer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_CloseContainer.hContainer)
  return hcontainer_;
}
inline void Req_SKF_CloseContainer::set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hcontainer_;
  }
  if (hcontainer) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hcontainer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hcontainer, submessage_arena);
    }
    
  } else {
    
  }
  hcontainer_ = hcontainer;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_CloseContainer.hContainer)
}

// -------------------------------------------------------------------

// Rsp_SKF_CloseContainer

// -------------------------------------------------------------------

// Req_SKF_EnumContainer

// .com.westone.skf.WST_PROTO_UINT32 hApplication = 1;
inline bool Req_SKF_EnumContainer::has_happlication() const {
  return this != internal_default_instance() && happlication_ != nullptr;
}
inline void Req_SKF_EnumContainer::clear_happlication() {
  if (GetArenaNoVirtual() == nullptr && happlication_ != nullptr) {
    delete happlication_;
  }
  happlication_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_EnumContainer::happlication() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = happlication_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_EnumContainer.hApplication)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_EnumContainer::release_happlication() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_EnumContainer.hApplication)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = happlication_;
  happlication_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_EnumContainer::mutable_happlication() {
  
  if (happlication_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    happlication_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_EnumContainer.hApplication)
  return happlication_;
}
inline void Req_SKF_EnumContainer::set_allocated_happlication(::com::westone::skf::WST_PROTO_UINT32* happlication) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete happlication_;
  }
  if (happlication) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      happlication = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, happlication, submessage_arena);
    }
    
  } else {
    
  }
  happlication_ = happlication;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_EnumContainer.hApplication)
}

// string szContainerName = 2;
inline void Req_SKF_EnumContainer::clear_szcontainername() {
  szcontainername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_EnumContainer::szcontainername() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_EnumContainer.szContainerName)
  return szcontainername_.GetNoArena();
}
inline void Req_SKF_EnumContainer::set_szcontainername(const ::std::string& value) {
  
  szcontainername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_EnumContainer.szContainerName)
}
#if LANG_CXX11
inline void Req_SKF_EnumContainer::set_szcontainername(::std::string&& value) {
  
  szcontainername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_EnumContainer.szContainerName)
}
#endif
inline void Req_SKF_EnumContainer::set_szcontainername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  szcontainername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_EnumContainer.szContainerName)
}
inline void Req_SKF_EnumContainer::set_szcontainername(const char* value, size_t size) {
  
  szcontainername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_EnumContainer.szContainerName)
}
inline ::std::string* Req_SKF_EnumContainer::mutable_szcontainername() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_EnumContainer.szContainerName)
  return szcontainername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_EnumContainer::release_szcontainername() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_EnumContainer.szContainerName)
  
  return szcontainername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_EnumContainer::set_allocated_szcontainername(::std::string* szcontainername) {
  if (szcontainername != nullptr) {
    
  } else {
    
  }
  szcontainername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szcontainername);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_EnumContainer.szContainerName)
}

// .com.westone.skf.WST_PROTO_UINT32 pulSize = 3;
inline bool Req_SKF_EnumContainer::has_pulsize() const {
  return this != internal_default_instance() && pulsize_ != nullptr;
}
inline void Req_SKF_EnumContainer::clear_pulsize() {
  if (GetArenaNoVirtual() == nullptr && pulsize_ != nullptr) {
    delete pulsize_;
  }
  pulsize_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_EnumContainer::pulsize() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulsize_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_EnumContainer.pulSize)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_EnumContainer::release_pulsize() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_EnumContainer.pulSize)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulsize_;
  pulsize_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_EnumContainer::mutable_pulsize() {
  
  if (pulsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulsize_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_EnumContainer.pulSize)
  return pulsize_;
}
inline void Req_SKF_EnumContainer::set_allocated_pulsize(::com::westone::skf::WST_PROTO_UINT32* pulsize) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulsize_;
  }
  if (pulsize) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulsize = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulsize, submessage_arena);
    }
    
  } else {
    
  }
  pulsize_ = pulsize;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_EnumContainer.pulSize)
}

// -------------------------------------------------------------------

// Rsp_SKF_EnumContainer

// string szContainerName = 1;
inline void Rsp_SKF_EnumContainer::clear_szcontainername() {
  szcontainername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rsp_SKF_EnumContainer::szcontainername() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_EnumContainer.szContainerName)
  return szcontainername_.GetNoArena();
}
inline void Rsp_SKF_EnumContainer::set_szcontainername(const ::std::string& value) {
  
  szcontainername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Rsp_SKF_EnumContainer.szContainerName)
}
#if LANG_CXX11
inline void Rsp_SKF_EnumContainer::set_szcontainername(::std::string&& value) {
  
  szcontainername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Rsp_SKF_EnumContainer.szContainerName)
}
#endif
inline void Rsp_SKF_EnumContainer::set_szcontainername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  szcontainername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Rsp_SKF_EnumContainer.szContainerName)
}
inline void Rsp_SKF_EnumContainer::set_szcontainername(const char* value, size_t size) {
  
  szcontainername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Rsp_SKF_EnumContainer.szContainerName)
}
inline ::std::string* Rsp_SKF_EnumContainer::mutable_szcontainername() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_EnumContainer.szContainerName)
  return szcontainername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rsp_SKF_EnumContainer::release_szcontainername() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_EnumContainer.szContainerName)
  
  return szcontainername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rsp_SKF_EnumContainer::set_allocated_szcontainername(::std::string* szcontainername) {
  if (szcontainername != nullptr) {
    
  } else {
    
  }
  szcontainername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), szcontainername);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_EnumContainer.szContainerName)
}

// .com.westone.skf.WST_PROTO_UINT32 pulSize = 2;
inline bool Rsp_SKF_EnumContainer::has_pulsize() const {
  return this != internal_default_instance() && pulsize_ != nullptr;
}
inline void Rsp_SKF_EnumContainer::clear_pulsize() {
  if (GetArenaNoVirtual() == nullptr && pulsize_ != nullptr) {
    delete pulsize_;
  }
  pulsize_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_EnumContainer::pulsize() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulsize_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_EnumContainer.pulSize)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_EnumContainer::release_pulsize() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_EnumContainer.pulSize)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulsize_;
  pulsize_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_EnumContainer::mutable_pulsize() {
  
  if (pulsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulsize_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_EnumContainer.pulSize)
  return pulsize_;
}
inline void Rsp_SKF_EnumContainer::set_allocated_pulsize(::com::westone::skf::WST_PROTO_UINT32* pulsize) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulsize_;
  }
  if (pulsize) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulsize = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulsize, submessage_arena);
    }
    
  } else {
    
  }
  pulsize_ = pulsize;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_EnumContainer.pulSize)
}

// -------------------------------------------------------------------

// Req_SKF_GetContainerType

// .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
inline bool Req_SKF_GetContainerType::has_hcontainer() const {
  return this != internal_default_instance() && hcontainer_ != nullptr;
}
inline void Req_SKF_GetContainerType::clear_hcontainer() {
  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GetContainerType::hcontainer() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hcontainer_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GetContainerType.hContainer)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GetContainerType::release_hcontainer() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GetContainerType.hContainer)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hcontainer_;
  hcontainer_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GetContainerType::mutable_hcontainer() {
  
  if (hcontainer_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hcontainer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GetContainerType.hContainer)
  return hcontainer_;
}
inline void Req_SKF_GetContainerType::set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hcontainer_;
  }
  if (hcontainer) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hcontainer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hcontainer, submessage_arena);
    }
    
  } else {
    
  }
  hcontainer_ = hcontainer;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GetContainerType.hContainer)
}

// .com.westone.skf.WST_PROTO_UINT32 pulContainerType = 2;
inline bool Req_SKF_GetContainerType::has_pulcontainertype() const {
  return this != internal_default_instance() && pulcontainertype_ != nullptr;
}
inline void Req_SKF_GetContainerType::clear_pulcontainertype() {
  if (GetArenaNoVirtual() == nullptr && pulcontainertype_ != nullptr) {
    delete pulcontainertype_;
  }
  pulcontainertype_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GetContainerType::pulcontainertype() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulcontainertype_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GetContainerType.pulContainerType)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GetContainerType::release_pulcontainertype() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GetContainerType.pulContainerType)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulcontainertype_;
  pulcontainertype_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GetContainerType::mutable_pulcontainertype() {
  
  if (pulcontainertype_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulcontainertype_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GetContainerType.pulContainerType)
  return pulcontainertype_;
}
inline void Req_SKF_GetContainerType::set_allocated_pulcontainertype(::com::westone::skf::WST_PROTO_UINT32* pulcontainertype) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulcontainertype_;
  }
  if (pulcontainertype) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulcontainertype = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulcontainertype, submessage_arena);
    }
    
  } else {
    
  }
  pulcontainertype_ = pulcontainertype;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GetContainerType.pulContainerType)
}

// -------------------------------------------------------------------

// Rsp_SKF_GetContainerType

// .com.westone.skf.WST_PROTO_UINT32 pulContainerType = 1;
inline bool Rsp_SKF_GetContainerType::has_pulcontainertype() const {
  return this != internal_default_instance() && pulcontainertype_ != nullptr;
}
inline void Rsp_SKF_GetContainerType::clear_pulcontainertype() {
  if (GetArenaNoVirtual() == nullptr && pulcontainertype_ != nullptr) {
    delete pulcontainertype_;
  }
  pulcontainertype_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_GetContainerType::pulcontainertype() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulcontainertype_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_GetContainerType.pulContainerType)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_GetContainerType::release_pulcontainertype() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_GetContainerType.pulContainerType)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulcontainertype_;
  pulcontainertype_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_GetContainerType::mutable_pulcontainertype() {
  
  if (pulcontainertype_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulcontainertype_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_GetContainerType.pulContainerType)
  return pulcontainertype_;
}
inline void Rsp_SKF_GetContainerType::set_allocated_pulcontainertype(::com::westone::skf::WST_PROTO_UINT32* pulcontainertype) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulcontainertype_;
  }
  if (pulcontainertype) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulcontainertype = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulcontainertype, submessage_arena);
    }
    
  } else {
    
  }
  pulcontainertype_ = pulcontainertype;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_GetContainerType.pulContainerType)
}

// -------------------------------------------------------------------

// Req_SKF_GenRandom

// .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
inline bool Req_SKF_GenRandom::has_hdev() const {
  return this != internal_default_instance() && hdev_ != nullptr;
}
inline void Req_SKF_GenRandom::clear_hdev() {
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GenRandom::hdev() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hdev_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenRandom.hDev)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenRandom::release_hdev() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenRandom.hDev)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hdev_;
  hdev_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenRandom::mutable_hdev() {
  
  if (hdev_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hdev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenRandom.hDev)
  return hdev_;
}
inline void Req_SKF_GenRandom::set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hdev_;
  }
  if (hdev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hdev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdev, submessage_arena);
    }
    
  } else {
    
  }
  hdev_ = hdev;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenRandom.hDev)
}

// bytes pbRandom = 2;
inline void Req_SKF_GenRandom::clear_pbrandom() {
  pbrandom_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_GenRandom::pbrandom() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenRandom.pbRandom)
  return pbrandom_.GetNoArena();
}
inline void Req_SKF_GenRandom::set_pbrandom(const ::std::string& value) {
  
  pbrandom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_GenRandom.pbRandom)
}
#if LANG_CXX11
inline void Req_SKF_GenRandom::set_pbrandom(::std::string&& value) {
  
  pbrandom_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_GenRandom.pbRandom)
}
#endif
inline void Req_SKF_GenRandom::set_pbrandom(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbrandom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_GenRandom.pbRandom)
}
inline void Req_SKF_GenRandom::set_pbrandom(const void* value, size_t size) {
  
  pbrandom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_GenRandom.pbRandom)
}
inline ::std::string* Req_SKF_GenRandom::mutable_pbrandom() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenRandom.pbRandom)
  return pbrandom_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_GenRandom::release_pbrandom() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenRandom.pbRandom)
  
  return pbrandom_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_GenRandom::set_allocated_pbrandom(::std::string* pbrandom) {
  if (pbrandom != nullptr) {
    
  } else {
    
  }
  pbrandom_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbrandom);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenRandom.pbRandom)
}

// .com.westone.skf.WST_PROTO_UINT32 ulRandomLen = 3;
inline bool Req_SKF_GenRandom::has_ulrandomlen() const {
  return this != internal_default_instance() && ulrandomlen_ != nullptr;
}
inline void Req_SKF_GenRandom::clear_ulrandomlen() {
  if (GetArenaNoVirtual() == nullptr && ulrandomlen_ != nullptr) {
    delete ulrandomlen_;
  }
  ulrandomlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GenRandom::ulrandomlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulrandomlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenRandom.ulRandomLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenRandom::release_ulrandomlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenRandom.ulRandomLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulrandomlen_;
  ulrandomlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenRandom::mutable_ulrandomlen() {
  
  if (ulrandomlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulrandomlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenRandom.ulRandomLen)
  return ulrandomlen_;
}
inline void Req_SKF_GenRandom::set_allocated_ulrandomlen(::com::westone::skf::WST_PROTO_UINT32* ulrandomlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulrandomlen_;
  }
  if (ulrandomlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulrandomlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulrandomlen, submessage_arena);
    }
    
  } else {
    
  }
  ulrandomlen_ = ulrandomlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenRandom.ulRandomLen)
}

// -------------------------------------------------------------------

// Rsp_SKF_GenRandom

// bytes pbRandom = 1;
inline void Rsp_SKF_GenRandom::clear_pbrandom() {
  pbrandom_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rsp_SKF_GenRandom::pbrandom() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_GenRandom.pbRandom)
  return pbrandom_.GetNoArena();
}
inline void Rsp_SKF_GenRandom::set_pbrandom(const ::std::string& value) {
  
  pbrandom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Rsp_SKF_GenRandom.pbRandom)
}
#if LANG_CXX11
inline void Rsp_SKF_GenRandom::set_pbrandom(::std::string&& value) {
  
  pbrandom_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Rsp_SKF_GenRandom.pbRandom)
}
#endif
inline void Rsp_SKF_GenRandom::set_pbrandom(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbrandom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Rsp_SKF_GenRandom.pbRandom)
}
inline void Rsp_SKF_GenRandom::set_pbrandom(const void* value, size_t size) {
  
  pbrandom_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Rsp_SKF_GenRandom.pbRandom)
}
inline ::std::string* Rsp_SKF_GenRandom::mutable_pbrandom() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_GenRandom.pbRandom)
  return pbrandom_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rsp_SKF_GenRandom::release_pbrandom() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_GenRandom.pbRandom)
  
  return pbrandom_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rsp_SKF_GenRandom::set_allocated_pbrandom(::std::string* pbrandom) {
  if (pbrandom != nullptr) {
    
  } else {
    
  }
  pbrandom_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbrandom);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_GenRandom.pbRandom)
}

// -------------------------------------------------------------------

// Req_SKF_GenExtRSAKey

// .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
inline bool Req_SKF_GenExtRSAKey::has_hdev() const {
  return this != internal_default_instance() && hdev_ != nullptr;
}
inline void Req_SKF_GenExtRSAKey::clear_hdev() {
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GenExtRSAKey::hdev() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hdev_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenExtRSAKey.hDev)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenExtRSAKey::release_hdev() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenExtRSAKey.hDev)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hdev_;
  hdev_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenExtRSAKey::mutable_hdev() {
  
  if (hdev_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hdev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenExtRSAKey.hDev)
  return hdev_;
}
inline void Req_SKF_GenExtRSAKey::set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hdev_;
  }
  if (hdev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hdev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdev, submessage_arena);
    }
    
  } else {
    
  }
  hdev_ = hdev;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenExtRSAKey.hDev)
}

// .com.westone.skf.WST_PROTO_UINT32 ulBitsLen = 2;
inline bool Req_SKF_GenExtRSAKey::has_ulbitslen() const {
  return this != internal_default_instance() && ulbitslen_ != nullptr;
}
inline void Req_SKF_GenExtRSAKey::clear_ulbitslen() {
  if (GetArenaNoVirtual() == nullptr && ulbitslen_ != nullptr) {
    delete ulbitslen_;
  }
  ulbitslen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GenExtRSAKey::ulbitslen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulbitslen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenExtRSAKey.ulBitsLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenExtRSAKey::release_ulbitslen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenExtRSAKey.ulBitsLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulbitslen_;
  ulbitslen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenExtRSAKey::mutable_ulbitslen() {
  
  if (ulbitslen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulbitslen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenExtRSAKey.ulBitsLen)
  return ulbitslen_;
}
inline void Req_SKF_GenExtRSAKey::set_allocated_ulbitslen(::com::westone::skf::WST_PROTO_UINT32* ulbitslen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulbitslen_;
  }
  if (ulbitslen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulbitslen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulbitslen, submessage_arena);
    }
    
  } else {
    
  }
  ulbitslen_ = ulbitslen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenExtRSAKey.ulBitsLen)
}

// .com.westone.skf.SKF_RSAPUBLICKEYBLOB pBlob = 3;
inline bool Req_SKF_GenExtRSAKey::has_pblob() const {
  return this != internal_default_instance() && pblob_ != nullptr;
}
inline void Req_SKF_GenExtRSAKey::clear_pblob() {
  if (GetArenaNoVirtual() == nullptr && pblob_ != nullptr) {
    delete pblob_;
  }
  pblob_ = nullptr;
}
inline const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB& Req_SKF_GenExtRSAKey::pblob() const {
  const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* p = pblob_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenExtRSAKey.pBlob)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB*>(
      &::com::westone::skf::_SKF_RSAPUBLICKEYBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* Req_SKF_GenExtRSAKey::release_pblob() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenExtRSAKey.pBlob)
  
  ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* temp = pblob_;
  pblob_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* Req_SKF_GenExtRSAKey::mutable_pblob() {
  
  if (pblob_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_RSAPUBLICKEYBLOB>(GetArenaNoVirtual());
    pblob_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenExtRSAKey.pBlob)
  return pblob_;
}
inline void Req_SKF_GenExtRSAKey::set_allocated_pblob(::com::westone::skf::SKF_RSAPUBLICKEYBLOB* pblob) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pblob_;
  }
  if (pblob) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pblob = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pblob, submessage_arena);
    }
    
  } else {
    
  }
  pblob_ = pblob;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenExtRSAKey.pBlob)
}

// -------------------------------------------------------------------

// Rsp_SKF_GenExtRSAKey

// .com.westone.skf.SKF_RSAPUBLICKEYBLOB pBlob = 1;
inline bool Rsp_SKF_GenExtRSAKey::has_pblob() const {
  return this != internal_default_instance() && pblob_ != nullptr;
}
inline void Rsp_SKF_GenExtRSAKey::clear_pblob() {
  if (GetArenaNoVirtual() == nullptr && pblob_ != nullptr) {
    delete pblob_;
  }
  pblob_ = nullptr;
}
inline const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB& Rsp_SKF_GenExtRSAKey::pblob() const {
  const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* p = pblob_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_GenExtRSAKey.pBlob)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB*>(
      &::com::westone::skf::_SKF_RSAPUBLICKEYBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* Rsp_SKF_GenExtRSAKey::release_pblob() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_GenExtRSAKey.pBlob)
  
  ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* temp = pblob_;
  pblob_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* Rsp_SKF_GenExtRSAKey::mutable_pblob() {
  
  if (pblob_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_RSAPUBLICKEYBLOB>(GetArenaNoVirtual());
    pblob_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_GenExtRSAKey.pBlob)
  return pblob_;
}
inline void Rsp_SKF_GenExtRSAKey::set_allocated_pblob(::com::westone::skf::SKF_RSAPUBLICKEYBLOB* pblob) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pblob_;
  }
  if (pblob) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pblob = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pblob, submessage_arena);
    }
    
  } else {
    
  }
  pblob_ = pblob;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_GenExtRSAKey.pBlob)
}

// -------------------------------------------------------------------

// Req_SKF_GenRSAKeyPair

// .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
inline bool Req_SKF_GenRSAKeyPair::has_hcontainer() const {
  return this != internal_default_instance() && hcontainer_ != nullptr;
}
inline void Req_SKF_GenRSAKeyPair::clear_hcontainer() {
  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GenRSAKeyPair::hcontainer() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hcontainer_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenRSAKeyPair.hContainer)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenRSAKeyPair::release_hcontainer() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenRSAKeyPair.hContainer)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hcontainer_;
  hcontainer_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenRSAKeyPair::mutable_hcontainer() {
  
  if (hcontainer_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hcontainer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenRSAKeyPair.hContainer)
  return hcontainer_;
}
inline void Req_SKF_GenRSAKeyPair::set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hcontainer_;
  }
  if (hcontainer) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hcontainer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hcontainer, submessage_arena);
    }
    
  } else {
    
  }
  hcontainer_ = hcontainer;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenRSAKeyPair.hContainer)
}

// .com.westone.skf.WST_PROTO_UINT32 ulBitsLen = 2;
inline bool Req_SKF_GenRSAKeyPair::has_ulbitslen() const {
  return this != internal_default_instance() && ulbitslen_ != nullptr;
}
inline void Req_SKF_GenRSAKeyPair::clear_ulbitslen() {
  if (GetArenaNoVirtual() == nullptr && ulbitslen_ != nullptr) {
    delete ulbitslen_;
  }
  ulbitslen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GenRSAKeyPair::ulbitslen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulbitslen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenRSAKeyPair.ulBitsLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenRSAKeyPair::release_ulbitslen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenRSAKeyPair.ulBitsLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulbitslen_;
  ulbitslen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenRSAKeyPair::mutable_ulbitslen() {
  
  if (ulbitslen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulbitslen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenRSAKeyPair.ulBitsLen)
  return ulbitslen_;
}
inline void Req_SKF_GenRSAKeyPair::set_allocated_ulbitslen(::com::westone::skf::WST_PROTO_UINT32* ulbitslen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulbitslen_;
  }
  if (ulbitslen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulbitslen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulbitslen, submessage_arena);
    }
    
  } else {
    
  }
  ulbitslen_ = ulbitslen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenRSAKeyPair.ulBitsLen)
}

// .com.westone.skf.SKF_RSAPUBLICKEYBLOB pBlob = 3;
inline bool Req_SKF_GenRSAKeyPair::has_pblob() const {
  return this != internal_default_instance() && pblob_ != nullptr;
}
inline void Req_SKF_GenRSAKeyPair::clear_pblob() {
  if (GetArenaNoVirtual() == nullptr && pblob_ != nullptr) {
    delete pblob_;
  }
  pblob_ = nullptr;
}
inline const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB& Req_SKF_GenRSAKeyPair::pblob() const {
  const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* p = pblob_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenRSAKeyPair.pBlob)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB*>(
      &::com::westone::skf::_SKF_RSAPUBLICKEYBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* Req_SKF_GenRSAKeyPair::release_pblob() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenRSAKeyPair.pBlob)
  
  ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* temp = pblob_;
  pblob_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* Req_SKF_GenRSAKeyPair::mutable_pblob() {
  
  if (pblob_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_RSAPUBLICKEYBLOB>(GetArenaNoVirtual());
    pblob_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenRSAKeyPair.pBlob)
  return pblob_;
}
inline void Req_SKF_GenRSAKeyPair::set_allocated_pblob(::com::westone::skf::SKF_RSAPUBLICKEYBLOB* pblob) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pblob_;
  }
  if (pblob) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pblob = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pblob, submessage_arena);
    }
    
  } else {
    
  }
  pblob_ = pblob;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenRSAKeyPair.pBlob)
}

// -------------------------------------------------------------------

// Rsp_SKF_GenRSAKeyPair

// .com.westone.skf.SKF_RSAPUBLICKEYBLOB pBlob = 1;
inline bool Rsp_SKF_GenRSAKeyPair::has_pblob() const {
  return this != internal_default_instance() && pblob_ != nullptr;
}
inline void Rsp_SKF_GenRSAKeyPair::clear_pblob() {
  if (GetArenaNoVirtual() == nullptr && pblob_ != nullptr) {
    delete pblob_;
  }
  pblob_ = nullptr;
}
inline const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB& Rsp_SKF_GenRSAKeyPair::pblob() const {
  const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* p = pblob_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_GenRSAKeyPair.pBlob)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB*>(
      &::com::westone::skf::_SKF_RSAPUBLICKEYBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* Rsp_SKF_GenRSAKeyPair::release_pblob() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_GenRSAKeyPair.pBlob)
  
  ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* temp = pblob_;
  pblob_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* Rsp_SKF_GenRSAKeyPair::mutable_pblob() {
  
  if (pblob_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_RSAPUBLICKEYBLOB>(GetArenaNoVirtual());
    pblob_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_GenRSAKeyPair.pBlob)
  return pblob_;
}
inline void Rsp_SKF_GenRSAKeyPair::set_allocated_pblob(::com::westone::skf::SKF_RSAPUBLICKEYBLOB* pblob) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pblob_;
  }
  if (pblob) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pblob = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pblob, submessage_arena);
    }
    
  } else {
    
  }
  pblob_ = pblob;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_GenRSAKeyPair.pBlob)
}

// -------------------------------------------------------------------

// Req_SKF_ImportRSAKeyPair

// .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
inline bool Req_SKF_ImportRSAKeyPair::has_hcontainer() const {
  return this != internal_default_instance() && hcontainer_ != nullptr;
}
inline void Req_SKF_ImportRSAKeyPair::clear_hcontainer() {
  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ImportRSAKeyPair::hcontainer() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hcontainer_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ImportRSAKeyPair.hContainer)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ImportRSAKeyPair::release_hcontainer() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ImportRSAKeyPair.hContainer)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hcontainer_;
  hcontainer_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ImportRSAKeyPair::mutable_hcontainer() {
  
  if (hcontainer_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hcontainer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ImportRSAKeyPair.hContainer)
  return hcontainer_;
}
inline void Req_SKF_ImportRSAKeyPair::set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hcontainer_;
  }
  if (hcontainer) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hcontainer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hcontainer, submessage_arena);
    }
    
  } else {
    
  }
  hcontainer_ = hcontainer;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ImportRSAKeyPair.hContainer)
}

// .com.westone.skf.WST_PROTO_UINT32 ulSymmAlgID = 2;
inline bool Req_SKF_ImportRSAKeyPair::has_ulsymmalgid() const {
  return this != internal_default_instance() && ulsymmalgid_ != nullptr;
}
inline void Req_SKF_ImportRSAKeyPair::clear_ulsymmalgid() {
  if (GetArenaNoVirtual() == nullptr && ulsymmalgid_ != nullptr) {
    delete ulsymmalgid_;
  }
  ulsymmalgid_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ImportRSAKeyPair::ulsymmalgid() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulsymmalgid_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ImportRSAKeyPair.ulSymmAlgID)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ImportRSAKeyPair::release_ulsymmalgid() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ImportRSAKeyPair.ulSymmAlgID)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulsymmalgid_;
  ulsymmalgid_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ImportRSAKeyPair::mutable_ulsymmalgid() {
  
  if (ulsymmalgid_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulsymmalgid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ImportRSAKeyPair.ulSymmAlgID)
  return ulsymmalgid_;
}
inline void Req_SKF_ImportRSAKeyPair::set_allocated_ulsymmalgid(::com::westone::skf::WST_PROTO_UINT32* ulsymmalgid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulsymmalgid_;
  }
  if (ulsymmalgid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulsymmalgid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulsymmalgid, submessage_arena);
    }
    
  } else {
    
  }
  ulsymmalgid_ = ulsymmalgid;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ImportRSAKeyPair.ulSymmAlgID)
}

// bytes pbWrappedKey = 3;
inline void Req_SKF_ImportRSAKeyPair::clear_pbwrappedkey() {
  pbwrappedkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_ImportRSAKeyPair::pbwrappedkey() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ImportRSAKeyPair.pbWrappedKey)
  return pbwrappedkey_.GetNoArena();
}
inline void Req_SKF_ImportRSAKeyPair::set_pbwrappedkey(const ::std::string& value) {
  
  pbwrappedkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_ImportRSAKeyPair.pbWrappedKey)
}
#if LANG_CXX11
inline void Req_SKF_ImportRSAKeyPair::set_pbwrappedkey(::std::string&& value) {
  
  pbwrappedkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_ImportRSAKeyPair.pbWrappedKey)
}
#endif
inline void Req_SKF_ImportRSAKeyPair::set_pbwrappedkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbwrappedkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_ImportRSAKeyPair.pbWrappedKey)
}
inline void Req_SKF_ImportRSAKeyPair::set_pbwrappedkey(const void* value, size_t size) {
  
  pbwrappedkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_ImportRSAKeyPair.pbWrappedKey)
}
inline ::std::string* Req_SKF_ImportRSAKeyPair::mutable_pbwrappedkey() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ImportRSAKeyPair.pbWrappedKey)
  return pbwrappedkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_ImportRSAKeyPair::release_pbwrappedkey() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ImportRSAKeyPair.pbWrappedKey)
  
  return pbwrappedkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_ImportRSAKeyPair::set_allocated_pbwrappedkey(::std::string* pbwrappedkey) {
  if (pbwrappedkey != nullptr) {
    
  } else {
    
  }
  pbwrappedkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbwrappedkey);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ImportRSAKeyPair.pbWrappedKey)
}

// .com.westone.skf.WST_PROTO_UINT32 ulWrappedKeyLen = 4;
inline bool Req_SKF_ImportRSAKeyPair::has_ulwrappedkeylen() const {
  return this != internal_default_instance() && ulwrappedkeylen_ != nullptr;
}
inline void Req_SKF_ImportRSAKeyPair::clear_ulwrappedkeylen() {
  if (GetArenaNoVirtual() == nullptr && ulwrappedkeylen_ != nullptr) {
    delete ulwrappedkeylen_;
  }
  ulwrappedkeylen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ImportRSAKeyPair::ulwrappedkeylen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulwrappedkeylen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ImportRSAKeyPair.ulWrappedKeyLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ImportRSAKeyPair::release_ulwrappedkeylen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ImportRSAKeyPair.ulWrappedKeyLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulwrappedkeylen_;
  ulwrappedkeylen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ImportRSAKeyPair::mutable_ulwrappedkeylen() {
  
  if (ulwrappedkeylen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulwrappedkeylen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ImportRSAKeyPair.ulWrappedKeyLen)
  return ulwrappedkeylen_;
}
inline void Req_SKF_ImportRSAKeyPair::set_allocated_ulwrappedkeylen(::com::westone::skf::WST_PROTO_UINT32* ulwrappedkeylen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulwrappedkeylen_;
  }
  if (ulwrappedkeylen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulwrappedkeylen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulwrappedkeylen, submessage_arena);
    }
    
  } else {
    
  }
  ulwrappedkeylen_ = ulwrappedkeylen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ImportRSAKeyPair.ulWrappedKeyLen)
}

// bytes pbEncryptedData = 5;
inline void Req_SKF_ImportRSAKeyPair::clear_pbencrypteddata() {
  pbencrypteddata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_ImportRSAKeyPair::pbencrypteddata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ImportRSAKeyPair.pbEncryptedData)
  return pbencrypteddata_.GetNoArena();
}
inline void Req_SKF_ImportRSAKeyPair::set_pbencrypteddata(const ::std::string& value) {
  
  pbencrypteddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_ImportRSAKeyPair.pbEncryptedData)
}
#if LANG_CXX11
inline void Req_SKF_ImportRSAKeyPair::set_pbencrypteddata(::std::string&& value) {
  
  pbencrypteddata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_ImportRSAKeyPair.pbEncryptedData)
}
#endif
inline void Req_SKF_ImportRSAKeyPair::set_pbencrypteddata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbencrypteddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_ImportRSAKeyPair.pbEncryptedData)
}
inline void Req_SKF_ImportRSAKeyPair::set_pbencrypteddata(const void* value, size_t size) {
  
  pbencrypteddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_ImportRSAKeyPair.pbEncryptedData)
}
inline ::std::string* Req_SKF_ImportRSAKeyPair::mutable_pbencrypteddata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ImportRSAKeyPair.pbEncryptedData)
  return pbencrypteddata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_ImportRSAKeyPair::release_pbencrypteddata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ImportRSAKeyPair.pbEncryptedData)
  
  return pbencrypteddata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_ImportRSAKeyPair::set_allocated_pbencrypteddata(::std::string* pbencrypteddata) {
  if (pbencrypteddata != nullptr) {
    
  } else {
    
  }
  pbencrypteddata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbencrypteddata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ImportRSAKeyPair.pbEncryptedData)
}

// .com.westone.skf.WST_PROTO_UINT32 ulEncryptedDataLen = 6;
inline bool Req_SKF_ImportRSAKeyPair::has_ulencrypteddatalen() const {
  return this != internal_default_instance() && ulencrypteddatalen_ != nullptr;
}
inline void Req_SKF_ImportRSAKeyPair::clear_ulencrypteddatalen() {
  if (GetArenaNoVirtual() == nullptr && ulencrypteddatalen_ != nullptr) {
    delete ulencrypteddatalen_;
  }
  ulencrypteddatalen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ImportRSAKeyPair::ulencrypteddatalen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulencrypteddatalen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ImportRSAKeyPair.ulEncryptedDataLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ImportRSAKeyPair::release_ulencrypteddatalen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ImportRSAKeyPair.ulEncryptedDataLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulencrypteddatalen_;
  ulencrypteddatalen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ImportRSAKeyPair::mutable_ulencrypteddatalen() {
  
  if (ulencrypteddatalen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulencrypteddatalen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ImportRSAKeyPair.ulEncryptedDataLen)
  return ulencrypteddatalen_;
}
inline void Req_SKF_ImportRSAKeyPair::set_allocated_ulencrypteddatalen(::com::westone::skf::WST_PROTO_UINT32* ulencrypteddatalen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulencrypteddatalen_;
  }
  if (ulencrypteddatalen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulencrypteddatalen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulencrypteddatalen, submessage_arena);
    }
    
  } else {
    
  }
  ulencrypteddatalen_ = ulencrypteddatalen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ImportRSAKeyPair.ulEncryptedDataLen)
}

// -------------------------------------------------------------------

// Rsp_SKF_ImportRSAKeyPair

// -------------------------------------------------------------------

// Req_SKF_RSASignData

// .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
inline bool Req_SKF_RSASignData::has_hcontainer() const {
  return this != internal_default_instance() && hcontainer_ != nullptr;
}
inline void Req_SKF_RSASignData::clear_hcontainer() {
  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_RSASignData::hcontainer() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hcontainer_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_RSASignData.hContainer)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_RSASignData::release_hcontainer() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_RSASignData.hContainer)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hcontainer_;
  hcontainer_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_RSASignData::mutable_hcontainer() {
  
  if (hcontainer_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hcontainer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_RSASignData.hContainer)
  return hcontainer_;
}
inline void Req_SKF_RSASignData::set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hcontainer_;
  }
  if (hcontainer) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hcontainer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hcontainer, submessage_arena);
    }
    
  } else {
    
  }
  hcontainer_ = hcontainer;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_RSASignData.hContainer)
}

// bytes pbData = 2;
inline void Req_SKF_RSASignData::clear_pbdata() {
  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_RSASignData::pbdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_RSASignData.pbData)
  return pbdata_.GetNoArena();
}
inline void Req_SKF_RSASignData::set_pbdata(const ::std::string& value) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_RSASignData.pbData)
}
#if LANG_CXX11
inline void Req_SKF_RSASignData::set_pbdata(::std::string&& value) {
  
  pbdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_RSASignData.pbData)
}
#endif
inline void Req_SKF_RSASignData::set_pbdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_RSASignData.pbData)
}
inline void Req_SKF_RSASignData::set_pbdata(const void* value, size_t size) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_RSASignData.pbData)
}
inline ::std::string* Req_SKF_RSASignData::mutable_pbdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_RSASignData.pbData)
  return pbdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_RSASignData::release_pbdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_RSASignData.pbData)
  
  return pbdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_RSASignData::set_allocated_pbdata(::std::string* pbdata) {
  if (pbdata != nullptr) {
    
  } else {
    
  }
  pbdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_RSASignData.pbData)
}

// .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
inline bool Req_SKF_RSASignData::has_uldatalen() const {
  return this != internal_default_instance() && uldatalen_ != nullptr;
}
inline void Req_SKF_RSASignData::clear_uldatalen() {
  if (GetArenaNoVirtual() == nullptr && uldatalen_ != nullptr) {
    delete uldatalen_;
  }
  uldatalen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_RSASignData::uldatalen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = uldatalen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_RSASignData.ulDataLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_RSASignData::release_uldatalen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_RSASignData.ulDataLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = uldatalen_;
  uldatalen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_RSASignData::mutable_uldatalen() {
  
  if (uldatalen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    uldatalen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_RSASignData.ulDataLen)
  return uldatalen_;
}
inline void Req_SKF_RSASignData::set_allocated_uldatalen(::com::westone::skf::WST_PROTO_UINT32* uldatalen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete uldatalen_;
  }
  if (uldatalen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uldatalen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uldatalen, submessage_arena);
    }
    
  } else {
    
  }
  uldatalen_ = uldatalen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_RSASignData.ulDataLen)
}

// bytes pbSignature = 4;
inline void Req_SKF_RSASignData::clear_pbsignature() {
  pbsignature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_RSASignData::pbsignature() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_RSASignData.pbSignature)
  return pbsignature_.GetNoArena();
}
inline void Req_SKF_RSASignData::set_pbsignature(const ::std::string& value) {
  
  pbsignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_RSASignData.pbSignature)
}
#if LANG_CXX11
inline void Req_SKF_RSASignData::set_pbsignature(::std::string&& value) {
  
  pbsignature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_RSASignData.pbSignature)
}
#endif
inline void Req_SKF_RSASignData::set_pbsignature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbsignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_RSASignData.pbSignature)
}
inline void Req_SKF_RSASignData::set_pbsignature(const void* value, size_t size) {
  
  pbsignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_RSASignData.pbSignature)
}
inline ::std::string* Req_SKF_RSASignData::mutable_pbsignature() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_RSASignData.pbSignature)
  return pbsignature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_RSASignData::release_pbsignature() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_RSASignData.pbSignature)
  
  return pbsignature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_RSASignData::set_allocated_pbsignature(::std::string* pbsignature) {
  if (pbsignature != nullptr) {
    
  } else {
    
  }
  pbsignature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbsignature);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_RSASignData.pbSignature)
}

// .com.westone.skf.WST_PROTO_UINT32 pulSigLen = 5;
inline bool Req_SKF_RSASignData::has_pulsiglen() const {
  return this != internal_default_instance() && pulsiglen_ != nullptr;
}
inline void Req_SKF_RSASignData::clear_pulsiglen() {
  if (GetArenaNoVirtual() == nullptr && pulsiglen_ != nullptr) {
    delete pulsiglen_;
  }
  pulsiglen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_RSASignData::pulsiglen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulsiglen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_RSASignData.pulSigLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_RSASignData::release_pulsiglen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_RSASignData.pulSigLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulsiglen_;
  pulsiglen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_RSASignData::mutable_pulsiglen() {
  
  if (pulsiglen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulsiglen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_RSASignData.pulSigLen)
  return pulsiglen_;
}
inline void Req_SKF_RSASignData::set_allocated_pulsiglen(::com::westone::skf::WST_PROTO_UINT32* pulsiglen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulsiglen_;
  }
  if (pulsiglen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulsiglen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulsiglen, submessage_arena);
    }
    
  } else {
    
  }
  pulsiglen_ = pulsiglen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_RSASignData.pulSigLen)
}

// -------------------------------------------------------------------

// Rsp_SKF_RSASignData

// bytes pbSignature = 1;
inline void Rsp_SKF_RSASignData::clear_pbsignature() {
  pbsignature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rsp_SKF_RSASignData::pbsignature() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_RSASignData.pbSignature)
  return pbsignature_.GetNoArena();
}
inline void Rsp_SKF_RSASignData::set_pbsignature(const ::std::string& value) {
  
  pbsignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Rsp_SKF_RSASignData.pbSignature)
}
#if LANG_CXX11
inline void Rsp_SKF_RSASignData::set_pbsignature(::std::string&& value) {
  
  pbsignature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Rsp_SKF_RSASignData.pbSignature)
}
#endif
inline void Rsp_SKF_RSASignData::set_pbsignature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbsignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Rsp_SKF_RSASignData.pbSignature)
}
inline void Rsp_SKF_RSASignData::set_pbsignature(const void* value, size_t size) {
  
  pbsignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Rsp_SKF_RSASignData.pbSignature)
}
inline ::std::string* Rsp_SKF_RSASignData::mutable_pbsignature() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_RSASignData.pbSignature)
  return pbsignature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rsp_SKF_RSASignData::release_pbsignature() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_RSASignData.pbSignature)
  
  return pbsignature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rsp_SKF_RSASignData::set_allocated_pbsignature(::std::string* pbsignature) {
  if (pbsignature != nullptr) {
    
  } else {
    
  }
  pbsignature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbsignature);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_RSASignData.pbSignature)
}

// .com.westone.skf.WST_PROTO_UINT32 pulSigLen = 2;
inline bool Rsp_SKF_RSASignData::has_pulsiglen() const {
  return this != internal_default_instance() && pulsiglen_ != nullptr;
}
inline void Rsp_SKF_RSASignData::clear_pulsiglen() {
  if (GetArenaNoVirtual() == nullptr && pulsiglen_ != nullptr) {
    delete pulsiglen_;
  }
  pulsiglen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_RSASignData::pulsiglen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulsiglen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_RSASignData.pulSigLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_RSASignData::release_pulsiglen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_RSASignData.pulSigLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulsiglen_;
  pulsiglen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_RSASignData::mutable_pulsiglen() {
  
  if (pulsiglen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulsiglen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_RSASignData.pulSigLen)
  return pulsiglen_;
}
inline void Rsp_SKF_RSASignData::set_allocated_pulsiglen(::com::westone::skf::WST_PROTO_UINT32* pulsiglen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulsiglen_;
  }
  if (pulsiglen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulsiglen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulsiglen, submessage_arena);
    }
    
  } else {
    
  }
  pulsiglen_ = pulsiglen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_RSASignData.pulSigLen)
}

// -------------------------------------------------------------------

// Req_SKF_RSAVerify

// .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
inline bool Req_SKF_RSAVerify::has_hdev() const {
  return this != internal_default_instance() && hdev_ != nullptr;
}
inline void Req_SKF_RSAVerify::clear_hdev() {
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_RSAVerify::hdev() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hdev_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_RSAVerify.hDev)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_RSAVerify::release_hdev() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_RSAVerify.hDev)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hdev_;
  hdev_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_RSAVerify::mutable_hdev() {
  
  if (hdev_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hdev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_RSAVerify.hDev)
  return hdev_;
}
inline void Req_SKF_RSAVerify::set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hdev_;
  }
  if (hdev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hdev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdev, submessage_arena);
    }
    
  } else {
    
  }
  hdev_ = hdev;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_RSAVerify.hDev)
}

// .com.westone.skf.SKF_RSAPUBLICKEYBLOB pRSAPubKeyBlob = 2;
inline bool Req_SKF_RSAVerify::has_prsapubkeyblob() const {
  return this != internal_default_instance() && prsapubkeyblob_ != nullptr;
}
inline void Req_SKF_RSAVerify::clear_prsapubkeyblob() {
  if (GetArenaNoVirtual() == nullptr && prsapubkeyblob_ != nullptr) {
    delete prsapubkeyblob_;
  }
  prsapubkeyblob_ = nullptr;
}
inline const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB& Req_SKF_RSAVerify::prsapubkeyblob() const {
  const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* p = prsapubkeyblob_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_RSAVerify.pRSAPubKeyBlob)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB*>(
      &::com::westone::skf::_SKF_RSAPUBLICKEYBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* Req_SKF_RSAVerify::release_prsapubkeyblob() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_RSAVerify.pRSAPubKeyBlob)
  
  ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* temp = prsapubkeyblob_;
  prsapubkeyblob_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* Req_SKF_RSAVerify::mutable_prsapubkeyblob() {
  
  if (prsapubkeyblob_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_RSAPUBLICKEYBLOB>(GetArenaNoVirtual());
    prsapubkeyblob_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_RSAVerify.pRSAPubKeyBlob)
  return prsapubkeyblob_;
}
inline void Req_SKF_RSAVerify::set_allocated_prsapubkeyblob(::com::westone::skf::SKF_RSAPUBLICKEYBLOB* prsapubkeyblob) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete prsapubkeyblob_;
  }
  if (prsapubkeyblob) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      prsapubkeyblob = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prsapubkeyblob, submessage_arena);
    }
    
  } else {
    
  }
  prsapubkeyblob_ = prsapubkeyblob;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_RSAVerify.pRSAPubKeyBlob)
}

// bytes pbData = 3;
inline void Req_SKF_RSAVerify::clear_pbdata() {
  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_RSAVerify::pbdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_RSAVerify.pbData)
  return pbdata_.GetNoArena();
}
inline void Req_SKF_RSAVerify::set_pbdata(const ::std::string& value) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_RSAVerify.pbData)
}
#if LANG_CXX11
inline void Req_SKF_RSAVerify::set_pbdata(::std::string&& value) {
  
  pbdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_RSAVerify.pbData)
}
#endif
inline void Req_SKF_RSAVerify::set_pbdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_RSAVerify.pbData)
}
inline void Req_SKF_RSAVerify::set_pbdata(const void* value, size_t size) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_RSAVerify.pbData)
}
inline ::std::string* Req_SKF_RSAVerify::mutable_pbdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_RSAVerify.pbData)
  return pbdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_RSAVerify::release_pbdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_RSAVerify.pbData)
  
  return pbdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_RSAVerify::set_allocated_pbdata(::std::string* pbdata) {
  if (pbdata != nullptr) {
    
  } else {
    
  }
  pbdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_RSAVerify.pbData)
}

// .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 4;
inline bool Req_SKF_RSAVerify::has_uldatalen() const {
  return this != internal_default_instance() && uldatalen_ != nullptr;
}
inline void Req_SKF_RSAVerify::clear_uldatalen() {
  if (GetArenaNoVirtual() == nullptr && uldatalen_ != nullptr) {
    delete uldatalen_;
  }
  uldatalen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_RSAVerify::uldatalen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = uldatalen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_RSAVerify.ulDataLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_RSAVerify::release_uldatalen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_RSAVerify.ulDataLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = uldatalen_;
  uldatalen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_RSAVerify::mutable_uldatalen() {
  
  if (uldatalen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    uldatalen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_RSAVerify.ulDataLen)
  return uldatalen_;
}
inline void Req_SKF_RSAVerify::set_allocated_uldatalen(::com::westone::skf::WST_PROTO_UINT32* uldatalen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete uldatalen_;
  }
  if (uldatalen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uldatalen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uldatalen, submessage_arena);
    }
    
  } else {
    
  }
  uldatalen_ = uldatalen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_RSAVerify.ulDataLen)
}

// bytes pbSignature = 5;
inline void Req_SKF_RSAVerify::clear_pbsignature() {
  pbsignature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_RSAVerify::pbsignature() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_RSAVerify.pbSignature)
  return pbsignature_.GetNoArena();
}
inline void Req_SKF_RSAVerify::set_pbsignature(const ::std::string& value) {
  
  pbsignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_RSAVerify.pbSignature)
}
#if LANG_CXX11
inline void Req_SKF_RSAVerify::set_pbsignature(::std::string&& value) {
  
  pbsignature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_RSAVerify.pbSignature)
}
#endif
inline void Req_SKF_RSAVerify::set_pbsignature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbsignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_RSAVerify.pbSignature)
}
inline void Req_SKF_RSAVerify::set_pbsignature(const void* value, size_t size) {
  
  pbsignature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_RSAVerify.pbSignature)
}
inline ::std::string* Req_SKF_RSAVerify::mutable_pbsignature() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_RSAVerify.pbSignature)
  return pbsignature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_RSAVerify::release_pbsignature() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_RSAVerify.pbSignature)
  
  return pbsignature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_RSAVerify::set_allocated_pbsignature(::std::string* pbsignature) {
  if (pbsignature != nullptr) {
    
  } else {
    
  }
  pbsignature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbsignature);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_RSAVerify.pbSignature)
}

// .com.westone.skf.WST_PROTO_UINT32 ulSigLen = 6;
inline bool Req_SKF_RSAVerify::has_ulsiglen() const {
  return this != internal_default_instance() && ulsiglen_ != nullptr;
}
inline void Req_SKF_RSAVerify::clear_ulsiglen() {
  if (GetArenaNoVirtual() == nullptr && ulsiglen_ != nullptr) {
    delete ulsiglen_;
  }
  ulsiglen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_RSAVerify::ulsiglen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulsiglen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_RSAVerify.ulSigLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_RSAVerify::release_ulsiglen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_RSAVerify.ulSigLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulsiglen_;
  ulsiglen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_RSAVerify::mutable_ulsiglen() {
  
  if (ulsiglen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulsiglen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_RSAVerify.ulSigLen)
  return ulsiglen_;
}
inline void Req_SKF_RSAVerify::set_allocated_ulsiglen(::com::westone::skf::WST_PROTO_UINT32* ulsiglen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulsiglen_;
  }
  if (ulsiglen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulsiglen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulsiglen, submessage_arena);
    }
    
  } else {
    
  }
  ulsiglen_ = ulsiglen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_RSAVerify.ulSigLen)
}

// -------------------------------------------------------------------

// Rsp_SKF_RSAVerify

// -------------------------------------------------------------------

// Req_SKF_RSAExportSessionKey

// .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
inline bool Req_SKF_RSAExportSessionKey::has_hcontainer() const {
  return this != internal_default_instance() && hcontainer_ != nullptr;
}
inline void Req_SKF_RSAExportSessionKey::clear_hcontainer() {
  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_RSAExportSessionKey::hcontainer() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hcontainer_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_RSAExportSessionKey.hContainer)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_RSAExportSessionKey::release_hcontainer() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_RSAExportSessionKey.hContainer)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hcontainer_;
  hcontainer_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_RSAExportSessionKey::mutable_hcontainer() {
  
  if (hcontainer_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hcontainer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_RSAExportSessionKey.hContainer)
  return hcontainer_;
}
inline void Req_SKF_RSAExportSessionKey::set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hcontainer_;
  }
  if (hcontainer) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hcontainer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hcontainer, submessage_arena);
    }
    
  } else {
    
  }
  hcontainer_ = hcontainer;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_RSAExportSessionKey.hContainer)
}

// .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
inline bool Req_SKF_RSAExportSessionKey::has_ulalgid() const {
  return this != internal_default_instance() && ulalgid_ != nullptr;
}
inline void Req_SKF_RSAExportSessionKey::clear_ulalgid() {
  if (GetArenaNoVirtual() == nullptr && ulalgid_ != nullptr) {
    delete ulalgid_;
  }
  ulalgid_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_RSAExportSessionKey::ulalgid() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulalgid_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_RSAExportSessionKey.ulAlgID)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_RSAExportSessionKey::release_ulalgid() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_RSAExportSessionKey.ulAlgID)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulalgid_;
  ulalgid_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_RSAExportSessionKey::mutable_ulalgid() {
  
  if (ulalgid_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulalgid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_RSAExportSessionKey.ulAlgID)
  return ulalgid_;
}
inline void Req_SKF_RSAExportSessionKey::set_allocated_ulalgid(::com::westone::skf::WST_PROTO_UINT32* ulalgid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulalgid_;
  }
  if (ulalgid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulalgid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulalgid, submessage_arena);
    }
    
  } else {
    
  }
  ulalgid_ = ulalgid;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_RSAExportSessionKey.ulAlgID)
}

// .com.westone.skf.SKF_RSAPUBLICKEYBLOB pPubKey = 3;
inline bool Req_SKF_RSAExportSessionKey::has_ppubkey() const {
  return this != internal_default_instance() && ppubkey_ != nullptr;
}
inline void Req_SKF_RSAExportSessionKey::clear_ppubkey() {
  if (GetArenaNoVirtual() == nullptr && ppubkey_ != nullptr) {
    delete ppubkey_;
  }
  ppubkey_ = nullptr;
}
inline const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB& Req_SKF_RSAExportSessionKey::ppubkey() const {
  const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* p = ppubkey_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_RSAExportSessionKey.pPubKey)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB*>(
      &::com::westone::skf::_SKF_RSAPUBLICKEYBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* Req_SKF_RSAExportSessionKey::release_ppubkey() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_RSAExportSessionKey.pPubKey)
  
  ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* temp = ppubkey_;
  ppubkey_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* Req_SKF_RSAExportSessionKey::mutable_ppubkey() {
  
  if (ppubkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_RSAPUBLICKEYBLOB>(GetArenaNoVirtual());
    ppubkey_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_RSAExportSessionKey.pPubKey)
  return ppubkey_;
}
inline void Req_SKF_RSAExportSessionKey::set_allocated_ppubkey(::com::westone::skf::SKF_RSAPUBLICKEYBLOB* ppubkey) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ppubkey_;
  }
  if (ppubkey) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ppubkey = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ppubkey, submessage_arena);
    }
    
  } else {
    
  }
  ppubkey_ = ppubkey;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_RSAExportSessionKey.pPubKey)
}

// bytes pbData = 5;
inline void Req_SKF_RSAExportSessionKey::clear_pbdata() {
  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_RSAExportSessionKey::pbdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_RSAExportSessionKey.pbData)
  return pbdata_.GetNoArena();
}
inline void Req_SKF_RSAExportSessionKey::set_pbdata(const ::std::string& value) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_RSAExportSessionKey.pbData)
}
#if LANG_CXX11
inline void Req_SKF_RSAExportSessionKey::set_pbdata(::std::string&& value) {
  
  pbdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_RSAExportSessionKey.pbData)
}
#endif
inline void Req_SKF_RSAExportSessionKey::set_pbdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_RSAExportSessionKey.pbData)
}
inline void Req_SKF_RSAExportSessionKey::set_pbdata(const void* value, size_t size) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_RSAExportSessionKey.pbData)
}
inline ::std::string* Req_SKF_RSAExportSessionKey::mutable_pbdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_RSAExportSessionKey.pbData)
  return pbdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_RSAExportSessionKey::release_pbdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_RSAExportSessionKey.pbData)
  
  return pbdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_RSAExportSessionKey::set_allocated_pbdata(::std::string* pbdata) {
  if (pbdata != nullptr) {
    
  } else {
    
  }
  pbdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_RSAExportSessionKey.pbData)
}

// .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 6;
inline bool Req_SKF_RSAExportSessionKey::has_puldatalen() const {
  return this != internal_default_instance() && puldatalen_ != nullptr;
}
inline void Req_SKF_RSAExportSessionKey::clear_puldatalen() {
  if (GetArenaNoVirtual() == nullptr && puldatalen_ != nullptr) {
    delete puldatalen_;
  }
  puldatalen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_RSAExportSessionKey::puldatalen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = puldatalen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_RSAExportSessionKey.pulDataLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_RSAExportSessionKey::release_puldatalen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_RSAExportSessionKey.pulDataLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = puldatalen_;
  puldatalen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_RSAExportSessionKey::mutable_puldatalen() {
  
  if (puldatalen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    puldatalen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_RSAExportSessionKey.pulDataLen)
  return puldatalen_;
}
inline void Req_SKF_RSAExportSessionKey::set_allocated_puldatalen(::com::westone::skf::WST_PROTO_UINT32* puldatalen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete puldatalen_;
  }
  if (puldatalen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      puldatalen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, puldatalen, submessage_arena);
    }
    
  } else {
    
  }
  puldatalen_ = puldatalen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_RSAExportSessionKey.pulDataLen)
}

// .com.westone.skf.WST_PROTO_UINT32 phSessionKey = 7;
inline bool Req_SKF_RSAExportSessionKey::has_phsessionkey() const {
  return this != internal_default_instance() && phsessionkey_ != nullptr;
}
inline void Req_SKF_RSAExportSessionKey::clear_phsessionkey() {
  if (GetArenaNoVirtual() == nullptr && phsessionkey_ != nullptr) {
    delete phsessionkey_;
  }
  phsessionkey_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_RSAExportSessionKey::phsessionkey() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = phsessionkey_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_RSAExportSessionKey.phSessionKey)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_RSAExportSessionKey::release_phsessionkey() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_RSAExportSessionKey.phSessionKey)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = phsessionkey_;
  phsessionkey_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_RSAExportSessionKey::mutable_phsessionkey() {
  
  if (phsessionkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    phsessionkey_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_RSAExportSessionKey.phSessionKey)
  return phsessionkey_;
}
inline void Req_SKF_RSAExportSessionKey::set_allocated_phsessionkey(::com::westone::skf::WST_PROTO_UINT32* phsessionkey) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete phsessionkey_;
  }
  if (phsessionkey) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phsessionkey = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phsessionkey, submessage_arena);
    }
    
  } else {
    
  }
  phsessionkey_ = phsessionkey;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_RSAExportSessionKey.phSessionKey)
}

// -------------------------------------------------------------------

// Rsp_SKF_RSAExportSessionKey

// -------------------------------------------------------------------

// Req_SKF_ExtRSAPubKeyOperation

// .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
inline bool Req_SKF_ExtRSAPubKeyOperation::has_hdev() const {
  return this != internal_default_instance() && hdev_ != nullptr;
}
inline void Req_SKF_ExtRSAPubKeyOperation::clear_hdev() {
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ExtRSAPubKeyOperation::hdev() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hdev_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.hDev)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExtRSAPubKeyOperation::release_hdev() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.hDev)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hdev_;
  hdev_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExtRSAPubKeyOperation::mutable_hdev() {
  
  if (hdev_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hdev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.hDev)
  return hdev_;
}
inline void Req_SKF_ExtRSAPubKeyOperation::set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hdev_;
  }
  if (hdev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hdev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdev, submessage_arena);
    }
    
  } else {
    
  }
  hdev_ = hdev;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.hDev)
}

// .com.westone.skf.SKF_RSAPUBLICKEYBLOB pRSAPubKeyBlob = 2;
inline bool Req_SKF_ExtRSAPubKeyOperation::has_prsapubkeyblob() const {
  return this != internal_default_instance() && prsapubkeyblob_ != nullptr;
}
inline void Req_SKF_ExtRSAPubKeyOperation::clear_prsapubkeyblob() {
  if (GetArenaNoVirtual() == nullptr && prsapubkeyblob_ != nullptr) {
    delete prsapubkeyblob_;
  }
  prsapubkeyblob_ = nullptr;
}
inline const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB& Req_SKF_ExtRSAPubKeyOperation::prsapubkeyblob() const {
  const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* p = prsapubkeyblob_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.pRSAPubKeyBlob)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_RSAPUBLICKEYBLOB*>(
      &::com::westone::skf::_SKF_RSAPUBLICKEYBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* Req_SKF_ExtRSAPubKeyOperation::release_prsapubkeyblob() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.pRSAPubKeyBlob)
  
  ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* temp = prsapubkeyblob_;
  prsapubkeyblob_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_RSAPUBLICKEYBLOB* Req_SKF_ExtRSAPubKeyOperation::mutable_prsapubkeyblob() {
  
  if (prsapubkeyblob_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_RSAPUBLICKEYBLOB>(GetArenaNoVirtual());
    prsapubkeyblob_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.pRSAPubKeyBlob)
  return prsapubkeyblob_;
}
inline void Req_SKF_ExtRSAPubKeyOperation::set_allocated_prsapubkeyblob(::com::westone::skf::SKF_RSAPUBLICKEYBLOB* prsapubkeyblob) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete prsapubkeyblob_;
  }
  if (prsapubkeyblob) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      prsapubkeyblob = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prsapubkeyblob, submessage_arena);
    }
    
  } else {
    
  }
  prsapubkeyblob_ = prsapubkeyblob;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.pRSAPubKeyBlob)
}

// bytes pbInput = 3;
inline void Req_SKF_ExtRSAPubKeyOperation::clear_pbinput() {
  pbinput_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_ExtRSAPubKeyOperation::pbinput() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.pbInput)
  return pbinput_.GetNoArena();
}
inline void Req_SKF_ExtRSAPubKeyOperation::set_pbinput(const ::std::string& value) {
  
  pbinput_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.pbInput)
}
#if LANG_CXX11
inline void Req_SKF_ExtRSAPubKeyOperation::set_pbinput(::std::string&& value) {
  
  pbinput_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.pbInput)
}
#endif
inline void Req_SKF_ExtRSAPubKeyOperation::set_pbinput(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbinput_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.pbInput)
}
inline void Req_SKF_ExtRSAPubKeyOperation::set_pbinput(const void* value, size_t size) {
  
  pbinput_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.pbInput)
}
inline ::std::string* Req_SKF_ExtRSAPubKeyOperation::mutable_pbinput() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.pbInput)
  return pbinput_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_ExtRSAPubKeyOperation::release_pbinput() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.pbInput)
  
  return pbinput_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_ExtRSAPubKeyOperation::set_allocated_pbinput(::std::string* pbinput) {
  if (pbinput != nullptr) {
    
  } else {
    
  }
  pbinput_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbinput);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.pbInput)
}

// .com.westone.skf.WST_PROTO_UINT32 ulInputLen = 4;
inline bool Req_SKF_ExtRSAPubKeyOperation::has_ulinputlen() const {
  return this != internal_default_instance() && ulinputlen_ != nullptr;
}
inline void Req_SKF_ExtRSAPubKeyOperation::clear_ulinputlen() {
  if (GetArenaNoVirtual() == nullptr && ulinputlen_ != nullptr) {
    delete ulinputlen_;
  }
  ulinputlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ExtRSAPubKeyOperation::ulinputlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulinputlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.ulInputLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExtRSAPubKeyOperation::release_ulinputlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.ulInputLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulinputlen_;
  ulinputlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExtRSAPubKeyOperation::mutable_ulinputlen() {
  
  if (ulinputlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulinputlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.ulInputLen)
  return ulinputlen_;
}
inline void Req_SKF_ExtRSAPubKeyOperation::set_allocated_ulinputlen(::com::westone::skf::WST_PROTO_UINT32* ulinputlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulinputlen_;
  }
  if (ulinputlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulinputlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulinputlen, submessage_arena);
    }
    
  } else {
    
  }
  ulinputlen_ = ulinputlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.ulInputLen)
}

// bytes pbOutData = 5;
inline void Req_SKF_ExtRSAPubKeyOperation::clear_pboutdata() {
  pboutdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_ExtRSAPubKeyOperation::pboutdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.pbOutData)
  return pboutdata_.GetNoArena();
}
inline void Req_SKF_ExtRSAPubKeyOperation::set_pboutdata(const ::std::string& value) {
  
  pboutdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.pbOutData)
}
#if LANG_CXX11
inline void Req_SKF_ExtRSAPubKeyOperation::set_pboutdata(::std::string&& value) {
  
  pboutdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.pbOutData)
}
#endif
inline void Req_SKF_ExtRSAPubKeyOperation::set_pboutdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pboutdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.pbOutData)
}
inline void Req_SKF_ExtRSAPubKeyOperation::set_pboutdata(const void* value, size_t size) {
  
  pboutdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.pbOutData)
}
inline ::std::string* Req_SKF_ExtRSAPubKeyOperation::mutable_pboutdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.pbOutData)
  return pboutdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_ExtRSAPubKeyOperation::release_pboutdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.pbOutData)
  
  return pboutdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_ExtRSAPubKeyOperation::set_allocated_pboutdata(::std::string* pboutdata) {
  if (pboutdata != nullptr) {
    
  } else {
    
  }
  pboutdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pboutdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.pbOutData)
}

// .com.westone.skf.WST_PROTO_UINT32 pulOutputLen = 6;
inline bool Req_SKF_ExtRSAPubKeyOperation::has_puloutputlen() const {
  return this != internal_default_instance() && puloutputlen_ != nullptr;
}
inline void Req_SKF_ExtRSAPubKeyOperation::clear_puloutputlen() {
  if (GetArenaNoVirtual() == nullptr && puloutputlen_ != nullptr) {
    delete puloutputlen_;
  }
  puloutputlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ExtRSAPubKeyOperation::puloutputlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = puloutputlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.pulOutputLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExtRSAPubKeyOperation::release_puloutputlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.pulOutputLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = puloutputlen_;
  puloutputlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExtRSAPubKeyOperation::mutable_puloutputlen() {
  
  if (puloutputlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    puloutputlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.pulOutputLen)
  return puloutputlen_;
}
inline void Req_SKF_ExtRSAPubKeyOperation::set_allocated_puloutputlen(::com::westone::skf::WST_PROTO_UINT32* puloutputlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete puloutputlen_;
  }
  if (puloutputlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      puloutputlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, puloutputlen, submessage_arena);
    }
    
  } else {
    
  }
  puloutputlen_ = puloutputlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtRSAPubKeyOperation.pulOutputLen)
}

// -------------------------------------------------------------------

// Rsp_SKF_ExtRSAPubKeyOperation

// bytes pbOutData = 1;
inline void Rsp_SKF_ExtRSAPubKeyOperation::clear_pboutdata() {
  pboutdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rsp_SKF_ExtRSAPubKeyOperation::pboutdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation.pbOutData)
  return pboutdata_.GetNoArena();
}
inline void Rsp_SKF_ExtRSAPubKeyOperation::set_pboutdata(const ::std::string& value) {
  
  pboutdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation.pbOutData)
}
#if LANG_CXX11
inline void Rsp_SKF_ExtRSAPubKeyOperation::set_pboutdata(::std::string&& value) {
  
  pboutdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation.pbOutData)
}
#endif
inline void Rsp_SKF_ExtRSAPubKeyOperation::set_pboutdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pboutdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation.pbOutData)
}
inline void Rsp_SKF_ExtRSAPubKeyOperation::set_pboutdata(const void* value, size_t size) {
  
  pboutdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation.pbOutData)
}
inline ::std::string* Rsp_SKF_ExtRSAPubKeyOperation::mutable_pboutdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation.pbOutData)
  return pboutdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rsp_SKF_ExtRSAPubKeyOperation::release_pboutdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation.pbOutData)
  
  return pboutdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rsp_SKF_ExtRSAPubKeyOperation::set_allocated_pboutdata(::std::string* pboutdata) {
  if (pboutdata != nullptr) {
    
  } else {
    
  }
  pboutdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pboutdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation.pbOutData)
}

// .com.westone.skf.WST_PROTO_UINT32 pulOutputLen = 2;
inline bool Rsp_SKF_ExtRSAPubKeyOperation::has_puloutputlen() const {
  return this != internal_default_instance() && puloutputlen_ != nullptr;
}
inline void Rsp_SKF_ExtRSAPubKeyOperation::clear_puloutputlen() {
  if (GetArenaNoVirtual() == nullptr && puloutputlen_ != nullptr) {
    delete puloutputlen_;
  }
  puloutputlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_ExtRSAPubKeyOperation::puloutputlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = puloutputlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation.pulOutputLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_ExtRSAPubKeyOperation::release_puloutputlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation.pulOutputLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = puloutputlen_;
  puloutputlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_ExtRSAPubKeyOperation::mutable_puloutputlen() {
  
  if (puloutputlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    puloutputlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation.pulOutputLen)
  return puloutputlen_;
}
inline void Rsp_SKF_ExtRSAPubKeyOperation::set_allocated_puloutputlen(::com::westone::skf::WST_PROTO_UINT32* puloutputlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete puloutputlen_;
  }
  if (puloutputlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      puloutputlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, puloutputlen, submessage_arena);
    }
    
  } else {
    
  }
  puloutputlen_ = puloutputlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_ExtRSAPubKeyOperation.pulOutputLen)
}

// -------------------------------------------------------------------

// Req_SKF_ExtRSAPriKeyOperation

// .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
inline bool Req_SKF_ExtRSAPriKeyOperation::has_hdev() const {
  return this != internal_default_instance() && hdev_ != nullptr;
}
inline void Req_SKF_ExtRSAPriKeyOperation::clear_hdev() {
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ExtRSAPriKeyOperation::hdev() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hdev_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.hDev)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExtRSAPriKeyOperation::release_hdev() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.hDev)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hdev_;
  hdev_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExtRSAPriKeyOperation::mutable_hdev() {
  
  if (hdev_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hdev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.hDev)
  return hdev_;
}
inline void Req_SKF_ExtRSAPriKeyOperation::set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hdev_;
  }
  if (hdev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hdev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdev, submessage_arena);
    }
    
  } else {
    
  }
  hdev_ = hdev;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.hDev)
}

// .com.westone.skf.SKF_RSAPRIVATEKEYBLOB pRSAPriKeyBlob = 2;
inline bool Req_SKF_ExtRSAPriKeyOperation::has_prsaprikeyblob() const {
  return this != internal_default_instance() && prsaprikeyblob_ != nullptr;
}
inline void Req_SKF_ExtRSAPriKeyOperation::clear_prsaprikeyblob() {
  if (GetArenaNoVirtual() == nullptr && prsaprikeyblob_ != nullptr) {
    delete prsaprikeyblob_;
  }
  prsaprikeyblob_ = nullptr;
}
inline const ::com::westone::skf::SKF_RSAPRIVATEKEYBLOB& Req_SKF_ExtRSAPriKeyOperation::prsaprikeyblob() const {
  const ::com::westone::skf::SKF_RSAPRIVATEKEYBLOB* p = prsaprikeyblob_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.pRSAPriKeyBlob)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_RSAPRIVATEKEYBLOB*>(
      &::com::westone::skf::_SKF_RSAPRIVATEKEYBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_RSAPRIVATEKEYBLOB* Req_SKF_ExtRSAPriKeyOperation::release_prsaprikeyblob() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.pRSAPriKeyBlob)
  
  ::com::westone::skf::SKF_RSAPRIVATEKEYBLOB* temp = prsaprikeyblob_;
  prsaprikeyblob_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_RSAPRIVATEKEYBLOB* Req_SKF_ExtRSAPriKeyOperation::mutable_prsaprikeyblob() {
  
  if (prsaprikeyblob_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_RSAPRIVATEKEYBLOB>(GetArenaNoVirtual());
    prsaprikeyblob_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.pRSAPriKeyBlob)
  return prsaprikeyblob_;
}
inline void Req_SKF_ExtRSAPriKeyOperation::set_allocated_prsaprikeyblob(::com::westone::skf::SKF_RSAPRIVATEKEYBLOB* prsaprikeyblob) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete prsaprikeyblob_;
  }
  if (prsaprikeyblob) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      prsaprikeyblob = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, prsaprikeyblob, submessage_arena);
    }
    
  } else {
    
  }
  prsaprikeyblob_ = prsaprikeyblob;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.pRSAPriKeyBlob)
}

// bytes pbInput = 3;
inline void Req_SKF_ExtRSAPriKeyOperation::clear_pbinput() {
  pbinput_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_ExtRSAPriKeyOperation::pbinput() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.pbInput)
  return pbinput_.GetNoArena();
}
inline void Req_SKF_ExtRSAPriKeyOperation::set_pbinput(const ::std::string& value) {
  
  pbinput_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.pbInput)
}
#if LANG_CXX11
inline void Req_SKF_ExtRSAPriKeyOperation::set_pbinput(::std::string&& value) {
  
  pbinput_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.pbInput)
}
#endif
inline void Req_SKF_ExtRSAPriKeyOperation::set_pbinput(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbinput_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.pbInput)
}
inline void Req_SKF_ExtRSAPriKeyOperation::set_pbinput(const void* value, size_t size) {
  
  pbinput_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.pbInput)
}
inline ::std::string* Req_SKF_ExtRSAPriKeyOperation::mutable_pbinput() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.pbInput)
  return pbinput_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_ExtRSAPriKeyOperation::release_pbinput() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.pbInput)
  
  return pbinput_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_ExtRSAPriKeyOperation::set_allocated_pbinput(::std::string* pbinput) {
  if (pbinput != nullptr) {
    
  } else {
    
  }
  pbinput_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbinput);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.pbInput)
}

// .com.westone.skf.WST_PROTO_UINT32 ulInputLen = 4;
inline bool Req_SKF_ExtRSAPriKeyOperation::has_ulinputlen() const {
  return this != internal_default_instance() && ulinputlen_ != nullptr;
}
inline void Req_SKF_ExtRSAPriKeyOperation::clear_ulinputlen() {
  if (GetArenaNoVirtual() == nullptr && ulinputlen_ != nullptr) {
    delete ulinputlen_;
  }
  ulinputlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ExtRSAPriKeyOperation::ulinputlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulinputlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.ulInputLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExtRSAPriKeyOperation::release_ulinputlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.ulInputLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulinputlen_;
  ulinputlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExtRSAPriKeyOperation::mutable_ulinputlen() {
  
  if (ulinputlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulinputlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.ulInputLen)
  return ulinputlen_;
}
inline void Req_SKF_ExtRSAPriKeyOperation::set_allocated_ulinputlen(::com::westone::skf::WST_PROTO_UINT32* ulinputlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulinputlen_;
  }
  if (ulinputlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulinputlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulinputlen, submessage_arena);
    }
    
  } else {
    
  }
  ulinputlen_ = ulinputlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.ulInputLen)
}

// bytes pbOutData = 5;
inline void Req_SKF_ExtRSAPriKeyOperation::clear_pboutdata() {
  pboutdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_ExtRSAPriKeyOperation::pboutdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.pbOutData)
  return pboutdata_.GetNoArena();
}
inline void Req_SKF_ExtRSAPriKeyOperation::set_pboutdata(const ::std::string& value) {
  
  pboutdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.pbOutData)
}
#if LANG_CXX11
inline void Req_SKF_ExtRSAPriKeyOperation::set_pboutdata(::std::string&& value) {
  
  pboutdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.pbOutData)
}
#endif
inline void Req_SKF_ExtRSAPriKeyOperation::set_pboutdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pboutdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.pbOutData)
}
inline void Req_SKF_ExtRSAPriKeyOperation::set_pboutdata(const void* value, size_t size) {
  
  pboutdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.pbOutData)
}
inline ::std::string* Req_SKF_ExtRSAPriKeyOperation::mutable_pboutdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.pbOutData)
  return pboutdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_ExtRSAPriKeyOperation::release_pboutdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.pbOutData)
  
  return pboutdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_ExtRSAPriKeyOperation::set_allocated_pboutdata(::std::string* pboutdata) {
  if (pboutdata != nullptr) {
    
  } else {
    
  }
  pboutdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pboutdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.pbOutData)
}

// .com.westone.skf.WST_PROTO_UINT32 pulOutputLen = 6;
inline bool Req_SKF_ExtRSAPriKeyOperation::has_puloutputlen() const {
  return this != internal_default_instance() && puloutputlen_ != nullptr;
}
inline void Req_SKF_ExtRSAPriKeyOperation::clear_puloutputlen() {
  if (GetArenaNoVirtual() == nullptr && puloutputlen_ != nullptr) {
    delete puloutputlen_;
  }
  puloutputlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ExtRSAPriKeyOperation::puloutputlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = puloutputlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.pulOutputLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExtRSAPriKeyOperation::release_puloutputlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.pulOutputLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = puloutputlen_;
  puloutputlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExtRSAPriKeyOperation::mutable_puloutputlen() {
  
  if (puloutputlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    puloutputlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.pulOutputLen)
  return puloutputlen_;
}
inline void Req_SKF_ExtRSAPriKeyOperation::set_allocated_puloutputlen(::com::westone::skf::WST_PROTO_UINT32* puloutputlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete puloutputlen_;
  }
  if (puloutputlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      puloutputlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, puloutputlen, submessage_arena);
    }
    
  } else {
    
  }
  puloutputlen_ = puloutputlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtRSAPriKeyOperation.pulOutputLen)
}

// -------------------------------------------------------------------

// Rsp_SKF_ExtRSAPriKeyOperation

// bytes pbOutData = 1;
inline void Rsp_SKF_ExtRSAPriKeyOperation::clear_pboutdata() {
  pboutdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rsp_SKF_ExtRSAPriKeyOperation::pboutdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation.pbOutData)
  return pboutdata_.GetNoArena();
}
inline void Rsp_SKF_ExtRSAPriKeyOperation::set_pboutdata(const ::std::string& value) {
  
  pboutdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation.pbOutData)
}
#if LANG_CXX11
inline void Rsp_SKF_ExtRSAPriKeyOperation::set_pboutdata(::std::string&& value) {
  
  pboutdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation.pbOutData)
}
#endif
inline void Rsp_SKF_ExtRSAPriKeyOperation::set_pboutdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pboutdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation.pbOutData)
}
inline void Rsp_SKF_ExtRSAPriKeyOperation::set_pboutdata(const void* value, size_t size) {
  
  pboutdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation.pbOutData)
}
inline ::std::string* Rsp_SKF_ExtRSAPriKeyOperation::mutable_pboutdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation.pbOutData)
  return pboutdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rsp_SKF_ExtRSAPriKeyOperation::release_pboutdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation.pbOutData)
  
  return pboutdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rsp_SKF_ExtRSAPriKeyOperation::set_allocated_pboutdata(::std::string* pboutdata) {
  if (pboutdata != nullptr) {
    
  } else {
    
  }
  pboutdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pboutdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation.pbOutData)
}

// .com.westone.skf.WST_PROTO_UINT32 pulOutputLen = 2;
inline bool Rsp_SKF_ExtRSAPriKeyOperation::has_puloutputlen() const {
  return this != internal_default_instance() && puloutputlen_ != nullptr;
}
inline void Rsp_SKF_ExtRSAPriKeyOperation::clear_puloutputlen() {
  if (GetArenaNoVirtual() == nullptr && puloutputlen_ != nullptr) {
    delete puloutputlen_;
  }
  puloutputlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_ExtRSAPriKeyOperation::puloutputlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = puloutputlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation.pulOutputLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_ExtRSAPriKeyOperation::release_puloutputlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation.pulOutputLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = puloutputlen_;
  puloutputlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_ExtRSAPriKeyOperation::mutable_puloutputlen() {
  
  if (puloutputlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    puloutputlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation.pulOutputLen)
  return puloutputlen_;
}
inline void Rsp_SKF_ExtRSAPriKeyOperation::set_allocated_puloutputlen(::com::westone::skf::WST_PROTO_UINT32* puloutputlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete puloutputlen_;
  }
  if (puloutputlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      puloutputlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, puloutputlen, submessage_arena);
    }
    
  } else {
    
  }
  puloutputlen_ = puloutputlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_ExtRSAPriKeyOperation.pulOutputLen)
}

// -------------------------------------------------------------------

// Req_SKF_GenECCKeyPair

// .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
inline bool Req_SKF_GenECCKeyPair::has_hcontainer() const {
  return this != internal_default_instance() && hcontainer_ != nullptr;
}
inline void Req_SKF_GenECCKeyPair::clear_hcontainer() {
  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GenECCKeyPair::hcontainer() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hcontainer_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenECCKeyPair.hContainer)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenECCKeyPair::release_hcontainer() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenECCKeyPair.hContainer)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hcontainer_;
  hcontainer_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenECCKeyPair::mutable_hcontainer() {
  
  if (hcontainer_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hcontainer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenECCKeyPair.hContainer)
  return hcontainer_;
}
inline void Req_SKF_GenECCKeyPair::set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hcontainer_;
  }
  if (hcontainer) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hcontainer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hcontainer, submessage_arena);
    }
    
  } else {
    
  }
  hcontainer_ = hcontainer;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenECCKeyPair.hContainer)
}

// .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
inline bool Req_SKF_GenECCKeyPair::has_ulalgid() const {
  return this != internal_default_instance() && ulalgid_ != nullptr;
}
inline void Req_SKF_GenECCKeyPair::clear_ulalgid() {
  if (GetArenaNoVirtual() == nullptr && ulalgid_ != nullptr) {
    delete ulalgid_;
  }
  ulalgid_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GenECCKeyPair::ulalgid() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulalgid_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenECCKeyPair.ulAlgID)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenECCKeyPair::release_ulalgid() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenECCKeyPair.ulAlgID)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulalgid_;
  ulalgid_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenECCKeyPair::mutable_ulalgid() {
  
  if (ulalgid_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulalgid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenECCKeyPair.ulAlgID)
  return ulalgid_;
}
inline void Req_SKF_GenECCKeyPair::set_allocated_ulalgid(::com::westone::skf::WST_PROTO_UINT32* ulalgid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulalgid_;
  }
  if (ulalgid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulalgid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulalgid, submessage_arena);
    }
    
  } else {
    
  }
  ulalgid_ = ulalgid;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenECCKeyPair.ulAlgID)
}

// .com.westone.skf.SKF_ECCPUBLICKEYBLOB pBlob = 3;
inline bool Req_SKF_GenECCKeyPair::has_pblob() const {
  return this != internal_default_instance() && pblob_ != nullptr;
}
inline void Req_SKF_GenECCKeyPair::clear_pblob() {
  if (GetArenaNoVirtual() == nullptr && pblob_ != nullptr) {
    delete pblob_;
  }
  pblob_ = nullptr;
}
inline const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& Req_SKF_GenECCKeyPair::pblob() const {
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* p = pblob_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenECCKeyPair.pBlob)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      &::com::westone::skf::_SKF_ECCPUBLICKEYBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Req_SKF_GenECCKeyPair::release_pblob() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenECCKeyPair.pBlob)
  
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* temp = pblob_;
  pblob_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Req_SKF_GenECCKeyPair::mutable_pblob() {
  
  if (pblob_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ECCPUBLICKEYBLOB>(GetArenaNoVirtual());
    pblob_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenECCKeyPair.pBlob)
  return pblob_;
}
inline void Req_SKF_GenECCKeyPair::set_allocated_pblob(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* pblob) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pblob_;
  }
  if (pblob) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pblob = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pblob, submessage_arena);
    }
    
  } else {
    
  }
  pblob_ = pblob;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenECCKeyPair.pBlob)
}

// -------------------------------------------------------------------

// Rsp_SKF_GenECCKeyPair

// .com.westone.skf.SKF_ECCPUBLICKEYBLOB pBlob = 1;
inline bool Rsp_SKF_GenECCKeyPair::has_pblob() const {
  return this != internal_default_instance() && pblob_ != nullptr;
}
inline void Rsp_SKF_GenECCKeyPair::clear_pblob() {
  if (GetArenaNoVirtual() == nullptr && pblob_ != nullptr) {
    delete pblob_;
  }
  pblob_ = nullptr;
}
inline const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& Rsp_SKF_GenECCKeyPair::pblob() const {
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* p = pblob_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_GenECCKeyPair.pBlob)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      &::com::westone::skf::_SKF_ECCPUBLICKEYBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Rsp_SKF_GenECCKeyPair::release_pblob() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_GenECCKeyPair.pBlob)
  
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* temp = pblob_;
  pblob_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Rsp_SKF_GenECCKeyPair::mutable_pblob() {
  
  if (pblob_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ECCPUBLICKEYBLOB>(GetArenaNoVirtual());
    pblob_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_GenECCKeyPair.pBlob)
  return pblob_;
}
inline void Rsp_SKF_GenECCKeyPair::set_allocated_pblob(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* pblob) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pblob_;
  }
  if (pblob) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pblob = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pblob, submessage_arena);
    }
    
  } else {
    
  }
  pblob_ = pblob;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_GenECCKeyPair.pBlob)
}

// -------------------------------------------------------------------

// Req_SKF_ImportECCKeyPair

// .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
inline bool Req_SKF_ImportECCKeyPair::has_hcontainer() const {
  return this != internal_default_instance() && hcontainer_ != nullptr;
}
inline void Req_SKF_ImportECCKeyPair::clear_hcontainer() {
  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ImportECCKeyPair::hcontainer() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hcontainer_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ImportECCKeyPair.hContainer)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ImportECCKeyPair::release_hcontainer() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ImportECCKeyPair.hContainer)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hcontainer_;
  hcontainer_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ImportECCKeyPair::mutable_hcontainer() {
  
  if (hcontainer_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hcontainer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ImportECCKeyPair.hContainer)
  return hcontainer_;
}
inline void Req_SKF_ImportECCKeyPair::set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hcontainer_;
  }
  if (hcontainer) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hcontainer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hcontainer, submessage_arena);
    }
    
  } else {
    
  }
  hcontainer_ = hcontainer;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ImportECCKeyPair.hContainer)
}

// .com.westone.skf.SKF_ENVELOPEDKEYBLOB pEnvelopedKeyBlob = 2;
inline bool Req_SKF_ImportECCKeyPair::has_penvelopedkeyblob() const {
  return this != internal_default_instance() && penvelopedkeyblob_ != nullptr;
}
inline void Req_SKF_ImportECCKeyPair::clear_penvelopedkeyblob() {
  if (GetArenaNoVirtual() == nullptr && penvelopedkeyblob_ != nullptr) {
    delete penvelopedkeyblob_;
  }
  penvelopedkeyblob_ = nullptr;
}
inline const ::com::westone::skf::SKF_ENVELOPEDKEYBLOB& Req_SKF_ImportECCKeyPair::penvelopedkeyblob() const {
  const ::com::westone::skf::SKF_ENVELOPEDKEYBLOB* p = penvelopedkeyblob_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ImportECCKeyPair.pEnvelopedKeyBlob)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ENVELOPEDKEYBLOB*>(
      &::com::westone::skf::_SKF_ENVELOPEDKEYBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ENVELOPEDKEYBLOB* Req_SKF_ImportECCKeyPair::release_penvelopedkeyblob() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ImportECCKeyPair.pEnvelopedKeyBlob)
  
  ::com::westone::skf::SKF_ENVELOPEDKEYBLOB* temp = penvelopedkeyblob_;
  penvelopedkeyblob_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ENVELOPEDKEYBLOB* Req_SKF_ImportECCKeyPair::mutable_penvelopedkeyblob() {
  
  if (penvelopedkeyblob_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ENVELOPEDKEYBLOB>(GetArenaNoVirtual());
    penvelopedkeyblob_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ImportECCKeyPair.pEnvelopedKeyBlob)
  return penvelopedkeyblob_;
}
inline void Req_SKF_ImportECCKeyPair::set_allocated_penvelopedkeyblob(::com::westone::skf::SKF_ENVELOPEDKEYBLOB* penvelopedkeyblob) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete penvelopedkeyblob_;
  }
  if (penvelopedkeyblob) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      penvelopedkeyblob = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, penvelopedkeyblob, submessage_arena);
    }
    
  } else {
    
  }
  penvelopedkeyblob_ = penvelopedkeyblob;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ImportECCKeyPair.pEnvelopedKeyBlob)
}

// -------------------------------------------------------------------

// Rsp_SKF_ImportECCKeyPair

// -------------------------------------------------------------------

// Req_SKF_ECCSignData

// .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
inline bool Req_SKF_ECCSignData::has_hcontainer() const {
  return this != internal_default_instance() && hcontainer_ != nullptr;
}
inline void Req_SKF_ECCSignData::clear_hcontainer() {
  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ECCSignData::hcontainer() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hcontainer_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ECCSignData.hContainer)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ECCSignData::release_hcontainer() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ECCSignData.hContainer)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hcontainer_;
  hcontainer_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ECCSignData::mutable_hcontainer() {
  
  if (hcontainer_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hcontainer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ECCSignData.hContainer)
  return hcontainer_;
}
inline void Req_SKF_ECCSignData::set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hcontainer_;
  }
  if (hcontainer) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hcontainer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hcontainer, submessage_arena);
    }
    
  } else {
    
  }
  hcontainer_ = hcontainer;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ECCSignData.hContainer)
}

// bytes pbData = 2;
inline void Req_SKF_ECCSignData::clear_pbdata() {
  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_ECCSignData::pbdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ECCSignData.pbData)
  return pbdata_.GetNoArena();
}
inline void Req_SKF_ECCSignData::set_pbdata(const ::std::string& value) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_ECCSignData.pbData)
}
#if LANG_CXX11
inline void Req_SKF_ECCSignData::set_pbdata(::std::string&& value) {
  
  pbdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_ECCSignData.pbData)
}
#endif
inline void Req_SKF_ECCSignData::set_pbdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_ECCSignData.pbData)
}
inline void Req_SKF_ECCSignData::set_pbdata(const void* value, size_t size) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_ECCSignData.pbData)
}
inline ::std::string* Req_SKF_ECCSignData::mutable_pbdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ECCSignData.pbData)
  return pbdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_ECCSignData::release_pbdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ECCSignData.pbData)
  
  return pbdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_ECCSignData::set_allocated_pbdata(::std::string* pbdata) {
  if (pbdata != nullptr) {
    
  } else {
    
  }
  pbdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ECCSignData.pbData)
}

// .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
inline bool Req_SKF_ECCSignData::has_uldatalen() const {
  return this != internal_default_instance() && uldatalen_ != nullptr;
}
inline void Req_SKF_ECCSignData::clear_uldatalen() {
  if (GetArenaNoVirtual() == nullptr && uldatalen_ != nullptr) {
    delete uldatalen_;
  }
  uldatalen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ECCSignData::uldatalen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = uldatalen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ECCSignData.ulDataLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ECCSignData::release_uldatalen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ECCSignData.ulDataLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = uldatalen_;
  uldatalen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ECCSignData::mutable_uldatalen() {
  
  if (uldatalen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    uldatalen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ECCSignData.ulDataLen)
  return uldatalen_;
}
inline void Req_SKF_ECCSignData::set_allocated_uldatalen(::com::westone::skf::WST_PROTO_UINT32* uldatalen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete uldatalen_;
  }
  if (uldatalen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uldatalen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uldatalen, submessage_arena);
    }
    
  } else {
    
  }
  uldatalen_ = uldatalen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ECCSignData.ulDataLen)
}

// .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 4;
inline bool Req_SKF_ECCSignData::has_psignature() const {
  return this != internal_default_instance() && psignature_ != nullptr;
}
inline void Req_SKF_ECCSignData::clear_psignature() {
  if (GetArenaNoVirtual() == nullptr && psignature_ != nullptr) {
    delete psignature_;
  }
  psignature_ = nullptr;
}
inline const ::com::westone::skf::SKF_ECCSIGNATUREBLOB& Req_SKF_ECCSignData::psignature() const {
  const ::com::westone::skf::SKF_ECCSIGNATUREBLOB* p = psignature_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ECCSignData.pSignature)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ECCSIGNATUREBLOB*>(
      &::com::westone::skf::_SKF_ECCSIGNATUREBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ECCSIGNATUREBLOB* Req_SKF_ECCSignData::release_psignature() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ECCSignData.pSignature)
  
  ::com::westone::skf::SKF_ECCSIGNATUREBLOB* temp = psignature_;
  psignature_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ECCSIGNATUREBLOB* Req_SKF_ECCSignData::mutable_psignature() {
  
  if (psignature_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ECCSIGNATUREBLOB>(GetArenaNoVirtual());
    psignature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ECCSignData.pSignature)
  return psignature_;
}
inline void Req_SKF_ECCSignData::set_allocated_psignature(::com::westone::skf::SKF_ECCSIGNATUREBLOB* psignature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete psignature_;
  }
  if (psignature) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      psignature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, psignature, submessage_arena);
    }
    
  } else {
    
  }
  psignature_ = psignature;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ECCSignData.pSignature)
}

// -------------------------------------------------------------------

// Rsp_SKF_ECCSignData

// .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 1;
inline bool Rsp_SKF_ECCSignData::has_psignature() const {
  return this != internal_default_instance() && psignature_ != nullptr;
}
inline void Rsp_SKF_ECCSignData::clear_psignature() {
  if (GetArenaNoVirtual() == nullptr && psignature_ != nullptr) {
    delete psignature_;
  }
  psignature_ = nullptr;
}
inline const ::com::westone::skf::SKF_ECCSIGNATUREBLOB& Rsp_SKF_ECCSignData::psignature() const {
  const ::com::westone::skf::SKF_ECCSIGNATUREBLOB* p = psignature_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_ECCSignData.pSignature)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ECCSIGNATUREBLOB*>(
      &::com::westone::skf::_SKF_ECCSIGNATUREBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ECCSIGNATUREBLOB* Rsp_SKF_ECCSignData::release_psignature() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_ECCSignData.pSignature)
  
  ::com::westone::skf::SKF_ECCSIGNATUREBLOB* temp = psignature_;
  psignature_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ECCSIGNATUREBLOB* Rsp_SKF_ECCSignData::mutable_psignature() {
  
  if (psignature_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ECCSIGNATUREBLOB>(GetArenaNoVirtual());
    psignature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_ECCSignData.pSignature)
  return psignature_;
}
inline void Rsp_SKF_ECCSignData::set_allocated_psignature(::com::westone::skf::SKF_ECCSIGNATUREBLOB* psignature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete psignature_;
  }
  if (psignature) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      psignature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, psignature, submessage_arena);
    }
    
  } else {
    
  }
  psignature_ = psignature;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_ECCSignData.pSignature)
}

// -------------------------------------------------------------------

// Req_SKF_ECCVerify

// .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
inline bool Req_SKF_ECCVerify::has_hdev() const {
  return this != internal_default_instance() && hdev_ != nullptr;
}
inline void Req_SKF_ECCVerify::clear_hdev() {
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ECCVerify::hdev() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hdev_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ECCVerify.hDev)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ECCVerify::release_hdev() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ECCVerify.hDev)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hdev_;
  hdev_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ECCVerify::mutable_hdev() {
  
  if (hdev_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hdev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ECCVerify.hDev)
  return hdev_;
}
inline void Req_SKF_ECCVerify::set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hdev_;
  }
  if (hdev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hdev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdev, submessage_arena);
    }
    
  } else {
    
  }
  hdev_ = hdev;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ECCVerify.hDev)
}

// .com.westone.skf.SKF_ECCPUBLICKEYBLOB pECCPubKeyBlob = 2;
inline bool Req_SKF_ECCVerify::has_peccpubkeyblob() const {
  return this != internal_default_instance() && peccpubkeyblob_ != nullptr;
}
inline void Req_SKF_ECCVerify::clear_peccpubkeyblob() {
  if (GetArenaNoVirtual() == nullptr && peccpubkeyblob_ != nullptr) {
    delete peccpubkeyblob_;
  }
  peccpubkeyblob_ = nullptr;
}
inline const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& Req_SKF_ECCVerify::peccpubkeyblob() const {
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* p = peccpubkeyblob_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ECCVerify.pECCPubKeyBlob)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      &::com::westone::skf::_SKF_ECCPUBLICKEYBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Req_SKF_ECCVerify::release_peccpubkeyblob() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ECCVerify.pECCPubKeyBlob)
  
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* temp = peccpubkeyblob_;
  peccpubkeyblob_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Req_SKF_ECCVerify::mutable_peccpubkeyblob() {
  
  if (peccpubkeyblob_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ECCPUBLICKEYBLOB>(GetArenaNoVirtual());
    peccpubkeyblob_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ECCVerify.pECCPubKeyBlob)
  return peccpubkeyblob_;
}
inline void Req_SKF_ECCVerify::set_allocated_peccpubkeyblob(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* peccpubkeyblob) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete peccpubkeyblob_;
  }
  if (peccpubkeyblob) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      peccpubkeyblob = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, peccpubkeyblob, submessage_arena);
    }
    
  } else {
    
  }
  peccpubkeyblob_ = peccpubkeyblob;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ECCVerify.pECCPubKeyBlob)
}

// bytes pbData = 3;
inline void Req_SKF_ECCVerify::clear_pbdata() {
  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_ECCVerify::pbdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ECCVerify.pbData)
  return pbdata_.GetNoArena();
}
inline void Req_SKF_ECCVerify::set_pbdata(const ::std::string& value) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_ECCVerify.pbData)
}
#if LANG_CXX11
inline void Req_SKF_ECCVerify::set_pbdata(::std::string&& value) {
  
  pbdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_ECCVerify.pbData)
}
#endif
inline void Req_SKF_ECCVerify::set_pbdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_ECCVerify.pbData)
}
inline void Req_SKF_ECCVerify::set_pbdata(const void* value, size_t size) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_ECCVerify.pbData)
}
inline ::std::string* Req_SKF_ECCVerify::mutable_pbdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ECCVerify.pbData)
  return pbdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_ECCVerify::release_pbdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ECCVerify.pbData)
  
  return pbdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_ECCVerify::set_allocated_pbdata(::std::string* pbdata) {
  if (pbdata != nullptr) {
    
  } else {
    
  }
  pbdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ECCVerify.pbData)
}

// .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 4;
inline bool Req_SKF_ECCVerify::has_uldatalen() const {
  return this != internal_default_instance() && uldatalen_ != nullptr;
}
inline void Req_SKF_ECCVerify::clear_uldatalen() {
  if (GetArenaNoVirtual() == nullptr && uldatalen_ != nullptr) {
    delete uldatalen_;
  }
  uldatalen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ECCVerify::uldatalen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = uldatalen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ECCVerify.ulDataLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ECCVerify::release_uldatalen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ECCVerify.ulDataLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = uldatalen_;
  uldatalen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ECCVerify::mutable_uldatalen() {
  
  if (uldatalen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    uldatalen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ECCVerify.ulDataLen)
  return uldatalen_;
}
inline void Req_SKF_ECCVerify::set_allocated_uldatalen(::com::westone::skf::WST_PROTO_UINT32* uldatalen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete uldatalen_;
  }
  if (uldatalen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uldatalen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uldatalen, submessage_arena);
    }
    
  } else {
    
  }
  uldatalen_ = uldatalen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ECCVerify.ulDataLen)
}

// .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 5;
inline bool Req_SKF_ECCVerify::has_psignature() const {
  return this != internal_default_instance() && psignature_ != nullptr;
}
inline void Req_SKF_ECCVerify::clear_psignature() {
  if (GetArenaNoVirtual() == nullptr && psignature_ != nullptr) {
    delete psignature_;
  }
  psignature_ = nullptr;
}
inline const ::com::westone::skf::SKF_ECCSIGNATUREBLOB& Req_SKF_ECCVerify::psignature() const {
  const ::com::westone::skf::SKF_ECCSIGNATUREBLOB* p = psignature_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ECCVerify.pSignature)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ECCSIGNATUREBLOB*>(
      &::com::westone::skf::_SKF_ECCSIGNATUREBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ECCSIGNATUREBLOB* Req_SKF_ECCVerify::release_psignature() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ECCVerify.pSignature)
  
  ::com::westone::skf::SKF_ECCSIGNATUREBLOB* temp = psignature_;
  psignature_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ECCSIGNATUREBLOB* Req_SKF_ECCVerify::mutable_psignature() {
  
  if (psignature_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ECCSIGNATUREBLOB>(GetArenaNoVirtual());
    psignature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ECCVerify.pSignature)
  return psignature_;
}
inline void Req_SKF_ECCVerify::set_allocated_psignature(::com::westone::skf::SKF_ECCSIGNATUREBLOB* psignature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete psignature_;
  }
  if (psignature) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      psignature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, psignature, submessage_arena);
    }
    
  } else {
    
  }
  psignature_ = psignature;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ECCVerify.pSignature)
}

// -------------------------------------------------------------------

// Rsp_SKF_ECCVerify

// -------------------------------------------------------------------

// Req_SKF_ECCExportSessionKey

// .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
inline bool Req_SKF_ECCExportSessionKey::has_hcontainer() const {
  return this != internal_default_instance() && hcontainer_ != nullptr;
}
inline void Req_SKF_ECCExportSessionKey::clear_hcontainer() {
  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ECCExportSessionKey::hcontainer() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hcontainer_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ECCExportSessionKey.hContainer)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ECCExportSessionKey::release_hcontainer() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ECCExportSessionKey.hContainer)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hcontainer_;
  hcontainer_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ECCExportSessionKey::mutable_hcontainer() {
  
  if (hcontainer_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hcontainer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ECCExportSessionKey.hContainer)
  return hcontainer_;
}
inline void Req_SKF_ECCExportSessionKey::set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hcontainer_;
  }
  if (hcontainer) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hcontainer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hcontainer, submessage_arena);
    }
    
  } else {
    
  }
  hcontainer_ = hcontainer;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ECCExportSessionKey.hContainer)
}

// .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
inline bool Req_SKF_ECCExportSessionKey::has_ulalgid() const {
  return this != internal_default_instance() && ulalgid_ != nullptr;
}
inline void Req_SKF_ECCExportSessionKey::clear_ulalgid() {
  if (GetArenaNoVirtual() == nullptr && ulalgid_ != nullptr) {
    delete ulalgid_;
  }
  ulalgid_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ECCExportSessionKey::ulalgid() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulalgid_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ECCExportSessionKey.ulAlgID)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ECCExportSessionKey::release_ulalgid() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ECCExportSessionKey.ulAlgID)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulalgid_;
  ulalgid_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ECCExportSessionKey::mutable_ulalgid() {
  
  if (ulalgid_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulalgid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ECCExportSessionKey.ulAlgID)
  return ulalgid_;
}
inline void Req_SKF_ECCExportSessionKey::set_allocated_ulalgid(::com::westone::skf::WST_PROTO_UINT32* ulalgid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulalgid_;
  }
  if (ulalgid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulalgid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulalgid, submessage_arena);
    }
    
  } else {
    
  }
  ulalgid_ = ulalgid;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ECCExportSessionKey.ulAlgID)
}

// .com.westone.skf.SKF_ECCPUBLICKEYBLOB pPubKey = 3;
inline bool Req_SKF_ECCExportSessionKey::has_ppubkey() const {
  return this != internal_default_instance() && ppubkey_ != nullptr;
}
inline void Req_SKF_ECCExportSessionKey::clear_ppubkey() {
  if (GetArenaNoVirtual() == nullptr && ppubkey_ != nullptr) {
    delete ppubkey_;
  }
  ppubkey_ = nullptr;
}
inline const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& Req_SKF_ECCExportSessionKey::ppubkey() const {
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* p = ppubkey_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ECCExportSessionKey.pPubKey)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      &::com::westone::skf::_SKF_ECCPUBLICKEYBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Req_SKF_ECCExportSessionKey::release_ppubkey() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ECCExportSessionKey.pPubKey)
  
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* temp = ppubkey_;
  ppubkey_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Req_SKF_ECCExportSessionKey::mutable_ppubkey() {
  
  if (ppubkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ECCPUBLICKEYBLOB>(GetArenaNoVirtual());
    ppubkey_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ECCExportSessionKey.pPubKey)
  return ppubkey_;
}
inline void Req_SKF_ECCExportSessionKey::set_allocated_ppubkey(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* ppubkey) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ppubkey_;
  }
  if (ppubkey) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ppubkey = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ppubkey, submessage_arena);
    }
    
  } else {
    
  }
  ppubkey_ = ppubkey;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ECCExportSessionKey.pPubKey)
}

// .com.westone.skf.SKF_ECCCIPHERBLOB pData = 4;
inline bool Req_SKF_ECCExportSessionKey::has_pdata() const {
  return this != internal_default_instance() && pdata_ != nullptr;
}
inline void Req_SKF_ECCExportSessionKey::clear_pdata() {
  if (GetArenaNoVirtual() == nullptr && pdata_ != nullptr) {
    delete pdata_;
  }
  pdata_ = nullptr;
}
inline const ::com::westone::skf::SKF_ECCCIPHERBLOB& Req_SKF_ECCExportSessionKey::pdata() const {
  const ::com::westone::skf::SKF_ECCCIPHERBLOB* p = pdata_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ECCExportSessionKey.pData)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ECCCIPHERBLOB*>(
      &::com::westone::skf::_SKF_ECCCIPHERBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ECCCIPHERBLOB* Req_SKF_ECCExportSessionKey::release_pdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ECCExportSessionKey.pData)
  
  ::com::westone::skf::SKF_ECCCIPHERBLOB* temp = pdata_;
  pdata_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ECCCIPHERBLOB* Req_SKF_ECCExportSessionKey::mutable_pdata() {
  
  if (pdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ECCCIPHERBLOB>(GetArenaNoVirtual());
    pdata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ECCExportSessionKey.pData)
  return pdata_;
}
inline void Req_SKF_ECCExportSessionKey::set_allocated_pdata(::com::westone::skf::SKF_ECCCIPHERBLOB* pdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pdata_;
  }
  if (pdata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pdata, submessage_arena);
    }
    
  } else {
    
  }
  pdata_ = pdata;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ECCExportSessionKey.pData)
}

// .com.westone.skf.WST_PROTO_UINT32 phSessionKey = 5;
inline bool Req_SKF_ECCExportSessionKey::has_phsessionkey() const {
  return this != internal_default_instance() && phsessionkey_ != nullptr;
}
inline void Req_SKF_ECCExportSessionKey::clear_phsessionkey() {
  if (GetArenaNoVirtual() == nullptr && phsessionkey_ != nullptr) {
    delete phsessionkey_;
  }
  phsessionkey_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ECCExportSessionKey::phsessionkey() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = phsessionkey_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ECCExportSessionKey.phSessionKey)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ECCExportSessionKey::release_phsessionkey() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ECCExportSessionKey.phSessionKey)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = phsessionkey_;
  phsessionkey_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ECCExportSessionKey::mutable_phsessionkey() {
  
  if (phsessionkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    phsessionkey_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ECCExportSessionKey.phSessionKey)
  return phsessionkey_;
}
inline void Req_SKF_ECCExportSessionKey::set_allocated_phsessionkey(::com::westone::skf::WST_PROTO_UINT32* phsessionkey) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete phsessionkey_;
  }
  if (phsessionkey) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phsessionkey = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phsessionkey, submessage_arena);
    }
    
  } else {
    
  }
  phsessionkey_ = phsessionkey;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ECCExportSessionKey.phSessionKey)
}

// -------------------------------------------------------------------

// Rsp_SKF_ECCExportSessionKey

// .com.westone.skf.SKF_ECCCIPHERBLOB pData = 1;
inline bool Rsp_SKF_ECCExportSessionKey::has_pdata() const {
  return this != internal_default_instance() && pdata_ != nullptr;
}
inline void Rsp_SKF_ECCExportSessionKey::clear_pdata() {
  if (GetArenaNoVirtual() == nullptr && pdata_ != nullptr) {
    delete pdata_;
  }
  pdata_ = nullptr;
}
inline const ::com::westone::skf::SKF_ECCCIPHERBLOB& Rsp_SKF_ECCExportSessionKey::pdata() const {
  const ::com::westone::skf::SKF_ECCCIPHERBLOB* p = pdata_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_ECCExportSessionKey.pData)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ECCCIPHERBLOB*>(
      &::com::westone::skf::_SKF_ECCCIPHERBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ECCCIPHERBLOB* Rsp_SKF_ECCExportSessionKey::release_pdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_ECCExportSessionKey.pData)
  
  ::com::westone::skf::SKF_ECCCIPHERBLOB* temp = pdata_;
  pdata_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ECCCIPHERBLOB* Rsp_SKF_ECCExportSessionKey::mutable_pdata() {
  
  if (pdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ECCCIPHERBLOB>(GetArenaNoVirtual());
    pdata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_ECCExportSessionKey.pData)
  return pdata_;
}
inline void Rsp_SKF_ECCExportSessionKey::set_allocated_pdata(::com::westone::skf::SKF_ECCCIPHERBLOB* pdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pdata_;
  }
  if (pdata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pdata, submessage_arena);
    }
    
  } else {
    
  }
  pdata_ = pdata;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_ECCExportSessionKey.pData)
}

// .com.westone.skf.WST_PROTO_UINT32 phSessionKey = 2;
inline bool Rsp_SKF_ECCExportSessionKey::has_phsessionkey() const {
  return this != internal_default_instance() && phsessionkey_ != nullptr;
}
inline void Rsp_SKF_ECCExportSessionKey::clear_phsessionkey() {
  if (GetArenaNoVirtual() == nullptr && phsessionkey_ != nullptr) {
    delete phsessionkey_;
  }
  phsessionkey_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_ECCExportSessionKey::phsessionkey() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = phsessionkey_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_ECCExportSessionKey.phSessionKey)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_ECCExportSessionKey::release_phsessionkey() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_ECCExportSessionKey.phSessionKey)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = phsessionkey_;
  phsessionkey_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_ECCExportSessionKey::mutable_phsessionkey() {
  
  if (phsessionkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    phsessionkey_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_ECCExportSessionKey.phSessionKey)
  return phsessionkey_;
}
inline void Rsp_SKF_ECCExportSessionKey::set_allocated_phsessionkey(::com::westone::skf::WST_PROTO_UINT32* phsessionkey) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete phsessionkey_;
  }
  if (phsessionkey) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phsessionkey = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phsessionkey, submessage_arena);
    }
    
  } else {
    
  }
  phsessionkey_ = phsessionkey;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_ECCExportSessionKey.phSessionKey)
}

// -------------------------------------------------------------------

// Req_SKF_ExtECCEncrypt

// .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
inline bool Req_SKF_ExtECCEncrypt::has_hdev() const {
  return this != internal_default_instance() && hdev_ != nullptr;
}
inline void Req_SKF_ExtECCEncrypt::clear_hdev() {
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ExtECCEncrypt::hdev() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hdev_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtECCEncrypt.hDev)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExtECCEncrypt::release_hdev() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtECCEncrypt.hDev)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hdev_;
  hdev_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExtECCEncrypt::mutable_hdev() {
  
  if (hdev_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hdev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtECCEncrypt.hDev)
  return hdev_;
}
inline void Req_SKF_ExtECCEncrypt::set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hdev_;
  }
  if (hdev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hdev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdev, submessage_arena);
    }
    
  } else {
    
  }
  hdev_ = hdev;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtECCEncrypt.hDev)
}

// .com.westone.skf.SKF_ECCPUBLICKEYBLOB pECCPubKeyBlob = 2;
inline bool Req_SKF_ExtECCEncrypt::has_peccpubkeyblob() const {
  return this != internal_default_instance() && peccpubkeyblob_ != nullptr;
}
inline void Req_SKF_ExtECCEncrypt::clear_peccpubkeyblob() {
  if (GetArenaNoVirtual() == nullptr && peccpubkeyblob_ != nullptr) {
    delete peccpubkeyblob_;
  }
  peccpubkeyblob_ = nullptr;
}
inline const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& Req_SKF_ExtECCEncrypt::peccpubkeyblob() const {
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* p = peccpubkeyblob_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtECCEncrypt.pECCPubKeyBlob)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      &::com::westone::skf::_SKF_ECCPUBLICKEYBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Req_SKF_ExtECCEncrypt::release_peccpubkeyblob() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtECCEncrypt.pECCPubKeyBlob)
  
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* temp = peccpubkeyblob_;
  peccpubkeyblob_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Req_SKF_ExtECCEncrypt::mutable_peccpubkeyblob() {
  
  if (peccpubkeyblob_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ECCPUBLICKEYBLOB>(GetArenaNoVirtual());
    peccpubkeyblob_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtECCEncrypt.pECCPubKeyBlob)
  return peccpubkeyblob_;
}
inline void Req_SKF_ExtECCEncrypt::set_allocated_peccpubkeyblob(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* peccpubkeyblob) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete peccpubkeyblob_;
  }
  if (peccpubkeyblob) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      peccpubkeyblob = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, peccpubkeyblob, submessage_arena);
    }
    
  } else {
    
  }
  peccpubkeyblob_ = peccpubkeyblob;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtECCEncrypt.pECCPubKeyBlob)
}

// bytes pbPlainText = 3;
inline void Req_SKF_ExtECCEncrypt::clear_pbplaintext() {
  pbplaintext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_ExtECCEncrypt::pbplaintext() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtECCEncrypt.pbPlainText)
  return pbplaintext_.GetNoArena();
}
inline void Req_SKF_ExtECCEncrypt::set_pbplaintext(const ::std::string& value) {
  
  pbplaintext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_ExtECCEncrypt.pbPlainText)
}
#if LANG_CXX11
inline void Req_SKF_ExtECCEncrypt::set_pbplaintext(::std::string&& value) {
  
  pbplaintext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_ExtECCEncrypt.pbPlainText)
}
#endif
inline void Req_SKF_ExtECCEncrypt::set_pbplaintext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbplaintext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_ExtECCEncrypt.pbPlainText)
}
inline void Req_SKF_ExtECCEncrypt::set_pbplaintext(const void* value, size_t size) {
  
  pbplaintext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_ExtECCEncrypt.pbPlainText)
}
inline ::std::string* Req_SKF_ExtECCEncrypt::mutable_pbplaintext() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtECCEncrypt.pbPlainText)
  return pbplaintext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_ExtECCEncrypt::release_pbplaintext() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtECCEncrypt.pbPlainText)
  
  return pbplaintext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_ExtECCEncrypt::set_allocated_pbplaintext(::std::string* pbplaintext) {
  if (pbplaintext != nullptr) {
    
  } else {
    
  }
  pbplaintext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbplaintext);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtECCEncrypt.pbPlainText)
}

// .com.westone.skf.WST_PROTO_UINT32 ulPlainTextLen = 4;
inline bool Req_SKF_ExtECCEncrypt::has_ulplaintextlen() const {
  return this != internal_default_instance() && ulplaintextlen_ != nullptr;
}
inline void Req_SKF_ExtECCEncrypt::clear_ulplaintextlen() {
  if (GetArenaNoVirtual() == nullptr && ulplaintextlen_ != nullptr) {
    delete ulplaintextlen_;
  }
  ulplaintextlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ExtECCEncrypt::ulplaintextlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulplaintextlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtECCEncrypt.ulPlainTextLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExtECCEncrypt::release_ulplaintextlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtECCEncrypt.ulPlainTextLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulplaintextlen_;
  ulplaintextlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExtECCEncrypt::mutable_ulplaintextlen() {
  
  if (ulplaintextlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulplaintextlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtECCEncrypt.ulPlainTextLen)
  return ulplaintextlen_;
}
inline void Req_SKF_ExtECCEncrypt::set_allocated_ulplaintextlen(::com::westone::skf::WST_PROTO_UINT32* ulplaintextlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulplaintextlen_;
  }
  if (ulplaintextlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulplaintextlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulplaintextlen, submessage_arena);
    }
    
  } else {
    
  }
  ulplaintextlen_ = ulplaintextlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtECCEncrypt.ulPlainTextLen)
}

// .com.westone.skf.SKF_ECCCIPHERBLOB pbCipherText = 5;
inline bool Req_SKF_ExtECCEncrypt::has_pbciphertext() const {
  return this != internal_default_instance() && pbciphertext_ != nullptr;
}
inline void Req_SKF_ExtECCEncrypt::clear_pbciphertext() {
  if (GetArenaNoVirtual() == nullptr && pbciphertext_ != nullptr) {
    delete pbciphertext_;
  }
  pbciphertext_ = nullptr;
}
inline const ::com::westone::skf::SKF_ECCCIPHERBLOB& Req_SKF_ExtECCEncrypt::pbciphertext() const {
  const ::com::westone::skf::SKF_ECCCIPHERBLOB* p = pbciphertext_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtECCEncrypt.pbCipherText)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ECCCIPHERBLOB*>(
      &::com::westone::skf::_SKF_ECCCIPHERBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ECCCIPHERBLOB* Req_SKF_ExtECCEncrypt::release_pbciphertext() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtECCEncrypt.pbCipherText)
  
  ::com::westone::skf::SKF_ECCCIPHERBLOB* temp = pbciphertext_;
  pbciphertext_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ECCCIPHERBLOB* Req_SKF_ExtECCEncrypt::mutable_pbciphertext() {
  
  if (pbciphertext_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ECCCIPHERBLOB>(GetArenaNoVirtual());
    pbciphertext_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtECCEncrypt.pbCipherText)
  return pbciphertext_;
}
inline void Req_SKF_ExtECCEncrypt::set_allocated_pbciphertext(::com::westone::skf::SKF_ECCCIPHERBLOB* pbciphertext) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pbciphertext_;
  }
  if (pbciphertext) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pbciphertext = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pbciphertext, submessage_arena);
    }
    
  } else {
    
  }
  pbciphertext_ = pbciphertext;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtECCEncrypt.pbCipherText)
}

// -------------------------------------------------------------------

// Rsp_SKF_ExtECCEncrypt

// .com.westone.skf.SKF_ECCCIPHERBLOB pbCipherText = 1;
inline bool Rsp_SKF_ExtECCEncrypt::has_pbciphertext() const {
  return this != internal_default_instance() && pbciphertext_ != nullptr;
}
inline void Rsp_SKF_ExtECCEncrypt::clear_pbciphertext() {
  if (GetArenaNoVirtual() == nullptr && pbciphertext_ != nullptr) {
    delete pbciphertext_;
  }
  pbciphertext_ = nullptr;
}
inline const ::com::westone::skf::SKF_ECCCIPHERBLOB& Rsp_SKF_ExtECCEncrypt::pbciphertext() const {
  const ::com::westone::skf::SKF_ECCCIPHERBLOB* p = pbciphertext_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_ExtECCEncrypt.pbCipherText)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ECCCIPHERBLOB*>(
      &::com::westone::skf::_SKF_ECCCIPHERBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ECCCIPHERBLOB* Rsp_SKF_ExtECCEncrypt::release_pbciphertext() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_ExtECCEncrypt.pbCipherText)
  
  ::com::westone::skf::SKF_ECCCIPHERBLOB* temp = pbciphertext_;
  pbciphertext_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ECCCIPHERBLOB* Rsp_SKF_ExtECCEncrypt::mutable_pbciphertext() {
  
  if (pbciphertext_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ECCCIPHERBLOB>(GetArenaNoVirtual());
    pbciphertext_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_ExtECCEncrypt.pbCipherText)
  return pbciphertext_;
}
inline void Rsp_SKF_ExtECCEncrypt::set_allocated_pbciphertext(::com::westone::skf::SKF_ECCCIPHERBLOB* pbciphertext) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pbciphertext_;
  }
  if (pbciphertext) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pbciphertext = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pbciphertext, submessage_arena);
    }
    
  } else {
    
  }
  pbciphertext_ = pbciphertext;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_ExtECCEncrypt.pbCipherText)
}

// -------------------------------------------------------------------

// Req_SKF_ExtECCDecrypt

// .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
inline bool Req_SKF_ExtECCDecrypt::has_hdev() const {
  return this != internal_default_instance() && hdev_ != nullptr;
}
inline void Req_SKF_ExtECCDecrypt::clear_hdev() {
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ExtECCDecrypt::hdev() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hdev_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtECCDecrypt.hDev)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExtECCDecrypt::release_hdev() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtECCDecrypt.hDev)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hdev_;
  hdev_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExtECCDecrypt::mutable_hdev() {
  
  if (hdev_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hdev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtECCDecrypt.hDev)
  return hdev_;
}
inline void Req_SKF_ExtECCDecrypt::set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hdev_;
  }
  if (hdev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hdev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdev, submessage_arena);
    }
    
  } else {
    
  }
  hdev_ = hdev;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtECCDecrypt.hDev)
}

// .com.westone.skf.SKF_ECCPRIVATEKEYBLOB pECCPriKeyBlob = 2;
inline bool Req_SKF_ExtECCDecrypt::has_peccprikeyblob() const {
  return this != internal_default_instance() && peccprikeyblob_ != nullptr;
}
inline void Req_SKF_ExtECCDecrypt::clear_peccprikeyblob() {
  if (GetArenaNoVirtual() == nullptr && peccprikeyblob_ != nullptr) {
    delete peccprikeyblob_;
  }
  peccprikeyblob_ = nullptr;
}
inline const ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB& Req_SKF_ExtECCDecrypt::peccprikeyblob() const {
  const ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB* p = peccprikeyblob_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtECCDecrypt.pECCPriKeyBlob)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB*>(
      &::com::westone::skf::_SKF_ECCPRIVATEKEYBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB* Req_SKF_ExtECCDecrypt::release_peccprikeyblob() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtECCDecrypt.pECCPriKeyBlob)
  
  ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB* temp = peccprikeyblob_;
  peccprikeyblob_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB* Req_SKF_ExtECCDecrypt::mutable_peccprikeyblob() {
  
  if (peccprikeyblob_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ECCPRIVATEKEYBLOB>(GetArenaNoVirtual());
    peccprikeyblob_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtECCDecrypt.pECCPriKeyBlob)
  return peccprikeyblob_;
}
inline void Req_SKF_ExtECCDecrypt::set_allocated_peccprikeyblob(::com::westone::skf::SKF_ECCPRIVATEKEYBLOB* peccprikeyblob) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete peccprikeyblob_;
  }
  if (peccprikeyblob) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      peccprikeyblob = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, peccprikeyblob, submessage_arena);
    }
    
  } else {
    
  }
  peccprikeyblob_ = peccprikeyblob;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtECCDecrypt.pECCPriKeyBlob)
}

// .com.westone.skf.SKF_ECCCIPHERBLOB pbCipherText = 3;
inline bool Req_SKF_ExtECCDecrypt::has_pbciphertext() const {
  return this != internal_default_instance() && pbciphertext_ != nullptr;
}
inline void Req_SKF_ExtECCDecrypt::clear_pbciphertext() {
  if (GetArenaNoVirtual() == nullptr && pbciphertext_ != nullptr) {
    delete pbciphertext_;
  }
  pbciphertext_ = nullptr;
}
inline const ::com::westone::skf::SKF_ECCCIPHERBLOB& Req_SKF_ExtECCDecrypt::pbciphertext() const {
  const ::com::westone::skf::SKF_ECCCIPHERBLOB* p = pbciphertext_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtECCDecrypt.pbCipherText)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ECCCIPHERBLOB*>(
      &::com::westone::skf::_SKF_ECCCIPHERBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ECCCIPHERBLOB* Req_SKF_ExtECCDecrypt::release_pbciphertext() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtECCDecrypt.pbCipherText)
  
  ::com::westone::skf::SKF_ECCCIPHERBLOB* temp = pbciphertext_;
  pbciphertext_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ECCCIPHERBLOB* Req_SKF_ExtECCDecrypt::mutable_pbciphertext() {
  
  if (pbciphertext_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ECCCIPHERBLOB>(GetArenaNoVirtual());
    pbciphertext_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtECCDecrypt.pbCipherText)
  return pbciphertext_;
}
inline void Req_SKF_ExtECCDecrypt::set_allocated_pbciphertext(::com::westone::skf::SKF_ECCCIPHERBLOB* pbciphertext) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pbciphertext_;
  }
  if (pbciphertext) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pbciphertext = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pbciphertext, submessage_arena);
    }
    
  } else {
    
  }
  pbciphertext_ = pbciphertext;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtECCDecrypt.pbCipherText)
}

// bytes pbPlainText = 4;
inline void Req_SKF_ExtECCDecrypt::clear_pbplaintext() {
  pbplaintext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_ExtECCDecrypt::pbplaintext() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtECCDecrypt.pbPlainText)
  return pbplaintext_.GetNoArena();
}
inline void Req_SKF_ExtECCDecrypt::set_pbplaintext(const ::std::string& value) {
  
  pbplaintext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_ExtECCDecrypt.pbPlainText)
}
#if LANG_CXX11
inline void Req_SKF_ExtECCDecrypt::set_pbplaintext(::std::string&& value) {
  
  pbplaintext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_ExtECCDecrypt.pbPlainText)
}
#endif
inline void Req_SKF_ExtECCDecrypt::set_pbplaintext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbplaintext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_ExtECCDecrypt.pbPlainText)
}
inline void Req_SKF_ExtECCDecrypt::set_pbplaintext(const void* value, size_t size) {
  
  pbplaintext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_ExtECCDecrypt.pbPlainText)
}
inline ::std::string* Req_SKF_ExtECCDecrypt::mutable_pbplaintext() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtECCDecrypt.pbPlainText)
  return pbplaintext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_ExtECCDecrypt::release_pbplaintext() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtECCDecrypt.pbPlainText)
  
  return pbplaintext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_ExtECCDecrypt::set_allocated_pbplaintext(::std::string* pbplaintext) {
  if (pbplaintext != nullptr) {
    
  } else {
    
  }
  pbplaintext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbplaintext);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtECCDecrypt.pbPlainText)
}

// .com.westone.skf.WST_PROTO_UINT32 pulPlainTextLen = 5;
inline bool Req_SKF_ExtECCDecrypt::has_pulplaintextlen() const {
  return this != internal_default_instance() && pulplaintextlen_ != nullptr;
}
inline void Req_SKF_ExtECCDecrypt::clear_pulplaintextlen() {
  if (GetArenaNoVirtual() == nullptr && pulplaintextlen_ != nullptr) {
    delete pulplaintextlen_;
  }
  pulplaintextlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ExtECCDecrypt::pulplaintextlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulplaintextlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtECCDecrypt.pulPlainTextLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExtECCDecrypt::release_pulplaintextlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtECCDecrypt.pulPlainTextLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulplaintextlen_;
  pulplaintextlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExtECCDecrypt::mutable_pulplaintextlen() {
  
  if (pulplaintextlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulplaintextlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtECCDecrypt.pulPlainTextLen)
  return pulplaintextlen_;
}
inline void Req_SKF_ExtECCDecrypt::set_allocated_pulplaintextlen(::com::westone::skf::WST_PROTO_UINT32* pulplaintextlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulplaintextlen_;
  }
  if (pulplaintextlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulplaintextlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulplaintextlen, submessage_arena);
    }
    
  } else {
    
  }
  pulplaintextlen_ = pulplaintextlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtECCDecrypt.pulPlainTextLen)
}

// -------------------------------------------------------------------

// Rsp_SKF_ExtECCDecrypt

// bytes pbPlainText = 1;
inline void Rsp_SKF_ExtECCDecrypt::clear_pbplaintext() {
  pbplaintext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rsp_SKF_ExtECCDecrypt::pbplaintext() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_ExtECCDecrypt.pbPlainText)
  return pbplaintext_.GetNoArena();
}
inline void Rsp_SKF_ExtECCDecrypt::set_pbplaintext(const ::std::string& value) {
  
  pbplaintext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Rsp_SKF_ExtECCDecrypt.pbPlainText)
}
#if LANG_CXX11
inline void Rsp_SKF_ExtECCDecrypt::set_pbplaintext(::std::string&& value) {
  
  pbplaintext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Rsp_SKF_ExtECCDecrypt.pbPlainText)
}
#endif
inline void Rsp_SKF_ExtECCDecrypt::set_pbplaintext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbplaintext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Rsp_SKF_ExtECCDecrypt.pbPlainText)
}
inline void Rsp_SKF_ExtECCDecrypt::set_pbplaintext(const void* value, size_t size) {
  
  pbplaintext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Rsp_SKF_ExtECCDecrypt.pbPlainText)
}
inline ::std::string* Rsp_SKF_ExtECCDecrypt::mutable_pbplaintext() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_ExtECCDecrypt.pbPlainText)
  return pbplaintext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rsp_SKF_ExtECCDecrypt::release_pbplaintext() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_ExtECCDecrypt.pbPlainText)
  
  return pbplaintext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rsp_SKF_ExtECCDecrypt::set_allocated_pbplaintext(::std::string* pbplaintext) {
  if (pbplaintext != nullptr) {
    
  } else {
    
  }
  pbplaintext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbplaintext);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_ExtECCDecrypt.pbPlainText)
}

// .com.westone.skf.WST_PROTO_UINT32 pulPlainTextLen = 2;
inline bool Rsp_SKF_ExtECCDecrypt::has_pulplaintextlen() const {
  return this != internal_default_instance() && pulplaintextlen_ != nullptr;
}
inline void Rsp_SKF_ExtECCDecrypt::clear_pulplaintextlen() {
  if (GetArenaNoVirtual() == nullptr && pulplaintextlen_ != nullptr) {
    delete pulplaintextlen_;
  }
  pulplaintextlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_ExtECCDecrypt::pulplaintextlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulplaintextlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_ExtECCDecrypt.pulPlainTextLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_ExtECCDecrypt::release_pulplaintextlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_ExtECCDecrypt.pulPlainTextLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulplaintextlen_;
  pulplaintextlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_ExtECCDecrypt::mutable_pulplaintextlen() {
  
  if (pulplaintextlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulplaintextlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_ExtECCDecrypt.pulPlainTextLen)
  return pulplaintextlen_;
}
inline void Rsp_SKF_ExtECCDecrypt::set_allocated_pulplaintextlen(::com::westone::skf::WST_PROTO_UINT32* pulplaintextlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulplaintextlen_;
  }
  if (pulplaintextlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulplaintextlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulplaintextlen, submessage_arena);
    }
    
  } else {
    
  }
  pulplaintextlen_ = pulplaintextlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_ExtECCDecrypt.pulPlainTextLen)
}

// -------------------------------------------------------------------

// Req_SKF_ExtECCSign

// .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
inline bool Req_SKF_ExtECCSign::has_hdev() const {
  return this != internal_default_instance() && hdev_ != nullptr;
}
inline void Req_SKF_ExtECCSign::clear_hdev() {
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ExtECCSign::hdev() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hdev_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtECCSign.hDev)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExtECCSign::release_hdev() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtECCSign.hDev)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hdev_;
  hdev_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExtECCSign::mutable_hdev() {
  
  if (hdev_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hdev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtECCSign.hDev)
  return hdev_;
}
inline void Req_SKF_ExtECCSign::set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hdev_;
  }
  if (hdev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hdev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdev, submessage_arena);
    }
    
  } else {
    
  }
  hdev_ = hdev;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtECCSign.hDev)
}

// .com.westone.skf.SKF_ECCPRIVATEKEYBLOB pECCPriKeyBlob = 2;
inline bool Req_SKF_ExtECCSign::has_peccprikeyblob() const {
  return this != internal_default_instance() && peccprikeyblob_ != nullptr;
}
inline void Req_SKF_ExtECCSign::clear_peccprikeyblob() {
  if (GetArenaNoVirtual() == nullptr && peccprikeyblob_ != nullptr) {
    delete peccprikeyblob_;
  }
  peccprikeyblob_ = nullptr;
}
inline const ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB& Req_SKF_ExtECCSign::peccprikeyblob() const {
  const ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB* p = peccprikeyblob_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtECCSign.pECCPriKeyBlob)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB*>(
      &::com::westone::skf::_SKF_ECCPRIVATEKEYBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB* Req_SKF_ExtECCSign::release_peccprikeyblob() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtECCSign.pECCPriKeyBlob)
  
  ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB* temp = peccprikeyblob_;
  peccprikeyblob_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ECCPRIVATEKEYBLOB* Req_SKF_ExtECCSign::mutable_peccprikeyblob() {
  
  if (peccprikeyblob_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ECCPRIVATEKEYBLOB>(GetArenaNoVirtual());
    peccprikeyblob_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtECCSign.pECCPriKeyBlob)
  return peccprikeyblob_;
}
inline void Req_SKF_ExtECCSign::set_allocated_peccprikeyblob(::com::westone::skf::SKF_ECCPRIVATEKEYBLOB* peccprikeyblob) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete peccprikeyblob_;
  }
  if (peccprikeyblob) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      peccprikeyblob = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, peccprikeyblob, submessage_arena);
    }
    
  } else {
    
  }
  peccprikeyblob_ = peccprikeyblob;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtECCSign.pECCPriKeyBlob)
}

// bytes pbData = 3;
inline void Req_SKF_ExtECCSign::clear_pbdata() {
  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_ExtECCSign::pbdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtECCSign.pbData)
  return pbdata_.GetNoArena();
}
inline void Req_SKF_ExtECCSign::set_pbdata(const ::std::string& value) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_ExtECCSign.pbData)
}
#if LANG_CXX11
inline void Req_SKF_ExtECCSign::set_pbdata(::std::string&& value) {
  
  pbdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_ExtECCSign.pbData)
}
#endif
inline void Req_SKF_ExtECCSign::set_pbdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_ExtECCSign.pbData)
}
inline void Req_SKF_ExtECCSign::set_pbdata(const void* value, size_t size) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_ExtECCSign.pbData)
}
inline ::std::string* Req_SKF_ExtECCSign::mutable_pbdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtECCSign.pbData)
  return pbdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_ExtECCSign::release_pbdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtECCSign.pbData)
  
  return pbdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_ExtECCSign::set_allocated_pbdata(::std::string* pbdata) {
  if (pbdata != nullptr) {
    
  } else {
    
  }
  pbdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtECCSign.pbData)
}

// .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 4;
inline bool Req_SKF_ExtECCSign::has_uldatalen() const {
  return this != internal_default_instance() && uldatalen_ != nullptr;
}
inline void Req_SKF_ExtECCSign::clear_uldatalen() {
  if (GetArenaNoVirtual() == nullptr && uldatalen_ != nullptr) {
    delete uldatalen_;
  }
  uldatalen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ExtECCSign::uldatalen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = uldatalen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtECCSign.ulDataLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExtECCSign::release_uldatalen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtECCSign.ulDataLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = uldatalen_;
  uldatalen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExtECCSign::mutable_uldatalen() {
  
  if (uldatalen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    uldatalen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtECCSign.ulDataLen)
  return uldatalen_;
}
inline void Req_SKF_ExtECCSign::set_allocated_uldatalen(::com::westone::skf::WST_PROTO_UINT32* uldatalen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete uldatalen_;
  }
  if (uldatalen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uldatalen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uldatalen, submessage_arena);
    }
    
  } else {
    
  }
  uldatalen_ = uldatalen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtECCSign.ulDataLen)
}

// .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 5;
inline bool Req_SKF_ExtECCSign::has_psignature() const {
  return this != internal_default_instance() && psignature_ != nullptr;
}
inline void Req_SKF_ExtECCSign::clear_psignature() {
  if (GetArenaNoVirtual() == nullptr && psignature_ != nullptr) {
    delete psignature_;
  }
  psignature_ = nullptr;
}
inline const ::com::westone::skf::SKF_ECCSIGNATUREBLOB& Req_SKF_ExtECCSign::psignature() const {
  const ::com::westone::skf::SKF_ECCSIGNATUREBLOB* p = psignature_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtECCSign.pSignature)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ECCSIGNATUREBLOB*>(
      &::com::westone::skf::_SKF_ECCSIGNATUREBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ECCSIGNATUREBLOB* Req_SKF_ExtECCSign::release_psignature() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtECCSign.pSignature)
  
  ::com::westone::skf::SKF_ECCSIGNATUREBLOB* temp = psignature_;
  psignature_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ECCSIGNATUREBLOB* Req_SKF_ExtECCSign::mutable_psignature() {
  
  if (psignature_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ECCSIGNATUREBLOB>(GetArenaNoVirtual());
    psignature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtECCSign.pSignature)
  return psignature_;
}
inline void Req_SKF_ExtECCSign::set_allocated_psignature(::com::westone::skf::SKF_ECCSIGNATUREBLOB* psignature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete psignature_;
  }
  if (psignature) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      psignature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, psignature, submessage_arena);
    }
    
  } else {
    
  }
  psignature_ = psignature;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtECCSign.pSignature)
}

// -------------------------------------------------------------------

// Rsp_SKF_ExtECCSign

// .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 1;
inline bool Rsp_SKF_ExtECCSign::has_psignature() const {
  return this != internal_default_instance() && psignature_ != nullptr;
}
inline void Rsp_SKF_ExtECCSign::clear_psignature() {
  if (GetArenaNoVirtual() == nullptr && psignature_ != nullptr) {
    delete psignature_;
  }
  psignature_ = nullptr;
}
inline const ::com::westone::skf::SKF_ECCSIGNATUREBLOB& Rsp_SKF_ExtECCSign::psignature() const {
  const ::com::westone::skf::SKF_ECCSIGNATUREBLOB* p = psignature_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_ExtECCSign.pSignature)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ECCSIGNATUREBLOB*>(
      &::com::westone::skf::_SKF_ECCSIGNATUREBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ECCSIGNATUREBLOB* Rsp_SKF_ExtECCSign::release_psignature() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_ExtECCSign.pSignature)
  
  ::com::westone::skf::SKF_ECCSIGNATUREBLOB* temp = psignature_;
  psignature_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ECCSIGNATUREBLOB* Rsp_SKF_ExtECCSign::mutable_psignature() {
  
  if (psignature_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ECCSIGNATUREBLOB>(GetArenaNoVirtual());
    psignature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_ExtECCSign.pSignature)
  return psignature_;
}
inline void Rsp_SKF_ExtECCSign::set_allocated_psignature(::com::westone::skf::SKF_ECCSIGNATUREBLOB* psignature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete psignature_;
  }
  if (psignature) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      psignature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, psignature, submessage_arena);
    }
    
  } else {
    
  }
  psignature_ = psignature;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_ExtECCSign.pSignature)
}

// -------------------------------------------------------------------

// Req_SKF_ExtECCVerify

// .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
inline bool Req_SKF_ExtECCVerify::has_hdev() const {
  return this != internal_default_instance() && hdev_ != nullptr;
}
inline void Req_SKF_ExtECCVerify::clear_hdev() {
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ExtECCVerify::hdev() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hdev_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtECCVerify.hDev)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExtECCVerify::release_hdev() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtECCVerify.hDev)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hdev_;
  hdev_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExtECCVerify::mutable_hdev() {
  
  if (hdev_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hdev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtECCVerify.hDev)
  return hdev_;
}
inline void Req_SKF_ExtECCVerify::set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hdev_;
  }
  if (hdev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hdev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdev, submessage_arena);
    }
    
  } else {
    
  }
  hdev_ = hdev;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtECCVerify.hDev)
}

// .com.westone.skf.SKF_ECCPUBLICKEYBLOB pECCPubKeyBlob = 2;
inline bool Req_SKF_ExtECCVerify::has_peccpubkeyblob() const {
  return this != internal_default_instance() && peccpubkeyblob_ != nullptr;
}
inline void Req_SKF_ExtECCVerify::clear_peccpubkeyblob() {
  if (GetArenaNoVirtual() == nullptr && peccpubkeyblob_ != nullptr) {
    delete peccpubkeyblob_;
  }
  peccpubkeyblob_ = nullptr;
}
inline const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& Req_SKF_ExtECCVerify::peccpubkeyblob() const {
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* p = peccpubkeyblob_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtECCVerify.pECCPubKeyBlob)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      &::com::westone::skf::_SKF_ECCPUBLICKEYBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Req_SKF_ExtECCVerify::release_peccpubkeyblob() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtECCVerify.pECCPubKeyBlob)
  
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* temp = peccpubkeyblob_;
  peccpubkeyblob_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Req_SKF_ExtECCVerify::mutable_peccpubkeyblob() {
  
  if (peccpubkeyblob_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ECCPUBLICKEYBLOB>(GetArenaNoVirtual());
    peccpubkeyblob_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtECCVerify.pECCPubKeyBlob)
  return peccpubkeyblob_;
}
inline void Req_SKF_ExtECCVerify::set_allocated_peccpubkeyblob(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* peccpubkeyblob) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete peccpubkeyblob_;
  }
  if (peccpubkeyblob) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      peccpubkeyblob = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, peccpubkeyblob, submessage_arena);
    }
    
  } else {
    
  }
  peccpubkeyblob_ = peccpubkeyblob;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtECCVerify.pECCPubKeyBlob)
}

// bytes pbData = 3;
inline void Req_SKF_ExtECCVerify::clear_pbdata() {
  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_ExtECCVerify::pbdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtECCVerify.pbData)
  return pbdata_.GetNoArena();
}
inline void Req_SKF_ExtECCVerify::set_pbdata(const ::std::string& value) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_ExtECCVerify.pbData)
}
#if LANG_CXX11
inline void Req_SKF_ExtECCVerify::set_pbdata(::std::string&& value) {
  
  pbdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_ExtECCVerify.pbData)
}
#endif
inline void Req_SKF_ExtECCVerify::set_pbdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_ExtECCVerify.pbData)
}
inline void Req_SKF_ExtECCVerify::set_pbdata(const void* value, size_t size) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_ExtECCVerify.pbData)
}
inline ::std::string* Req_SKF_ExtECCVerify::mutable_pbdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtECCVerify.pbData)
  return pbdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_ExtECCVerify::release_pbdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtECCVerify.pbData)
  
  return pbdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_ExtECCVerify::set_allocated_pbdata(::std::string* pbdata) {
  if (pbdata != nullptr) {
    
  } else {
    
  }
  pbdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtECCVerify.pbData)
}

// .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 4;
inline bool Req_SKF_ExtECCVerify::has_uldatalen() const {
  return this != internal_default_instance() && uldatalen_ != nullptr;
}
inline void Req_SKF_ExtECCVerify::clear_uldatalen() {
  if (GetArenaNoVirtual() == nullptr && uldatalen_ != nullptr) {
    delete uldatalen_;
  }
  uldatalen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ExtECCVerify::uldatalen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = uldatalen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtECCVerify.ulDataLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExtECCVerify::release_uldatalen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtECCVerify.ulDataLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = uldatalen_;
  uldatalen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExtECCVerify::mutable_uldatalen() {
  
  if (uldatalen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    uldatalen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtECCVerify.ulDataLen)
  return uldatalen_;
}
inline void Req_SKF_ExtECCVerify::set_allocated_uldatalen(::com::westone::skf::WST_PROTO_UINT32* uldatalen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete uldatalen_;
  }
  if (uldatalen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uldatalen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uldatalen, submessage_arena);
    }
    
  } else {
    
  }
  uldatalen_ = uldatalen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtECCVerify.ulDataLen)
}

// .com.westone.skf.SKF_ECCSIGNATUREBLOB pSignature = 5;
inline bool Req_SKF_ExtECCVerify::has_psignature() const {
  return this != internal_default_instance() && psignature_ != nullptr;
}
inline void Req_SKF_ExtECCVerify::clear_psignature() {
  if (GetArenaNoVirtual() == nullptr && psignature_ != nullptr) {
    delete psignature_;
  }
  psignature_ = nullptr;
}
inline const ::com::westone::skf::SKF_ECCSIGNATUREBLOB& Req_SKF_ExtECCVerify::psignature() const {
  const ::com::westone::skf::SKF_ECCSIGNATUREBLOB* p = psignature_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExtECCVerify.pSignature)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ECCSIGNATUREBLOB*>(
      &::com::westone::skf::_SKF_ECCSIGNATUREBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ECCSIGNATUREBLOB* Req_SKF_ExtECCVerify::release_psignature() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExtECCVerify.pSignature)
  
  ::com::westone::skf::SKF_ECCSIGNATUREBLOB* temp = psignature_;
  psignature_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ECCSIGNATUREBLOB* Req_SKF_ExtECCVerify::mutable_psignature() {
  
  if (psignature_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ECCSIGNATUREBLOB>(GetArenaNoVirtual());
    psignature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExtECCVerify.pSignature)
  return psignature_;
}
inline void Req_SKF_ExtECCVerify::set_allocated_psignature(::com::westone::skf::SKF_ECCSIGNATUREBLOB* psignature) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete psignature_;
  }
  if (psignature) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      psignature = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, psignature, submessage_arena);
    }
    
  } else {
    
  }
  psignature_ = psignature;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExtECCVerify.pSignature)
}

// -------------------------------------------------------------------

// Rsp_SKF_ExtECCVerify

// -------------------------------------------------------------------

// Req_SKF_GenerateAgreementDataWithECC

// .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
inline bool Req_SKF_GenerateAgreementDataWithECC::has_hcontainer() const {
  return this != internal_default_instance() && hcontainer_ != nullptr;
}
inline void Req_SKF_GenerateAgreementDataWithECC::clear_hcontainer() {
  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GenerateAgreementDataWithECC::hcontainer() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hcontainer_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC.hContainer)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenerateAgreementDataWithECC::release_hcontainer() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC.hContainer)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hcontainer_;
  hcontainer_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenerateAgreementDataWithECC::mutable_hcontainer() {
  
  if (hcontainer_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hcontainer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC.hContainer)
  return hcontainer_;
}
inline void Req_SKF_GenerateAgreementDataWithECC::set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hcontainer_;
  }
  if (hcontainer) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hcontainer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hcontainer, submessage_arena);
    }
    
  } else {
    
  }
  hcontainer_ = hcontainer;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC.hContainer)
}

// .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
inline bool Req_SKF_GenerateAgreementDataWithECC::has_ulalgid() const {
  return this != internal_default_instance() && ulalgid_ != nullptr;
}
inline void Req_SKF_GenerateAgreementDataWithECC::clear_ulalgid() {
  if (GetArenaNoVirtual() == nullptr && ulalgid_ != nullptr) {
    delete ulalgid_;
  }
  ulalgid_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GenerateAgreementDataWithECC::ulalgid() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulalgid_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC.ulAlgID)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenerateAgreementDataWithECC::release_ulalgid() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC.ulAlgID)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulalgid_;
  ulalgid_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenerateAgreementDataWithECC::mutable_ulalgid() {
  
  if (ulalgid_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulalgid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC.ulAlgID)
  return ulalgid_;
}
inline void Req_SKF_GenerateAgreementDataWithECC::set_allocated_ulalgid(::com::westone::skf::WST_PROTO_UINT32* ulalgid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulalgid_;
  }
  if (ulalgid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulalgid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulalgid, submessage_arena);
    }
    
  } else {
    
  }
  ulalgid_ = ulalgid;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC.ulAlgID)
}

// .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 3;
inline bool Req_SKF_GenerateAgreementDataWithECC::has_ptempeccpubkeyblob() const {
  return this != internal_default_instance() && ptempeccpubkeyblob_ != nullptr;
}
inline void Req_SKF_GenerateAgreementDataWithECC::clear_ptempeccpubkeyblob() {
  if (GetArenaNoVirtual() == nullptr && ptempeccpubkeyblob_ != nullptr) {
    delete ptempeccpubkeyblob_;
  }
  ptempeccpubkeyblob_ = nullptr;
}
inline const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& Req_SKF_GenerateAgreementDataWithECC::ptempeccpubkeyblob() const {
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* p = ptempeccpubkeyblob_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC.pTempECCPubKeyBlob)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      &::com::westone::skf::_SKF_ECCPUBLICKEYBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Req_SKF_GenerateAgreementDataWithECC::release_ptempeccpubkeyblob() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC.pTempECCPubKeyBlob)
  
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* temp = ptempeccpubkeyblob_;
  ptempeccpubkeyblob_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Req_SKF_GenerateAgreementDataWithECC::mutable_ptempeccpubkeyblob() {
  
  if (ptempeccpubkeyblob_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ECCPUBLICKEYBLOB>(GetArenaNoVirtual());
    ptempeccpubkeyblob_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC.pTempECCPubKeyBlob)
  return ptempeccpubkeyblob_;
}
inline void Req_SKF_GenerateAgreementDataWithECC::set_allocated_ptempeccpubkeyblob(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* ptempeccpubkeyblob) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ptempeccpubkeyblob_;
  }
  if (ptempeccpubkeyblob) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ptempeccpubkeyblob = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ptempeccpubkeyblob, submessage_arena);
    }
    
  } else {
    
  }
  ptempeccpubkeyblob_ = ptempeccpubkeyblob;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC.pTempECCPubKeyBlob)
}

// bytes pbID = 4;
inline void Req_SKF_GenerateAgreementDataWithECC::clear_pbid() {
  pbid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_GenerateAgreementDataWithECC::pbid() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC.pbID)
  return pbid_.GetNoArena();
}
inline void Req_SKF_GenerateAgreementDataWithECC::set_pbid(const ::std::string& value) {
  
  pbid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC.pbID)
}
#if LANG_CXX11
inline void Req_SKF_GenerateAgreementDataWithECC::set_pbid(::std::string&& value) {
  
  pbid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC.pbID)
}
#endif
inline void Req_SKF_GenerateAgreementDataWithECC::set_pbid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC.pbID)
}
inline void Req_SKF_GenerateAgreementDataWithECC::set_pbid(const void* value, size_t size) {
  
  pbid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC.pbID)
}
inline ::std::string* Req_SKF_GenerateAgreementDataWithECC::mutable_pbid() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC.pbID)
  return pbid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_GenerateAgreementDataWithECC::release_pbid() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC.pbID)
  
  return pbid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_GenerateAgreementDataWithECC::set_allocated_pbid(::std::string* pbid) {
  if (pbid != nullptr) {
    
  } else {
    
  }
  pbid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbid);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC.pbID)
}

// .com.westone.skf.WST_PROTO_UINT32 ulIDLen = 5;
inline bool Req_SKF_GenerateAgreementDataWithECC::has_ulidlen() const {
  return this != internal_default_instance() && ulidlen_ != nullptr;
}
inline void Req_SKF_GenerateAgreementDataWithECC::clear_ulidlen() {
  if (GetArenaNoVirtual() == nullptr && ulidlen_ != nullptr) {
    delete ulidlen_;
  }
  ulidlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GenerateAgreementDataWithECC::ulidlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulidlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC.ulIDLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenerateAgreementDataWithECC::release_ulidlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC.ulIDLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulidlen_;
  ulidlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenerateAgreementDataWithECC::mutable_ulidlen() {
  
  if (ulidlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulidlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC.ulIDLen)
  return ulidlen_;
}
inline void Req_SKF_GenerateAgreementDataWithECC::set_allocated_ulidlen(::com::westone::skf::WST_PROTO_UINT32* ulidlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulidlen_;
  }
  if (ulidlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulidlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulidlen, submessage_arena);
    }
    
  } else {
    
  }
  ulidlen_ = ulidlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC.ulIDLen)
}

// .com.westone.skf.WST_PROTO_UINT32 phAgreementHandle = 6;
inline bool Req_SKF_GenerateAgreementDataWithECC::has_phagreementhandle() const {
  return this != internal_default_instance() && phagreementhandle_ != nullptr;
}
inline void Req_SKF_GenerateAgreementDataWithECC::clear_phagreementhandle() {
  if (GetArenaNoVirtual() == nullptr && phagreementhandle_ != nullptr) {
    delete phagreementhandle_;
  }
  phagreementhandle_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GenerateAgreementDataWithECC::phagreementhandle() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = phagreementhandle_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC.phAgreementHandle)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenerateAgreementDataWithECC::release_phagreementhandle() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC.phAgreementHandle)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = phagreementhandle_;
  phagreementhandle_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenerateAgreementDataWithECC::mutable_phagreementhandle() {
  
  if (phagreementhandle_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    phagreementhandle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC.phAgreementHandle)
  return phagreementhandle_;
}
inline void Req_SKF_GenerateAgreementDataWithECC::set_allocated_phagreementhandle(::com::westone::skf::WST_PROTO_UINT32* phagreementhandle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete phagreementhandle_;
  }
  if (phagreementhandle) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phagreementhandle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phagreementhandle, submessage_arena);
    }
    
  } else {
    
  }
  phagreementhandle_ = phagreementhandle;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenerateAgreementDataWithECC.phAgreementHandle)
}

// -------------------------------------------------------------------

// Rsp_SKF_GenerateAgreementDataWithECC

// .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 1;
inline bool Rsp_SKF_GenerateAgreementDataWithECC::has_ptempeccpubkeyblob() const {
  return this != internal_default_instance() && ptempeccpubkeyblob_ != nullptr;
}
inline void Rsp_SKF_GenerateAgreementDataWithECC::clear_ptempeccpubkeyblob() {
  if (GetArenaNoVirtual() == nullptr && ptempeccpubkeyblob_ != nullptr) {
    delete ptempeccpubkeyblob_;
  }
  ptempeccpubkeyblob_ = nullptr;
}
inline const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& Rsp_SKF_GenerateAgreementDataWithECC::ptempeccpubkeyblob() const {
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* p = ptempeccpubkeyblob_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_GenerateAgreementDataWithECC.pTempECCPubKeyBlob)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      &::com::westone::skf::_SKF_ECCPUBLICKEYBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Rsp_SKF_GenerateAgreementDataWithECC::release_ptempeccpubkeyblob() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_GenerateAgreementDataWithECC.pTempECCPubKeyBlob)
  
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* temp = ptempeccpubkeyblob_;
  ptempeccpubkeyblob_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Rsp_SKF_GenerateAgreementDataWithECC::mutable_ptempeccpubkeyblob() {
  
  if (ptempeccpubkeyblob_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ECCPUBLICKEYBLOB>(GetArenaNoVirtual());
    ptempeccpubkeyblob_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_GenerateAgreementDataWithECC.pTempECCPubKeyBlob)
  return ptempeccpubkeyblob_;
}
inline void Rsp_SKF_GenerateAgreementDataWithECC::set_allocated_ptempeccpubkeyblob(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* ptempeccpubkeyblob) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ptempeccpubkeyblob_;
  }
  if (ptempeccpubkeyblob) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ptempeccpubkeyblob = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ptempeccpubkeyblob, submessage_arena);
    }
    
  } else {
    
  }
  ptempeccpubkeyblob_ = ptempeccpubkeyblob;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_GenerateAgreementDataWithECC.pTempECCPubKeyBlob)
}

// .com.westone.skf.WST_PROTO_UINT32 phAgreementHandle = 2;
inline bool Rsp_SKF_GenerateAgreementDataWithECC::has_phagreementhandle() const {
  return this != internal_default_instance() && phagreementhandle_ != nullptr;
}
inline void Rsp_SKF_GenerateAgreementDataWithECC::clear_phagreementhandle() {
  if (GetArenaNoVirtual() == nullptr && phagreementhandle_ != nullptr) {
    delete phagreementhandle_;
  }
  phagreementhandle_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_GenerateAgreementDataWithECC::phagreementhandle() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = phagreementhandle_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_GenerateAgreementDataWithECC.phAgreementHandle)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_GenerateAgreementDataWithECC::release_phagreementhandle() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_GenerateAgreementDataWithECC.phAgreementHandle)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = phagreementhandle_;
  phagreementhandle_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_GenerateAgreementDataWithECC::mutable_phagreementhandle() {
  
  if (phagreementhandle_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    phagreementhandle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_GenerateAgreementDataWithECC.phAgreementHandle)
  return phagreementhandle_;
}
inline void Rsp_SKF_GenerateAgreementDataWithECC::set_allocated_phagreementhandle(::com::westone::skf::WST_PROTO_UINT32* phagreementhandle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete phagreementhandle_;
  }
  if (phagreementhandle) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phagreementhandle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phagreementhandle, submessage_arena);
    }
    
  } else {
    
  }
  phagreementhandle_ = phagreementhandle;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_GenerateAgreementDataWithECC.phAgreementHandle)
}

// -------------------------------------------------------------------

// Req_SKF_GenerateAgreementDataAndKeyWithECC

// .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
inline bool Req_SKF_GenerateAgreementDataAndKeyWithECC::has_hcontainer() const {
  return this != internal_default_instance() && hcontainer_ != nullptr;
}
inline void Req_SKF_GenerateAgreementDataAndKeyWithECC::clear_hcontainer() {
  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GenerateAgreementDataAndKeyWithECC::hcontainer() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hcontainer_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.hContainer)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenerateAgreementDataAndKeyWithECC::release_hcontainer() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.hContainer)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hcontainer_;
  hcontainer_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenerateAgreementDataAndKeyWithECC::mutable_hcontainer() {
  
  if (hcontainer_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hcontainer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.hContainer)
  return hcontainer_;
}
inline void Req_SKF_GenerateAgreementDataAndKeyWithECC::set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hcontainer_;
  }
  if (hcontainer) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hcontainer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hcontainer, submessage_arena);
    }
    
  } else {
    
  }
  hcontainer_ = hcontainer;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.hContainer)
}

// .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
inline bool Req_SKF_GenerateAgreementDataAndKeyWithECC::has_ulalgid() const {
  return this != internal_default_instance() && ulalgid_ != nullptr;
}
inline void Req_SKF_GenerateAgreementDataAndKeyWithECC::clear_ulalgid() {
  if (GetArenaNoVirtual() == nullptr && ulalgid_ != nullptr) {
    delete ulalgid_;
  }
  ulalgid_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GenerateAgreementDataAndKeyWithECC::ulalgid() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulalgid_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.ulAlgID)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenerateAgreementDataAndKeyWithECC::release_ulalgid() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.ulAlgID)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulalgid_;
  ulalgid_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenerateAgreementDataAndKeyWithECC::mutable_ulalgid() {
  
  if (ulalgid_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulalgid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.ulAlgID)
  return ulalgid_;
}
inline void Req_SKF_GenerateAgreementDataAndKeyWithECC::set_allocated_ulalgid(::com::westone::skf::WST_PROTO_UINT32* ulalgid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulalgid_;
  }
  if (ulalgid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulalgid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulalgid, submessage_arena);
    }
    
  } else {
    
  }
  ulalgid_ = ulalgid;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.ulAlgID)
}

// .com.westone.skf.SKF_ECCPUBLICKEYBLOB pSponsorECCPubKeyBlob = 3;
inline bool Req_SKF_GenerateAgreementDataAndKeyWithECC::has_psponsoreccpubkeyblob() const {
  return this != internal_default_instance() && psponsoreccpubkeyblob_ != nullptr;
}
inline void Req_SKF_GenerateAgreementDataAndKeyWithECC::clear_psponsoreccpubkeyblob() {
  if (GetArenaNoVirtual() == nullptr && psponsoreccpubkeyblob_ != nullptr) {
    delete psponsoreccpubkeyblob_;
  }
  psponsoreccpubkeyblob_ = nullptr;
}
inline const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& Req_SKF_GenerateAgreementDataAndKeyWithECC::psponsoreccpubkeyblob() const {
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* p = psponsoreccpubkeyblob_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.pSponsorECCPubKeyBlob)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      &::com::westone::skf::_SKF_ECCPUBLICKEYBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Req_SKF_GenerateAgreementDataAndKeyWithECC::release_psponsoreccpubkeyblob() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.pSponsorECCPubKeyBlob)
  
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* temp = psponsoreccpubkeyblob_;
  psponsoreccpubkeyblob_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Req_SKF_GenerateAgreementDataAndKeyWithECC::mutable_psponsoreccpubkeyblob() {
  
  if (psponsoreccpubkeyblob_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ECCPUBLICKEYBLOB>(GetArenaNoVirtual());
    psponsoreccpubkeyblob_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.pSponsorECCPubKeyBlob)
  return psponsoreccpubkeyblob_;
}
inline void Req_SKF_GenerateAgreementDataAndKeyWithECC::set_allocated_psponsoreccpubkeyblob(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* psponsoreccpubkeyblob) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete psponsoreccpubkeyblob_;
  }
  if (psponsoreccpubkeyblob) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      psponsoreccpubkeyblob = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, psponsoreccpubkeyblob, submessage_arena);
    }
    
  } else {
    
  }
  psponsoreccpubkeyblob_ = psponsoreccpubkeyblob;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.pSponsorECCPubKeyBlob)
}

// .com.westone.skf.SKF_ECCPUBLICKEYBLOB pSponsorTempECCPubKeyBlob = 4;
inline bool Req_SKF_GenerateAgreementDataAndKeyWithECC::has_psponsortempeccpubkeyblob() const {
  return this != internal_default_instance() && psponsortempeccpubkeyblob_ != nullptr;
}
inline void Req_SKF_GenerateAgreementDataAndKeyWithECC::clear_psponsortempeccpubkeyblob() {
  if (GetArenaNoVirtual() == nullptr && psponsortempeccpubkeyblob_ != nullptr) {
    delete psponsortempeccpubkeyblob_;
  }
  psponsortempeccpubkeyblob_ = nullptr;
}
inline const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& Req_SKF_GenerateAgreementDataAndKeyWithECC::psponsortempeccpubkeyblob() const {
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* p = psponsortempeccpubkeyblob_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.pSponsorTempECCPubKeyBlob)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      &::com::westone::skf::_SKF_ECCPUBLICKEYBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Req_SKF_GenerateAgreementDataAndKeyWithECC::release_psponsortempeccpubkeyblob() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.pSponsorTempECCPubKeyBlob)
  
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* temp = psponsortempeccpubkeyblob_;
  psponsortempeccpubkeyblob_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Req_SKF_GenerateAgreementDataAndKeyWithECC::mutable_psponsortempeccpubkeyblob() {
  
  if (psponsortempeccpubkeyblob_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ECCPUBLICKEYBLOB>(GetArenaNoVirtual());
    psponsortempeccpubkeyblob_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.pSponsorTempECCPubKeyBlob)
  return psponsortempeccpubkeyblob_;
}
inline void Req_SKF_GenerateAgreementDataAndKeyWithECC::set_allocated_psponsortempeccpubkeyblob(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* psponsortempeccpubkeyblob) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete psponsortempeccpubkeyblob_;
  }
  if (psponsortempeccpubkeyblob) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      psponsortempeccpubkeyblob = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, psponsortempeccpubkeyblob, submessage_arena);
    }
    
  } else {
    
  }
  psponsortempeccpubkeyblob_ = psponsortempeccpubkeyblob;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.pSponsorTempECCPubKeyBlob)
}

// .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 5;
inline bool Req_SKF_GenerateAgreementDataAndKeyWithECC::has_ptempeccpubkeyblob() const {
  return this != internal_default_instance() && ptempeccpubkeyblob_ != nullptr;
}
inline void Req_SKF_GenerateAgreementDataAndKeyWithECC::clear_ptempeccpubkeyblob() {
  if (GetArenaNoVirtual() == nullptr && ptempeccpubkeyblob_ != nullptr) {
    delete ptempeccpubkeyblob_;
  }
  ptempeccpubkeyblob_ = nullptr;
}
inline const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& Req_SKF_GenerateAgreementDataAndKeyWithECC::ptempeccpubkeyblob() const {
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* p = ptempeccpubkeyblob_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.pTempECCPubKeyBlob)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      &::com::westone::skf::_SKF_ECCPUBLICKEYBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Req_SKF_GenerateAgreementDataAndKeyWithECC::release_ptempeccpubkeyblob() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.pTempECCPubKeyBlob)
  
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* temp = ptempeccpubkeyblob_;
  ptempeccpubkeyblob_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Req_SKF_GenerateAgreementDataAndKeyWithECC::mutable_ptempeccpubkeyblob() {
  
  if (ptempeccpubkeyblob_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ECCPUBLICKEYBLOB>(GetArenaNoVirtual());
    ptempeccpubkeyblob_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.pTempECCPubKeyBlob)
  return ptempeccpubkeyblob_;
}
inline void Req_SKF_GenerateAgreementDataAndKeyWithECC::set_allocated_ptempeccpubkeyblob(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* ptempeccpubkeyblob) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ptempeccpubkeyblob_;
  }
  if (ptempeccpubkeyblob) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ptempeccpubkeyblob = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ptempeccpubkeyblob, submessage_arena);
    }
    
  } else {
    
  }
  ptempeccpubkeyblob_ = ptempeccpubkeyblob;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.pTempECCPubKeyBlob)
}

// bytes pbID = 6;
inline void Req_SKF_GenerateAgreementDataAndKeyWithECC::clear_pbid() {
  pbid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_GenerateAgreementDataAndKeyWithECC::pbid() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.pbID)
  return pbid_.GetNoArena();
}
inline void Req_SKF_GenerateAgreementDataAndKeyWithECC::set_pbid(const ::std::string& value) {
  
  pbid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.pbID)
}
#if LANG_CXX11
inline void Req_SKF_GenerateAgreementDataAndKeyWithECC::set_pbid(::std::string&& value) {
  
  pbid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.pbID)
}
#endif
inline void Req_SKF_GenerateAgreementDataAndKeyWithECC::set_pbid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.pbID)
}
inline void Req_SKF_GenerateAgreementDataAndKeyWithECC::set_pbid(const void* value, size_t size) {
  
  pbid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.pbID)
}
inline ::std::string* Req_SKF_GenerateAgreementDataAndKeyWithECC::mutable_pbid() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.pbID)
  return pbid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_GenerateAgreementDataAndKeyWithECC::release_pbid() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.pbID)
  
  return pbid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_GenerateAgreementDataAndKeyWithECC::set_allocated_pbid(::std::string* pbid) {
  if (pbid != nullptr) {
    
  } else {
    
  }
  pbid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbid);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.pbID)
}

// .com.westone.skf.WST_PROTO_UINT32 ulIDLen = 7;
inline bool Req_SKF_GenerateAgreementDataAndKeyWithECC::has_ulidlen() const {
  return this != internal_default_instance() && ulidlen_ != nullptr;
}
inline void Req_SKF_GenerateAgreementDataAndKeyWithECC::clear_ulidlen() {
  if (GetArenaNoVirtual() == nullptr && ulidlen_ != nullptr) {
    delete ulidlen_;
  }
  ulidlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GenerateAgreementDataAndKeyWithECC::ulidlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulidlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.ulIDLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenerateAgreementDataAndKeyWithECC::release_ulidlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.ulIDLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulidlen_;
  ulidlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenerateAgreementDataAndKeyWithECC::mutable_ulidlen() {
  
  if (ulidlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulidlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.ulIDLen)
  return ulidlen_;
}
inline void Req_SKF_GenerateAgreementDataAndKeyWithECC::set_allocated_ulidlen(::com::westone::skf::WST_PROTO_UINT32* ulidlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulidlen_;
  }
  if (ulidlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulidlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulidlen, submessage_arena);
    }
    
  } else {
    
  }
  ulidlen_ = ulidlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.ulIDLen)
}

// bytes pbSponsorID = 8;
inline void Req_SKF_GenerateAgreementDataAndKeyWithECC::clear_pbsponsorid() {
  pbsponsorid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_GenerateAgreementDataAndKeyWithECC::pbsponsorid() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.pbSponsorID)
  return pbsponsorid_.GetNoArena();
}
inline void Req_SKF_GenerateAgreementDataAndKeyWithECC::set_pbsponsorid(const ::std::string& value) {
  
  pbsponsorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.pbSponsorID)
}
#if LANG_CXX11
inline void Req_SKF_GenerateAgreementDataAndKeyWithECC::set_pbsponsorid(::std::string&& value) {
  
  pbsponsorid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.pbSponsorID)
}
#endif
inline void Req_SKF_GenerateAgreementDataAndKeyWithECC::set_pbsponsorid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbsponsorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.pbSponsorID)
}
inline void Req_SKF_GenerateAgreementDataAndKeyWithECC::set_pbsponsorid(const void* value, size_t size) {
  
  pbsponsorid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.pbSponsorID)
}
inline ::std::string* Req_SKF_GenerateAgreementDataAndKeyWithECC::mutable_pbsponsorid() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.pbSponsorID)
  return pbsponsorid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_GenerateAgreementDataAndKeyWithECC::release_pbsponsorid() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.pbSponsorID)
  
  return pbsponsorid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_GenerateAgreementDataAndKeyWithECC::set_allocated_pbsponsorid(::std::string* pbsponsorid) {
  if (pbsponsorid != nullptr) {
    
  } else {
    
  }
  pbsponsorid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbsponsorid);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.pbSponsorID)
}

// .com.westone.skf.WST_PROTO_UINT32 ulSponsorIDLen = 9;
inline bool Req_SKF_GenerateAgreementDataAndKeyWithECC::has_ulsponsoridlen() const {
  return this != internal_default_instance() && ulsponsoridlen_ != nullptr;
}
inline void Req_SKF_GenerateAgreementDataAndKeyWithECC::clear_ulsponsoridlen() {
  if (GetArenaNoVirtual() == nullptr && ulsponsoridlen_ != nullptr) {
    delete ulsponsoridlen_;
  }
  ulsponsoridlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GenerateAgreementDataAndKeyWithECC::ulsponsoridlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulsponsoridlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.ulSponsorIDLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenerateAgreementDataAndKeyWithECC::release_ulsponsoridlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.ulSponsorIDLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulsponsoridlen_;
  ulsponsoridlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenerateAgreementDataAndKeyWithECC::mutable_ulsponsoridlen() {
  
  if (ulsponsoridlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulsponsoridlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.ulSponsorIDLen)
  return ulsponsoridlen_;
}
inline void Req_SKF_GenerateAgreementDataAndKeyWithECC::set_allocated_ulsponsoridlen(::com::westone::skf::WST_PROTO_UINT32* ulsponsoridlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulsponsoridlen_;
  }
  if (ulsponsoridlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulsponsoridlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulsponsoridlen, submessage_arena);
    }
    
  } else {
    
  }
  ulsponsoridlen_ = ulsponsoridlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.ulSponsorIDLen)
}

// .com.westone.skf.WST_PROTO_UINT32 phKeyHandle = 10;
inline bool Req_SKF_GenerateAgreementDataAndKeyWithECC::has_phkeyhandle() const {
  return this != internal_default_instance() && phkeyhandle_ != nullptr;
}
inline void Req_SKF_GenerateAgreementDataAndKeyWithECC::clear_phkeyhandle() {
  if (GetArenaNoVirtual() == nullptr && phkeyhandle_ != nullptr) {
    delete phkeyhandle_;
  }
  phkeyhandle_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GenerateAgreementDataAndKeyWithECC::phkeyhandle() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = phkeyhandle_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.phKeyHandle)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenerateAgreementDataAndKeyWithECC::release_phkeyhandle() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.phKeyHandle)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = phkeyhandle_;
  phkeyhandle_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenerateAgreementDataAndKeyWithECC::mutable_phkeyhandle() {
  
  if (phkeyhandle_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    phkeyhandle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.phKeyHandle)
  return phkeyhandle_;
}
inline void Req_SKF_GenerateAgreementDataAndKeyWithECC::set_allocated_phkeyhandle(::com::westone::skf::WST_PROTO_UINT32* phkeyhandle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete phkeyhandle_;
  }
  if (phkeyhandle) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phkeyhandle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phkeyhandle, submessage_arena);
    }
    
  } else {
    
  }
  phkeyhandle_ = phkeyhandle;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenerateAgreementDataAndKeyWithECC.phKeyHandle)
}

// -------------------------------------------------------------------

// Rsp_SKF_GenerateAgreementDataAndKeyWithECC

// .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 1;
inline bool Rsp_SKF_GenerateAgreementDataAndKeyWithECC::has_ptempeccpubkeyblob() const {
  return this != internal_default_instance() && ptempeccpubkeyblob_ != nullptr;
}
inline void Rsp_SKF_GenerateAgreementDataAndKeyWithECC::clear_ptempeccpubkeyblob() {
  if (GetArenaNoVirtual() == nullptr && ptempeccpubkeyblob_ != nullptr) {
    delete ptempeccpubkeyblob_;
  }
  ptempeccpubkeyblob_ = nullptr;
}
inline const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& Rsp_SKF_GenerateAgreementDataAndKeyWithECC::ptempeccpubkeyblob() const {
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* p = ptempeccpubkeyblob_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_GenerateAgreementDataAndKeyWithECC.pTempECCPubKeyBlob)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      &::com::westone::skf::_SKF_ECCPUBLICKEYBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Rsp_SKF_GenerateAgreementDataAndKeyWithECC::release_ptempeccpubkeyblob() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_GenerateAgreementDataAndKeyWithECC.pTempECCPubKeyBlob)
  
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* temp = ptempeccpubkeyblob_;
  ptempeccpubkeyblob_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Rsp_SKF_GenerateAgreementDataAndKeyWithECC::mutable_ptempeccpubkeyblob() {
  
  if (ptempeccpubkeyblob_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ECCPUBLICKEYBLOB>(GetArenaNoVirtual());
    ptempeccpubkeyblob_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_GenerateAgreementDataAndKeyWithECC.pTempECCPubKeyBlob)
  return ptempeccpubkeyblob_;
}
inline void Rsp_SKF_GenerateAgreementDataAndKeyWithECC::set_allocated_ptempeccpubkeyblob(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* ptempeccpubkeyblob) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ptempeccpubkeyblob_;
  }
  if (ptempeccpubkeyblob) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ptempeccpubkeyblob = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ptempeccpubkeyblob, submessage_arena);
    }
    
  } else {
    
  }
  ptempeccpubkeyblob_ = ptempeccpubkeyblob;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_GenerateAgreementDataAndKeyWithECC.pTempECCPubKeyBlob)
}

// .com.westone.skf.WST_PROTO_UINT32 phAgreementHandle = 2;
inline bool Rsp_SKF_GenerateAgreementDataAndKeyWithECC::has_phagreementhandle() const {
  return this != internal_default_instance() && phagreementhandle_ != nullptr;
}
inline void Rsp_SKF_GenerateAgreementDataAndKeyWithECC::clear_phagreementhandle() {
  if (GetArenaNoVirtual() == nullptr && phagreementhandle_ != nullptr) {
    delete phagreementhandle_;
  }
  phagreementhandle_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_GenerateAgreementDataAndKeyWithECC::phagreementhandle() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = phagreementhandle_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_GenerateAgreementDataAndKeyWithECC.phAgreementHandle)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_GenerateAgreementDataAndKeyWithECC::release_phagreementhandle() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_GenerateAgreementDataAndKeyWithECC.phAgreementHandle)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = phagreementhandle_;
  phagreementhandle_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_GenerateAgreementDataAndKeyWithECC::mutable_phagreementhandle() {
  
  if (phagreementhandle_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    phagreementhandle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_GenerateAgreementDataAndKeyWithECC.phAgreementHandle)
  return phagreementhandle_;
}
inline void Rsp_SKF_GenerateAgreementDataAndKeyWithECC::set_allocated_phagreementhandle(::com::westone::skf::WST_PROTO_UINT32* phagreementhandle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete phagreementhandle_;
  }
  if (phagreementhandle) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phagreementhandle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phagreementhandle, submessage_arena);
    }
    
  } else {
    
  }
  phagreementhandle_ = phagreementhandle;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_GenerateAgreementDataAndKeyWithECC.phAgreementHandle)
}

// -------------------------------------------------------------------

// Req_SKF_GenerateKeyWithECC

// .com.westone.skf.WST_PROTO_UINT32 hAgreementHandle = 1;
inline bool Req_SKF_GenerateKeyWithECC::has_hagreementhandle() const {
  return this != internal_default_instance() && hagreementhandle_ != nullptr;
}
inline void Req_SKF_GenerateKeyWithECC::clear_hagreementhandle() {
  if (GetArenaNoVirtual() == nullptr && hagreementhandle_ != nullptr) {
    delete hagreementhandle_;
  }
  hagreementhandle_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GenerateKeyWithECC::hagreementhandle() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hagreementhandle_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenerateKeyWithECC.hAgreementHandle)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenerateKeyWithECC::release_hagreementhandle() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenerateKeyWithECC.hAgreementHandle)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hagreementhandle_;
  hagreementhandle_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenerateKeyWithECC::mutable_hagreementhandle() {
  
  if (hagreementhandle_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hagreementhandle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenerateKeyWithECC.hAgreementHandle)
  return hagreementhandle_;
}
inline void Req_SKF_GenerateKeyWithECC::set_allocated_hagreementhandle(::com::westone::skf::WST_PROTO_UINT32* hagreementhandle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hagreementhandle_;
  }
  if (hagreementhandle) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hagreementhandle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hagreementhandle, submessage_arena);
    }
    
  } else {
    
  }
  hagreementhandle_ = hagreementhandle;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenerateKeyWithECC.hAgreementHandle)
}

// .com.westone.skf.SKF_ECCPUBLICKEYBLOB pECCPubKeyBlob = 2;
inline bool Req_SKF_GenerateKeyWithECC::has_peccpubkeyblob() const {
  return this != internal_default_instance() && peccpubkeyblob_ != nullptr;
}
inline void Req_SKF_GenerateKeyWithECC::clear_peccpubkeyblob() {
  if (GetArenaNoVirtual() == nullptr && peccpubkeyblob_ != nullptr) {
    delete peccpubkeyblob_;
  }
  peccpubkeyblob_ = nullptr;
}
inline const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& Req_SKF_GenerateKeyWithECC::peccpubkeyblob() const {
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* p = peccpubkeyblob_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenerateKeyWithECC.pECCPubKeyBlob)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      &::com::westone::skf::_SKF_ECCPUBLICKEYBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Req_SKF_GenerateKeyWithECC::release_peccpubkeyblob() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenerateKeyWithECC.pECCPubKeyBlob)
  
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* temp = peccpubkeyblob_;
  peccpubkeyblob_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Req_SKF_GenerateKeyWithECC::mutable_peccpubkeyblob() {
  
  if (peccpubkeyblob_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ECCPUBLICKEYBLOB>(GetArenaNoVirtual());
    peccpubkeyblob_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenerateKeyWithECC.pECCPubKeyBlob)
  return peccpubkeyblob_;
}
inline void Req_SKF_GenerateKeyWithECC::set_allocated_peccpubkeyblob(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* peccpubkeyblob) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete peccpubkeyblob_;
  }
  if (peccpubkeyblob) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      peccpubkeyblob = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, peccpubkeyblob, submessage_arena);
    }
    
  } else {
    
  }
  peccpubkeyblob_ = peccpubkeyblob;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenerateKeyWithECC.pECCPubKeyBlob)
}

// .com.westone.skf.SKF_ECCPUBLICKEYBLOB pTempECCPubKeyBlob = 3;
inline bool Req_SKF_GenerateKeyWithECC::has_ptempeccpubkeyblob() const {
  return this != internal_default_instance() && ptempeccpubkeyblob_ != nullptr;
}
inline void Req_SKF_GenerateKeyWithECC::clear_ptempeccpubkeyblob() {
  if (GetArenaNoVirtual() == nullptr && ptempeccpubkeyblob_ != nullptr) {
    delete ptempeccpubkeyblob_;
  }
  ptempeccpubkeyblob_ = nullptr;
}
inline const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& Req_SKF_GenerateKeyWithECC::ptempeccpubkeyblob() const {
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* p = ptempeccpubkeyblob_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenerateKeyWithECC.pTempECCPubKeyBlob)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      &::com::westone::skf::_SKF_ECCPUBLICKEYBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Req_SKF_GenerateKeyWithECC::release_ptempeccpubkeyblob() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenerateKeyWithECC.pTempECCPubKeyBlob)
  
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* temp = ptempeccpubkeyblob_;
  ptempeccpubkeyblob_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Req_SKF_GenerateKeyWithECC::mutable_ptempeccpubkeyblob() {
  
  if (ptempeccpubkeyblob_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ECCPUBLICKEYBLOB>(GetArenaNoVirtual());
    ptempeccpubkeyblob_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenerateKeyWithECC.pTempECCPubKeyBlob)
  return ptempeccpubkeyblob_;
}
inline void Req_SKF_GenerateKeyWithECC::set_allocated_ptempeccpubkeyblob(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* ptempeccpubkeyblob) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ptempeccpubkeyblob_;
  }
  if (ptempeccpubkeyblob) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ptempeccpubkeyblob = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ptempeccpubkeyblob, submessage_arena);
    }
    
  } else {
    
  }
  ptempeccpubkeyblob_ = ptempeccpubkeyblob;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenerateKeyWithECC.pTempECCPubKeyBlob)
}

// bytes pbID = 4;
inline void Req_SKF_GenerateKeyWithECC::clear_pbid() {
  pbid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_GenerateKeyWithECC::pbid() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenerateKeyWithECC.pbID)
  return pbid_.GetNoArena();
}
inline void Req_SKF_GenerateKeyWithECC::set_pbid(const ::std::string& value) {
  
  pbid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_GenerateKeyWithECC.pbID)
}
#if LANG_CXX11
inline void Req_SKF_GenerateKeyWithECC::set_pbid(::std::string&& value) {
  
  pbid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_GenerateKeyWithECC.pbID)
}
#endif
inline void Req_SKF_GenerateKeyWithECC::set_pbid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_GenerateKeyWithECC.pbID)
}
inline void Req_SKF_GenerateKeyWithECC::set_pbid(const void* value, size_t size) {
  
  pbid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_GenerateKeyWithECC.pbID)
}
inline ::std::string* Req_SKF_GenerateKeyWithECC::mutable_pbid() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenerateKeyWithECC.pbID)
  return pbid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_GenerateKeyWithECC::release_pbid() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenerateKeyWithECC.pbID)
  
  return pbid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_GenerateKeyWithECC::set_allocated_pbid(::std::string* pbid) {
  if (pbid != nullptr) {
    
  } else {
    
  }
  pbid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbid);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenerateKeyWithECC.pbID)
}

// .com.westone.skf.WST_PROTO_UINT32 ulIDLen = 5;
inline bool Req_SKF_GenerateKeyWithECC::has_ulidlen() const {
  return this != internal_default_instance() && ulidlen_ != nullptr;
}
inline void Req_SKF_GenerateKeyWithECC::clear_ulidlen() {
  if (GetArenaNoVirtual() == nullptr && ulidlen_ != nullptr) {
    delete ulidlen_;
  }
  ulidlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GenerateKeyWithECC::ulidlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulidlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenerateKeyWithECC.ulIDLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenerateKeyWithECC::release_ulidlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenerateKeyWithECC.ulIDLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulidlen_;
  ulidlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenerateKeyWithECC::mutable_ulidlen() {
  
  if (ulidlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulidlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenerateKeyWithECC.ulIDLen)
  return ulidlen_;
}
inline void Req_SKF_GenerateKeyWithECC::set_allocated_ulidlen(::com::westone::skf::WST_PROTO_UINT32* ulidlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulidlen_;
  }
  if (ulidlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulidlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulidlen, submessage_arena);
    }
    
  } else {
    
  }
  ulidlen_ = ulidlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenerateKeyWithECC.ulIDLen)
}

// .com.westone.skf.WST_PROTO_UINT32 phKeyHandle = 6;
inline bool Req_SKF_GenerateKeyWithECC::has_phkeyhandle() const {
  return this != internal_default_instance() && phkeyhandle_ != nullptr;
}
inline void Req_SKF_GenerateKeyWithECC::clear_phkeyhandle() {
  if (GetArenaNoVirtual() == nullptr && phkeyhandle_ != nullptr) {
    delete phkeyhandle_;
  }
  phkeyhandle_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GenerateKeyWithECC::phkeyhandle() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = phkeyhandle_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GenerateKeyWithECC.phKeyHandle)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenerateKeyWithECC::release_phkeyhandle() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GenerateKeyWithECC.phKeyHandle)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = phkeyhandle_;
  phkeyhandle_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GenerateKeyWithECC::mutable_phkeyhandle() {
  
  if (phkeyhandle_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    phkeyhandle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GenerateKeyWithECC.phKeyHandle)
  return phkeyhandle_;
}
inline void Req_SKF_GenerateKeyWithECC::set_allocated_phkeyhandle(::com::westone::skf::WST_PROTO_UINT32* phkeyhandle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete phkeyhandle_;
  }
  if (phkeyhandle) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phkeyhandle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phkeyhandle, submessage_arena);
    }
    
  } else {
    
  }
  phkeyhandle_ = phkeyhandle;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GenerateKeyWithECC.phKeyHandle)
}

// -------------------------------------------------------------------

// Rsp_SKF_GenerateKeyWithECC

// .com.westone.skf.WST_PROTO_UINT32 phKeyHandle = 1;
inline bool Rsp_SKF_GenerateKeyWithECC::has_phkeyhandle() const {
  return this != internal_default_instance() && phkeyhandle_ != nullptr;
}
inline void Rsp_SKF_GenerateKeyWithECC::clear_phkeyhandle() {
  if (GetArenaNoVirtual() == nullptr && phkeyhandle_ != nullptr) {
    delete phkeyhandle_;
  }
  phkeyhandle_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_GenerateKeyWithECC::phkeyhandle() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = phkeyhandle_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_GenerateKeyWithECC.phKeyHandle)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_GenerateKeyWithECC::release_phkeyhandle() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_GenerateKeyWithECC.phKeyHandle)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = phkeyhandle_;
  phkeyhandle_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_GenerateKeyWithECC::mutable_phkeyhandle() {
  
  if (phkeyhandle_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    phkeyhandle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_GenerateKeyWithECC.phKeyHandle)
  return phkeyhandle_;
}
inline void Rsp_SKF_GenerateKeyWithECC::set_allocated_phkeyhandle(::com::westone::skf::WST_PROTO_UINT32* phkeyhandle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete phkeyhandle_;
  }
  if (phkeyhandle) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phkeyhandle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phkeyhandle, submessage_arena);
    }
    
  } else {
    
  }
  phkeyhandle_ = phkeyhandle;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_GenerateKeyWithECC.phKeyHandle)
}

// -------------------------------------------------------------------

// Req_SKF_ExportPublicKey

// .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
inline bool Req_SKF_ExportPublicKey::has_hcontainer() const {
  return this != internal_default_instance() && hcontainer_ != nullptr;
}
inline void Req_SKF_ExportPublicKey::clear_hcontainer() {
  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ExportPublicKey::hcontainer() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hcontainer_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExportPublicKey.hContainer)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExportPublicKey::release_hcontainer() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExportPublicKey.hContainer)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hcontainer_;
  hcontainer_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExportPublicKey::mutable_hcontainer() {
  
  if (hcontainer_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hcontainer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExportPublicKey.hContainer)
  return hcontainer_;
}
inline void Req_SKF_ExportPublicKey::set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hcontainer_;
  }
  if (hcontainer) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hcontainer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hcontainer, submessage_arena);
    }
    
  } else {
    
  }
  hcontainer_ = hcontainer;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExportPublicKey.hContainer)
}

// .com.westone.skf.WST_PROTO_BOOL bSignFlag = 2;
inline bool Req_SKF_ExportPublicKey::has_bsignflag() const {
  return this != internal_default_instance() && bsignflag_ != nullptr;
}
inline void Req_SKF_ExportPublicKey::clear_bsignflag() {
  if (GetArenaNoVirtual() == nullptr && bsignflag_ != nullptr) {
    delete bsignflag_;
  }
  bsignflag_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_BOOL& Req_SKF_ExportPublicKey::bsignflag() const {
  const ::com::westone::skf::WST_PROTO_BOOL* p = bsignflag_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExportPublicKey.bSignFlag)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_BOOL*>(
      &::com::westone::skf::_WST_PROTO_BOOL_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_BOOL* Req_SKF_ExportPublicKey::release_bsignflag() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExportPublicKey.bSignFlag)
  
  ::com::westone::skf::WST_PROTO_BOOL* temp = bsignflag_;
  bsignflag_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_BOOL* Req_SKF_ExportPublicKey::mutable_bsignflag() {
  
  if (bsignflag_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_BOOL>(GetArenaNoVirtual());
    bsignflag_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExportPublicKey.bSignFlag)
  return bsignflag_;
}
inline void Req_SKF_ExportPublicKey::set_allocated_bsignflag(::com::westone::skf::WST_PROTO_BOOL* bsignflag) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bsignflag_;
  }
  if (bsignflag) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bsignflag = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bsignflag, submessage_arena);
    }
    
  } else {
    
  }
  bsignflag_ = bsignflag;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExportPublicKey.bSignFlag)
}

// bytes pbBlob = 3;
inline void Req_SKF_ExportPublicKey::clear_pbblob() {
  pbblob_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_ExportPublicKey::pbblob() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExportPublicKey.pbBlob)
  return pbblob_.GetNoArena();
}
inline void Req_SKF_ExportPublicKey::set_pbblob(const ::std::string& value) {
  
  pbblob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_ExportPublicKey.pbBlob)
}
#if LANG_CXX11
inline void Req_SKF_ExportPublicKey::set_pbblob(::std::string&& value) {
  
  pbblob_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_ExportPublicKey.pbBlob)
}
#endif
inline void Req_SKF_ExportPublicKey::set_pbblob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbblob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_ExportPublicKey.pbBlob)
}
inline void Req_SKF_ExportPublicKey::set_pbblob(const void* value, size_t size) {
  
  pbblob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_ExportPublicKey.pbBlob)
}
inline ::std::string* Req_SKF_ExportPublicKey::mutable_pbblob() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExportPublicKey.pbBlob)
  return pbblob_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_ExportPublicKey::release_pbblob() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExportPublicKey.pbBlob)
  
  return pbblob_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_ExportPublicKey::set_allocated_pbblob(::std::string* pbblob) {
  if (pbblob != nullptr) {
    
  } else {
    
  }
  pbblob_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbblob);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExportPublicKey.pbBlob)
}

// .com.westone.skf.WST_PROTO_UINT32 pulBlobLen = 4;
inline bool Req_SKF_ExportPublicKey::has_pulbloblen() const {
  return this != internal_default_instance() && pulbloblen_ != nullptr;
}
inline void Req_SKF_ExportPublicKey::clear_pulbloblen() {
  if (GetArenaNoVirtual() == nullptr && pulbloblen_ != nullptr) {
    delete pulbloblen_;
  }
  pulbloblen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ExportPublicKey::pulbloblen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulbloblen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExportPublicKey.pulBlobLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExportPublicKey::release_pulbloblen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExportPublicKey.pulBlobLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulbloblen_;
  pulbloblen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExportPublicKey::mutable_pulbloblen() {
  
  if (pulbloblen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulbloblen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExportPublicKey.pulBlobLen)
  return pulbloblen_;
}
inline void Req_SKF_ExportPublicKey::set_allocated_pulbloblen(::com::westone::skf::WST_PROTO_UINT32* pulbloblen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulbloblen_;
  }
  if (pulbloblen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulbloblen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulbloblen, submessage_arena);
    }
    
  } else {
    
  }
  pulbloblen_ = pulbloblen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExportPublicKey.pulBlobLen)
}

// -------------------------------------------------------------------

// Rsp_SKF_ExportPublicKey

// bytes pbBlob = 1;
inline void Rsp_SKF_ExportPublicKey::clear_pbblob() {
  pbblob_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rsp_SKF_ExportPublicKey::pbblob() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_ExportPublicKey.pbBlob)
  return pbblob_.GetNoArena();
}
inline void Rsp_SKF_ExportPublicKey::set_pbblob(const ::std::string& value) {
  
  pbblob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Rsp_SKF_ExportPublicKey.pbBlob)
}
#if LANG_CXX11
inline void Rsp_SKF_ExportPublicKey::set_pbblob(::std::string&& value) {
  
  pbblob_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Rsp_SKF_ExportPublicKey.pbBlob)
}
#endif
inline void Rsp_SKF_ExportPublicKey::set_pbblob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbblob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Rsp_SKF_ExportPublicKey.pbBlob)
}
inline void Rsp_SKF_ExportPublicKey::set_pbblob(const void* value, size_t size) {
  
  pbblob_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Rsp_SKF_ExportPublicKey.pbBlob)
}
inline ::std::string* Rsp_SKF_ExportPublicKey::mutable_pbblob() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_ExportPublicKey.pbBlob)
  return pbblob_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rsp_SKF_ExportPublicKey::release_pbblob() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_ExportPublicKey.pbBlob)
  
  return pbblob_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rsp_SKF_ExportPublicKey::set_allocated_pbblob(::std::string* pbblob) {
  if (pbblob != nullptr) {
    
  } else {
    
  }
  pbblob_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbblob);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_ExportPublicKey.pbBlob)
}

// .com.westone.skf.WST_PROTO_UINT32 pulBlobLen = 2;
inline bool Rsp_SKF_ExportPublicKey::has_pulbloblen() const {
  return this != internal_default_instance() && pulbloblen_ != nullptr;
}
inline void Rsp_SKF_ExportPublicKey::clear_pulbloblen() {
  if (GetArenaNoVirtual() == nullptr && pulbloblen_ != nullptr) {
    delete pulbloblen_;
  }
  pulbloblen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_ExportPublicKey::pulbloblen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulbloblen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_ExportPublicKey.pulBlobLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_ExportPublicKey::release_pulbloblen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_ExportPublicKey.pulBlobLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulbloblen_;
  pulbloblen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_ExportPublicKey::mutable_pulbloblen() {
  
  if (pulbloblen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulbloblen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_ExportPublicKey.pulBlobLen)
  return pulbloblen_;
}
inline void Rsp_SKF_ExportPublicKey::set_allocated_pulbloblen(::com::westone::skf::WST_PROTO_UINT32* pulbloblen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulbloblen_;
  }
  if (pulbloblen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulbloblen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulbloblen, submessage_arena);
    }
    
  } else {
    
  }
  pulbloblen_ = pulbloblen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_ExportPublicKey.pulBlobLen)
}

// -------------------------------------------------------------------

// Req_SKF_ImportSessionKey

// .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
inline bool Req_SKF_ImportSessionKey::has_hcontainer() const {
  return this != internal_default_instance() && hcontainer_ != nullptr;
}
inline void Req_SKF_ImportSessionKey::clear_hcontainer() {
  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ImportSessionKey::hcontainer() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hcontainer_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ImportSessionKey.hContainer)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ImportSessionKey::release_hcontainer() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ImportSessionKey.hContainer)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hcontainer_;
  hcontainer_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ImportSessionKey::mutable_hcontainer() {
  
  if (hcontainer_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hcontainer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ImportSessionKey.hContainer)
  return hcontainer_;
}
inline void Req_SKF_ImportSessionKey::set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hcontainer_;
  }
  if (hcontainer) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hcontainer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hcontainer, submessage_arena);
    }
    
  } else {
    
  }
  hcontainer_ = hcontainer;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ImportSessionKey.hContainer)
}

// .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
inline bool Req_SKF_ImportSessionKey::has_ulalgid() const {
  return this != internal_default_instance() && ulalgid_ != nullptr;
}
inline void Req_SKF_ImportSessionKey::clear_ulalgid() {
  if (GetArenaNoVirtual() == nullptr && ulalgid_ != nullptr) {
    delete ulalgid_;
  }
  ulalgid_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ImportSessionKey::ulalgid() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulalgid_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ImportSessionKey.ulAlgID)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ImportSessionKey::release_ulalgid() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ImportSessionKey.ulAlgID)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulalgid_;
  ulalgid_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ImportSessionKey::mutable_ulalgid() {
  
  if (ulalgid_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulalgid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ImportSessionKey.ulAlgID)
  return ulalgid_;
}
inline void Req_SKF_ImportSessionKey::set_allocated_ulalgid(::com::westone::skf::WST_PROTO_UINT32* ulalgid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulalgid_;
  }
  if (ulalgid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulalgid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulalgid, submessage_arena);
    }
    
  } else {
    
  }
  ulalgid_ = ulalgid;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ImportSessionKey.ulAlgID)
}

// bytes pbWrappedData = 3;
inline void Req_SKF_ImportSessionKey::clear_pbwrappeddata() {
  pbwrappeddata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_ImportSessionKey::pbwrappeddata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ImportSessionKey.pbWrappedData)
  return pbwrappeddata_.GetNoArena();
}
inline void Req_SKF_ImportSessionKey::set_pbwrappeddata(const ::std::string& value) {
  
  pbwrappeddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_ImportSessionKey.pbWrappedData)
}
#if LANG_CXX11
inline void Req_SKF_ImportSessionKey::set_pbwrappeddata(::std::string&& value) {
  
  pbwrappeddata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_ImportSessionKey.pbWrappedData)
}
#endif
inline void Req_SKF_ImportSessionKey::set_pbwrappeddata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbwrappeddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_ImportSessionKey.pbWrappedData)
}
inline void Req_SKF_ImportSessionKey::set_pbwrappeddata(const void* value, size_t size) {
  
  pbwrappeddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_ImportSessionKey.pbWrappedData)
}
inline ::std::string* Req_SKF_ImportSessionKey::mutable_pbwrappeddata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ImportSessionKey.pbWrappedData)
  return pbwrappeddata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_ImportSessionKey::release_pbwrappeddata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ImportSessionKey.pbWrappedData)
  
  return pbwrappeddata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_ImportSessionKey::set_allocated_pbwrappeddata(::std::string* pbwrappeddata) {
  if (pbwrappeddata != nullptr) {
    
  } else {
    
  }
  pbwrappeddata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbwrappeddata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ImportSessionKey.pbWrappedData)
}

// .com.westone.skf.WST_PROTO_UINT32 ulWrappedLen = 4;
inline bool Req_SKF_ImportSessionKey::has_ulwrappedlen() const {
  return this != internal_default_instance() && ulwrappedlen_ != nullptr;
}
inline void Req_SKF_ImportSessionKey::clear_ulwrappedlen() {
  if (GetArenaNoVirtual() == nullptr && ulwrappedlen_ != nullptr) {
    delete ulwrappedlen_;
  }
  ulwrappedlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ImportSessionKey::ulwrappedlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulwrappedlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ImportSessionKey.ulWrappedLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ImportSessionKey::release_ulwrappedlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ImportSessionKey.ulWrappedLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulwrappedlen_;
  ulwrappedlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ImportSessionKey::mutable_ulwrappedlen() {
  
  if (ulwrappedlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulwrappedlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ImportSessionKey.ulWrappedLen)
  return ulwrappedlen_;
}
inline void Req_SKF_ImportSessionKey::set_allocated_ulwrappedlen(::com::westone::skf::WST_PROTO_UINT32* ulwrappedlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulwrappedlen_;
  }
  if (ulwrappedlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulwrappedlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulwrappedlen, submessage_arena);
    }
    
  } else {
    
  }
  ulwrappedlen_ = ulwrappedlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ImportSessionKey.ulWrappedLen)
}

// .com.westone.skf.WST_PROTO_UINT32 phKey = 5;
inline bool Req_SKF_ImportSessionKey::has_phkey() const {
  return this != internal_default_instance() && phkey_ != nullptr;
}
inline void Req_SKF_ImportSessionKey::clear_phkey() {
  if (GetArenaNoVirtual() == nullptr && phkey_ != nullptr) {
    delete phkey_;
  }
  phkey_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ImportSessionKey::phkey() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = phkey_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ImportSessionKey.phKey)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ImportSessionKey::release_phkey() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ImportSessionKey.phKey)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = phkey_;
  phkey_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ImportSessionKey::mutable_phkey() {
  
  if (phkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    phkey_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ImportSessionKey.phKey)
  return phkey_;
}
inline void Req_SKF_ImportSessionKey::set_allocated_phkey(::com::westone::skf::WST_PROTO_UINT32* phkey) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete phkey_;
  }
  if (phkey) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phkey = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phkey, submessage_arena);
    }
    
  } else {
    
  }
  phkey_ = phkey;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ImportSessionKey.phKey)
}

// -------------------------------------------------------------------

// Rsp_SKF_ImportSessionKey

// .com.westone.skf.WST_PROTO_UINT32 phKey = 1;
inline bool Rsp_SKF_ImportSessionKey::has_phkey() const {
  return this != internal_default_instance() && phkey_ != nullptr;
}
inline void Rsp_SKF_ImportSessionKey::clear_phkey() {
  if (GetArenaNoVirtual() == nullptr && phkey_ != nullptr) {
    delete phkey_;
  }
  phkey_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_ImportSessionKey::phkey() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = phkey_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_ImportSessionKey.phKey)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_ImportSessionKey::release_phkey() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_ImportSessionKey.phKey)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = phkey_;
  phkey_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_ImportSessionKey::mutable_phkey() {
  
  if (phkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    phkey_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_ImportSessionKey.phKey)
  return phkey_;
}
inline void Rsp_SKF_ImportSessionKey::set_allocated_phkey(::com::westone::skf::WST_PROTO_UINT32* phkey) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete phkey_;
  }
  if (phkey) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phkey = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phkey, submessage_arena);
    }
    
  } else {
    
  }
  phkey_ = phkey;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_ImportSessionKey.phKey)
}

// -------------------------------------------------------------------

// Req_SKF_SetSymmKey

// .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
inline bool Req_SKF_SetSymmKey::has_hdev() const {
  return this != internal_default_instance() && hdev_ != nullptr;
}
inline void Req_SKF_SetSymmKey::clear_hdev() {
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_SetSymmKey::hdev() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hdev_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_SetSymmKey.hDev)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_SetSymmKey::release_hdev() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_SetSymmKey.hDev)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hdev_;
  hdev_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_SetSymmKey::mutable_hdev() {
  
  if (hdev_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hdev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_SetSymmKey.hDev)
  return hdev_;
}
inline void Req_SKF_SetSymmKey::set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hdev_;
  }
  if (hdev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hdev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdev, submessage_arena);
    }
    
  } else {
    
  }
  hdev_ = hdev;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_SetSymmKey.hDev)
}

// bytes pbKey = 2;
inline void Req_SKF_SetSymmKey::clear_pbkey() {
  pbkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_SetSymmKey::pbkey() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_SetSymmKey.pbKey)
  return pbkey_.GetNoArena();
}
inline void Req_SKF_SetSymmKey::set_pbkey(const ::std::string& value) {
  
  pbkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_SetSymmKey.pbKey)
}
#if LANG_CXX11
inline void Req_SKF_SetSymmKey::set_pbkey(::std::string&& value) {
  
  pbkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_SetSymmKey.pbKey)
}
#endif
inline void Req_SKF_SetSymmKey::set_pbkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_SetSymmKey.pbKey)
}
inline void Req_SKF_SetSymmKey::set_pbkey(const void* value, size_t size) {
  
  pbkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_SetSymmKey.pbKey)
}
inline ::std::string* Req_SKF_SetSymmKey::mutable_pbkey() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_SetSymmKey.pbKey)
  return pbkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_SetSymmKey::release_pbkey() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_SetSymmKey.pbKey)
  
  return pbkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_SetSymmKey::set_allocated_pbkey(::std::string* pbkey) {
  if (pbkey != nullptr) {
    
  } else {
    
  }
  pbkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbkey);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_SetSymmKey.pbKey)
}

// .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 3;
inline bool Req_SKF_SetSymmKey::has_ulalgid() const {
  return this != internal_default_instance() && ulalgid_ != nullptr;
}
inline void Req_SKF_SetSymmKey::clear_ulalgid() {
  if (GetArenaNoVirtual() == nullptr && ulalgid_ != nullptr) {
    delete ulalgid_;
  }
  ulalgid_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_SetSymmKey::ulalgid() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulalgid_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_SetSymmKey.ulAlgID)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_SetSymmKey::release_ulalgid() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_SetSymmKey.ulAlgID)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulalgid_;
  ulalgid_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_SetSymmKey::mutable_ulalgid() {
  
  if (ulalgid_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulalgid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_SetSymmKey.ulAlgID)
  return ulalgid_;
}
inline void Req_SKF_SetSymmKey::set_allocated_ulalgid(::com::westone::skf::WST_PROTO_UINT32* ulalgid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulalgid_;
  }
  if (ulalgid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulalgid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulalgid, submessage_arena);
    }
    
  } else {
    
  }
  ulalgid_ = ulalgid;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_SetSymmKey.ulAlgID)
}

// .com.westone.skf.WST_PROTO_UINT32 phKey = 4;
inline bool Req_SKF_SetSymmKey::has_phkey() const {
  return this != internal_default_instance() && phkey_ != nullptr;
}
inline void Req_SKF_SetSymmKey::clear_phkey() {
  if (GetArenaNoVirtual() == nullptr && phkey_ != nullptr) {
    delete phkey_;
  }
  phkey_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_SetSymmKey::phkey() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = phkey_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_SetSymmKey.phKey)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_SetSymmKey::release_phkey() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_SetSymmKey.phKey)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = phkey_;
  phkey_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_SetSymmKey::mutable_phkey() {
  
  if (phkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    phkey_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_SetSymmKey.phKey)
  return phkey_;
}
inline void Req_SKF_SetSymmKey::set_allocated_phkey(::com::westone::skf::WST_PROTO_UINT32* phkey) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete phkey_;
  }
  if (phkey) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phkey = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phkey, submessage_arena);
    }
    
  } else {
    
  }
  phkey_ = phkey;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_SetSymmKey.phKey)
}

// -------------------------------------------------------------------

// Rsp_SKF_SetSymmKey

// .com.westone.skf.WST_PROTO_UINT32 phKey = 1;
inline bool Rsp_SKF_SetSymmKey::has_phkey() const {
  return this != internal_default_instance() && phkey_ != nullptr;
}
inline void Rsp_SKF_SetSymmKey::clear_phkey() {
  if (GetArenaNoVirtual() == nullptr && phkey_ != nullptr) {
    delete phkey_;
  }
  phkey_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_SetSymmKey::phkey() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = phkey_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_SetSymmKey.phKey)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_SetSymmKey::release_phkey() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_SetSymmKey.phKey)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = phkey_;
  phkey_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_SetSymmKey::mutable_phkey() {
  
  if (phkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    phkey_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_SetSymmKey.phKey)
  return phkey_;
}
inline void Rsp_SKF_SetSymmKey::set_allocated_phkey(::com::westone::skf::WST_PROTO_UINT32* phkey) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete phkey_;
  }
  if (phkey) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phkey = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phkey, submessage_arena);
    }
    
  } else {
    
  }
  phkey_ = phkey;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_SetSymmKey.phKey)
}

// -------------------------------------------------------------------

// Req_SKF_EncryptInit

// .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
inline bool Req_SKF_EncryptInit::has_hkey() const {
  return this != internal_default_instance() && hkey_ != nullptr;
}
inline void Req_SKF_EncryptInit::clear_hkey() {
  if (GetArenaNoVirtual() == nullptr && hkey_ != nullptr) {
    delete hkey_;
  }
  hkey_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_EncryptInit::hkey() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hkey_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_EncryptInit.hKey)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_EncryptInit::release_hkey() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_EncryptInit.hKey)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hkey_;
  hkey_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_EncryptInit::mutable_hkey() {
  
  if (hkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hkey_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_EncryptInit.hKey)
  return hkey_;
}
inline void Req_SKF_EncryptInit::set_allocated_hkey(::com::westone::skf::WST_PROTO_UINT32* hkey) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hkey_;
  }
  if (hkey) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hkey = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hkey, submessage_arena);
    }
    
  } else {
    
  }
  hkey_ = hkey;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_EncryptInit.hKey)
}

// .com.westone.skf.SKF_BLOCKCIPHERPARAM EncryptParam = 2;
inline bool Req_SKF_EncryptInit::has_encryptparam() const {
  return this != internal_default_instance() && encryptparam_ != nullptr;
}
inline void Req_SKF_EncryptInit::clear_encryptparam() {
  if (GetArenaNoVirtual() == nullptr && encryptparam_ != nullptr) {
    delete encryptparam_;
  }
  encryptparam_ = nullptr;
}
inline const ::com::westone::skf::SKF_BLOCKCIPHERPARAM& Req_SKF_EncryptInit::encryptparam() const {
  const ::com::westone::skf::SKF_BLOCKCIPHERPARAM* p = encryptparam_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_EncryptInit.EncryptParam)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_BLOCKCIPHERPARAM*>(
      &::com::westone::skf::_SKF_BLOCKCIPHERPARAM_default_instance_);
}
inline ::com::westone::skf::SKF_BLOCKCIPHERPARAM* Req_SKF_EncryptInit::release_encryptparam() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_EncryptInit.EncryptParam)
  
  ::com::westone::skf::SKF_BLOCKCIPHERPARAM* temp = encryptparam_;
  encryptparam_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_BLOCKCIPHERPARAM* Req_SKF_EncryptInit::mutable_encryptparam() {
  
  if (encryptparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_BLOCKCIPHERPARAM>(GetArenaNoVirtual());
    encryptparam_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_EncryptInit.EncryptParam)
  return encryptparam_;
}
inline void Req_SKF_EncryptInit::set_allocated_encryptparam(::com::westone::skf::SKF_BLOCKCIPHERPARAM* encryptparam) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete encryptparam_;
  }
  if (encryptparam) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      encryptparam = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, encryptparam, submessage_arena);
    }
    
  } else {
    
  }
  encryptparam_ = encryptparam;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_EncryptInit.EncryptParam)
}

// -------------------------------------------------------------------

// Rsp_SKF_EncryptInit

// -------------------------------------------------------------------

// Req_SKF_Encrypt

// .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
inline bool Req_SKF_Encrypt::has_hkey() const {
  return this != internal_default_instance() && hkey_ != nullptr;
}
inline void Req_SKF_Encrypt::clear_hkey() {
  if (GetArenaNoVirtual() == nullptr && hkey_ != nullptr) {
    delete hkey_;
  }
  hkey_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_Encrypt::hkey() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hkey_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_Encrypt.hKey)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_Encrypt::release_hkey() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_Encrypt.hKey)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hkey_;
  hkey_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_Encrypt::mutable_hkey() {
  
  if (hkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hkey_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_Encrypt.hKey)
  return hkey_;
}
inline void Req_SKF_Encrypt::set_allocated_hkey(::com::westone::skf::WST_PROTO_UINT32* hkey) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hkey_;
  }
  if (hkey) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hkey = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hkey, submessage_arena);
    }
    
  } else {
    
  }
  hkey_ = hkey;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_Encrypt.hKey)
}

// bytes pbData = 2;
inline void Req_SKF_Encrypt::clear_pbdata() {
  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_Encrypt::pbdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_Encrypt.pbData)
  return pbdata_.GetNoArena();
}
inline void Req_SKF_Encrypt::set_pbdata(const ::std::string& value) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_Encrypt.pbData)
}
#if LANG_CXX11
inline void Req_SKF_Encrypt::set_pbdata(::std::string&& value) {
  
  pbdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_Encrypt.pbData)
}
#endif
inline void Req_SKF_Encrypt::set_pbdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_Encrypt.pbData)
}
inline void Req_SKF_Encrypt::set_pbdata(const void* value, size_t size) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_Encrypt.pbData)
}
inline ::std::string* Req_SKF_Encrypt::mutable_pbdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_Encrypt.pbData)
  return pbdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_Encrypt::release_pbdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_Encrypt.pbData)
  
  return pbdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_Encrypt::set_allocated_pbdata(::std::string* pbdata) {
  if (pbdata != nullptr) {
    
  } else {
    
  }
  pbdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_Encrypt.pbData)
}

// .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
inline bool Req_SKF_Encrypt::has_uldatalen() const {
  return this != internal_default_instance() && uldatalen_ != nullptr;
}
inline void Req_SKF_Encrypt::clear_uldatalen() {
  if (GetArenaNoVirtual() == nullptr && uldatalen_ != nullptr) {
    delete uldatalen_;
  }
  uldatalen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_Encrypt::uldatalen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = uldatalen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_Encrypt.ulDataLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_Encrypt::release_uldatalen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_Encrypt.ulDataLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = uldatalen_;
  uldatalen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_Encrypt::mutable_uldatalen() {
  
  if (uldatalen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    uldatalen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_Encrypt.ulDataLen)
  return uldatalen_;
}
inline void Req_SKF_Encrypt::set_allocated_uldatalen(::com::westone::skf::WST_PROTO_UINT32* uldatalen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete uldatalen_;
  }
  if (uldatalen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uldatalen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uldatalen, submessage_arena);
    }
    
  } else {
    
  }
  uldatalen_ = uldatalen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_Encrypt.ulDataLen)
}

// bytes pbEncryptedData = 4;
inline void Req_SKF_Encrypt::clear_pbencrypteddata() {
  pbencrypteddata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_Encrypt::pbencrypteddata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_Encrypt.pbEncryptedData)
  return pbencrypteddata_.GetNoArena();
}
inline void Req_SKF_Encrypt::set_pbencrypteddata(const ::std::string& value) {
  
  pbencrypteddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_Encrypt.pbEncryptedData)
}
#if LANG_CXX11
inline void Req_SKF_Encrypt::set_pbencrypteddata(::std::string&& value) {
  
  pbencrypteddata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_Encrypt.pbEncryptedData)
}
#endif
inline void Req_SKF_Encrypt::set_pbencrypteddata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbencrypteddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_Encrypt.pbEncryptedData)
}
inline void Req_SKF_Encrypt::set_pbencrypteddata(const void* value, size_t size) {
  
  pbencrypteddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_Encrypt.pbEncryptedData)
}
inline ::std::string* Req_SKF_Encrypt::mutable_pbencrypteddata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_Encrypt.pbEncryptedData)
  return pbencrypteddata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_Encrypt::release_pbencrypteddata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_Encrypt.pbEncryptedData)
  
  return pbencrypteddata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_Encrypt::set_allocated_pbencrypteddata(::std::string* pbencrypteddata) {
  if (pbencrypteddata != nullptr) {
    
  } else {
    
  }
  pbencrypteddata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbencrypteddata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_Encrypt.pbEncryptedData)
}

// .com.westone.skf.WST_PROTO_UINT32 pulEncryptedLen = 5;
inline bool Req_SKF_Encrypt::has_pulencryptedlen() const {
  return this != internal_default_instance() && pulencryptedlen_ != nullptr;
}
inline void Req_SKF_Encrypt::clear_pulencryptedlen() {
  if (GetArenaNoVirtual() == nullptr && pulencryptedlen_ != nullptr) {
    delete pulencryptedlen_;
  }
  pulencryptedlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_Encrypt::pulencryptedlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulencryptedlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_Encrypt.pulEncryptedLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_Encrypt::release_pulencryptedlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_Encrypt.pulEncryptedLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulencryptedlen_;
  pulencryptedlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_Encrypt::mutable_pulencryptedlen() {
  
  if (pulencryptedlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulencryptedlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_Encrypt.pulEncryptedLen)
  return pulencryptedlen_;
}
inline void Req_SKF_Encrypt::set_allocated_pulencryptedlen(::com::westone::skf::WST_PROTO_UINT32* pulencryptedlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulencryptedlen_;
  }
  if (pulencryptedlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulencryptedlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulencryptedlen, submessage_arena);
    }
    
  } else {
    
  }
  pulencryptedlen_ = pulencryptedlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_Encrypt.pulEncryptedLen)
}

// -------------------------------------------------------------------

// Rsp_SKF_Encrypt

// bytes pbEncryptedData = 1;
inline void Rsp_SKF_Encrypt::clear_pbencrypteddata() {
  pbencrypteddata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rsp_SKF_Encrypt::pbencrypteddata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_Encrypt.pbEncryptedData)
  return pbencrypteddata_.GetNoArena();
}
inline void Rsp_SKF_Encrypt::set_pbencrypteddata(const ::std::string& value) {
  
  pbencrypteddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Rsp_SKF_Encrypt.pbEncryptedData)
}
#if LANG_CXX11
inline void Rsp_SKF_Encrypt::set_pbencrypteddata(::std::string&& value) {
  
  pbencrypteddata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Rsp_SKF_Encrypt.pbEncryptedData)
}
#endif
inline void Rsp_SKF_Encrypt::set_pbencrypteddata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbencrypteddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Rsp_SKF_Encrypt.pbEncryptedData)
}
inline void Rsp_SKF_Encrypt::set_pbencrypteddata(const void* value, size_t size) {
  
  pbencrypteddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Rsp_SKF_Encrypt.pbEncryptedData)
}
inline ::std::string* Rsp_SKF_Encrypt::mutable_pbencrypteddata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_Encrypt.pbEncryptedData)
  return pbencrypteddata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rsp_SKF_Encrypt::release_pbencrypteddata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_Encrypt.pbEncryptedData)
  
  return pbencrypteddata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rsp_SKF_Encrypt::set_allocated_pbencrypteddata(::std::string* pbencrypteddata) {
  if (pbencrypteddata != nullptr) {
    
  } else {
    
  }
  pbencrypteddata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbencrypteddata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_Encrypt.pbEncryptedData)
}

// .com.westone.skf.WST_PROTO_UINT32 pulEncryptedLen = 2;
inline bool Rsp_SKF_Encrypt::has_pulencryptedlen() const {
  return this != internal_default_instance() && pulencryptedlen_ != nullptr;
}
inline void Rsp_SKF_Encrypt::clear_pulencryptedlen() {
  if (GetArenaNoVirtual() == nullptr && pulencryptedlen_ != nullptr) {
    delete pulencryptedlen_;
  }
  pulencryptedlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_Encrypt::pulencryptedlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulencryptedlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_Encrypt.pulEncryptedLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_Encrypt::release_pulencryptedlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_Encrypt.pulEncryptedLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulencryptedlen_;
  pulencryptedlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_Encrypt::mutable_pulencryptedlen() {
  
  if (pulencryptedlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulencryptedlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_Encrypt.pulEncryptedLen)
  return pulencryptedlen_;
}
inline void Rsp_SKF_Encrypt::set_allocated_pulencryptedlen(::com::westone::skf::WST_PROTO_UINT32* pulencryptedlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulencryptedlen_;
  }
  if (pulencryptedlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulencryptedlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulencryptedlen, submessage_arena);
    }
    
  } else {
    
  }
  pulencryptedlen_ = pulencryptedlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_Encrypt.pulEncryptedLen)
}

// -------------------------------------------------------------------

// Req_SKF_EncryptUpdate

// .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
inline bool Req_SKF_EncryptUpdate::has_hkey() const {
  return this != internal_default_instance() && hkey_ != nullptr;
}
inline void Req_SKF_EncryptUpdate::clear_hkey() {
  if (GetArenaNoVirtual() == nullptr && hkey_ != nullptr) {
    delete hkey_;
  }
  hkey_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_EncryptUpdate::hkey() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hkey_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_EncryptUpdate.hKey)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_EncryptUpdate::release_hkey() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_EncryptUpdate.hKey)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hkey_;
  hkey_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_EncryptUpdate::mutable_hkey() {
  
  if (hkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hkey_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_EncryptUpdate.hKey)
  return hkey_;
}
inline void Req_SKF_EncryptUpdate::set_allocated_hkey(::com::westone::skf::WST_PROTO_UINT32* hkey) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hkey_;
  }
  if (hkey) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hkey = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hkey, submessage_arena);
    }
    
  } else {
    
  }
  hkey_ = hkey;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_EncryptUpdate.hKey)
}

// bytes pbData = 2;
inline void Req_SKF_EncryptUpdate::clear_pbdata() {
  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_EncryptUpdate::pbdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_EncryptUpdate.pbData)
  return pbdata_.GetNoArena();
}
inline void Req_SKF_EncryptUpdate::set_pbdata(const ::std::string& value) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_EncryptUpdate.pbData)
}
#if LANG_CXX11
inline void Req_SKF_EncryptUpdate::set_pbdata(::std::string&& value) {
  
  pbdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_EncryptUpdate.pbData)
}
#endif
inline void Req_SKF_EncryptUpdate::set_pbdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_EncryptUpdate.pbData)
}
inline void Req_SKF_EncryptUpdate::set_pbdata(const void* value, size_t size) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_EncryptUpdate.pbData)
}
inline ::std::string* Req_SKF_EncryptUpdate::mutable_pbdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_EncryptUpdate.pbData)
  return pbdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_EncryptUpdate::release_pbdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_EncryptUpdate.pbData)
  
  return pbdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_EncryptUpdate::set_allocated_pbdata(::std::string* pbdata) {
  if (pbdata != nullptr) {
    
  } else {
    
  }
  pbdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_EncryptUpdate.pbData)
}

// .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
inline bool Req_SKF_EncryptUpdate::has_uldatalen() const {
  return this != internal_default_instance() && uldatalen_ != nullptr;
}
inline void Req_SKF_EncryptUpdate::clear_uldatalen() {
  if (GetArenaNoVirtual() == nullptr && uldatalen_ != nullptr) {
    delete uldatalen_;
  }
  uldatalen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_EncryptUpdate::uldatalen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = uldatalen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_EncryptUpdate.ulDataLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_EncryptUpdate::release_uldatalen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_EncryptUpdate.ulDataLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = uldatalen_;
  uldatalen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_EncryptUpdate::mutable_uldatalen() {
  
  if (uldatalen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    uldatalen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_EncryptUpdate.ulDataLen)
  return uldatalen_;
}
inline void Req_SKF_EncryptUpdate::set_allocated_uldatalen(::com::westone::skf::WST_PROTO_UINT32* uldatalen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete uldatalen_;
  }
  if (uldatalen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uldatalen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uldatalen, submessage_arena);
    }
    
  } else {
    
  }
  uldatalen_ = uldatalen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_EncryptUpdate.ulDataLen)
}

// bytes pbEncryptedData = 4;
inline void Req_SKF_EncryptUpdate::clear_pbencrypteddata() {
  pbencrypteddata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_EncryptUpdate::pbencrypteddata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_EncryptUpdate.pbEncryptedData)
  return pbencrypteddata_.GetNoArena();
}
inline void Req_SKF_EncryptUpdate::set_pbencrypteddata(const ::std::string& value) {
  
  pbencrypteddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_EncryptUpdate.pbEncryptedData)
}
#if LANG_CXX11
inline void Req_SKF_EncryptUpdate::set_pbencrypteddata(::std::string&& value) {
  
  pbencrypteddata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_EncryptUpdate.pbEncryptedData)
}
#endif
inline void Req_SKF_EncryptUpdate::set_pbencrypteddata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbencrypteddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_EncryptUpdate.pbEncryptedData)
}
inline void Req_SKF_EncryptUpdate::set_pbencrypteddata(const void* value, size_t size) {
  
  pbencrypteddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_EncryptUpdate.pbEncryptedData)
}
inline ::std::string* Req_SKF_EncryptUpdate::mutable_pbencrypteddata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_EncryptUpdate.pbEncryptedData)
  return pbencrypteddata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_EncryptUpdate::release_pbencrypteddata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_EncryptUpdate.pbEncryptedData)
  
  return pbencrypteddata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_EncryptUpdate::set_allocated_pbencrypteddata(::std::string* pbencrypteddata) {
  if (pbencrypteddata != nullptr) {
    
  } else {
    
  }
  pbencrypteddata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbencrypteddata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_EncryptUpdate.pbEncryptedData)
}

// .com.westone.skf.WST_PROTO_UINT32 pulEncryptedLen = 5;
inline bool Req_SKF_EncryptUpdate::has_pulencryptedlen() const {
  return this != internal_default_instance() && pulencryptedlen_ != nullptr;
}
inline void Req_SKF_EncryptUpdate::clear_pulencryptedlen() {
  if (GetArenaNoVirtual() == nullptr && pulencryptedlen_ != nullptr) {
    delete pulencryptedlen_;
  }
  pulencryptedlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_EncryptUpdate::pulencryptedlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulencryptedlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_EncryptUpdate.pulEncryptedLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_EncryptUpdate::release_pulencryptedlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_EncryptUpdate.pulEncryptedLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulencryptedlen_;
  pulencryptedlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_EncryptUpdate::mutable_pulencryptedlen() {
  
  if (pulencryptedlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulencryptedlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_EncryptUpdate.pulEncryptedLen)
  return pulencryptedlen_;
}
inline void Req_SKF_EncryptUpdate::set_allocated_pulencryptedlen(::com::westone::skf::WST_PROTO_UINT32* pulencryptedlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulencryptedlen_;
  }
  if (pulencryptedlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulencryptedlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulencryptedlen, submessage_arena);
    }
    
  } else {
    
  }
  pulencryptedlen_ = pulencryptedlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_EncryptUpdate.pulEncryptedLen)
}

// -------------------------------------------------------------------

// Rsp_SKF_EncryptUpdate

// bytes pbEncryptedData = 1;
inline void Rsp_SKF_EncryptUpdate::clear_pbencrypteddata() {
  pbencrypteddata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rsp_SKF_EncryptUpdate::pbencrypteddata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_EncryptUpdate.pbEncryptedData)
  return pbencrypteddata_.GetNoArena();
}
inline void Rsp_SKF_EncryptUpdate::set_pbencrypteddata(const ::std::string& value) {
  
  pbencrypteddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Rsp_SKF_EncryptUpdate.pbEncryptedData)
}
#if LANG_CXX11
inline void Rsp_SKF_EncryptUpdate::set_pbencrypteddata(::std::string&& value) {
  
  pbencrypteddata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Rsp_SKF_EncryptUpdate.pbEncryptedData)
}
#endif
inline void Rsp_SKF_EncryptUpdate::set_pbencrypteddata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbencrypteddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Rsp_SKF_EncryptUpdate.pbEncryptedData)
}
inline void Rsp_SKF_EncryptUpdate::set_pbencrypteddata(const void* value, size_t size) {
  
  pbencrypteddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Rsp_SKF_EncryptUpdate.pbEncryptedData)
}
inline ::std::string* Rsp_SKF_EncryptUpdate::mutable_pbencrypteddata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_EncryptUpdate.pbEncryptedData)
  return pbencrypteddata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rsp_SKF_EncryptUpdate::release_pbencrypteddata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_EncryptUpdate.pbEncryptedData)
  
  return pbencrypteddata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rsp_SKF_EncryptUpdate::set_allocated_pbencrypteddata(::std::string* pbencrypteddata) {
  if (pbencrypteddata != nullptr) {
    
  } else {
    
  }
  pbencrypteddata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbencrypteddata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_EncryptUpdate.pbEncryptedData)
}

// .com.westone.skf.WST_PROTO_UINT32 pulEncryptedLen = 2;
inline bool Rsp_SKF_EncryptUpdate::has_pulencryptedlen() const {
  return this != internal_default_instance() && pulencryptedlen_ != nullptr;
}
inline void Rsp_SKF_EncryptUpdate::clear_pulencryptedlen() {
  if (GetArenaNoVirtual() == nullptr && pulencryptedlen_ != nullptr) {
    delete pulencryptedlen_;
  }
  pulencryptedlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_EncryptUpdate::pulencryptedlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulencryptedlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_EncryptUpdate.pulEncryptedLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_EncryptUpdate::release_pulencryptedlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_EncryptUpdate.pulEncryptedLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulencryptedlen_;
  pulencryptedlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_EncryptUpdate::mutable_pulencryptedlen() {
  
  if (pulencryptedlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulencryptedlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_EncryptUpdate.pulEncryptedLen)
  return pulencryptedlen_;
}
inline void Rsp_SKF_EncryptUpdate::set_allocated_pulencryptedlen(::com::westone::skf::WST_PROTO_UINT32* pulencryptedlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulencryptedlen_;
  }
  if (pulencryptedlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulencryptedlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulencryptedlen, submessage_arena);
    }
    
  } else {
    
  }
  pulencryptedlen_ = pulencryptedlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_EncryptUpdate.pulEncryptedLen)
}

// -------------------------------------------------------------------

// Req_SKF_EncryptFinal

// .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
inline bool Req_SKF_EncryptFinal::has_hkey() const {
  return this != internal_default_instance() && hkey_ != nullptr;
}
inline void Req_SKF_EncryptFinal::clear_hkey() {
  if (GetArenaNoVirtual() == nullptr && hkey_ != nullptr) {
    delete hkey_;
  }
  hkey_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_EncryptFinal::hkey() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hkey_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_EncryptFinal.hKey)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_EncryptFinal::release_hkey() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_EncryptFinal.hKey)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hkey_;
  hkey_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_EncryptFinal::mutable_hkey() {
  
  if (hkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hkey_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_EncryptFinal.hKey)
  return hkey_;
}
inline void Req_SKF_EncryptFinal::set_allocated_hkey(::com::westone::skf::WST_PROTO_UINT32* hkey) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hkey_;
  }
  if (hkey) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hkey = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hkey, submessage_arena);
    }
    
  } else {
    
  }
  hkey_ = hkey;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_EncryptFinal.hKey)
}

// bytes pbEncryptedData = 2;
inline void Req_SKF_EncryptFinal::clear_pbencrypteddata() {
  pbencrypteddata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_EncryptFinal::pbencrypteddata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_EncryptFinal.pbEncryptedData)
  return pbencrypteddata_.GetNoArena();
}
inline void Req_SKF_EncryptFinal::set_pbencrypteddata(const ::std::string& value) {
  
  pbencrypteddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_EncryptFinal.pbEncryptedData)
}
#if LANG_CXX11
inline void Req_SKF_EncryptFinal::set_pbencrypteddata(::std::string&& value) {
  
  pbencrypteddata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_EncryptFinal.pbEncryptedData)
}
#endif
inline void Req_SKF_EncryptFinal::set_pbencrypteddata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbencrypteddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_EncryptFinal.pbEncryptedData)
}
inline void Req_SKF_EncryptFinal::set_pbencrypteddata(const void* value, size_t size) {
  
  pbencrypteddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_EncryptFinal.pbEncryptedData)
}
inline ::std::string* Req_SKF_EncryptFinal::mutable_pbencrypteddata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_EncryptFinal.pbEncryptedData)
  return pbencrypteddata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_EncryptFinal::release_pbencrypteddata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_EncryptFinal.pbEncryptedData)
  
  return pbencrypteddata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_EncryptFinal::set_allocated_pbencrypteddata(::std::string* pbencrypteddata) {
  if (pbencrypteddata != nullptr) {
    
  } else {
    
  }
  pbencrypteddata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbencrypteddata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_EncryptFinal.pbEncryptedData)
}

// .com.westone.skf.WST_PROTO_UINT32 pulEncryptedDataLen = 3;
inline bool Req_SKF_EncryptFinal::has_pulencrypteddatalen() const {
  return this != internal_default_instance() && pulencrypteddatalen_ != nullptr;
}
inline void Req_SKF_EncryptFinal::clear_pulencrypteddatalen() {
  if (GetArenaNoVirtual() == nullptr && pulencrypteddatalen_ != nullptr) {
    delete pulencrypteddatalen_;
  }
  pulencrypteddatalen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_EncryptFinal::pulencrypteddatalen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulencrypteddatalen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_EncryptFinal.pulEncryptedDataLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_EncryptFinal::release_pulencrypteddatalen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_EncryptFinal.pulEncryptedDataLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulencrypteddatalen_;
  pulencrypteddatalen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_EncryptFinal::mutable_pulencrypteddatalen() {
  
  if (pulencrypteddatalen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulencrypteddatalen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_EncryptFinal.pulEncryptedDataLen)
  return pulencrypteddatalen_;
}
inline void Req_SKF_EncryptFinal::set_allocated_pulencrypteddatalen(::com::westone::skf::WST_PROTO_UINT32* pulencrypteddatalen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulencrypteddatalen_;
  }
  if (pulencrypteddatalen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulencrypteddatalen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulencrypteddatalen, submessage_arena);
    }
    
  } else {
    
  }
  pulencrypteddatalen_ = pulencrypteddatalen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_EncryptFinal.pulEncryptedDataLen)
}

// -------------------------------------------------------------------

// Rsp_SKF_EncryptFinal

// bytes pbEncryptedData = 1;
inline void Rsp_SKF_EncryptFinal::clear_pbencrypteddata() {
  pbencrypteddata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rsp_SKF_EncryptFinal::pbencrypteddata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_EncryptFinal.pbEncryptedData)
  return pbencrypteddata_.GetNoArena();
}
inline void Rsp_SKF_EncryptFinal::set_pbencrypteddata(const ::std::string& value) {
  
  pbencrypteddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Rsp_SKF_EncryptFinal.pbEncryptedData)
}
#if LANG_CXX11
inline void Rsp_SKF_EncryptFinal::set_pbencrypteddata(::std::string&& value) {
  
  pbencrypteddata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Rsp_SKF_EncryptFinal.pbEncryptedData)
}
#endif
inline void Rsp_SKF_EncryptFinal::set_pbencrypteddata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbencrypteddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Rsp_SKF_EncryptFinal.pbEncryptedData)
}
inline void Rsp_SKF_EncryptFinal::set_pbencrypteddata(const void* value, size_t size) {
  
  pbencrypteddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Rsp_SKF_EncryptFinal.pbEncryptedData)
}
inline ::std::string* Rsp_SKF_EncryptFinal::mutable_pbencrypteddata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_EncryptFinal.pbEncryptedData)
  return pbencrypteddata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rsp_SKF_EncryptFinal::release_pbencrypteddata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_EncryptFinal.pbEncryptedData)
  
  return pbencrypteddata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rsp_SKF_EncryptFinal::set_allocated_pbencrypteddata(::std::string* pbencrypteddata) {
  if (pbencrypteddata != nullptr) {
    
  } else {
    
  }
  pbencrypteddata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbencrypteddata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_EncryptFinal.pbEncryptedData)
}

// .com.westone.skf.WST_PROTO_UINT32 pulEncryptedDataLen = 2;
inline bool Rsp_SKF_EncryptFinal::has_pulencrypteddatalen() const {
  return this != internal_default_instance() && pulencrypteddatalen_ != nullptr;
}
inline void Rsp_SKF_EncryptFinal::clear_pulencrypteddatalen() {
  if (GetArenaNoVirtual() == nullptr && pulencrypteddatalen_ != nullptr) {
    delete pulencrypteddatalen_;
  }
  pulencrypteddatalen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_EncryptFinal::pulencrypteddatalen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulencrypteddatalen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_EncryptFinal.pulEncryptedDataLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_EncryptFinal::release_pulencrypteddatalen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_EncryptFinal.pulEncryptedDataLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulencrypteddatalen_;
  pulencrypteddatalen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_EncryptFinal::mutable_pulencrypteddatalen() {
  
  if (pulencrypteddatalen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulencrypteddatalen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_EncryptFinal.pulEncryptedDataLen)
  return pulencrypteddatalen_;
}
inline void Rsp_SKF_EncryptFinal::set_allocated_pulencrypteddatalen(::com::westone::skf::WST_PROTO_UINT32* pulencrypteddatalen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulencrypteddatalen_;
  }
  if (pulencrypteddatalen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulencrypteddatalen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulencrypteddatalen, submessage_arena);
    }
    
  } else {
    
  }
  pulencrypteddatalen_ = pulencrypteddatalen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_EncryptFinal.pulEncryptedDataLen)
}

// -------------------------------------------------------------------

// Req_SKF_DecryptInit

// .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
inline bool Req_SKF_DecryptInit::has_hkey() const {
  return this != internal_default_instance() && hkey_ != nullptr;
}
inline void Req_SKF_DecryptInit::clear_hkey() {
  if (GetArenaNoVirtual() == nullptr && hkey_ != nullptr) {
    delete hkey_;
  }
  hkey_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_DecryptInit::hkey() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hkey_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DecryptInit.hKey)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DecryptInit::release_hkey() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DecryptInit.hKey)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hkey_;
  hkey_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DecryptInit::mutable_hkey() {
  
  if (hkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hkey_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DecryptInit.hKey)
  return hkey_;
}
inline void Req_SKF_DecryptInit::set_allocated_hkey(::com::westone::skf::WST_PROTO_UINT32* hkey) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hkey_;
  }
  if (hkey) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hkey = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hkey, submessage_arena);
    }
    
  } else {
    
  }
  hkey_ = hkey;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DecryptInit.hKey)
}

// .com.westone.skf.SKF_BLOCKCIPHERPARAM DecryptParam = 2;
inline bool Req_SKF_DecryptInit::has_decryptparam() const {
  return this != internal_default_instance() && decryptparam_ != nullptr;
}
inline void Req_SKF_DecryptInit::clear_decryptparam() {
  if (GetArenaNoVirtual() == nullptr && decryptparam_ != nullptr) {
    delete decryptparam_;
  }
  decryptparam_ = nullptr;
}
inline const ::com::westone::skf::SKF_BLOCKCIPHERPARAM& Req_SKF_DecryptInit::decryptparam() const {
  const ::com::westone::skf::SKF_BLOCKCIPHERPARAM* p = decryptparam_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DecryptInit.DecryptParam)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_BLOCKCIPHERPARAM*>(
      &::com::westone::skf::_SKF_BLOCKCIPHERPARAM_default_instance_);
}
inline ::com::westone::skf::SKF_BLOCKCIPHERPARAM* Req_SKF_DecryptInit::release_decryptparam() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DecryptInit.DecryptParam)
  
  ::com::westone::skf::SKF_BLOCKCIPHERPARAM* temp = decryptparam_;
  decryptparam_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_BLOCKCIPHERPARAM* Req_SKF_DecryptInit::mutable_decryptparam() {
  
  if (decryptparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_BLOCKCIPHERPARAM>(GetArenaNoVirtual());
    decryptparam_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DecryptInit.DecryptParam)
  return decryptparam_;
}
inline void Req_SKF_DecryptInit::set_allocated_decryptparam(::com::westone::skf::SKF_BLOCKCIPHERPARAM* decryptparam) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete decryptparam_;
  }
  if (decryptparam) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      decryptparam = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, decryptparam, submessage_arena);
    }
    
  } else {
    
  }
  decryptparam_ = decryptparam;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DecryptInit.DecryptParam)
}

// -------------------------------------------------------------------

// Rsp_SKF_DecryptInit

// -------------------------------------------------------------------

// Req_SKF_Decrypt

// .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
inline bool Req_SKF_Decrypt::has_hkey() const {
  return this != internal_default_instance() && hkey_ != nullptr;
}
inline void Req_SKF_Decrypt::clear_hkey() {
  if (GetArenaNoVirtual() == nullptr && hkey_ != nullptr) {
    delete hkey_;
  }
  hkey_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_Decrypt::hkey() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hkey_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_Decrypt.hKey)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_Decrypt::release_hkey() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_Decrypt.hKey)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hkey_;
  hkey_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_Decrypt::mutable_hkey() {
  
  if (hkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hkey_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_Decrypt.hKey)
  return hkey_;
}
inline void Req_SKF_Decrypt::set_allocated_hkey(::com::westone::skf::WST_PROTO_UINT32* hkey) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hkey_;
  }
  if (hkey) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hkey = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hkey, submessage_arena);
    }
    
  } else {
    
  }
  hkey_ = hkey;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_Decrypt.hKey)
}

// bytes pbEncryptedData = 2;
inline void Req_SKF_Decrypt::clear_pbencrypteddata() {
  pbencrypteddata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_Decrypt::pbencrypteddata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_Decrypt.pbEncryptedData)
  return pbencrypteddata_.GetNoArena();
}
inline void Req_SKF_Decrypt::set_pbencrypteddata(const ::std::string& value) {
  
  pbencrypteddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_Decrypt.pbEncryptedData)
}
#if LANG_CXX11
inline void Req_SKF_Decrypt::set_pbencrypteddata(::std::string&& value) {
  
  pbencrypteddata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_Decrypt.pbEncryptedData)
}
#endif
inline void Req_SKF_Decrypt::set_pbencrypteddata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbencrypteddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_Decrypt.pbEncryptedData)
}
inline void Req_SKF_Decrypt::set_pbencrypteddata(const void* value, size_t size) {
  
  pbencrypteddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_Decrypt.pbEncryptedData)
}
inline ::std::string* Req_SKF_Decrypt::mutable_pbencrypteddata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_Decrypt.pbEncryptedData)
  return pbencrypteddata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_Decrypt::release_pbencrypteddata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_Decrypt.pbEncryptedData)
  
  return pbencrypteddata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_Decrypt::set_allocated_pbencrypteddata(::std::string* pbencrypteddata) {
  if (pbencrypteddata != nullptr) {
    
  } else {
    
  }
  pbencrypteddata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbencrypteddata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_Decrypt.pbEncryptedData)
}

// .com.westone.skf.WST_PROTO_UINT32 ulEncryptedLen = 3;
inline bool Req_SKF_Decrypt::has_ulencryptedlen() const {
  return this != internal_default_instance() && ulencryptedlen_ != nullptr;
}
inline void Req_SKF_Decrypt::clear_ulencryptedlen() {
  if (GetArenaNoVirtual() == nullptr && ulencryptedlen_ != nullptr) {
    delete ulencryptedlen_;
  }
  ulencryptedlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_Decrypt::ulencryptedlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulencryptedlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_Decrypt.ulEncryptedLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_Decrypt::release_ulencryptedlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_Decrypt.ulEncryptedLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulencryptedlen_;
  ulencryptedlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_Decrypt::mutable_ulencryptedlen() {
  
  if (ulencryptedlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulencryptedlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_Decrypt.ulEncryptedLen)
  return ulencryptedlen_;
}
inline void Req_SKF_Decrypt::set_allocated_ulencryptedlen(::com::westone::skf::WST_PROTO_UINT32* ulencryptedlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulencryptedlen_;
  }
  if (ulencryptedlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulencryptedlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulencryptedlen, submessage_arena);
    }
    
  } else {
    
  }
  ulencryptedlen_ = ulencryptedlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_Decrypt.ulEncryptedLen)
}

// bytes pbData = 4;
inline void Req_SKF_Decrypt::clear_pbdata() {
  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_Decrypt::pbdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_Decrypt.pbData)
  return pbdata_.GetNoArena();
}
inline void Req_SKF_Decrypt::set_pbdata(const ::std::string& value) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_Decrypt.pbData)
}
#if LANG_CXX11
inline void Req_SKF_Decrypt::set_pbdata(::std::string&& value) {
  
  pbdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_Decrypt.pbData)
}
#endif
inline void Req_SKF_Decrypt::set_pbdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_Decrypt.pbData)
}
inline void Req_SKF_Decrypt::set_pbdata(const void* value, size_t size) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_Decrypt.pbData)
}
inline ::std::string* Req_SKF_Decrypt::mutable_pbdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_Decrypt.pbData)
  return pbdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_Decrypt::release_pbdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_Decrypt.pbData)
  
  return pbdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_Decrypt::set_allocated_pbdata(::std::string* pbdata) {
  if (pbdata != nullptr) {
    
  } else {
    
  }
  pbdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_Decrypt.pbData)
}

// .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 5;
inline bool Req_SKF_Decrypt::has_puldatalen() const {
  return this != internal_default_instance() && puldatalen_ != nullptr;
}
inline void Req_SKF_Decrypt::clear_puldatalen() {
  if (GetArenaNoVirtual() == nullptr && puldatalen_ != nullptr) {
    delete puldatalen_;
  }
  puldatalen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_Decrypt::puldatalen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = puldatalen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_Decrypt.pulDataLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_Decrypt::release_puldatalen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_Decrypt.pulDataLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = puldatalen_;
  puldatalen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_Decrypt::mutable_puldatalen() {
  
  if (puldatalen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    puldatalen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_Decrypt.pulDataLen)
  return puldatalen_;
}
inline void Req_SKF_Decrypt::set_allocated_puldatalen(::com::westone::skf::WST_PROTO_UINT32* puldatalen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete puldatalen_;
  }
  if (puldatalen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      puldatalen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, puldatalen, submessage_arena);
    }
    
  } else {
    
  }
  puldatalen_ = puldatalen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_Decrypt.pulDataLen)
}

// -------------------------------------------------------------------

// Rsp_SKF_Decrypt

// bytes pbData = 1;
inline void Rsp_SKF_Decrypt::clear_pbdata() {
  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rsp_SKF_Decrypt::pbdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_Decrypt.pbData)
  return pbdata_.GetNoArena();
}
inline void Rsp_SKF_Decrypt::set_pbdata(const ::std::string& value) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Rsp_SKF_Decrypt.pbData)
}
#if LANG_CXX11
inline void Rsp_SKF_Decrypt::set_pbdata(::std::string&& value) {
  
  pbdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Rsp_SKF_Decrypt.pbData)
}
#endif
inline void Rsp_SKF_Decrypt::set_pbdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Rsp_SKF_Decrypt.pbData)
}
inline void Rsp_SKF_Decrypt::set_pbdata(const void* value, size_t size) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Rsp_SKF_Decrypt.pbData)
}
inline ::std::string* Rsp_SKF_Decrypt::mutable_pbdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_Decrypt.pbData)
  return pbdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rsp_SKF_Decrypt::release_pbdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_Decrypt.pbData)
  
  return pbdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rsp_SKF_Decrypt::set_allocated_pbdata(::std::string* pbdata) {
  if (pbdata != nullptr) {
    
  } else {
    
  }
  pbdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_Decrypt.pbData)
}

// .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 2;
inline bool Rsp_SKF_Decrypt::has_puldatalen() const {
  return this != internal_default_instance() && puldatalen_ != nullptr;
}
inline void Rsp_SKF_Decrypt::clear_puldatalen() {
  if (GetArenaNoVirtual() == nullptr && puldatalen_ != nullptr) {
    delete puldatalen_;
  }
  puldatalen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_Decrypt::puldatalen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = puldatalen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_Decrypt.pulDataLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_Decrypt::release_puldatalen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_Decrypt.pulDataLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = puldatalen_;
  puldatalen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_Decrypt::mutable_puldatalen() {
  
  if (puldatalen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    puldatalen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_Decrypt.pulDataLen)
  return puldatalen_;
}
inline void Rsp_SKF_Decrypt::set_allocated_puldatalen(::com::westone::skf::WST_PROTO_UINT32* puldatalen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete puldatalen_;
  }
  if (puldatalen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      puldatalen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, puldatalen, submessage_arena);
    }
    
  } else {
    
  }
  puldatalen_ = puldatalen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_Decrypt.pulDataLen)
}

// -------------------------------------------------------------------

// Req_SKF_DecryptUpdate

// .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
inline bool Req_SKF_DecryptUpdate::has_hkey() const {
  return this != internal_default_instance() && hkey_ != nullptr;
}
inline void Req_SKF_DecryptUpdate::clear_hkey() {
  if (GetArenaNoVirtual() == nullptr && hkey_ != nullptr) {
    delete hkey_;
  }
  hkey_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_DecryptUpdate::hkey() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hkey_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DecryptUpdate.hKey)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DecryptUpdate::release_hkey() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DecryptUpdate.hKey)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hkey_;
  hkey_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DecryptUpdate::mutable_hkey() {
  
  if (hkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hkey_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DecryptUpdate.hKey)
  return hkey_;
}
inline void Req_SKF_DecryptUpdate::set_allocated_hkey(::com::westone::skf::WST_PROTO_UINT32* hkey) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hkey_;
  }
  if (hkey) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hkey = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hkey, submessage_arena);
    }
    
  } else {
    
  }
  hkey_ = hkey;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DecryptUpdate.hKey)
}

// bytes pbEncryptedData = 2;
inline void Req_SKF_DecryptUpdate::clear_pbencrypteddata() {
  pbencrypteddata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_DecryptUpdate::pbencrypteddata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DecryptUpdate.pbEncryptedData)
  return pbencrypteddata_.GetNoArena();
}
inline void Req_SKF_DecryptUpdate::set_pbencrypteddata(const ::std::string& value) {
  
  pbencrypteddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_DecryptUpdate.pbEncryptedData)
}
#if LANG_CXX11
inline void Req_SKF_DecryptUpdate::set_pbencrypteddata(::std::string&& value) {
  
  pbencrypteddata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_DecryptUpdate.pbEncryptedData)
}
#endif
inline void Req_SKF_DecryptUpdate::set_pbencrypteddata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbencrypteddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_DecryptUpdate.pbEncryptedData)
}
inline void Req_SKF_DecryptUpdate::set_pbencrypteddata(const void* value, size_t size) {
  
  pbencrypteddata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_DecryptUpdate.pbEncryptedData)
}
inline ::std::string* Req_SKF_DecryptUpdate::mutable_pbencrypteddata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DecryptUpdate.pbEncryptedData)
  return pbencrypteddata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_DecryptUpdate::release_pbencrypteddata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DecryptUpdate.pbEncryptedData)
  
  return pbencrypteddata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_DecryptUpdate::set_allocated_pbencrypteddata(::std::string* pbencrypteddata) {
  if (pbencrypteddata != nullptr) {
    
  } else {
    
  }
  pbencrypteddata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbencrypteddata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DecryptUpdate.pbEncryptedData)
}

// .com.westone.skf.WST_PROTO_UINT32 ulEncryptedLen = 3;
inline bool Req_SKF_DecryptUpdate::has_ulencryptedlen() const {
  return this != internal_default_instance() && ulencryptedlen_ != nullptr;
}
inline void Req_SKF_DecryptUpdate::clear_ulencryptedlen() {
  if (GetArenaNoVirtual() == nullptr && ulencryptedlen_ != nullptr) {
    delete ulencryptedlen_;
  }
  ulencryptedlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_DecryptUpdate::ulencryptedlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulencryptedlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DecryptUpdate.ulEncryptedLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DecryptUpdate::release_ulencryptedlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DecryptUpdate.ulEncryptedLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulencryptedlen_;
  ulencryptedlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DecryptUpdate::mutable_ulencryptedlen() {
  
  if (ulencryptedlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulencryptedlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DecryptUpdate.ulEncryptedLen)
  return ulencryptedlen_;
}
inline void Req_SKF_DecryptUpdate::set_allocated_ulencryptedlen(::com::westone::skf::WST_PROTO_UINT32* ulencryptedlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulencryptedlen_;
  }
  if (ulencryptedlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulencryptedlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulencryptedlen, submessage_arena);
    }
    
  } else {
    
  }
  ulencryptedlen_ = ulencryptedlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DecryptUpdate.ulEncryptedLen)
}

// bytes pbData = 4;
inline void Req_SKF_DecryptUpdate::clear_pbdata() {
  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_DecryptUpdate::pbdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DecryptUpdate.pbData)
  return pbdata_.GetNoArena();
}
inline void Req_SKF_DecryptUpdate::set_pbdata(const ::std::string& value) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_DecryptUpdate.pbData)
}
#if LANG_CXX11
inline void Req_SKF_DecryptUpdate::set_pbdata(::std::string&& value) {
  
  pbdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_DecryptUpdate.pbData)
}
#endif
inline void Req_SKF_DecryptUpdate::set_pbdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_DecryptUpdate.pbData)
}
inline void Req_SKF_DecryptUpdate::set_pbdata(const void* value, size_t size) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_DecryptUpdate.pbData)
}
inline ::std::string* Req_SKF_DecryptUpdate::mutable_pbdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DecryptUpdate.pbData)
  return pbdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_DecryptUpdate::release_pbdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DecryptUpdate.pbData)
  
  return pbdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_DecryptUpdate::set_allocated_pbdata(::std::string* pbdata) {
  if (pbdata != nullptr) {
    
  } else {
    
  }
  pbdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DecryptUpdate.pbData)
}

// .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 5;
inline bool Req_SKF_DecryptUpdate::has_puldatalen() const {
  return this != internal_default_instance() && puldatalen_ != nullptr;
}
inline void Req_SKF_DecryptUpdate::clear_puldatalen() {
  if (GetArenaNoVirtual() == nullptr && puldatalen_ != nullptr) {
    delete puldatalen_;
  }
  puldatalen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_DecryptUpdate::puldatalen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = puldatalen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DecryptUpdate.pulDataLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DecryptUpdate::release_puldatalen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DecryptUpdate.pulDataLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = puldatalen_;
  puldatalen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DecryptUpdate::mutable_puldatalen() {
  
  if (puldatalen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    puldatalen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DecryptUpdate.pulDataLen)
  return puldatalen_;
}
inline void Req_SKF_DecryptUpdate::set_allocated_puldatalen(::com::westone::skf::WST_PROTO_UINT32* puldatalen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete puldatalen_;
  }
  if (puldatalen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      puldatalen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, puldatalen, submessage_arena);
    }
    
  } else {
    
  }
  puldatalen_ = puldatalen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DecryptUpdate.pulDataLen)
}

// -------------------------------------------------------------------

// Rsp_SKF_DecryptUpdate

// bytes pbData = 1;
inline void Rsp_SKF_DecryptUpdate::clear_pbdata() {
  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rsp_SKF_DecryptUpdate::pbdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_DecryptUpdate.pbData)
  return pbdata_.GetNoArena();
}
inline void Rsp_SKF_DecryptUpdate::set_pbdata(const ::std::string& value) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Rsp_SKF_DecryptUpdate.pbData)
}
#if LANG_CXX11
inline void Rsp_SKF_DecryptUpdate::set_pbdata(::std::string&& value) {
  
  pbdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Rsp_SKF_DecryptUpdate.pbData)
}
#endif
inline void Rsp_SKF_DecryptUpdate::set_pbdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Rsp_SKF_DecryptUpdate.pbData)
}
inline void Rsp_SKF_DecryptUpdate::set_pbdata(const void* value, size_t size) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Rsp_SKF_DecryptUpdate.pbData)
}
inline ::std::string* Rsp_SKF_DecryptUpdate::mutable_pbdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_DecryptUpdate.pbData)
  return pbdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rsp_SKF_DecryptUpdate::release_pbdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_DecryptUpdate.pbData)
  
  return pbdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rsp_SKF_DecryptUpdate::set_allocated_pbdata(::std::string* pbdata) {
  if (pbdata != nullptr) {
    
  } else {
    
  }
  pbdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_DecryptUpdate.pbData)
}

// .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 2;
inline bool Rsp_SKF_DecryptUpdate::has_puldatalen() const {
  return this != internal_default_instance() && puldatalen_ != nullptr;
}
inline void Rsp_SKF_DecryptUpdate::clear_puldatalen() {
  if (GetArenaNoVirtual() == nullptr && puldatalen_ != nullptr) {
    delete puldatalen_;
  }
  puldatalen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_DecryptUpdate::puldatalen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = puldatalen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_DecryptUpdate.pulDataLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_DecryptUpdate::release_puldatalen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_DecryptUpdate.pulDataLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = puldatalen_;
  puldatalen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_DecryptUpdate::mutable_puldatalen() {
  
  if (puldatalen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    puldatalen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_DecryptUpdate.pulDataLen)
  return puldatalen_;
}
inline void Rsp_SKF_DecryptUpdate::set_allocated_puldatalen(::com::westone::skf::WST_PROTO_UINT32* puldatalen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete puldatalen_;
  }
  if (puldatalen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      puldatalen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, puldatalen, submessage_arena);
    }
    
  } else {
    
  }
  puldatalen_ = puldatalen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_DecryptUpdate.pulDataLen)
}

// -------------------------------------------------------------------

// Req_SKF_DecryptFinal

// .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
inline bool Req_SKF_DecryptFinal::has_hkey() const {
  return this != internal_default_instance() && hkey_ != nullptr;
}
inline void Req_SKF_DecryptFinal::clear_hkey() {
  if (GetArenaNoVirtual() == nullptr && hkey_ != nullptr) {
    delete hkey_;
  }
  hkey_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_DecryptFinal::hkey() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hkey_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DecryptFinal.hKey)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DecryptFinal::release_hkey() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DecryptFinal.hKey)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hkey_;
  hkey_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DecryptFinal::mutable_hkey() {
  
  if (hkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hkey_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DecryptFinal.hKey)
  return hkey_;
}
inline void Req_SKF_DecryptFinal::set_allocated_hkey(::com::westone::skf::WST_PROTO_UINT32* hkey) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hkey_;
  }
  if (hkey) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hkey = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hkey, submessage_arena);
    }
    
  } else {
    
  }
  hkey_ = hkey;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DecryptFinal.hKey)
}

// bytes pbPlainText = 2;
inline void Req_SKF_DecryptFinal::clear_pbplaintext() {
  pbplaintext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_DecryptFinal::pbplaintext() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DecryptFinal.pbPlainText)
  return pbplaintext_.GetNoArena();
}
inline void Req_SKF_DecryptFinal::set_pbplaintext(const ::std::string& value) {
  
  pbplaintext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_DecryptFinal.pbPlainText)
}
#if LANG_CXX11
inline void Req_SKF_DecryptFinal::set_pbplaintext(::std::string&& value) {
  
  pbplaintext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_DecryptFinal.pbPlainText)
}
#endif
inline void Req_SKF_DecryptFinal::set_pbplaintext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbplaintext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_DecryptFinal.pbPlainText)
}
inline void Req_SKF_DecryptFinal::set_pbplaintext(const void* value, size_t size) {
  
  pbplaintext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_DecryptFinal.pbPlainText)
}
inline ::std::string* Req_SKF_DecryptFinal::mutable_pbplaintext() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DecryptFinal.pbPlainText)
  return pbplaintext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_DecryptFinal::release_pbplaintext() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DecryptFinal.pbPlainText)
  
  return pbplaintext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_DecryptFinal::set_allocated_pbplaintext(::std::string* pbplaintext) {
  if (pbplaintext != nullptr) {
    
  } else {
    
  }
  pbplaintext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbplaintext);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DecryptFinal.pbPlainText)
}

// .com.westone.skf.WST_PROTO_UINT32 pulPlainTextLen = 3;
inline bool Req_SKF_DecryptFinal::has_pulplaintextlen() const {
  return this != internal_default_instance() && pulplaintextlen_ != nullptr;
}
inline void Req_SKF_DecryptFinal::clear_pulplaintextlen() {
  if (GetArenaNoVirtual() == nullptr && pulplaintextlen_ != nullptr) {
    delete pulplaintextlen_;
  }
  pulplaintextlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_DecryptFinal::pulplaintextlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulplaintextlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DecryptFinal.pulPlainTextLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DecryptFinal::release_pulplaintextlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DecryptFinal.pulPlainTextLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulplaintextlen_;
  pulplaintextlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DecryptFinal::mutable_pulplaintextlen() {
  
  if (pulplaintextlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulplaintextlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DecryptFinal.pulPlainTextLen)
  return pulplaintextlen_;
}
inline void Req_SKF_DecryptFinal::set_allocated_pulplaintextlen(::com::westone::skf::WST_PROTO_UINT32* pulplaintextlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulplaintextlen_;
  }
  if (pulplaintextlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulplaintextlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulplaintextlen, submessage_arena);
    }
    
  } else {
    
  }
  pulplaintextlen_ = pulplaintextlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DecryptFinal.pulPlainTextLen)
}

// -------------------------------------------------------------------

// Rsp_SKF_DecryptFinal

// bytes pbPlainText = 1;
inline void Rsp_SKF_DecryptFinal::clear_pbplaintext() {
  pbplaintext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rsp_SKF_DecryptFinal::pbplaintext() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_DecryptFinal.pbPlainText)
  return pbplaintext_.GetNoArena();
}
inline void Rsp_SKF_DecryptFinal::set_pbplaintext(const ::std::string& value) {
  
  pbplaintext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Rsp_SKF_DecryptFinal.pbPlainText)
}
#if LANG_CXX11
inline void Rsp_SKF_DecryptFinal::set_pbplaintext(::std::string&& value) {
  
  pbplaintext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Rsp_SKF_DecryptFinal.pbPlainText)
}
#endif
inline void Rsp_SKF_DecryptFinal::set_pbplaintext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbplaintext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Rsp_SKF_DecryptFinal.pbPlainText)
}
inline void Rsp_SKF_DecryptFinal::set_pbplaintext(const void* value, size_t size) {
  
  pbplaintext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Rsp_SKF_DecryptFinal.pbPlainText)
}
inline ::std::string* Rsp_SKF_DecryptFinal::mutable_pbplaintext() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_DecryptFinal.pbPlainText)
  return pbplaintext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rsp_SKF_DecryptFinal::release_pbplaintext() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_DecryptFinal.pbPlainText)
  
  return pbplaintext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rsp_SKF_DecryptFinal::set_allocated_pbplaintext(::std::string* pbplaintext) {
  if (pbplaintext != nullptr) {
    
  } else {
    
  }
  pbplaintext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbplaintext);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_DecryptFinal.pbPlainText)
}

// .com.westone.skf.WST_PROTO_UINT32 pulPlainTextLen = 2;
inline bool Rsp_SKF_DecryptFinal::has_pulplaintextlen() const {
  return this != internal_default_instance() && pulplaintextlen_ != nullptr;
}
inline void Rsp_SKF_DecryptFinal::clear_pulplaintextlen() {
  if (GetArenaNoVirtual() == nullptr && pulplaintextlen_ != nullptr) {
    delete pulplaintextlen_;
  }
  pulplaintextlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_DecryptFinal::pulplaintextlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulplaintextlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_DecryptFinal.pulPlainTextLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_DecryptFinal::release_pulplaintextlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_DecryptFinal.pulPlainTextLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulplaintextlen_;
  pulplaintextlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_DecryptFinal::mutable_pulplaintextlen() {
  
  if (pulplaintextlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulplaintextlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_DecryptFinal.pulPlainTextLen)
  return pulplaintextlen_;
}
inline void Rsp_SKF_DecryptFinal::set_allocated_pulplaintextlen(::com::westone::skf::WST_PROTO_UINT32* pulplaintextlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulplaintextlen_;
  }
  if (pulplaintextlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulplaintextlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulplaintextlen, submessage_arena);
    }
    
  } else {
    
  }
  pulplaintextlen_ = pulplaintextlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_DecryptFinal.pulPlainTextLen)
}

// -------------------------------------------------------------------

// Req_SKF_DigestInit

// .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
inline bool Req_SKF_DigestInit::has_hdev() const {
  return this != internal_default_instance() && hdev_ != nullptr;
}
inline void Req_SKF_DigestInit::clear_hdev() {
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_DigestInit::hdev() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hdev_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DigestInit.hDev)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DigestInit::release_hdev() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DigestInit.hDev)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hdev_;
  hdev_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DigestInit::mutable_hdev() {
  
  if (hdev_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hdev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DigestInit.hDev)
  return hdev_;
}
inline void Req_SKF_DigestInit::set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hdev_;
  }
  if (hdev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hdev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdev, submessage_arena);
    }
    
  } else {
    
  }
  hdev_ = hdev;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DigestInit.hDev)
}

// .com.westone.skf.WST_PROTO_UINT32 ulAlgID = 2;
inline bool Req_SKF_DigestInit::has_ulalgid() const {
  return this != internal_default_instance() && ulalgid_ != nullptr;
}
inline void Req_SKF_DigestInit::clear_ulalgid() {
  if (GetArenaNoVirtual() == nullptr && ulalgid_ != nullptr) {
    delete ulalgid_;
  }
  ulalgid_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_DigestInit::ulalgid() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulalgid_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DigestInit.ulAlgID)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DigestInit::release_ulalgid() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DigestInit.ulAlgID)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulalgid_;
  ulalgid_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DigestInit::mutable_ulalgid() {
  
  if (ulalgid_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulalgid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DigestInit.ulAlgID)
  return ulalgid_;
}
inline void Req_SKF_DigestInit::set_allocated_ulalgid(::com::westone::skf::WST_PROTO_UINT32* ulalgid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulalgid_;
  }
  if (ulalgid) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulalgid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulalgid, submessage_arena);
    }
    
  } else {
    
  }
  ulalgid_ = ulalgid;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DigestInit.ulAlgID)
}

// .com.westone.skf.SKF_ECCPUBLICKEYBLOB pPubKey = 3;
inline bool Req_SKF_DigestInit::has_ppubkey() const {
  return this != internal_default_instance() && ppubkey_ != nullptr;
}
inline void Req_SKF_DigestInit::clear_ppubkey() {
  if (GetArenaNoVirtual() == nullptr && ppubkey_ != nullptr) {
    delete ppubkey_;
  }
  ppubkey_ = nullptr;
}
inline const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB& Req_SKF_DigestInit::ppubkey() const {
  const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* p = ppubkey_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DigestInit.pPubKey)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_ECCPUBLICKEYBLOB*>(
      &::com::westone::skf::_SKF_ECCPUBLICKEYBLOB_default_instance_);
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Req_SKF_DigestInit::release_ppubkey() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DigestInit.pPubKey)
  
  ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* temp = ppubkey_;
  ppubkey_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_ECCPUBLICKEYBLOB* Req_SKF_DigestInit::mutable_ppubkey() {
  
  if (ppubkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_ECCPUBLICKEYBLOB>(GetArenaNoVirtual());
    ppubkey_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DigestInit.pPubKey)
  return ppubkey_;
}
inline void Req_SKF_DigestInit::set_allocated_ppubkey(::com::westone::skf::SKF_ECCPUBLICKEYBLOB* ppubkey) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ppubkey_;
  }
  if (ppubkey) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ppubkey = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ppubkey, submessage_arena);
    }
    
  } else {
    
  }
  ppubkey_ = ppubkey;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DigestInit.pPubKey)
}

// bytes pucID = 4;
inline void Req_SKF_DigestInit::clear_pucid() {
  pucid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_DigestInit::pucid() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DigestInit.pucID)
  return pucid_.GetNoArena();
}
inline void Req_SKF_DigestInit::set_pucid(const ::std::string& value) {
  
  pucid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_DigestInit.pucID)
}
#if LANG_CXX11
inline void Req_SKF_DigestInit::set_pucid(::std::string&& value) {
  
  pucid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_DigestInit.pucID)
}
#endif
inline void Req_SKF_DigestInit::set_pucid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pucid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_DigestInit.pucID)
}
inline void Req_SKF_DigestInit::set_pucid(const void* value, size_t size) {
  
  pucid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_DigestInit.pucID)
}
inline ::std::string* Req_SKF_DigestInit::mutable_pucid() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DigestInit.pucID)
  return pucid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_DigestInit::release_pucid() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DigestInit.pucID)
  
  return pucid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_DigestInit::set_allocated_pucid(::std::string* pucid) {
  if (pucid != nullptr) {
    
  } else {
    
  }
  pucid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pucid);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DigestInit.pucID)
}

// .com.westone.skf.WST_PROTO_UINT32 ulIDLen = 5;
inline bool Req_SKF_DigestInit::has_ulidlen() const {
  return this != internal_default_instance() && ulidlen_ != nullptr;
}
inline void Req_SKF_DigestInit::clear_ulidlen() {
  if (GetArenaNoVirtual() == nullptr && ulidlen_ != nullptr) {
    delete ulidlen_;
  }
  ulidlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_DigestInit::ulidlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulidlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DigestInit.ulIDLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DigestInit::release_ulidlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DigestInit.ulIDLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulidlen_;
  ulidlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DigestInit::mutable_ulidlen() {
  
  if (ulidlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulidlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DigestInit.ulIDLen)
  return ulidlen_;
}
inline void Req_SKF_DigestInit::set_allocated_ulidlen(::com::westone::skf::WST_PROTO_UINT32* ulidlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulidlen_;
  }
  if (ulidlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulidlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulidlen, submessage_arena);
    }
    
  } else {
    
  }
  ulidlen_ = ulidlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DigestInit.ulIDLen)
}

// .com.westone.skf.WST_PROTO_UINT32 phHash = 6;
inline bool Req_SKF_DigestInit::has_phhash() const {
  return this != internal_default_instance() && phhash_ != nullptr;
}
inline void Req_SKF_DigestInit::clear_phhash() {
  if (GetArenaNoVirtual() == nullptr && phhash_ != nullptr) {
    delete phhash_;
  }
  phhash_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_DigestInit::phhash() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = phhash_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DigestInit.phHash)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DigestInit::release_phhash() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DigestInit.phHash)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = phhash_;
  phhash_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DigestInit::mutable_phhash() {
  
  if (phhash_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    phhash_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DigestInit.phHash)
  return phhash_;
}
inline void Req_SKF_DigestInit::set_allocated_phhash(::com::westone::skf::WST_PROTO_UINT32* phhash) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete phhash_;
  }
  if (phhash) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phhash = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phhash, submessage_arena);
    }
    
  } else {
    
  }
  phhash_ = phhash;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DigestInit.phHash)
}

// -------------------------------------------------------------------

// Rsp_SKF_DigestInit

// .com.westone.skf.WST_PROTO_UINT32 phHash = 1;
inline bool Rsp_SKF_DigestInit::has_phhash() const {
  return this != internal_default_instance() && phhash_ != nullptr;
}
inline void Rsp_SKF_DigestInit::clear_phhash() {
  if (GetArenaNoVirtual() == nullptr && phhash_ != nullptr) {
    delete phhash_;
  }
  phhash_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_DigestInit::phhash() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = phhash_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_DigestInit.phHash)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_DigestInit::release_phhash() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_DigestInit.phHash)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = phhash_;
  phhash_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_DigestInit::mutable_phhash() {
  
  if (phhash_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    phhash_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_DigestInit.phHash)
  return phhash_;
}
inline void Rsp_SKF_DigestInit::set_allocated_phhash(::com::westone::skf::WST_PROTO_UINT32* phhash) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete phhash_;
  }
  if (phhash) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phhash = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phhash, submessage_arena);
    }
    
  } else {
    
  }
  phhash_ = phhash;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_DigestInit.phHash)
}

// -------------------------------------------------------------------

// Req_SKF_Digest

// .com.westone.skf.WST_PROTO_UINT32 hHash = 1;
inline bool Req_SKF_Digest::has_hhash() const {
  return this != internal_default_instance() && hhash_ != nullptr;
}
inline void Req_SKF_Digest::clear_hhash() {
  if (GetArenaNoVirtual() == nullptr && hhash_ != nullptr) {
    delete hhash_;
  }
  hhash_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_Digest::hhash() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hhash_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_Digest.hHash)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_Digest::release_hhash() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_Digest.hHash)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hhash_;
  hhash_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_Digest::mutable_hhash() {
  
  if (hhash_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hhash_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_Digest.hHash)
  return hhash_;
}
inline void Req_SKF_Digest::set_allocated_hhash(::com::westone::skf::WST_PROTO_UINT32* hhash) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hhash_;
  }
  if (hhash) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hhash = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hhash, submessage_arena);
    }
    
  } else {
    
  }
  hhash_ = hhash;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_Digest.hHash)
}

// bytes pbData = 2;
inline void Req_SKF_Digest::clear_pbdata() {
  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_Digest::pbdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_Digest.pbData)
  return pbdata_.GetNoArena();
}
inline void Req_SKF_Digest::set_pbdata(const ::std::string& value) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_Digest.pbData)
}
#if LANG_CXX11
inline void Req_SKF_Digest::set_pbdata(::std::string&& value) {
  
  pbdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_Digest.pbData)
}
#endif
inline void Req_SKF_Digest::set_pbdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_Digest.pbData)
}
inline void Req_SKF_Digest::set_pbdata(const void* value, size_t size) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_Digest.pbData)
}
inline ::std::string* Req_SKF_Digest::mutable_pbdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_Digest.pbData)
  return pbdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_Digest::release_pbdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_Digest.pbData)
  
  return pbdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_Digest::set_allocated_pbdata(::std::string* pbdata) {
  if (pbdata != nullptr) {
    
  } else {
    
  }
  pbdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_Digest.pbData)
}

// .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
inline bool Req_SKF_Digest::has_uldatalen() const {
  return this != internal_default_instance() && uldatalen_ != nullptr;
}
inline void Req_SKF_Digest::clear_uldatalen() {
  if (GetArenaNoVirtual() == nullptr && uldatalen_ != nullptr) {
    delete uldatalen_;
  }
  uldatalen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_Digest::uldatalen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = uldatalen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_Digest.ulDataLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_Digest::release_uldatalen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_Digest.ulDataLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = uldatalen_;
  uldatalen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_Digest::mutable_uldatalen() {
  
  if (uldatalen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    uldatalen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_Digest.ulDataLen)
  return uldatalen_;
}
inline void Req_SKF_Digest::set_allocated_uldatalen(::com::westone::skf::WST_PROTO_UINT32* uldatalen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete uldatalen_;
  }
  if (uldatalen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uldatalen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uldatalen, submessage_arena);
    }
    
  } else {
    
  }
  uldatalen_ = uldatalen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_Digest.ulDataLen)
}

// bytes pbHashData = 4;
inline void Req_SKF_Digest::clear_pbhashdata() {
  pbhashdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_Digest::pbhashdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_Digest.pbHashData)
  return pbhashdata_.GetNoArena();
}
inline void Req_SKF_Digest::set_pbhashdata(const ::std::string& value) {
  
  pbhashdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_Digest.pbHashData)
}
#if LANG_CXX11
inline void Req_SKF_Digest::set_pbhashdata(::std::string&& value) {
  
  pbhashdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_Digest.pbHashData)
}
#endif
inline void Req_SKF_Digest::set_pbhashdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbhashdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_Digest.pbHashData)
}
inline void Req_SKF_Digest::set_pbhashdata(const void* value, size_t size) {
  
  pbhashdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_Digest.pbHashData)
}
inline ::std::string* Req_SKF_Digest::mutable_pbhashdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_Digest.pbHashData)
  return pbhashdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_Digest::release_pbhashdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_Digest.pbHashData)
  
  return pbhashdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_Digest::set_allocated_pbhashdata(::std::string* pbhashdata) {
  if (pbhashdata != nullptr) {
    
  } else {
    
  }
  pbhashdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbhashdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_Digest.pbHashData)
}

// .com.westone.skf.WST_PROTO_UINT32 pulHashLen = 5;
inline bool Req_SKF_Digest::has_pulhashlen() const {
  return this != internal_default_instance() && pulhashlen_ != nullptr;
}
inline void Req_SKF_Digest::clear_pulhashlen() {
  if (GetArenaNoVirtual() == nullptr && pulhashlen_ != nullptr) {
    delete pulhashlen_;
  }
  pulhashlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_Digest::pulhashlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulhashlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_Digest.pulHashLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_Digest::release_pulhashlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_Digest.pulHashLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulhashlen_;
  pulhashlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_Digest::mutable_pulhashlen() {
  
  if (pulhashlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulhashlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_Digest.pulHashLen)
  return pulhashlen_;
}
inline void Req_SKF_Digest::set_allocated_pulhashlen(::com::westone::skf::WST_PROTO_UINT32* pulhashlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulhashlen_;
  }
  if (pulhashlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulhashlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulhashlen, submessage_arena);
    }
    
  } else {
    
  }
  pulhashlen_ = pulhashlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_Digest.pulHashLen)
}

// -------------------------------------------------------------------

// Rsp_SKF_Digest

// bytes pbHashData = 1;
inline void Rsp_SKF_Digest::clear_pbhashdata() {
  pbhashdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rsp_SKF_Digest::pbhashdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_Digest.pbHashData)
  return pbhashdata_.GetNoArena();
}
inline void Rsp_SKF_Digest::set_pbhashdata(const ::std::string& value) {
  
  pbhashdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Rsp_SKF_Digest.pbHashData)
}
#if LANG_CXX11
inline void Rsp_SKF_Digest::set_pbhashdata(::std::string&& value) {
  
  pbhashdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Rsp_SKF_Digest.pbHashData)
}
#endif
inline void Rsp_SKF_Digest::set_pbhashdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbhashdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Rsp_SKF_Digest.pbHashData)
}
inline void Rsp_SKF_Digest::set_pbhashdata(const void* value, size_t size) {
  
  pbhashdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Rsp_SKF_Digest.pbHashData)
}
inline ::std::string* Rsp_SKF_Digest::mutable_pbhashdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_Digest.pbHashData)
  return pbhashdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rsp_SKF_Digest::release_pbhashdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_Digest.pbHashData)
  
  return pbhashdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rsp_SKF_Digest::set_allocated_pbhashdata(::std::string* pbhashdata) {
  if (pbhashdata != nullptr) {
    
  } else {
    
  }
  pbhashdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbhashdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_Digest.pbHashData)
}

// .com.westone.skf.WST_PROTO_UINT32 pulHashLen = 2;
inline bool Rsp_SKF_Digest::has_pulhashlen() const {
  return this != internal_default_instance() && pulhashlen_ != nullptr;
}
inline void Rsp_SKF_Digest::clear_pulhashlen() {
  if (GetArenaNoVirtual() == nullptr && pulhashlen_ != nullptr) {
    delete pulhashlen_;
  }
  pulhashlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_Digest::pulhashlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulhashlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_Digest.pulHashLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_Digest::release_pulhashlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_Digest.pulHashLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulhashlen_;
  pulhashlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_Digest::mutable_pulhashlen() {
  
  if (pulhashlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulhashlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_Digest.pulHashLen)
  return pulhashlen_;
}
inline void Rsp_SKF_Digest::set_allocated_pulhashlen(::com::westone::skf::WST_PROTO_UINT32* pulhashlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulhashlen_;
  }
  if (pulhashlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulhashlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulhashlen, submessage_arena);
    }
    
  } else {
    
  }
  pulhashlen_ = pulhashlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_Digest.pulHashLen)
}

// -------------------------------------------------------------------

// Req_SKF_DigestUpdate

// .com.westone.skf.WST_PROTO_UINT32 hHash = 1;
inline bool Req_SKF_DigestUpdate::has_hhash() const {
  return this != internal_default_instance() && hhash_ != nullptr;
}
inline void Req_SKF_DigestUpdate::clear_hhash() {
  if (GetArenaNoVirtual() == nullptr && hhash_ != nullptr) {
    delete hhash_;
  }
  hhash_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_DigestUpdate::hhash() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hhash_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DigestUpdate.hHash)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DigestUpdate::release_hhash() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DigestUpdate.hHash)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hhash_;
  hhash_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DigestUpdate::mutable_hhash() {
  
  if (hhash_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hhash_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DigestUpdate.hHash)
  return hhash_;
}
inline void Req_SKF_DigestUpdate::set_allocated_hhash(::com::westone::skf::WST_PROTO_UINT32* hhash) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hhash_;
  }
  if (hhash) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hhash = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hhash, submessage_arena);
    }
    
  } else {
    
  }
  hhash_ = hhash;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DigestUpdate.hHash)
}

// bytes pbData = 2;
inline void Req_SKF_DigestUpdate::clear_pbdata() {
  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_DigestUpdate::pbdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DigestUpdate.pbData)
  return pbdata_.GetNoArena();
}
inline void Req_SKF_DigestUpdate::set_pbdata(const ::std::string& value) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_DigestUpdate.pbData)
}
#if LANG_CXX11
inline void Req_SKF_DigestUpdate::set_pbdata(::std::string&& value) {
  
  pbdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_DigestUpdate.pbData)
}
#endif
inline void Req_SKF_DigestUpdate::set_pbdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_DigestUpdate.pbData)
}
inline void Req_SKF_DigestUpdate::set_pbdata(const void* value, size_t size) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_DigestUpdate.pbData)
}
inline ::std::string* Req_SKF_DigestUpdate::mutable_pbdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DigestUpdate.pbData)
  return pbdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_DigestUpdate::release_pbdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DigestUpdate.pbData)
  
  return pbdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_DigestUpdate::set_allocated_pbdata(::std::string* pbdata) {
  if (pbdata != nullptr) {
    
  } else {
    
  }
  pbdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DigestUpdate.pbData)
}

// .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
inline bool Req_SKF_DigestUpdate::has_uldatalen() const {
  return this != internal_default_instance() && uldatalen_ != nullptr;
}
inline void Req_SKF_DigestUpdate::clear_uldatalen() {
  if (GetArenaNoVirtual() == nullptr && uldatalen_ != nullptr) {
    delete uldatalen_;
  }
  uldatalen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_DigestUpdate::uldatalen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = uldatalen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DigestUpdate.ulDataLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DigestUpdate::release_uldatalen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DigestUpdate.ulDataLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = uldatalen_;
  uldatalen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DigestUpdate::mutable_uldatalen() {
  
  if (uldatalen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    uldatalen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DigestUpdate.ulDataLen)
  return uldatalen_;
}
inline void Req_SKF_DigestUpdate::set_allocated_uldatalen(::com::westone::skf::WST_PROTO_UINT32* uldatalen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete uldatalen_;
  }
  if (uldatalen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uldatalen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uldatalen, submessage_arena);
    }
    
  } else {
    
  }
  uldatalen_ = uldatalen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DigestUpdate.ulDataLen)
}

// -------------------------------------------------------------------

// Rsp_SKF_DigestUpdate

// -------------------------------------------------------------------

// Req_SKF_DigestFinal

// .com.westone.skf.WST_PROTO_UINT32 hHash = 1;
inline bool Req_SKF_DigestFinal::has_hhash() const {
  return this != internal_default_instance() && hhash_ != nullptr;
}
inline void Req_SKF_DigestFinal::clear_hhash() {
  if (GetArenaNoVirtual() == nullptr && hhash_ != nullptr) {
    delete hhash_;
  }
  hhash_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_DigestFinal::hhash() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hhash_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DigestFinal.hHash)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DigestFinal::release_hhash() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DigestFinal.hHash)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hhash_;
  hhash_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DigestFinal::mutable_hhash() {
  
  if (hhash_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hhash_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DigestFinal.hHash)
  return hhash_;
}
inline void Req_SKF_DigestFinal::set_allocated_hhash(::com::westone::skf::WST_PROTO_UINT32* hhash) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hhash_;
  }
  if (hhash) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hhash = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hhash, submessage_arena);
    }
    
  } else {
    
  }
  hhash_ = hhash;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DigestFinal.hHash)
}

// bytes pHashData = 2;
inline void Req_SKF_DigestFinal::clear_phashdata() {
  phashdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_DigestFinal::phashdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DigestFinal.pHashData)
  return phashdata_.GetNoArena();
}
inline void Req_SKF_DigestFinal::set_phashdata(const ::std::string& value) {
  
  phashdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_DigestFinal.pHashData)
}
#if LANG_CXX11
inline void Req_SKF_DigestFinal::set_phashdata(::std::string&& value) {
  
  phashdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_DigestFinal.pHashData)
}
#endif
inline void Req_SKF_DigestFinal::set_phashdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phashdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_DigestFinal.pHashData)
}
inline void Req_SKF_DigestFinal::set_phashdata(const void* value, size_t size) {
  
  phashdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_DigestFinal.pHashData)
}
inline ::std::string* Req_SKF_DigestFinal::mutable_phashdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DigestFinal.pHashData)
  return phashdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_DigestFinal::release_phashdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DigestFinal.pHashData)
  
  return phashdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_DigestFinal::set_allocated_phashdata(::std::string* phashdata) {
  if (phashdata != nullptr) {
    
  } else {
    
  }
  phashdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phashdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DigestFinal.pHashData)
}

// .com.westone.skf.WST_PROTO_UINT32 pulHashLen = 3;
inline bool Req_SKF_DigestFinal::has_pulhashlen() const {
  return this != internal_default_instance() && pulhashlen_ != nullptr;
}
inline void Req_SKF_DigestFinal::clear_pulhashlen() {
  if (GetArenaNoVirtual() == nullptr && pulhashlen_ != nullptr) {
    delete pulhashlen_;
  }
  pulhashlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_DigestFinal::pulhashlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulhashlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_DigestFinal.pulHashLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DigestFinal::release_pulhashlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_DigestFinal.pulHashLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulhashlen_;
  pulhashlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_DigestFinal::mutable_pulhashlen() {
  
  if (pulhashlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulhashlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_DigestFinal.pulHashLen)
  return pulhashlen_;
}
inline void Req_SKF_DigestFinal::set_allocated_pulhashlen(::com::westone::skf::WST_PROTO_UINT32* pulhashlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulhashlen_;
  }
  if (pulhashlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulhashlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulhashlen, submessage_arena);
    }
    
  } else {
    
  }
  pulhashlen_ = pulhashlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_DigestFinal.pulHashLen)
}

// -------------------------------------------------------------------

// Rsp_SKF_DigestFinal

// bytes pHashData = 1;
inline void Rsp_SKF_DigestFinal::clear_phashdata() {
  phashdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rsp_SKF_DigestFinal::phashdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_DigestFinal.pHashData)
  return phashdata_.GetNoArena();
}
inline void Rsp_SKF_DigestFinal::set_phashdata(const ::std::string& value) {
  
  phashdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Rsp_SKF_DigestFinal.pHashData)
}
#if LANG_CXX11
inline void Rsp_SKF_DigestFinal::set_phashdata(::std::string&& value) {
  
  phashdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Rsp_SKF_DigestFinal.pHashData)
}
#endif
inline void Rsp_SKF_DigestFinal::set_phashdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phashdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Rsp_SKF_DigestFinal.pHashData)
}
inline void Rsp_SKF_DigestFinal::set_phashdata(const void* value, size_t size) {
  
  phashdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Rsp_SKF_DigestFinal.pHashData)
}
inline ::std::string* Rsp_SKF_DigestFinal::mutable_phashdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_DigestFinal.pHashData)
  return phashdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rsp_SKF_DigestFinal::release_phashdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_DigestFinal.pHashData)
  
  return phashdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rsp_SKF_DigestFinal::set_allocated_phashdata(::std::string* phashdata) {
  if (phashdata != nullptr) {
    
  } else {
    
  }
  phashdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phashdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_DigestFinal.pHashData)
}

// .com.westone.skf.WST_PROTO_UINT32 pulHashLen = 2;
inline bool Rsp_SKF_DigestFinal::has_pulhashlen() const {
  return this != internal_default_instance() && pulhashlen_ != nullptr;
}
inline void Rsp_SKF_DigestFinal::clear_pulhashlen() {
  if (GetArenaNoVirtual() == nullptr && pulhashlen_ != nullptr) {
    delete pulhashlen_;
  }
  pulhashlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_DigestFinal::pulhashlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulhashlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_DigestFinal.pulHashLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_DigestFinal::release_pulhashlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_DigestFinal.pulHashLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulhashlen_;
  pulhashlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_DigestFinal::mutable_pulhashlen() {
  
  if (pulhashlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulhashlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_DigestFinal.pulHashLen)
  return pulhashlen_;
}
inline void Rsp_SKF_DigestFinal::set_allocated_pulhashlen(::com::westone::skf::WST_PROTO_UINT32* pulhashlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulhashlen_;
  }
  if (pulhashlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulhashlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulhashlen, submessage_arena);
    }
    
  } else {
    
  }
  pulhashlen_ = pulhashlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_DigestFinal.pulHashLen)
}

// -------------------------------------------------------------------

// Req_SKF_MacInit

// .com.westone.skf.WST_PROTO_UINT32 hKey = 1;
inline bool Req_SKF_MacInit::has_hkey() const {
  return this != internal_default_instance() && hkey_ != nullptr;
}
inline void Req_SKF_MacInit::clear_hkey() {
  if (GetArenaNoVirtual() == nullptr && hkey_ != nullptr) {
    delete hkey_;
  }
  hkey_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_MacInit::hkey() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hkey_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_MacInit.hKey)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_MacInit::release_hkey() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_MacInit.hKey)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hkey_;
  hkey_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_MacInit::mutable_hkey() {
  
  if (hkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hkey_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_MacInit.hKey)
  return hkey_;
}
inline void Req_SKF_MacInit::set_allocated_hkey(::com::westone::skf::WST_PROTO_UINT32* hkey) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hkey_;
  }
  if (hkey) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hkey = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hkey, submessage_arena);
    }
    
  } else {
    
  }
  hkey_ = hkey;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_MacInit.hKey)
}

// .com.westone.skf.SKF_BLOCKCIPHERPARAM MacParam = 2;
inline bool Req_SKF_MacInit::has_macparam() const {
  return this != internal_default_instance() && macparam_ != nullptr;
}
inline void Req_SKF_MacInit::clear_macparam() {
  if (GetArenaNoVirtual() == nullptr && macparam_ != nullptr) {
    delete macparam_;
  }
  macparam_ = nullptr;
}
inline const ::com::westone::skf::SKF_BLOCKCIPHERPARAM& Req_SKF_MacInit::macparam() const {
  const ::com::westone::skf::SKF_BLOCKCIPHERPARAM* p = macparam_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_MacInit.MacParam)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::SKF_BLOCKCIPHERPARAM*>(
      &::com::westone::skf::_SKF_BLOCKCIPHERPARAM_default_instance_);
}
inline ::com::westone::skf::SKF_BLOCKCIPHERPARAM* Req_SKF_MacInit::release_macparam() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_MacInit.MacParam)
  
  ::com::westone::skf::SKF_BLOCKCIPHERPARAM* temp = macparam_;
  macparam_ = nullptr;
  return temp;
}
inline ::com::westone::skf::SKF_BLOCKCIPHERPARAM* Req_SKF_MacInit::mutable_macparam() {
  
  if (macparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::SKF_BLOCKCIPHERPARAM>(GetArenaNoVirtual());
    macparam_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_MacInit.MacParam)
  return macparam_;
}
inline void Req_SKF_MacInit::set_allocated_macparam(::com::westone::skf::SKF_BLOCKCIPHERPARAM* macparam) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete macparam_;
  }
  if (macparam) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      macparam = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, macparam, submessage_arena);
    }
    
  } else {
    
  }
  macparam_ = macparam;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_MacInit.MacParam)
}

// .com.westone.skf.WST_PROTO_UINT32 phMac = 3;
inline bool Req_SKF_MacInit::has_phmac() const {
  return this != internal_default_instance() && phmac_ != nullptr;
}
inline void Req_SKF_MacInit::clear_phmac() {
  if (GetArenaNoVirtual() == nullptr && phmac_ != nullptr) {
    delete phmac_;
  }
  phmac_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_MacInit::phmac() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = phmac_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_MacInit.phMac)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_MacInit::release_phmac() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_MacInit.phMac)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = phmac_;
  phmac_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_MacInit::mutable_phmac() {
  
  if (phmac_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    phmac_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_MacInit.phMac)
  return phmac_;
}
inline void Req_SKF_MacInit::set_allocated_phmac(::com::westone::skf::WST_PROTO_UINT32* phmac) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete phmac_;
  }
  if (phmac) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phmac = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phmac, submessage_arena);
    }
    
  } else {
    
  }
  phmac_ = phmac;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_MacInit.phMac)
}

// -------------------------------------------------------------------

// Rsp_SKF_MacInit

// .com.westone.skf.WST_PROTO_UINT32 phMac = 1;
inline bool Rsp_SKF_MacInit::has_phmac() const {
  return this != internal_default_instance() && phmac_ != nullptr;
}
inline void Rsp_SKF_MacInit::clear_phmac() {
  if (GetArenaNoVirtual() == nullptr && phmac_ != nullptr) {
    delete phmac_;
  }
  phmac_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_MacInit::phmac() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = phmac_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_MacInit.phMac)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_MacInit::release_phmac() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_MacInit.phMac)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = phmac_;
  phmac_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_MacInit::mutable_phmac() {
  
  if (phmac_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    phmac_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_MacInit.phMac)
  return phmac_;
}
inline void Rsp_SKF_MacInit::set_allocated_phmac(::com::westone::skf::WST_PROTO_UINT32* phmac) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete phmac_;
  }
  if (phmac) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      phmac = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, phmac, submessage_arena);
    }
    
  } else {
    
  }
  phmac_ = phmac;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_MacInit.phMac)
}

// -------------------------------------------------------------------

// Req_SKF_Mac

// .com.westone.skf.WST_PROTO_UINT32 hMac = 1;
inline bool Req_SKF_Mac::has_hmac() const {
  return this != internal_default_instance() && hmac_ != nullptr;
}
inline void Req_SKF_Mac::clear_hmac() {
  if (GetArenaNoVirtual() == nullptr && hmac_ != nullptr) {
    delete hmac_;
  }
  hmac_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_Mac::hmac() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hmac_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_Mac.hMac)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_Mac::release_hmac() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_Mac.hMac)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hmac_;
  hmac_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_Mac::mutable_hmac() {
  
  if (hmac_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hmac_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_Mac.hMac)
  return hmac_;
}
inline void Req_SKF_Mac::set_allocated_hmac(::com::westone::skf::WST_PROTO_UINT32* hmac) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hmac_;
  }
  if (hmac) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hmac = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hmac, submessage_arena);
    }
    
  } else {
    
  }
  hmac_ = hmac;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_Mac.hMac)
}

// bytes pbData = 2;
inline void Req_SKF_Mac::clear_pbdata() {
  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_Mac::pbdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_Mac.pbData)
  return pbdata_.GetNoArena();
}
inline void Req_SKF_Mac::set_pbdata(const ::std::string& value) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_Mac.pbData)
}
#if LANG_CXX11
inline void Req_SKF_Mac::set_pbdata(::std::string&& value) {
  
  pbdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_Mac.pbData)
}
#endif
inline void Req_SKF_Mac::set_pbdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_Mac.pbData)
}
inline void Req_SKF_Mac::set_pbdata(const void* value, size_t size) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_Mac.pbData)
}
inline ::std::string* Req_SKF_Mac::mutable_pbdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_Mac.pbData)
  return pbdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_Mac::release_pbdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_Mac.pbData)
  
  return pbdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_Mac::set_allocated_pbdata(::std::string* pbdata) {
  if (pbdata != nullptr) {
    
  } else {
    
  }
  pbdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_Mac.pbData)
}

// .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
inline bool Req_SKF_Mac::has_uldatalen() const {
  return this != internal_default_instance() && uldatalen_ != nullptr;
}
inline void Req_SKF_Mac::clear_uldatalen() {
  if (GetArenaNoVirtual() == nullptr && uldatalen_ != nullptr) {
    delete uldatalen_;
  }
  uldatalen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_Mac::uldatalen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = uldatalen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_Mac.ulDataLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_Mac::release_uldatalen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_Mac.ulDataLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = uldatalen_;
  uldatalen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_Mac::mutable_uldatalen() {
  
  if (uldatalen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    uldatalen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_Mac.ulDataLen)
  return uldatalen_;
}
inline void Req_SKF_Mac::set_allocated_uldatalen(::com::westone::skf::WST_PROTO_UINT32* uldatalen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete uldatalen_;
  }
  if (uldatalen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uldatalen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uldatalen, submessage_arena);
    }
    
  } else {
    
  }
  uldatalen_ = uldatalen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_Mac.ulDataLen)
}

// bytes pbMacData = 4;
inline void Req_SKF_Mac::clear_pbmacdata() {
  pbmacdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_Mac::pbmacdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_Mac.pbMacData)
  return pbmacdata_.GetNoArena();
}
inline void Req_SKF_Mac::set_pbmacdata(const ::std::string& value) {
  
  pbmacdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_Mac.pbMacData)
}
#if LANG_CXX11
inline void Req_SKF_Mac::set_pbmacdata(::std::string&& value) {
  
  pbmacdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_Mac.pbMacData)
}
#endif
inline void Req_SKF_Mac::set_pbmacdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbmacdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_Mac.pbMacData)
}
inline void Req_SKF_Mac::set_pbmacdata(const void* value, size_t size) {
  
  pbmacdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_Mac.pbMacData)
}
inline ::std::string* Req_SKF_Mac::mutable_pbmacdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_Mac.pbMacData)
  return pbmacdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_Mac::release_pbmacdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_Mac.pbMacData)
  
  return pbmacdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_Mac::set_allocated_pbmacdata(::std::string* pbmacdata) {
  if (pbmacdata != nullptr) {
    
  } else {
    
  }
  pbmacdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbmacdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_Mac.pbMacData)
}

// .com.westone.skf.WST_PROTO_UINT32 pulMacLen = 5;
inline bool Req_SKF_Mac::has_pulmaclen() const {
  return this != internal_default_instance() && pulmaclen_ != nullptr;
}
inline void Req_SKF_Mac::clear_pulmaclen() {
  if (GetArenaNoVirtual() == nullptr && pulmaclen_ != nullptr) {
    delete pulmaclen_;
  }
  pulmaclen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_Mac::pulmaclen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulmaclen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_Mac.pulMacLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_Mac::release_pulmaclen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_Mac.pulMacLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulmaclen_;
  pulmaclen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_Mac::mutable_pulmaclen() {
  
  if (pulmaclen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulmaclen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_Mac.pulMacLen)
  return pulmaclen_;
}
inline void Req_SKF_Mac::set_allocated_pulmaclen(::com::westone::skf::WST_PROTO_UINT32* pulmaclen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulmaclen_;
  }
  if (pulmaclen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulmaclen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulmaclen, submessage_arena);
    }
    
  } else {
    
  }
  pulmaclen_ = pulmaclen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_Mac.pulMacLen)
}

// -------------------------------------------------------------------

// Rsp_SKF_Mac

// bytes pbMacData = 1;
inline void Rsp_SKF_Mac::clear_pbmacdata() {
  pbmacdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rsp_SKF_Mac::pbmacdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_Mac.pbMacData)
  return pbmacdata_.GetNoArena();
}
inline void Rsp_SKF_Mac::set_pbmacdata(const ::std::string& value) {
  
  pbmacdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Rsp_SKF_Mac.pbMacData)
}
#if LANG_CXX11
inline void Rsp_SKF_Mac::set_pbmacdata(::std::string&& value) {
  
  pbmacdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Rsp_SKF_Mac.pbMacData)
}
#endif
inline void Rsp_SKF_Mac::set_pbmacdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbmacdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Rsp_SKF_Mac.pbMacData)
}
inline void Rsp_SKF_Mac::set_pbmacdata(const void* value, size_t size) {
  
  pbmacdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Rsp_SKF_Mac.pbMacData)
}
inline ::std::string* Rsp_SKF_Mac::mutable_pbmacdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_Mac.pbMacData)
  return pbmacdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rsp_SKF_Mac::release_pbmacdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_Mac.pbMacData)
  
  return pbmacdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rsp_SKF_Mac::set_allocated_pbmacdata(::std::string* pbmacdata) {
  if (pbmacdata != nullptr) {
    
  } else {
    
  }
  pbmacdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbmacdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_Mac.pbMacData)
}

// .com.westone.skf.WST_PROTO_UINT32 pulMacLen = 2;
inline bool Rsp_SKF_Mac::has_pulmaclen() const {
  return this != internal_default_instance() && pulmaclen_ != nullptr;
}
inline void Rsp_SKF_Mac::clear_pulmaclen() {
  if (GetArenaNoVirtual() == nullptr && pulmaclen_ != nullptr) {
    delete pulmaclen_;
  }
  pulmaclen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_Mac::pulmaclen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulmaclen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_Mac.pulMacLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_Mac::release_pulmaclen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_Mac.pulMacLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulmaclen_;
  pulmaclen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_Mac::mutable_pulmaclen() {
  
  if (pulmaclen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulmaclen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_Mac.pulMacLen)
  return pulmaclen_;
}
inline void Rsp_SKF_Mac::set_allocated_pulmaclen(::com::westone::skf::WST_PROTO_UINT32* pulmaclen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulmaclen_;
  }
  if (pulmaclen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulmaclen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulmaclen, submessage_arena);
    }
    
  } else {
    
  }
  pulmaclen_ = pulmaclen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_Mac.pulMacLen)
}

// -------------------------------------------------------------------

// Req_SKF_MacUpdate

// .com.westone.skf.WST_PROTO_UINT32 hMac = 1;
inline bool Req_SKF_MacUpdate::has_hmac() const {
  return this != internal_default_instance() && hmac_ != nullptr;
}
inline void Req_SKF_MacUpdate::clear_hmac() {
  if (GetArenaNoVirtual() == nullptr && hmac_ != nullptr) {
    delete hmac_;
  }
  hmac_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_MacUpdate::hmac() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hmac_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_MacUpdate.hMac)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_MacUpdate::release_hmac() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_MacUpdate.hMac)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hmac_;
  hmac_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_MacUpdate::mutable_hmac() {
  
  if (hmac_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hmac_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_MacUpdate.hMac)
  return hmac_;
}
inline void Req_SKF_MacUpdate::set_allocated_hmac(::com::westone::skf::WST_PROTO_UINT32* hmac) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hmac_;
  }
  if (hmac) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hmac = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hmac, submessage_arena);
    }
    
  } else {
    
  }
  hmac_ = hmac;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_MacUpdate.hMac)
}

// bytes pbData = 2;
inline void Req_SKF_MacUpdate::clear_pbdata() {
  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_MacUpdate::pbdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_MacUpdate.pbData)
  return pbdata_.GetNoArena();
}
inline void Req_SKF_MacUpdate::set_pbdata(const ::std::string& value) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_MacUpdate.pbData)
}
#if LANG_CXX11
inline void Req_SKF_MacUpdate::set_pbdata(::std::string&& value) {
  
  pbdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_MacUpdate.pbData)
}
#endif
inline void Req_SKF_MacUpdate::set_pbdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_MacUpdate.pbData)
}
inline void Req_SKF_MacUpdate::set_pbdata(const void* value, size_t size) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_MacUpdate.pbData)
}
inline ::std::string* Req_SKF_MacUpdate::mutable_pbdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_MacUpdate.pbData)
  return pbdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_MacUpdate::release_pbdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_MacUpdate.pbData)
  
  return pbdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_MacUpdate::set_allocated_pbdata(::std::string* pbdata) {
  if (pbdata != nullptr) {
    
  } else {
    
  }
  pbdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_MacUpdate.pbData)
}

// .com.westone.skf.WST_PROTO_UINT32 ulDataLen = 3;
inline bool Req_SKF_MacUpdate::has_uldatalen() const {
  return this != internal_default_instance() && uldatalen_ != nullptr;
}
inline void Req_SKF_MacUpdate::clear_uldatalen() {
  if (GetArenaNoVirtual() == nullptr && uldatalen_ != nullptr) {
    delete uldatalen_;
  }
  uldatalen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_MacUpdate::uldatalen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = uldatalen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_MacUpdate.ulDataLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_MacUpdate::release_uldatalen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_MacUpdate.ulDataLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = uldatalen_;
  uldatalen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_MacUpdate::mutable_uldatalen() {
  
  if (uldatalen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    uldatalen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_MacUpdate.ulDataLen)
  return uldatalen_;
}
inline void Req_SKF_MacUpdate::set_allocated_uldatalen(::com::westone::skf::WST_PROTO_UINT32* uldatalen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete uldatalen_;
  }
  if (uldatalen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uldatalen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, uldatalen, submessage_arena);
    }
    
  } else {
    
  }
  uldatalen_ = uldatalen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_MacUpdate.ulDataLen)
}

// -------------------------------------------------------------------

// Rsp_SKF_MacUpdate

// -------------------------------------------------------------------

// Req_SKF_MacFinal

// .com.westone.skf.WST_PROTO_UINT32 hMac = 1;
inline bool Req_SKF_MacFinal::has_hmac() const {
  return this != internal_default_instance() && hmac_ != nullptr;
}
inline void Req_SKF_MacFinal::clear_hmac() {
  if (GetArenaNoVirtual() == nullptr && hmac_ != nullptr) {
    delete hmac_;
  }
  hmac_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_MacFinal::hmac() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hmac_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_MacFinal.hMac)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_MacFinal::release_hmac() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_MacFinal.hMac)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hmac_;
  hmac_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_MacFinal::mutable_hmac() {
  
  if (hmac_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hmac_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_MacFinal.hMac)
  return hmac_;
}
inline void Req_SKF_MacFinal::set_allocated_hmac(::com::westone::skf::WST_PROTO_UINT32* hmac) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hmac_;
  }
  if (hmac) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hmac = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hmac, submessage_arena);
    }
    
  } else {
    
  }
  hmac_ = hmac;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_MacFinal.hMac)
}

// bytes pbMacData = 2;
inline void Req_SKF_MacFinal::clear_pbmacdata() {
  pbmacdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_MacFinal::pbmacdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_MacFinal.pbMacData)
  return pbmacdata_.GetNoArena();
}
inline void Req_SKF_MacFinal::set_pbmacdata(const ::std::string& value) {
  
  pbmacdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_MacFinal.pbMacData)
}
#if LANG_CXX11
inline void Req_SKF_MacFinal::set_pbmacdata(::std::string&& value) {
  
  pbmacdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_MacFinal.pbMacData)
}
#endif
inline void Req_SKF_MacFinal::set_pbmacdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbmacdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_MacFinal.pbMacData)
}
inline void Req_SKF_MacFinal::set_pbmacdata(const void* value, size_t size) {
  
  pbmacdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_MacFinal.pbMacData)
}
inline ::std::string* Req_SKF_MacFinal::mutable_pbmacdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_MacFinal.pbMacData)
  return pbmacdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_MacFinal::release_pbmacdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_MacFinal.pbMacData)
  
  return pbmacdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_MacFinal::set_allocated_pbmacdata(::std::string* pbmacdata) {
  if (pbmacdata != nullptr) {
    
  } else {
    
  }
  pbmacdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbmacdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_MacFinal.pbMacData)
}

// .com.westone.skf.WST_PROTO_UINT32 pulMacDataLen = 3;
inline bool Req_SKF_MacFinal::has_pulmacdatalen() const {
  return this != internal_default_instance() && pulmacdatalen_ != nullptr;
}
inline void Req_SKF_MacFinal::clear_pulmacdatalen() {
  if (GetArenaNoVirtual() == nullptr && pulmacdatalen_ != nullptr) {
    delete pulmacdatalen_;
  }
  pulmacdatalen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_MacFinal::pulmacdatalen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulmacdatalen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_MacFinal.pulMacDataLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_MacFinal::release_pulmacdatalen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_MacFinal.pulMacDataLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulmacdatalen_;
  pulmacdatalen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_MacFinal::mutable_pulmacdatalen() {
  
  if (pulmacdatalen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulmacdatalen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_MacFinal.pulMacDataLen)
  return pulmacdatalen_;
}
inline void Req_SKF_MacFinal::set_allocated_pulmacdatalen(::com::westone::skf::WST_PROTO_UINT32* pulmacdatalen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulmacdatalen_;
  }
  if (pulmacdatalen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulmacdatalen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulmacdatalen, submessage_arena);
    }
    
  } else {
    
  }
  pulmacdatalen_ = pulmacdatalen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_MacFinal.pulMacDataLen)
}

// -------------------------------------------------------------------

// Rsp_SKF_MacFinal

// bytes pbMacData = 2;
inline void Rsp_SKF_MacFinal::clear_pbmacdata() {
  pbmacdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rsp_SKF_MacFinal::pbmacdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_MacFinal.pbMacData)
  return pbmacdata_.GetNoArena();
}
inline void Rsp_SKF_MacFinal::set_pbmacdata(const ::std::string& value) {
  
  pbmacdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Rsp_SKF_MacFinal.pbMacData)
}
#if LANG_CXX11
inline void Rsp_SKF_MacFinal::set_pbmacdata(::std::string&& value) {
  
  pbmacdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Rsp_SKF_MacFinal.pbMacData)
}
#endif
inline void Rsp_SKF_MacFinal::set_pbmacdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbmacdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Rsp_SKF_MacFinal.pbMacData)
}
inline void Rsp_SKF_MacFinal::set_pbmacdata(const void* value, size_t size) {
  
  pbmacdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Rsp_SKF_MacFinal.pbMacData)
}
inline ::std::string* Rsp_SKF_MacFinal::mutable_pbmacdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_MacFinal.pbMacData)
  return pbmacdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rsp_SKF_MacFinal::release_pbmacdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_MacFinal.pbMacData)
  
  return pbmacdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rsp_SKF_MacFinal::set_allocated_pbmacdata(::std::string* pbmacdata) {
  if (pbmacdata != nullptr) {
    
  } else {
    
  }
  pbmacdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbmacdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_MacFinal.pbMacData)
}

// .com.westone.skf.WST_PROTO_UINT32 pulMacDataLen = 3;
inline bool Rsp_SKF_MacFinal::has_pulmacdatalen() const {
  return this != internal_default_instance() && pulmacdatalen_ != nullptr;
}
inline void Rsp_SKF_MacFinal::clear_pulmacdatalen() {
  if (GetArenaNoVirtual() == nullptr && pulmacdatalen_ != nullptr) {
    delete pulmacdatalen_;
  }
  pulmacdatalen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_MacFinal::pulmacdatalen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulmacdatalen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_MacFinal.pulMacDataLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_MacFinal::release_pulmacdatalen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_MacFinal.pulMacDataLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulmacdatalen_;
  pulmacdatalen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_MacFinal::mutable_pulmacdatalen() {
  
  if (pulmacdatalen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulmacdatalen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_MacFinal.pulMacDataLen)
  return pulmacdatalen_;
}
inline void Rsp_SKF_MacFinal::set_allocated_pulmacdatalen(::com::westone::skf::WST_PROTO_UINT32* pulmacdatalen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulmacdatalen_;
  }
  if (pulmacdatalen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulmacdatalen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulmacdatalen, submessage_arena);
    }
    
  } else {
    
  }
  pulmacdatalen_ = pulmacdatalen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_MacFinal.pulMacDataLen)
}

// -------------------------------------------------------------------

// Req_SKF_CloseHandle

// .com.westone.skf.WST_PROTO_UINT32 hHandle = 1;
inline bool Req_SKF_CloseHandle::has_hhandle() const {
  return this != internal_default_instance() && hhandle_ != nullptr;
}
inline void Req_SKF_CloseHandle::clear_hhandle() {
  if (GetArenaNoVirtual() == nullptr && hhandle_ != nullptr) {
    delete hhandle_;
  }
  hhandle_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_CloseHandle::hhandle() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hhandle_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_CloseHandle.hHandle)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_CloseHandle::release_hhandle() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_CloseHandle.hHandle)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hhandle_;
  hhandle_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_CloseHandle::mutable_hhandle() {
  
  if (hhandle_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hhandle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_CloseHandle.hHandle)
  return hhandle_;
}
inline void Req_SKF_CloseHandle::set_allocated_hhandle(::com::westone::skf::WST_PROTO_UINT32* hhandle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hhandle_;
  }
  if (hhandle) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hhandle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hhandle, submessage_arena);
    }
    
  } else {
    
  }
  hhandle_ = hhandle;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_CloseHandle.hHandle)
}

// -------------------------------------------------------------------

// Rsp_SKF_CloseHandle

// -------------------------------------------------------------------

// Req_SKF_Transmit

// .com.westone.skf.WST_PROTO_UINT32 hDev = 1;
inline bool Req_SKF_Transmit::has_hdev() const {
  return this != internal_default_instance() && hdev_ != nullptr;
}
inline void Req_SKF_Transmit::clear_hdev() {
  if (GetArenaNoVirtual() == nullptr && hdev_ != nullptr) {
    delete hdev_;
  }
  hdev_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_Transmit::hdev() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hdev_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_Transmit.hDev)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_Transmit::release_hdev() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_Transmit.hDev)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hdev_;
  hdev_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_Transmit::mutable_hdev() {
  
  if (hdev_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hdev_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_Transmit.hDev)
  return hdev_;
}
inline void Req_SKF_Transmit::set_allocated_hdev(::com::westone::skf::WST_PROTO_UINT32* hdev) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hdev_;
  }
  if (hdev) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hdev = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hdev, submessage_arena);
    }
    
  } else {
    
  }
  hdev_ = hdev;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_Transmit.hDev)
}

// bytes pbCommand = 2;
inline void Req_SKF_Transmit::clear_pbcommand() {
  pbcommand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_Transmit::pbcommand() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_Transmit.pbCommand)
  return pbcommand_.GetNoArena();
}
inline void Req_SKF_Transmit::set_pbcommand(const ::std::string& value) {
  
  pbcommand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_Transmit.pbCommand)
}
#if LANG_CXX11
inline void Req_SKF_Transmit::set_pbcommand(::std::string&& value) {
  
  pbcommand_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_Transmit.pbCommand)
}
#endif
inline void Req_SKF_Transmit::set_pbcommand(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbcommand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_Transmit.pbCommand)
}
inline void Req_SKF_Transmit::set_pbcommand(const void* value, size_t size) {
  
  pbcommand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_Transmit.pbCommand)
}
inline ::std::string* Req_SKF_Transmit::mutable_pbcommand() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_Transmit.pbCommand)
  return pbcommand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_Transmit::release_pbcommand() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_Transmit.pbCommand)
  
  return pbcommand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_Transmit::set_allocated_pbcommand(::std::string* pbcommand) {
  if (pbcommand != nullptr) {
    
  } else {
    
  }
  pbcommand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbcommand);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_Transmit.pbCommand)
}

// .com.westone.skf.WST_PROTO_UINT32 ulCommandLen = 3;
inline bool Req_SKF_Transmit::has_ulcommandlen() const {
  return this != internal_default_instance() && ulcommandlen_ != nullptr;
}
inline void Req_SKF_Transmit::clear_ulcommandlen() {
  if (GetArenaNoVirtual() == nullptr && ulcommandlen_ != nullptr) {
    delete ulcommandlen_;
  }
  ulcommandlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_Transmit::ulcommandlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulcommandlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_Transmit.ulCommandLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_Transmit::release_ulcommandlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_Transmit.ulCommandLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulcommandlen_;
  ulcommandlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_Transmit::mutable_ulcommandlen() {
  
  if (ulcommandlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulcommandlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_Transmit.ulCommandLen)
  return ulcommandlen_;
}
inline void Req_SKF_Transmit::set_allocated_ulcommandlen(::com::westone::skf::WST_PROTO_UINT32* ulcommandlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulcommandlen_;
  }
  if (ulcommandlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulcommandlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulcommandlen, submessage_arena);
    }
    
  } else {
    
  }
  ulcommandlen_ = ulcommandlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_Transmit.ulCommandLen)
}

// bytes pbData = 4;
inline void Req_SKF_Transmit::clear_pbdata() {
  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_Transmit::pbdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_Transmit.pbData)
  return pbdata_.GetNoArena();
}
inline void Req_SKF_Transmit::set_pbdata(const ::std::string& value) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_Transmit.pbData)
}
#if LANG_CXX11
inline void Req_SKF_Transmit::set_pbdata(::std::string&& value) {
  
  pbdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_Transmit.pbData)
}
#endif
inline void Req_SKF_Transmit::set_pbdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_Transmit.pbData)
}
inline void Req_SKF_Transmit::set_pbdata(const void* value, size_t size) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_Transmit.pbData)
}
inline ::std::string* Req_SKF_Transmit::mutable_pbdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_Transmit.pbData)
  return pbdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_Transmit::release_pbdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_Transmit.pbData)
  
  return pbdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_Transmit::set_allocated_pbdata(::std::string* pbdata) {
  if (pbdata != nullptr) {
    
  } else {
    
  }
  pbdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_Transmit.pbData)
}

// .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 5;
inline bool Req_SKF_Transmit::has_puldatalen() const {
  return this != internal_default_instance() && puldatalen_ != nullptr;
}
inline void Req_SKF_Transmit::clear_puldatalen() {
  if (GetArenaNoVirtual() == nullptr && puldatalen_ != nullptr) {
    delete puldatalen_;
  }
  puldatalen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_Transmit::puldatalen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = puldatalen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_Transmit.pulDataLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_Transmit::release_puldatalen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_Transmit.pulDataLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = puldatalen_;
  puldatalen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_Transmit::mutable_puldatalen() {
  
  if (puldatalen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    puldatalen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_Transmit.pulDataLen)
  return puldatalen_;
}
inline void Req_SKF_Transmit::set_allocated_puldatalen(::com::westone::skf::WST_PROTO_UINT32* puldatalen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete puldatalen_;
  }
  if (puldatalen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      puldatalen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, puldatalen, submessage_arena);
    }
    
  } else {
    
  }
  puldatalen_ = puldatalen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_Transmit.pulDataLen)
}

// -------------------------------------------------------------------

// Rsp_SKF_Transmit

// bytes pbData = 1;
inline void Rsp_SKF_Transmit::clear_pbdata() {
  pbdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rsp_SKF_Transmit::pbdata() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_Transmit.pbData)
  return pbdata_.GetNoArena();
}
inline void Rsp_SKF_Transmit::set_pbdata(const ::std::string& value) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Rsp_SKF_Transmit.pbData)
}
#if LANG_CXX11
inline void Rsp_SKF_Transmit::set_pbdata(::std::string&& value) {
  
  pbdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Rsp_SKF_Transmit.pbData)
}
#endif
inline void Rsp_SKF_Transmit::set_pbdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Rsp_SKF_Transmit.pbData)
}
inline void Rsp_SKF_Transmit::set_pbdata(const void* value, size_t size) {
  
  pbdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Rsp_SKF_Transmit.pbData)
}
inline ::std::string* Rsp_SKF_Transmit::mutable_pbdata() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_Transmit.pbData)
  return pbdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rsp_SKF_Transmit::release_pbdata() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_Transmit.pbData)
  
  return pbdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rsp_SKF_Transmit::set_allocated_pbdata(::std::string* pbdata) {
  if (pbdata != nullptr) {
    
  } else {
    
  }
  pbdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbdata);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_Transmit.pbData)
}

// .com.westone.skf.WST_PROTO_UINT32 pulDataLen = 2;
inline bool Rsp_SKF_Transmit::has_puldatalen() const {
  return this != internal_default_instance() && puldatalen_ != nullptr;
}
inline void Rsp_SKF_Transmit::clear_puldatalen() {
  if (GetArenaNoVirtual() == nullptr && puldatalen_ != nullptr) {
    delete puldatalen_;
  }
  puldatalen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_Transmit::puldatalen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = puldatalen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_Transmit.pulDataLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_Transmit::release_puldatalen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_Transmit.pulDataLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = puldatalen_;
  puldatalen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_Transmit::mutable_puldatalen() {
  
  if (puldatalen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    puldatalen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_Transmit.pulDataLen)
  return puldatalen_;
}
inline void Rsp_SKF_Transmit::set_allocated_puldatalen(::com::westone::skf::WST_PROTO_UINT32* puldatalen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete puldatalen_;
  }
  if (puldatalen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      puldatalen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, puldatalen, submessage_arena);
    }
    
  } else {
    
  }
  puldatalen_ = puldatalen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_Transmit.pulDataLen)
}

// -------------------------------------------------------------------

// Req_SKF_ImportCertificate

// .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
inline bool Req_SKF_ImportCertificate::has_hcontainer() const {
  return this != internal_default_instance() && hcontainer_ != nullptr;
}
inline void Req_SKF_ImportCertificate::clear_hcontainer() {
  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ImportCertificate::hcontainer() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hcontainer_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ImportCertificate.hContainer)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ImportCertificate::release_hcontainer() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ImportCertificate.hContainer)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hcontainer_;
  hcontainer_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ImportCertificate::mutable_hcontainer() {
  
  if (hcontainer_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hcontainer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ImportCertificate.hContainer)
  return hcontainer_;
}
inline void Req_SKF_ImportCertificate::set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hcontainer_;
  }
  if (hcontainer) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hcontainer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hcontainer, submessage_arena);
    }
    
  } else {
    
  }
  hcontainer_ = hcontainer;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ImportCertificate.hContainer)
}

// .com.westone.skf.WST_PROTO_BOOL bSignFlag = 2;
inline bool Req_SKF_ImportCertificate::has_bsignflag() const {
  return this != internal_default_instance() && bsignflag_ != nullptr;
}
inline void Req_SKF_ImportCertificate::clear_bsignflag() {
  if (GetArenaNoVirtual() == nullptr && bsignflag_ != nullptr) {
    delete bsignflag_;
  }
  bsignflag_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_BOOL& Req_SKF_ImportCertificate::bsignflag() const {
  const ::com::westone::skf::WST_PROTO_BOOL* p = bsignflag_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ImportCertificate.bSignFlag)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_BOOL*>(
      &::com::westone::skf::_WST_PROTO_BOOL_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_BOOL* Req_SKF_ImportCertificate::release_bsignflag() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ImportCertificate.bSignFlag)
  
  ::com::westone::skf::WST_PROTO_BOOL* temp = bsignflag_;
  bsignflag_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_BOOL* Req_SKF_ImportCertificate::mutable_bsignflag() {
  
  if (bsignflag_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_BOOL>(GetArenaNoVirtual());
    bsignflag_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ImportCertificate.bSignFlag)
  return bsignflag_;
}
inline void Req_SKF_ImportCertificate::set_allocated_bsignflag(::com::westone::skf::WST_PROTO_BOOL* bsignflag) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bsignflag_;
  }
  if (bsignflag) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bsignflag = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bsignflag, submessage_arena);
    }
    
  } else {
    
  }
  bsignflag_ = bsignflag;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ImportCertificate.bSignFlag)
}

// bytes pbCert = 3;
inline void Req_SKF_ImportCertificate::clear_pbcert() {
  pbcert_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_ImportCertificate::pbcert() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ImportCertificate.pbCert)
  return pbcert_.GetNoArena();
}
inline void Req_SKF_ImportCertificate::set_pbcert(const ::std::string& value) {
  
  pbcert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_ImportCertificate.pbCert)
}
#if LANG_CXX11
inline void Req_SKF_ImportCertificate::set_pbcert(::std::string&& value) {
  
  pbcert_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_ImportCertificate.pbCert)
}
#endif
inline void Req_SKF_ImportCertificate::set_pbcert(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbcert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_ImportCertificate.pbCert)
}
inline void Req_SKF_ImportCertificate::set_pbcert(const void* value, size_t size) {
  
  pbcert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_ImportCertificate.pbCert)
}
inline ::std::string* Req_SKF_ImportCertificate::mutable_pbcert() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ImportCertificate.pbCert)
  return pbcert_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_ImportCertificate::release_pbcert() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ImportCertificate.pbCert)
  
  return pbcert_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_ImportCertificate::set_allocated_pbcert(::std::string* pbcert) {
  if (pbcert != nullptr) {
    
  } else {
    
  }
  pbcert_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbcert);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ImportCertificate.pbCert)
}

// .com.westone.skf.WST_PROTO_UINT32 ulCertLen = 4;
inline bool Req_SKF_ImportCertificate::has_ulcertlen() const {
  return this != internal_default_instance() && ulcertlen_ != nullptr;
}
inline void Req_SKF_ImportCertificate::clear_ulcertlen() {
  if (GetArenaNoVirtual() == nullptr && ulcertlen_ != nullptr) {
    delete ulcertlen_;
  }
  ulcertlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ImportCertificate::ulcertlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = ulcertlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ImportCertificate.ulCertLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ImportCertificate::release_ulcertlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ImportCertificate.ulCertLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = ulcertlen_;
  ulcertlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ImportCertificate::mutable_ulcertlen() {
  
  if (ulcertlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    ulcertlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ImportCertificate.ulCertLen)
  return ulcertlen_;
}
inline void Req_SKF_ImportCertificate::set_allocated_ulcertlen(::com::westone::skf::WST_PROTO_UINT32* ulcertlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ulcertlen_;
  }
  if (ulcertlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ulcertlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ulcertlen, submessage_arena);
    }
    
  } else {
    
  }
  ulcertlen_ = ulcertlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ImportCertificate.ulCertLen)
}

// -------------------------------------------------------------------

// Rsp_SKF_ImportCertificate

// -------------------------------------------------------------------

// Req_SKF_ExportCertificate

// .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
inline bool Req_SKF_ExportCertificate::has_hcontainer() const {
  return this != internal_default_instance() && hcontainer_ != nullptr;
}
inline void Req_SKF_ExportCertificate::clear_hcontainer() {
  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ExportCertificate::hcontainer() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hcontainer_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExportCertificate.hContainer)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExportCertificate::release_hcontainer() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExportCertificate.hContainer)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hcontainer_;
  hcontainer_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExportCertificate::mutable_hcontainer() {
  
  if (hcontainer_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hcontainer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExportCertificate.hContainer)
  return hcontainer_;
}
inline void Req_SKF_ExportCertificate::set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hcontainer_;
  }
  if (hcontainer) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hcontainer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hcontainer, submessage_arena);
    }
    
  } else {
    
  }
  hcontainer_ = hcontainer;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExportCertificate.hContainer)
}

// .com.westone.skf.WST_PROTO_BOOL bSignFlag = 2;
inline bool Req_SKF_ExportCertificate::has_bsignflag() const {
  return this != internal_default_instance() && bsignflag_ != nullptr;
}
inline void Req_SKF_ExportCertificate::clear_bsignflag() {
  if (GetArenaNoVirtual() == nullptr && bsignflag_ != nullptr) {
    delete bsignflag_;
  }
  bsignflag_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_BOOL& Req_SKF_ExportCertificate::bsignflag() const {
  const ::com::westone::skf::WST_PROTO_BOOL* p = bsignflag_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExportCertificate.bSignFlag)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_BOOL*>(
      &::com::westone::skf::_WST_PROTO_BOOL_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_BOOL* Req_SKF_ExportCertificate::release_bsignflag() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExportCertificate.bSignFlag)
  
  ::com::westone::skf::WST_PROTO_BOOL* temp = bsignflag_;
  bsignflag_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_BOOL* Req_SKF_ExportCertificate::mutable_bsignflag() {
  
  if (bsignflag_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_BOOL>(GetArenaNoVirtual());
    bsignflag_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExportCertificate.bSignFlag)
  return bsignflag_;
}
inline void Req_SKF_ExportCertificate::set_allocated_bsignflag(::com::westone::skf::WST_PROTO_BOOL* bsignflag) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bsignflag_;
  }
  if (bsignflag) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bsignflag = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bsignflag, submessage_arena);
    }
    
  } else {
    
  }
  bsignflag_ = bsignflag;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExportCertificate.bSignFlag)
}

// bytes pbCert = 4;
inline void Req_SKF_ExportCertificate::clear_pbcert() {
  pbcert_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Req_SKF_ExportCertificate::pbcert() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExportCertificate.pbCert)
  return pbcert_.GetNoArena();
}
inline void Req_SKF_ExportCertificate::set_pbcert(const ::std::string& value) {
  
  pbcert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Req_SKF_ExportCertificate.pbCert)
}
#if LANG_CXX11
inline void Req_SKF_ExportCertificate::set_pbcert(::std::string&& value) {
  
  pbcert_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Req_SKF_ExportCertificate.pbCert)
}
#endif
inline void Req_SKF_ExportCertificate::set_pbcert(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbcert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Req_SKF_ExportCertificate.pbCert)
}
inline void Req_SKF_ExportCertificate::set_pbcert(const void* value, size_t size) {
  
  pbcert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Req_SKF_ExportCertificate.pbCert)
}
inline ::std::string* Req_SKF_ExportCertificate::mutable_pbcert() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExportCertificate.pbCert)
  return pbcert_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Req_SKF_ExportCertificate::release_pbcert() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExportCertificate.pbCert)
  
  return pbcert_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Req_SKF_ExportCertificate::set_allocated_pbcert(::std::string* pbcert) {
  if (pbcert != nullptr) {
    
  } else {
    
  }
  pbcert_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbcert);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExportCertificate.pbCert)
}

// .com.westone.skf.WST_PROTO_UINT32 pulCertLen = 5;
inline bool Req_SKF_ExportCertificate::has_pulcertlen() const {
  return this != internal_default_instance() && pulcertlen_ != nullptr;
}
inline void Req_SKF_ExportCertificate::clear_pulcertlen() {
  if (GetArenaNoVirtual() == nullptr && pulcertlen_ != nullptr) {
    delete pulcertlen_;
  }
  pulcertlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_ExportCertificate::pulcertlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulcertlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_ExportCertificate.pulCertLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExportCertificate::release_pulcertlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_ExportCertificate.pulCertLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulcertlen_;
  pulcertlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_ExportCertificate::mutable_pulcertlen() {
  
  if (pulcertlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulcertlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_ExportCertificate.pulCertLen)
  return pulcertlen_;
}
inline void Req_SKF_ExportCertificate::set_allocated_pulcertlen(::com::westone::skf::WST_PROTO_UINT32* pulcertlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulcertlen_;
  }
  if (pulcertlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulcertlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulcertlen, submessage_arena);
    }
    
  } else {
    
  }
  pulcertlen_ = pulcertlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_ExportCertificate.pulCertLen)
}

// -------------------------------------------------------------------

// Rsp_SKF_ExportCertificate

// bytes pbCert = 1;
inline void Rsp_SKF_ExportCertificate::clear_pbcert() {
  pbcert_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Rsp_SKF_ExportCertificate::pbcert() const {
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_ExportCertificate.pbCert)
  return pbcert_.GetNoArena();
}
inline void Rsp_SKF_ExportCertificate::set_pbcert(const ::std::string& value) {
  
  pbcert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.westone.skf.Rsp_SKF_ExportCertificate.pbCert)
}
#if LANG_CXX11
inline void Rsp_SKF_ExportCertificate::set_pbcert(::std::string&& value) {
  
  pbcert_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.westone.skf.Rsp_SKF_ExportCertificate.pbCert)
}
#endif
inline void Rsp_SKF_ExportCertificate::set_pbcert(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pbcert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.westone.skf.Rsp_SKF_ExportCertificate.pbCert)
}
inline void Rsp_SKF_ExportCertificate::set_pbcert(const void* value, size_t size) {
  
  pbcert_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.westone.skf.Rsp_SKF_ExportCertificate.pbCert)
}
inline ::std::string* Rsp_SKF_ExportCertificate::mutable_pbcert() {
  
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_ExportCertificate.pbCert)
  return pbcert_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Rsp_SKF_ExportCertificate::release_pbcert() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_ExportCertificate.pbCert)
  
  return pbcert_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Rsp_SKF_ExportCertificate::set_allocated_pbcert(::std::string* pbcert) {
  if (pbcert != nullptr) {
    
  } else {
    
  }
  pbcert_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pbcert);
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_ExportCertificate.pbCert)
}

// .com.westone.skf.WST_PROTO_UINT32 pulCertLen = 2;
inline bool Rsp_SKF_ExportCertificate::has_pulcertlen() const {
  return this != internal_default_instance() && pulcertlen_ != nullptr;
}
inline void Rsp_SKF_ExportCertificate::clear_pulcertlen() {
  if (GetArenaNoVirtual() == nullptr && pulcertlen_ != nullptr) {
    delete pulcertlen_;
  }
  pulcertlen_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_ExportCertificate::pulcertlen() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulcertlen_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_ExportCertificate.pulCertLen)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_ExportCertificate::release_pulcertlen() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_ExportCertificate.pulCertLen)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulcertlen_;
  pulcertlen_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_ExportCertificate::mutable_pulcertlen() {
  
  if (pulcertlen_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulcertlen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_ExportCertificate.pulCertLen)
  return pulcertlen_;
}
inline void Rsp_SKF_ExportCertificate::set_allocated_pulcertlen(::com::westone::skf::WST_PROTO_UINT32* pulcertlen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulcertlen_;
  }
  if (pulcertlen) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulcertlen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulcertlen, submessage_arena);
    }
    
  } else {
    
  }
  pulcertlen_ = pulcertlen;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_ExportCertificate.pulCertLen)
}

// -------------------------------------------------------------------

// Req_SKF_GetContainerProperty

// .com.westone.skf.WST_PROTO_UINT32 hContainer = 1;
inline bool Req_SKF_GetContainerProperty::has_hcontainer() const {
  return this != internal_default_instance() && hcontainer_ != nullptr;
}
inline void Req_SKF_GetContainerProperty::clear_hcontainer() {
  if (GetArenaNoVirtual() == nullptr && hcontainer_ != nullptr) {
    delete hcontainer_;
  }
  hcontainer_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GetContainerProperty::hcontainer() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = hcontainer_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GetContainerProperty.hContainer)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GetContainerProperty::release_hcontainer() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GetContainerProperty.hContainer)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = hcontainer_;
  hcontainer_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GetContainerProperty::mutable_hcontainer() {
  
  if (hcontainer_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    hcontainer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GetContainerProperty.hContainer)
  return hcontainer_;
}
inline void Req_SKF_GetContainerProperty::set_allocated_hcontainer(::com::westone::skf::WST_PROTO_UINT32* hcontainer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hcontainer_;
  }
  if (hcontainer) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hcontainer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hcontainer, submessage_arena);
    }
    
  } else {
    
  }
  hcontainer_ = hcontainer;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GetContainerProperty.hContainer)
}

// .com.westone.skf.WST_PROTO_UINT32 pulConProperty = 2;
inline bool Req_SKF_GetContainerProperty::has_pulconproperty() const {
  return this != internal_default_instance() && pulconproperty_ != nullptr;
}
inline void Req_SKF_GetContainerProperty::clear_pulconproperty() {
  if (GetArenaNoVirtual() == nullptr && pulconproperty_ != nullptr) {
    delete pulconproperty_;
  }
  pulconproperty_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Req_SKF_GetContainerProperty::pulconproperty() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulconproperty_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Req_SKF_GetContainerProperty.pulConProperty)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GetContainerProperty::release_pulconproperty() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Req_SKF_GetContainerProperty.pulConProperty)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulconproperty_;
  pulconproperty_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Req_SKF_GetContainerProperty::mutable_pulconproperty() {
  
  if (pulconproperty_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulconproperty_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Req_SKF_GetContainerProperty.pulConProperty)
  return pulconproperty_;
}
inline void Req_SKF_GetContainerProperty::set_allocated_pulconproperty(::com::westone::skf::WST_PROTO_UINT32* pulconproperty) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulconproperty_;
  }
  if (pulconproperty) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulconproperty = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulconproperty, submessage_arena);
    }
    
  } else {
    
  }
  pulconproperty_ = pulconproperty;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Req_SKF_GetContainerProperty.pulConProperty)
}

// -------------------------------------------------------------------

// Rsp_SKF_GetContainerProperty

// .com.westone.skf.WST_PROTO_UINT32 pulConProperty = 1;
inline bool Rsp_SKF_GetContainerProperty::has_pulconproperty() const {
  return this != internal_default_instance() && pulconproperty_ != nullptr;
}
inline void Rsp_SKF_GetContainerProperty::clear_pulconproperty() {
  if (GetArenaNoVirtual() == nullptr && pulconproperty_ != nullptr) {
    delete pulconproperty_;
  }
  pulconproperty_ = nullptr;
}
inline const ::com::westone::skf::WST_PROTO_UINT32& Rsp_SKF_GetContainerProperty::pulconproperty() const {
  const ::com::westone::skf::WST_PROTO_UINT32* p = pulconproperty_;
  // @@protoc_insertion_point(field_get:com.westone.skf.Rsp_SKF_GetContainerProperty.pulConProperty)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::westone::skf::WST_PROTO_UINT32*>(
      &::com::westone::skf::_WST_PROTO_UINT32_default_instance_);
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_GetContainerProperty::release_pulconproperty() {
  // @@protoc_insertion_point(field_release:com.westone.skf.Rsp_SKF_GetContainerProperty.pulConProperty)
  
  ::com::westone::skf::WST_PROTO_UINT32* temp = pulconproperty_;
  pulconproperty_ = nullptr;
  return temp;
}
inline ::com::westone::skf::WST_PROTO_UINT32* Rsp_SKF_GetContainerProperty::mutable_pulconproperty() {
  
  if (pulconproperty_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::westone::skf::WST_PROTO_UINT32>(GetArenaNoVirtual());
    pulconproperty_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.westone.skf.Rsp_SKF_GetContainerProperty.pulConProperty)
  return pulconproperty_;
}
inline void Rsp_SKF_GetContainerProperty::set_allocated_pulconproperty(::com::westone::skf::WST_PROTO_UINT32* pulconproperty) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pulconproperty_;
  }
  if (pulconproperty) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulconproperty = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pulconproperty, submessage_arena);
    }
    
  } else {
    
  }
  pulconproperty_ = pulconproperty;
  // @@protoc_insertion_point(field_set_allocated:com.westone.skf.Rsp_SKF_GetContainerProperty.pulConProperty)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace skf
}  // namespace westone
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_skf_2eproto
