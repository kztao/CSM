/*******************************************************************************
版权声明: Copyright(C) Westone Co., Ltd. 2013-2014. All rights reserved.
文件名称: sm4.h
文件描述: SM4接口
创 建 者: 张文科 罗影
创建时间: 2014年10月29日
修改历史:
1. 2014年10月29日	张文科 罗影		创建文件 
2. 2015年 6月18日	张文科 罗影		增加OFB模式 
3. 2016年 1月25日	张文科 罗影		修正OFB模式反复加解密异常的问题
*******************************************************************************/
#ifndef _SM4_H_B8B3937FD32C922F
#define _SM4_H_B8B3937FD32C922F


/* ------------------------ 头文件包含区 开始 ------------------------------- */
#include "mm_types.h"

/* ======================== 头文件包含区 结束 =============================== */


#ifdef __cplusplus
extern "C" {
#endif
	

/* ------------------------ 公共宏定义区 开始 ------------------------------- */

#define SM4_BLOCK_LEN	16		/* SMS4 分组长度 16字节(128比特) */
#define SM4_KEY_LEN		16		/* SMS4 密钥长度 16字节(128比特) */
#define SM4_CBC_MAC		0

/* ======================== 公共类型定义区 结束 ============================= */
	
	
/* ------------------------ 函数原型外部声明区 开始 ------------------------- */

/*******************************************************************************
函 数 名:	sm4_init
功能描述:	创建并初始化SM4句柄
说    明:	-
注    意:	请严格按照以下步骤执行
	step 1	h = sm4_init( key ) // 创建
	step 2	while( mession_complete == FALSE) {//多个加解密任务时
			2.1	sm4_set_iv(h, iv)	//设置IV, 仅ECB无需设置IV
			2.2	while( msg_not_end ) {
						sm4_ecb_encrypt(h, ...)
					or	sm4_ecb_decrypt(h, ...)
					or	sm4_cbc_encrypt(h, ...)
					or	sm4_cbc_decrypt(h, ...)
					or	sm4_ofb_encrypt(h, ...)
					or	sm4_ofb_decrypt(h, ...) 
				}//2.2 end
			}//step2 end
	step 3	sm4_unit(h)// 销毁

参数说明: 
	key		(in)	密钥 
返 回 值:  句柄不为NULL (成功), 句柄为NULL (失败)
修改历史: 
    1. 2014年10月29日	张文科 罗影		创建函数
*******************************************************************************/

MM_API mm_handle sm4_init(mm_u8_t key[SM4_KEY_LEN] );


/*******************************************************************************
函 数 名:	sm4_unit
功能描述:	销毁SM4句柄
说    明:	-
注    意:	本步将销毁SMS4封装数据，因此执行后 p_sms4 为悬垂指针，不可用。
参数说明: 
	h		(in)	句柄 
返 回 值:	-
修改历史: 
    1. 2014年10月29日	张文科 罗影		创建函数
*******************************************************************************/

MM_API mm_void_t sm4_unit( mm_handle h );


/*******************************************************************************
函 数 名:	sm4_set_iv
功能描述:	设置初始化向量 (ECB可跳过)
说    明:	-
注    意:	1. ECB模式无需初始化向量
			2. 开始新的加密或者解密时应设置IV
参数说明: 
	h		(in)	句柄 
返 回 值:	-
修改历史: 
    1. 2014年10月29日	张文科 罗影		创建函数
*******************************************************************************/

MM_API mm_i32_t sm4_set_iv(mm_handle h, mm_u8_t iv[SM4_BLOCK_LEN] );


/*******************************************************************************
函 数 名:	sm4_ecb_encryt
功能描述:	ECB模式加密
说    明:	-
注    意:	1. 明密文长度必需是分组大小的整数倍, 不足部分调用者自行填充
			2. 强烈建议 明密文数据 按照16字节边界对齐
			3. 明密文长度相等
参数说明: 
	h		(in/out)句柄 
	p_pt	(in)	明文 
	pt_len	(in)	明文长度 
	p_ct	(out)	密文 
返 回 值:	>=1 [成功]，<=0 [失败]
修改历史: 
    1. 2014年10月29日	张文科 罗影		创建函数
*******************************************************************************/ 

MM_API mm_i32_t	sm4_ecb_encrypt(mm_handle h, mm_u8_t *p_pt, mm_u32_t pt_len, 
								mm_u8_t *p_ct );


/*******************************************************************************
函 数 名:	sm4_ecb_decrypt
功能描述:	ECB模式解密
说    明:	-
注    意:	1. 明密文长度必需是分组大小的整数倍, 不足部分调用者自行填充
			2. 强烈建议 明密文数据 按照16字节边界对齐
			3. 明密文长度相等
参数说明: 
	h		(in/out)句柄 
	p_ct	(in)	密文 
	ct_len	(in)	密文长度 
	p_pt	(out)	明文 
返 回 值:	>=1 [成功]，<=0 [失败]
修改历史: 
    1. 2014年10月29日	张文科 罗影		创建函数
*******************************************************************************/ 

MM_API mm_i32_t	sm4_ecb_decrypt(mm_handle h, mm_u8_t *p_ct, mm_u32_t ct_len, 
								mm_u8_t *p_pt);


/*******************************************************************************
函 数 名:	sm4_cbc_encrypt
功能描述:	CBC模式加密
说    明:	-
注    意:	1. 明密文长度必需是分组大小的整数倍, 不足部分调用者自行填充
			2. 强烈建议 明密文数据 按照16字节边界对齐
			3. 明密文长度相等
			4. 开始新的CBC加密模式前一定要设置IV：sm4_set_iv(***)
参数说明: 
	h		(in/out)句柄 
	p_pt	(in)	明文 
	pt_len	(in)	明文长度 
	p_ct	(out)	密文 
返 回 值:	>=1 [成功]，<=0 [失败]
修改历史: 
    1. 2014年10月29日	张文科 罗影		创建函数
*******************************************************************************/ 

MM_API mm_i32_t	sm4_cbc_encrypt(mm_handle h, mm_u8_t *p_pt, mm_u32_t pt_len, 
								mm_u8_t *p_ct );


/*******************************************************************************
函 数 名:	sm4_cbc_decrypt
功能描述:	CBC模式解密
说    明:	-
注    意:	1. 明密文长度必需是分组大小的整数倍, 不足部分调用者自行填充
			2. 强烈建议 明密文数据 按照16字节边界对齐
			3. 明密文长度相等
			4. 开始新的CBC解密模式前一定要设置IV：sm4_set_iv(***)
参数说明: 
	h		(in/out)句柄 
	p_ct	(in)	密文 
	ct_len	(in)	密文长度 
	p_pt	(out)	明文 
返 回 值:	>=1 [成功]，<=0 [失败]
修改历史: 
    1. 2014年10月29日	张文科 罗影		创建函数
*******************************************************************************/ 

MM_API mm_i32_t	sm4_cbc_decrypt(mm_handle h, mm_u8_t *p_ct, mm_u32_t ct_len, 
								mm_u8_t *p_pt );


/*******************************************************************************
函 数 名:	sm4_ofb_encrypt
功能描述:	OFB模式加密
说    明:	-
注    意:	1. 仅在最后一次调用本函数时允许明文长度不是分组大小的整数倍，
			   其它调用情况下必须保证明文长度是分组大小的整数倍。
			2. 强烈建议 明密文数据 按照16字节边界对齐
			3. 明密文长度相等
参数说明: 
	h		(in/out)句柄 
	p_pt	(in)	明文 
	pt_len	(in)	明文长度 
	p_ct	(out)	密文 
返 回 值:	>=1 [成功]，<=0 [失败]
修改历史: 
    1. 2015年 6月18日	张文科 罗影		创建函数
	2. 2016年 1月25日	张文科 罗影		修正OFB模式反复加解密异常的问题
			not_aligned_tm 的相关代码设置错误所致 
*******************************************************************************/ 

MM_API mm_i32_t sm4_ofb_encrypt(mm_handle h, mm_u8_t *p_pt, mm_u32_t pt_len, 
								mm_u8_t *p_ct );


/*******************************************************************************
函 数 名:	sm4_ofb_decrypt
功能描述:	OFB模式解密
说    明:	-
注    意:	1. 仅在最后一次调用本函数时允许密文长度不是分组大小的整数倍，
			   其它调用情况下必须保证密文长度是分组大小的整数倍。
			2. 强烈建议 明密文数据 按照16字节边界对齐
			3. 明密文长度相等
参数说明: 
	h		(in/out)句柄 
	p_ct	(in)	密文 
	ct_len	(in)	密文长度 
	p_pt	(out)	明文 
返 回 值:	>=1 [成功]，<=0 [失败]
修改历史: 
    1. 2015年 6月18日	张文科 罗影		创建函数
    2. 2016年 1月25日	张文科 罗影		修正OFB模式反复加解密异常的问题
				not_aligned_tm 的相关代码设置错误所致 
*******************************************************************************/ 

MM_API mm_i32_t sm4_ofb_decrypt(mm_handle h, mm_u8_t *p_ct, mm_u32_t ct_len, 
								mm_u8_t *p_pt );


// 使用C-MAC模式计算摘要
//ecb mac
MM_API mm_i32_t sm4_cmac(mm_handle h_ctx,
			mm_u8_t *inData, mm_i32_t inDatalen,
			mm_u8_t outData[SM4_BLOCK_LEN]);

MM_API mm_i32_t sm4_cmac_process(mm_handle sm4_handle, 
			mm_u8_t *pin, mm_i32_t ilen,
			mm_u8_t pInOut[SM4_BLOCK_LEN]);
//-------------------------------------------------------------------


/* ======================== 函数原型外部声明区 结束 ========================= */



/* ------------------------ 变量外部引用声明区 开始 ------------------------- */

/* ======================== 变量外部引用声明区 结束 ========================= */

#ifdef __cplusplus
}
#endif

#endif/*#ifndef _SM4_H_... */